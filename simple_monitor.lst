
simple_monitor.elf:     file format elf32-littlearm

SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
080001c0 l    d  .text	00000000 .text
0800ca78 l    d  .rodata	00000000 .rodata
0801c400 l    d  .ARM	00000000 .ARM
0801c408 l    d  .init_array	00000000 .init_array
0801c410 l    d  .fini_array	00000000 .fini_array
20000000 l    d  .data	00000000 .data
10000000 l    d  .ccmram	00000000 .ccmram
20000ac4 l    d  .bss	00000000 .bss
20001d44 l    d  ._user_heap_stack	00000000 ._user_heap_stack
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
0801ced8 l    d  .parsetable	00000000 .parsetable
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 build/Drivers/CMSIS/Device/ST/STM32F3xx/Source/Templates/gcc/startup_stm32f303xc.o
f1e0f85f l       *ABS*	00000000 BootRAM
0800ca08 l       .text	00000000 LoopCopyDataInit
0800ca00 l       .text	00000000 CopyDataInit
0800ca1c l       .text	00000000 LoopFillZerobss
0800ca16 l       .text	00000000 FillZerobss
0800ca2e l       .text	00000000 LoopForever
0800ca48 l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 crtstuff.c
0800ca60 l     O .text	00000000 __EH_FRAME_BEGIN__
080001c0 l     F .text	00000000 deregister_tm_clones
080001e0 l     F .text	00000000 register_tm_clones
08000204 l     F .text	00000000 __do_global_dtors_aux
20000ac4 l       .bss	00000000 completed.6523
0801c410 l     O .fini_array	00000000 __do_global_dtors_aux_fini_array_entry
0800022c l     F .text	00000000 frame_dummy
20000ac8 l       .bss	00000000 object.6528
0801c40c l     O .init_array	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 build/mycode.o
00000000 l    df *ABS*	00000000 build/compass.o
48001018 l       *ABS*	00000000 GPIOE_BSRR
48001014 l       *ABS*	00000000 GPIOE_ODR
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 setvbuf.c
00000000 l    df *ABS*	00000000 strcasecmp.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 strtok.c
00000000 l    df *ABS*	00000000 strtok_r.c
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 vfprintf.c
08002ae8 l     F .text	0000006a __sbprintf
0800d014 l     O .rodata	00000010 blanks.7072
0800d024 l     O .rodata	00000010 zeroes.7073
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 dtoa.c
08002cc0 l     F .text	00000128 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
08003db4 l     F .text	00000004 __fp_unlock
08003dc4 l     F .text	000000f0 __sinit.part.1
08003eb4 l     F .text	00000004 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
20000438 l     O .data	00000020 lc_ctype_charset
2000045c l     O .data	00000020 lc_message_charset
2000047c l     O .data	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 lib_a-memcpy.o
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 mprec.c
0800d038 l     O .rodata	0000000c p05.5398
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 lib_a-strcmp.o
00000000 l    df *ABS*	00000000 vfprintf.c
0800607c l     F .text	00000078 __sprint_r.part.0
08006f1c l     F .text	0000006a __sbprintf
0800d160 l     O .rodata	00000010 blanks.7015
0800d170 l     O .rodata	00000010 zeroes.7016
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_unorddf2.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 s_atan.c
0800d180 l     O .rodata	00000020 atanhi
0800d1a0 l     O .rodata	00000020 atanlo
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 w_sqrt.c
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 lsm303dlhc.c
00000000 l    df *ABS*	00000000 mytest.c
00000000 l    df *ABS*	00000000 monitor.c
00000000 l    df *ABS*	00000000 parser.c
200008f8 l     O .data	00000004 printPrompt.5907
0800d488 l     O .rodata	00000006 __FUNCTION__.5921
20000b14 l     O .bss	00000004 count.5904
20000b18 l     O .bss	00000004 saved.5905
20000900 l     O .data	00000004 buf.5906
00000000 l    df *ABS*	00000000 dump.c
20000904 l     O .data	00000004 count.5346
20000b1c l     O .bss	00000004 address.5345
00000000 l    df *ABS*	00000000 syscall.c
20000b20 l     O .bss	00000004 heap_end.5951
00000000 l    df *ABS*	00000000 terminal.c
080088ac l     F .text	00000080 USBD_CDC_DataIn
20000b24 l     O .bss	00000124 TerminalState
00000000 l    df *ABS*	00000000 decoder.c
08008bf8 l     F .text	00000078 Uncompress
20000c48 l     O .bss	00000014 buf.5893
00000000 l    df *ABS*	00000000 system_stm32f3xx.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_rcc.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal.c
20000c5c l     O .bss	00000004 uwTick
00000000 l    df *ABS*	00000000 stm32f3xx_hal_cortex.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_gpio.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_pcd.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_pcd_ex.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_i2c.c
0800ac6c l     F .text	00000024 I2C_TransferConfig
0800ac90 l     F .text	00000090 I2C_IsAcknowledgeFailed
0800ad20 l     F .text	00000068 I2C_WaitOnFlagUntilTimeout
0800ad88 l     F .text	00000050 I2C_WaitOnSTOPFlagUntilTimeout
0800add8 l     F .text	00000054 I2C_WaitOnTXISFlagUntilTimeout
0800ae2c l     F .text	00000062 I2C_RequestMemoryWrite
0800ae8e l     F .text	00000060 I2C_RequestMemoryRead
00000000 l    df *ABS*	00000000 stm32f3xx_hal_spi.c
0800b212 l     F .text	00000050 SPI_WaitFifoStateUntilTimeout.part.1
0800b212 l     F .text	00000050 SPI_WaitFlagStateUntilTimeout.part.0
0800b262 l     F .text	00000040 SPI_WaitFlagStateUntilTimeout
0800b2a2 l     F .text	00000050 SPI_WaitFifoStateUntilTimeout
0800b2f2 l     F .text	00000042 SPI_EndRxTxTransaction
00000000 l    df *ABS*	00000000 usbd_core.c
00000000 l    df *ABS*	00000000 usbd_ctlreq.c
20000c60 l     O .bss	00000001 cfgidx.10222
00000000 l    df *ABS*	00000000 usbd_ioreq.c
00000000 l    df *ABS*	00000000 usbd_cdc.c
0800bc92 l     F .text	00000012 USBD_CDC_DataIn
0800bca4 l     F .text	00000028 USBD_CDC_EP0_RxReady
0800bccc l     F .text	0000000c USBD_CDC_GetFSCfgDesc
0800bcd8 l     F .text	0000000c USBD_CDC_GetHSCfgDesc
0800bce4 l     F .text	0000000c USBD_CDC_GetOtherSpeedCfgDesc
0800bcfc l     F .text	0000002e USBD_CDC_DataOut
0800bd2a l     F .text	0000005a USBD_CDC_Setup
0800bd84 l     F .text	0000003a USBD_CDC_DeInit
0800bdbe l     F .text	0000008c USBD_CDC_Init
20000988 l     O .data	0000000a USBD_CDC_DeviceQualifierDesc
00000000 l    df *ABS*	00000000 usbd_conf.c
20000c64 l     O .bss	00000230 mem.10440
00000000 l    df *ABS*	00000000 usbd_desc.c
0800c100 l     F .text	00000028 IntToUnicode
00000000 l    df *ABS*	00000000 usbd_cdc_interface.c
0800c1dc l     F .text	00000004 CDC_Itf_DeInit
0800c1e0 l     F .text	0000001c CDC_Itf_Receive
0800c1fc l     F .text	00000018 CDC_Itf_Init
0800c214 l     F .text	00000044 CDC_Itf_Control
00000000 l    df *ABS*	00000000 stm32f3_discovery.c
0800c258 l     F .text	00000080 SPIx_Init
0800c2d8 l     F .text	00000040 SPIx_WriteRead
0800c318 l     F .text	0000006c I2Cx_Init
20000e94 l     O .bss	00000060 SpiHandle
20000ef4 l     O .bss	00000038 I2cHandle
00000000 l    df *ABS*	00000000 stm32f3_discovery_accelerometer.c
20000f2c l     O .bss	00000004 AccelerometerDrv
00000000 l    df *ABS*	00000000 stm32f3_discovery_gyroscope.c
20000f30 l     O .bss	00000004 GyroscopeDrv
00000000 l    df *ABS*	00000000 l3gd20.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0800ca4c l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 /usr/lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 /usr/lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 STM32F30x_decoder.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 impure.c
20000010 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 
0801c414 l       .fini_array	00000000 __fini_array_end
20000ac4 l       .bss	00000000 __bss_start__
20001d44 l       .bss	00000000 __bss_end__
0801c410 l       .fini_array	00000000 __fini_array_start
0801c410 l       .init_array	00000000 __init_array_end
0801c408 l       .init_array	00000000 __preinit_array_end
0801c408 l       .init_array	00000000 __init_array_start
0801c408 l       .init_array	00000000 __preinit_array_start
0800ca48  w    F .text	00000002 RTC_Alarm_IRQHandler
08018078 g     O .rodata	00000008 RTC_BKP19R_fields
0801c2ec g     O .rodata	00000010 APBAHBPrescTable
0800e7b8 g     O .rodata	00000050 TIM2_SR_fields
08015618 g     O .rodata	00000100 CAN_F10R1_fields
08018e28 g     O .rodata	00000008 TIM16_DMAR_fields
08000cb8 g     F .text	00000014 putchar
0800ca48  w    F .text	00000002 TIM8_TRG_COM_IRQHandler
080057b4 g     F .text	00000038 _mprec_log10
08017cc8 g     O .rodata	00000008 I2C1_RXDR_fields
08007440 g     F .text	0000002c .hidden __aeabi_dcmpun
080082a8 g     F .text	0000001e LSM303DLHC_AccFilterCmd
0800ca48  w    F .text	00000002 TIM8_CC_IRQHandler
08018210 g     O .rodata	00000030 TIM6_CR1_fields
0800e430 g     O .rodata	00000048 I2C1_ICR_fields
08005834 g     F .text	0000005e __any_on
080088a4 g     F .text	00000004 _isatty_r
0800d110 g     O .rodata	00000028 __mprec_tinytens
20000f58 g     O .bss	00000050 input_b
08007404 g     F .text	00000012 .hidden __aeabi_dcmple
08017f50 g     O .rodata	00000008 TIM2_PSC_fields
0800ef48 g     O .rodata	00000028 TIM17_CCMR1_Output_fields
08000ee0 g     F .text	000000ba strcpy
08018468 g     O .rodata	00000050 COMP_COMP5_CSR_fields
08013ff0 g     O .rodata	00000008 I2C1_TXDR_fields
08000ccc g     F .text	00000068 _puts_r
0800c1a4 g     F .text	0000001c USBD_VCP_ConfigStrDescriptor
080103b8 g     O .rodata	00000100 CAN_F19R1_fields
08007340 g     F .text	0000007a .hidden __cmpdf2
08008cc8 g     F .text	00000054 DecodeWriteRegister
0800ab2c g     F .text	000000c6 HAL_PCD_EP_ClrStall
080151c8 g     O .rodata	00000008 TIM16_CCR1_fields
08007af4 g     F .text	0000000e fabs
0800ca48  w    F .text	00000002 DebugMon_Handler
080088a8 g     F .text	00000004 _lseek_r
08014750 g     O .rodata	00000020 FPU_MVFR1_fields
0800bf9a g     F .text	0000001a HAL_PCD_ResetCallback
08007b04 g     F .text	000000c0 sqrt
0800ac26 g     F .text	00000022 PCD_WritePMA
08019090 g     O .rodata	00000100 CAN_F22R1_fields
0800e9c0 g     O .rodata	000000e0 CAN_FA1R_fields
20000ff8 g     O .bss	00000224 hUSBDDevice
080105b0 g     O .rodata	00000048 TIM2_SMCR_fields
0800ef08 g     O .rodata	00000020 NVIC_IPR1_fields
0801cef0 g     O .parsetable	0000000c CmdTestE
08007340 g     F .text	0000007a .hidden __eqdf2
08014460 g     O .rodata	00000100 CAN_F14R1_fields
08015610 g     O .rodata	00000008 TIM8_PSC_fields
080138a8 g     O .rodata	00000030 TIM15_EGR_fields
0800892c g     F .text	00000048 CmdStats
0800c8c2 g     F .text	0000002e L3GD20_FilterConfig
0800abf2 g     F .text	00000034 HAL_PCDEx_PMAConfig
080161f0 g     O .rodata	00000140 TIM2_registers
08017988 g     O .rodata	00000058 TIM15_DIER_fields
0800f708 g     O .rodata	00000008 DMA1_CMAR3_fields
0800fea8 g     O .rodata	00000100 GPIOA_BSRR_fields
0801bea4 g     O .rodata	00000060 DMA1_CCR7_fields
0800a1dc g     F .text	000001ae HAL_PCD_EP_Close
080148a8 g     O .rodata	00000008 TSC_IOG6CR_fields
0800f710 g     O .rodata	00000028 ADC1_SQR1_fields
08001110 g     F .text	00000006 strtok_r
080005cc g     F .text	0000005a .hidden __floatdidf
0800f5e8 g     O .rodata	000000e0 CAN_FS1R_fields
08015110 g     O .rodata	00000030 TIM1_CCMR2_Input_fields
0800e138 g     O .rodata	00000010 RTC_SHIFTR_fields
08000c88 g     F .text	00000028 printf
0800c846 g     F .text	00000040 L3GD20_EnableIT
080180b8 g     O .rodata	00000028 CAN_TI1R_fields
0800b6dc g     F .text	00000016 USBD_SetClassConfig
08014d80 g     O .rodata	00000020 NVIC_IPR14_fields
08007238 g     F .text	00000054 _wcrtomb_r
0800ca48  w    F .text	00000002 TIM1_CC_IRQHandler
08009b7c g     F .text	00000068 HAL_NVIC_SetPriority
08010b60 g     O .rodata	000001b0 ADC1_registers
0800bf82 g     F .text	00000010 HAL_PCD_DataInStageCallback
08018080 g     O .rodata	00000018 TIM2_CR2_fields
08014cc8 g     O .rodata	00000008 Flash_WRPR_fields
08005d68 g     F .text	00000020 __sseek
08003f84 g     F .text	00000008 __sinit
08010130 g     O .rodata	00000060 DMA1_CCR2_fields
08006f88 g     F .text	000000ac __swbuf_r
0800ca48  w    F .text	00000002 HardFault_Handler
0800eb50 g     O .rodata	00000100 TSC_IOHCR_fields
08013ec0 g     O .rodata	00000020 CRC_CR_fields
080045d4 g     F .text	00000040 _setlocale_r
08003eb8 g     F .text	0000002e __sfmoreglue
0800eb40 g     O .rodata	00000008 NVIC_ISER0_fields
08004f70 g     F .text	00000002 __malloc_unlock
08016cd8 g     O .rodata	00000008 TIM15_ARR_fields
08014388 g     O .rodata	00000008 RTC_BKP24R_fields
00000400 g       *ABS*	00000000 _Min_Stack_Size
08014380 g     O .rodata	00000008 TIM1_CCR3_fields
0801bf14 g     O .rodata	00000008 TIM1_DMAR_fields
0800fe30 g     O .rodata	00000008 TIM15_CCR1_fields
0800ca48  w    F .text	00000002 USB_HP_IRQHandler
08017f38 g     O .rodata	00000010 USART1_RTOR_fields
08012648 g     O .rodata	00000070 RCC_AHBENR_fields
08015b70 g     O .rodata	00000018 TIM2_CNT_fields
08016bb8 g     O .rodata	000000b0 I2C1_registers
08007f06 g     F .text	0000000e SysTick_Handler
08012e98 g     O .rodata	00000008 RTC_WPR_fields
08018b08 g     O .rodata	00000008 RTC_SSR_fields
08009dc0 g     F .text	0000000a HAL_GPIO_WritePin
08014640 g     O .rodata	00000008 TSC_IOG2CR_fields
0800bea2 g     F .text	00000026 USBD_CDC_ReceivePacket
0800ca48  w    F .text	00000002 PVD_IRQHandler
0800eb48 g     O .rodata	00000008 DMA1_CPAR7_fields
0800826e g     F .text	0000001c LSM303DLHC_AccRebootCmd
08015b88 g     O .rodata	00000010 TIM6_CNT_fields
0800fc50 g     O .rodata	00000078 TIM1_DIER_fields
0800bf92 g     F .text	00000008 HAL_PCD_SOFCallback
08013920 g     O .rodata	00000008 NVIC_ICPR0_fields
08004ea4 g     F .text	000000c6 memmove
0800ca48  w    F .text	00000002 TAMP_STAMP_IRQHandler
0800c4c4 g     F .text	00000068 GYRO_IO_Init
080188b0 g     O .rodata	00000020 NVIC_IPR2_fields
0801c414 g       *ABS*	00000000 _sidata
08003f70 g     F .text	00000014 _cleanup
08009a9c g     F .text	00000038 HAL_RCC_GetHCLKFreq
0800ca48  w    F .text	00000002 PendSV_Handler
0801cee4 g     O .parsetable	0000000c CmdButtonE
08017000 g     O .rodata	00000008 NVIC_ICPR1_fields
0800ca48  w    F .text	00000002 NMI_Handler
08009be4 g     F .text	00000018 HAL_NVIC_EnableIRQ
08004f74 g     F .text	0000004c _Balloc
0801c408 g       .ARM	00000000 __exidx_end
080010ac g     F .text	00000064 __strtok_r
0800ca48  w    F .text	00000002 EXTI3_IRQHandler
08009a30 g     F .text	0000006c HAL_RCC_GetSysClockFreq
0800c408 g     F .text	0000001c BSP_LED_Off
0801bc24 g     O .rodata	00000008 DMA1_CNDTR5_fields
08012990 g     O .rodata	00000098 TIM8_CCER_fields
080131b8 g     O .rodata	00000100 CAN_F8R2_fields
08007330 g     F .text	0000008a .hidden __gtdf2
0801cf74 g       .parsetable	00000000 _parsetable_end
08017810 g     O .rodata	00000048 RCC_AHBRSTR_fields
08000b48 g     F .text	0000000c __errno
0800eaa0 g     O .rodata	00000008 RTC_BKP6R_fields
0800f030 g     O .rodata	00000028 CAN_TI2R_fields
0800b8e0 g     F .text	00000214 USBD_StdDevReq
0800aef0 g     F .text	00000090 HAL_I2C_Init
08016e20 g     O .rodata	00000008 NVIC_ISER2_fields
0801cf5c g     O .parsetable	0000000c CmdWE
0800af80  w    F .text	00000002 HAL_I2C_MspDeInit
08011e10 g     O .rodata	00000020 CAN_RDH0R_fields
08014348 g     O .rodata	00000020 FPU_FPDSCR_fields
08007f18 g     F .text	00000280 ledCompass
0800c0e8 g     F .text	0000000c USBD_VCP_DeviceDescriptor
08009ad4  w    F .text	00000002 HAL_MspInit
080102b0 g     O .rodata	00000100 CAN_F0R2_fields
0800e098 g     O .rodata	00000008 TSC_IOG8CR_fields
0800c080 g     F .text	00000026 USBD_LL_IsStallEP
08018368 g     O .rodata	00000100 CAN_F0R1_fields
080132b8 g     O .rodata	00000020 TIM15_SMCR_fields
0800c034 g     F .text	0000000e USBD_LL_Start
0800c61c g     F .text	00000048 COMPASSACCELERO_IO_ITConfig
0800c6dc g     F .text	00000030 BSP_ACCELERO_Init
0800b6d2 g     F .text	0000000a USBD_Start
0800889a g     F .text	0000000a _fstat_r
08009dca g     F .text	00000008 HAL_GPIO_TogglePin
08017130 g     O .rodata	00000048 TIM8_CR1_fields
08014f78 g     O .rodata	00000008 Flash_AR_fields
080113e8 g     O .rodata	00000100 CAN_F2R1_fields
08014058 g     O .rodata	00000058 COMP_COMP4_CSR_fields
0800fa78 g     O .rodata	00000040 GPIOB_AFRH_fields
08005d28 g     F .text	00000004 __seofread
0800ca78 g       .text	00000000 _etext
08014028 g     O .rodata	00000010 EXTI_PR2_fields
08014db0 g     O .rodata	00000028 USB_FS_FNR_fields
20000ac4 g       .bss	00000000 _sbss
08013de8 g     O .rodata	00000070 COMP_registers
08017008 g     O .rodata	00000100 CAN_F4R2_fields
0800c0e4 g     F .text	00000002 USBD_static_free
080138a0 g     O .rodata	00000008 DMA1_CMAR1_fields
08011180 g     O .rodata	00000060 TIM2_DIER_fields
080073cc g     F .text	00000010 .hidden __aeabi_cdcmple
08012000 g     O .rodata	00000008 TSC_IOG1CR_fields
08018df8 g     O .rodata	00000020 TIM17_CCER_fields
08018bf8 g     O .rodata	00000008 TIM8_RCR_fields
08015380 g     O .rodata	00000010 TIM16_CNT_fields
08015260 g     O .rodata	00000100 GPIOB_BSRR_fields
08012490 g     O .rodata	00000100 CAN_F16R2_fields
080100d8 g     O .rodata	00000018 ADC1_OFR1_fields
080179e0 g     O .rodata	00000100 CAN_F24R2_fields
08011768 g     O .rodata	00000008 RTC_BKP23R_fields
08014a90 g     O .rodata	00000008 TIM15_CCR2_fields
0800f358 g     O .rodata	00000098 ADC1_CFGR_fields
0800ee88 g     O .rodata	00000008 RTC_BKP13R_fields
0800b6c4 g     F .text	0000000e USBD_RegisterClass
080126c0 g     O .rodata	00000100 CAN_F20R1_fields
08012590 g     O .rodata	00000060 USART1_ICR_fields
0801c19c g     O .rodata	00000100 CAN_F25R2_fields
08018e18 g     O .rodata	00000008 TSC_IOG4CR_fields
080127c0 g     O .rodata	00000100 CAN_F27R2_fields
0801c11c g     O .rodata	00000078 TIM8_SR_fields
0800e3e0 g     O .rodata	00000050 USB_FS_ISTR_fields
08016cb8 g     O .rodata	00000008 DMA1_CMAR2_fields
0800fcc8 g     O .rodata	00000008 RTC_BKP26R_fields
080138f8 g     O .rodata	00000028 ADC1_SQR2_fields
08012ea0 g     O .rodata	00000010 TIM17_CNT_fields
0800fb28 g     O .rodata	00000008 WWDG_SR_fields
08009c28 g     F .text	0000018c HAL_GPIO_Init
080112e0 g     O .rodata	000000c0 EXTI_registers
0800b884 g     F .text	00000006 USBD_LL_SetSpeed
20000a70 g     O .data	00000004 BUTTON_PORT
0800c70c g     F .text	00000010 BSP_ACCELERO_GetXYZ
08011758 g     O .rodata	00000008 NVIC_ICTR_fields
0800ed50 g     O .rodata	00000008 TIM6_ARR_fields
08011e30 g     O .rodata	000000b0 CAN_TSR_fields
08008754 g     F .text	000000b8 DumpBuffer
08000cb0 g     F .text	00000006 _putchar_r
08013138 g     O .rodata	00000080 GPIOA_IDR_fields
0800dfc8 g     O .rodata	00000050 USB_FS_USB_EP3R_fields
0800bfb6 g     F .text	00000002 HAL_PCD_ResumeCallback
08004d70 g     F .text	00000134 memcpy
080073bc g     F .text	00000020 .hidden __aeabi_cdrcmple
08017f58 g     O .rodata	00000100 CAN_F7R2_fields
08017b70 g     O .rodata	00000010 TIM1_CNT_fields
0800c52c g     F .text	00000044 GYRO_IO_Write
08000d44 g     F .text	00000150 setvbuf
08007d68 g     F .text	0000005c CmdLED
20000ac4 g     O .data	00000000 .hidden __TMC_END__
080115f8 g     O .rodata	00000078 TIM1_SR_fields
08010190 g     O .rodata	00000020 NVIC_IPR13_fields
0800ef28 g     O .rodata	00000008 TIM15_PSC_fields
0800bb24 g     F .text	000000b2 USBD_StdEPReq
08003db8 g     F .text	0000000c _cleanup_r
080157b8 g     O .rodata	00000040 GPIOA_AFRH_fields
0800055c g     F .text	00000022 .hidden __floatsidf
08016e68 g     O .rodata	00000010 DAC_DHR12RD_fields
080171b0 g     O .rodata	00000058 COMP_COMP2_CSR_fields
08016e78 g     O .rodata	00000078 TIM8_DIER_fields
0801bf04 g     O .rodata	00000010 ADC1_DIFSEL_fields
08007338 g     F .text	00000082 .hidden __ltdf2
0800c43c g     F .text	00000074 BSP_PB_Init
0800ca48  w    F .text	00000002 USB_HP_CAN_TX_IRQHandler
0800ca48  w    F .text	00000002 EXTI0_IRQHandler
08018528 g     O .rodata	00000010 TIM8_OR_fields
0800ca48  w    F .text	00000002 I2C2_EV_IRQHandler
0800f000 g     O .rodata	00000020 CAN_TDH0R_fields
080114f0 g     O .rodata	00000050 USB_FS_USB_EP4R_fields
0800746c g     F .text	00000000 .hidden __aeabi_uldivmod
08013ff8 g     O .rodata	00000030 WWDG_registers
0800e2d8 g     O .rodata	00000008 TIM17_RCR_fields
08000d34 g     F .text	00000010 puts
0800bc66 g     F .text	00000016 USBD_CtlSendStatus
0800ca48  w    F .text	00000002 FPU_IRQHandler
08009b3c  w    F .text	0000001a HAL_Delay
0800baf4 g     F .text	00000030 USBD_StdItfReq
080114e8 g     O .rodata	00000008 TIM8_CCR4_fields
20000908 g     O .data	00000004 SystemCoreClock
08017b80 g     O .rodata	00000120 TIM15_registers
0800a494 g     F .text	00000178 HAL_PCD_EP_Transmit
0800027c g     F .text	00000012 my_Tick
08005754 g     F .text	00000060 __ratio
08014248 g     O .rodata	00000100 CAN_F3R1_fields
0800b8a2 g     F .text	00000028 USBD_ParseSetupRequest
080150c0 g     O .rodata	00000010 TIM2_CCR1_fields
080122e0 g     O .rodata	00000010 DAC_SWTRIGR_fields
0800ca48  w    F .text	00000002 TIM1_UP_TIM16_IRQHandler
08010f60 g     O .rodata	00000100 CAN_F13R1_fields
0800473c g     F .text	00000010 malloc
080136d0 g     O .rodata	00000008 IWDG_RLR_fields
08000c68 g     F .text	0000001e _printf_r
0800ac48 g     F .text	00000022 PCD_ReadPMA
08007e24 g     F .text	00000054 CmdGyro
08018ae0 g     O .rodata	00000010 CAN_FMR_fields
0800d048 g     O .rodata	000000c8 __mprec_tens
0801bf74 g     O .rodata	00000040 OPAMP_registers
080169e0 g     O .rodata	00000008 DMA1_CNDTR4_fields
080182e0 g     O .rodata	00000008 NVIC_IABR1_fields
080181e0 g     O .rodata	00000030 ADC1_2_registers
20000a1c g     O .data	0000001c VCP_Desc
08017d00 g     O .rodata	000000d0 EXTI_PR1_fields
0800ca48  w    F .text	00000002 UsageFault_Handler
08004614 g     F .text	00000008 __locale_charset
080165c0 g     O .rodata	00000020 TIM8_CCR5_fields
20000f34 g     O .bss	00000024 cdata
0800ca48  w    F .text	00000002 ADC1_2_IRQHandler
20000ae0 g     O .bss	00000004 __malloc_top_pad
20000fa8 g     O .bss	00000050 input
08017208 g     O .rodata	00000100 CAN_F4R1_fields
08014da0 g     O .rodata	00000010 ADC1_TR3_fields
08011670 g     O .rodata	00000008 DMA1_CPAR2_fields
0800fb30 g     O .rodata	00000048 TIM16_DIER_fields
08009db4 g     F .text	0000000c HAL_GPIO_ReadPin
08013fe0 g     O .rodata	00000008 NVIC_ICER2_fields
0800138c g     F .text	00000018 strtoul
20001498 g     O .bss	00000004 BuffLength
20000458 g     O .data	00000004 __mb_cur_max
0800053c g     F .text	0000001e .hidden __aeabi_ui2d
08004634 g     F .text	00000008 _localeconv_r
0800fb20 g     O .rodata	00000008 TIM8_CCR1_fields
2000149c g     O .bss	0000006c UartHandle
080186c8 g     O .rodata	00000100 CAN_F9R2_fields
080161e8 g     O .rodata	00000008 DAC_DHR12L2_fields
08005188 g     F .text	00000012 __i2b
08004230 g     F .text	00000304 __sfvwrite_r
0800b88a g     F .text	00000018 USBD_LL_SOF
20000000 g       .data	00000000 _sdata
0800ca48  w    F .text	00000002 SPI1_IRQHandler
08014390 g     O .rodata	00000028 CAN_TI0R_fields
0800ca48  w    F .text	00000002 CAN_SCE_IRQHandler
0800749c g     F .text	000002e2 .hidden __udivmoddi4
080002b8 g     F .text	00000000 .hidden __aeabi_drsub
08018818 g     O .rodata	00000048 ADC1_SMPR2_fields
08015240 g     O .rodata	00000020 NVIC_IPR4_fields
08008860 g     F .text	00000034 _sbrk_r
0800ee68 g     O .rodata	00000020 NVIC_IPR18_fields
0800bec8 g     F .text	0000009c HAL_PCD_MspInit
08016440 g     O .rodata	00000010 TIM6_DIER_fields
0800f8f8 g     O .rodata	00000060 TIM1_CCMR1_Output_fields
0801bb0c g     O .rodata	000000b0 USART1_ISR_fields
0800ca48  w    F .text	00000002 TIM6_DAC_IRQHandler
08010668 g     O .rodata	00000068 I2C1_CR2_fields
08014638 g     O .rodata	00000008 TIM8_CCR2_fields
0800aa8e g     F .text	0000009e HAL_PCD_EP_SetStall
08008a3c g     F .text	0000000a _read_r
0800e0f0 g     O .rodata	00000048 TIM1_SMCR_fields
08014818 g     O .rodata	00000030 CAN_ESR_fields
0800b69a g     F .text	0000002a USBD_Init
08017318 g     O .rodata	00000080 GPIOB_BRR_fields
20001220 g     O .bss	00000178 hpcd
080073f0 g     F .text	00000012 .hidden __aeabi_dcmplt
080070a4 g     F .text	00000084 _fclose_r
080151d0 g     O .rodata	00000018 ADC1_OFR2_fields
0800ef70 g     O .rodata	00000010 TIM2_ARR_fields
08003d90 g     F .text	00000024 fflush
0800c5b8 g     F .text	00000064 COMPASSACCELERO_IO_Init
20000b0c g     O .bss	00000004 __malloc_max_sbrked_mem
08018e60 g     O .rodata	00000100 CAN_F9R1_fields
08014f80 g     O .rodata	00000038 RTC_DR_fields
08017af0 g     O .rodata	00000008 TIM1_CCR1_fields
08009bfc g     F .text	0000002c HAL_SYSTICK_Config
08000580 g     F .text	0000003a .hidden __extendsfdf2
080168d8 g     O .rodata	00000008 Flash_OPTKEYR_fields
08011c50 g     O .rodata	00000018 ADC1_OFR4_fields
2000121c g     O .bss	00000004 USBDDataIn
0800ca48  w    F .text	00000002 TIM8_UP_IRQHandler
0800087c g     F .text	000001d0 .hidden __aeabi_ddiv
20000a38 g     O .data	0000001a USBD_StringSerial
08012110 g     O .rodata	00000100 CAN_F25R1_fields
08018c28 g     O .rodata	00000018 SPI1_I2SPR_fields
080164b8 g     O .rodata	00000008 ADC1_JDR1_fields
08016ff8 g     O .rodata	00000008 IWDG_KR_fields
08018240 g     O .rodata	00000050 USB_FS_USB_EP0R_fields
080002c4 g     F .text	00000276 .hidden __adddf3
0800c664 g     F .text	00000038 COMPASSACCELERO_IO_Write
08014648 g     O .rodata	00000100 CAN_F23R2_fields
080143d8 g     O .rodata	00000050 CRC_registers
08010eb8 g     O .rodata	000000a0 USART1_CR1_fields
08011790 g     O .rodata	00000320 RTC_registers
08011f00 g     O .rodata	00000100 CAN_F5R2_fields
08010d10 g     O .rodata	00000028 TIM17_CR2_fields
080055c8 g     F .text	000000d0 __b2d
0801c400 g       .ARM	00000000 __exidx_start
08010598 g     O .rodata	00000018 TIM16_CCMR1_Input_fields
0800f2d8 g     O .rodata	00000008 Flash_KEYR_fields
08000628 g     F .text	00000254 .hidden __aeabi_dmul
08008416 g     F .text	0000001c LSM303DLHC_AccZClickITConfig
08014c60 g     O .rodata	00000060 TIM8_CCMR2_Output_fields
200008c8 g     O .data	00000001 __fdlib_version
0800fa50 g     O .rodata	00000028 PWR_CSR_fields
08017978 g     O .rodata	00000010 RTC_ALRMASSR_fields
20000994 g     O .data	00000043 USBD_CDC_OtherSpeedCfgDesc
08018058 g     O .rodata	00000020 SYSCFG_EXTICR4_fields
080110b0 g     O .rodata	00000008 NVIC_IABR0_fields
0800d010 g     O .rodata	00000004 _global_impure_ptr
08011230 g     O .rodata	00000040 FPU_MVFR0_fields
08016ba0 g     O .rodata	00000008 TIM16_RCR_fields
08005924 g     F .text	000003de _realloc_r
08000b7c g     F .text	00000050 __libc_init_array
0800bc56 g     F .text	00000010 USBD_CtlContinueRx
08017f48 g     O .rodata	00000008 RTC_BKP12R_fields
0800e8a8 g     O .rodata	00000010 USART1_GTPR_fields
08009ea6 g     F .text	00000336 HAL_PCD_EP_Open
0800ca48  w    F .text	00000002 DMA2_Channel2_IRQHandler
0800ca48  w    F .text	00000002 DMA1_Channel4_IRQHandler
0800f960 g     O .rodata	00000010 TIM1_OR_fields
0800e018 g     O .rodata	00000080 GPIOB_PUPDR_fields
0800a60c g     F .text	00000482 HAL_PCD_IRQHandler
08008488 g     F .text	00000020 CmdR
080071d0 g     F .text	00000026 _fputwc_r
0800d138 g     O .rodata	00000028 __mprec_bigtens
08018b10 g     O .rodata	00000008 TIM1_CCR4_fields
08005054 g     F .text	00000098 __s2b
0800053c g     F .text	0000001e .hidden __floatunsidf
08013878 g     O .rodata	00000020 CAN_TDL1R_fields
0800541c g     F .text	00000042 __mcmp
08017190 g     O .rodata	00000020 NVIC_IPR7_fields
0800c8f0 g     F .text	0000002e L3GD20_FilterCmd
08017cd0 g     O .rodata	00000008 TIM17_DMAR_fields
0800af82 g     F .text	0000002e HAL_I2C_DeInit
08016430 g     O .rodata	00000010 TIM15_CNT_fields
08003f9c g     F .text	00000014 __fp_lock_all
0800b336 g     F .text	000000a6 HAL_SPI_Init
08010818 g     O .rodata	00000008 RTC_BKP10R_fields
080111e0 g     O .rodata	00000048 CAN_MSR_fields
08014e28 g     O .rodata	000000d0 RCC_registers
0800ca60 g     F .text	00000000 _init
08011ee0 g     O .rodata	00000020 CAN_TDL0R_fields
08014368 g     O .rodata	00000008 DAC_DHR8R2_fields
080157f8 g     O .rodata	00000090 RCC_APB1RSTR_fields
0800c760 g     F .text	00000010 BSP_GYRO_GetXYZ
080103b0 g     O .rodata	00000008 RTC_BKP0R_fields
08015c28 g     O .rodata	00000590 CAN_registers
0801ced8 g       .parsetable	00000000 _parsetable_start
08011d98 g     O .rodata	00000060 DMA1_CCR5_fields
08001240 g     F .text	00000018 strtol
080113e0 g     O .rodata	00000008 RTC_BKP8R_fields
08010a50 g     O .rodata	00000110 TSC_registers
080140b0 g     O .rodata	00000030 TIM2_CCMR2_Input_fields
0800c064 g     F .text	0000000e USBD_LL_StallEP
0800f5b8 g     O .rodata	00000008 NVIC_ICER1_fields
08017cd8 g     O .rodata	00000028 TIM16_EGR_fields
0801cf44 g     O .parsetable	0000000c CmdRE
0800b334  w    F .text	00000002 HAL_SPI_MspInit
08016330 g     O .rodata	00000100 CAN_F8R1_fields
08000a9c g     F .text	0000009e .hidden __aeabi_d2f
0800ca48  w    F .text	00000002 USART3_IRQHandler
08013760 g     O .rodata	00000100 CAN_F21R1_fields
08011060 g     O .rodata	00000050 RCC_CSR_fields
0800c128 g     F .text	00000044 USBD_VCP_SerialStrDescriptor
08013c30 g     O .rodata	00000080 GPIOA_OTYPER_fields
08018e30 g     O .rodata	00000010 DAC_DHR12LD_fields
0800ffa8 g     O .rodata	00000030 TIM16_SR_fields
08015888 g     O .rodata	000001a0 TIM1_registers
08000b54 g     F .text	00000028 __libc_fini_array
080184f0 g     O .rodata	00000038 ADC1_JSQR_fields
20001d44 g       .bss	00000000 _ebss
0800843c g     F .text	00000030 CmdTest
0800c69c g     F .text	00000040 COMPASSACCELERO_IO_Read
20000a98 g     O .data	0000002c L3gd20Drv
080140f8 g     O .rodata	00000050 FPU_CPACR_fields
0800ca48  w    F .text	00000002 DMA1_Channel7_IRQHandler
08014570 g     O .rodata	00000020 CAN_TDL2R_fields
0800b0d8 g     F .text	00000134 HAL_I2C_Mem_Read
0800f6c8 g     O .rodata	00000040 GPIOA_AFRL_fields
0800c9f8  w    F .text	00000038 Reset_Handler
2000090c g     O .data	00000043 USBD_CDC_CfgFSDesc
0801bd84 g     O .rodata	00000008 RTC_BKP29R_fields
0800c71c g     F .text	00000044 BSP_GYRO_Init
0800f498 g     O .rodata	00000020 NVIC_IPR0_fields
08013950 g     O .rodata	00000080 GPIOA_ODR_fields
080050ec g     F .text	00000040 __hi0bits
08011678 g     O .rodata	00000020 NVIC_IPR15_fields
0800f958 g     O .rodata	00000008 TIM1_CCR2_fields
08010d60 g     O .rodata	000000d0 EXTI_RTSR1_fields
08011d90 g     O .rodata	00000008 DAC_DOR2_fields
08013898 g     O .rodata	00000008 CRC_DR_fields
08000a4c g     F .text	0000004e .hidden __fixdfsi
0800f4e0 g     O .rodata	00000080 GPIOB_OSPEEDR_fields
0801cf2c g     O .parsetable	0000000c CmdLEDE
0800ca48  w    F .text	00000002 UART5_IRQHandler
08008dd0 g     F .text	0000004c DecodePeripheral
08017ca8 g     O .rodata	00000020 SYSCFG_EXTICR1_fields
08010828 g     O .rodata	00000100 CAN_F11R2_fields
0800ca48  w    F .text	00000002 ADC3_IRQHandler
080136d8 g     O .rodata	00000038 RTC_TSTR_fields
080147d0 g     O .rodata	00000048 TIM2_CR1_fields
08009afc g     F .text	00000024 HAL_Init
08013360 g     O .rodata	00000100 CAN_F1R2_fields
08005894 g     F .text	00000042 _putc_r
0800bc38 g     F .text	0000001e USBD_CtlPrepareRx
08012f30 g     O .rodata	00000008 RTC_BKP17R_fields
08015a28 g     O .rodata	00000020 CAN_RDL1R_fields
08016aa0 g     O .rodata	00000100 CAN_F23R1_fields
0800b3de g     F .text	0000002e HAL_SPI_DeInit
0800ca48  w    F .text	00000002 TIM4_IRQHandler
08011c88 g     O .rodata	00000100 CAN_F18R1_fields
08018b18 g     O .rodata	000000d0 USB_FS_registers
080002c4 g     F .text	00000276 .hidden __aeabi_dadd
08018df0 g     O .rodata	00000008 TIM8_CCR3_fields
08007338 g     F .text	00000082 .hidden __ledf2
080168e0 g     O .rodata	00000100 CAN_F13R2_fields
0800d3d8 g     O .rodata	00000008 LEDs
08014ef8 g     O .rodata	00000030 TIM2_CCMR1_Input_fields
0801c194 g     O .rodata	00000008 DAC_DHR12R1_fields
08019060 g     O .rodata	00000028 I2C1_OAR1_fields
0800c0dc g     F .text	00000008 USBD_static_malloc
0800f5c8 g     O .rodata	00000020 CAN_RF0R_fields
0800ca48  w    F .text	00000002 CAN_RX1_IRQHandler
0800ca48  w    F .text	00000002 DMA2_Channel1_IRQHandler
0800f5c0 g     O .rodata	00000008 RTC_BKP7R_fields
080052cc g     F .text	000000a0 __pow5mult
08013cb0 g     O .rodata	00000010 ADC1_TR1_fields
08018a10 g     O .rodata	00000008 DMA1_CNDTR7_fields
080005bc g     F .text	0000006a .hidden __aeabi_ul2d
0800be74 g     F .text	0000002e USBD_CDC_TransmitPacket
20000a74 g     O .data	00000004 I2cxTimeout
08011d88 g     O .rodata	00000008 TSC_IOG5CR_fields
08012640 g     O .rodata	00000008 DAC_DHR12R2_fields
08014378 g     O .rodata	00000008 RTC_BKP18R_fields
08000264 g     F .text	00000016 mytest
08010820 g     O .rodata	00000008 DMA1_CMAR6_fields
08012610 g     O .rodata	00000030 TIM15_CCMR1_Input_fields
08007e78 g     F .text	0000002c CmdButton
0800bc7c g     F .text	00000016 USBD_CtlReceiveStatus
08011bc0 g     O .rodata	00000010 TIM2_CCR4_fields
20001d44 g       ._user_heap_stack	00000000 end
20000a54 g     O .data	00000008 LineCoding
08011270 g     O .rodata	00000070 SPI1_CR1_fields
0800ca48  w    F .text	00000002 I2C1_EV_IRQHandler
08007dc4 g     F .text	00000038 turnOnMagnetometer
08015b98 g     O .rodata	00000090 SPI1_registers
0800c042 g     F .text	00000014 USBD_LL_OpenEP
080151e8 g     O .rodata	00000010 TIM8_DCR_fields
08008e64 g     F .text	00000058 DecodePrintRegisters
08013b50 g     O .rodata	00000068 USB_FS_USB_CNTR_fields
08012230 g     O .rodata	000000b0 USART1_registers
0800c886 g     F .text	0000003c L3GD20_DisableIT
0800f970 g     O .rodata	00000008 USART1_TDR_fields
08015720 g     O .rodata	00000078 RCC_APB1ENR_fields
0800b3dc  w    F .text	00000002 HAL_SPI_MspDeInit
08019088 g     O .rodata	00000008 DMA1_CNDTR2_fields
08016ef0 g     O .rodata	00000070 CAN_IER_fields
080182e8 g     O .rodata	00000060 DMA1_CCR1_fields
080186c0 g     O .rodata	00000008 NVIC_ICER0_fields
08013750 g     O .rodata	00000008 NVIC_ISER1_fields
0800b7bc g     F .text	0000008a USBD_LL_DataInStage
0801bd7c g     O .rodata	00000008 RTC_BKP31R_fields
08013b08 g     O .rodata	00000048 TIM1_EGR_fields
08017b10 g     O .rodata	00000060 TIM2_CCMR1_Output_fields
08016ce0 g     O .rodata	00000010 DAC_SR_fields
08014b38 g     O .rodata	00000010 TIM2_CCR2_fields
0800bfb8 g     F .text	0000007c USBD_LL_Init
08017128 g     O .rodata	00000008 RTC_BKP3R_fields
0800c3ec g     F .text	0000001c BSP_LED_On
0800c770 g     F .text	00000032 L3GD20_Init
0800742c g     F .text	00000012 .hidden __aeabi_dcmpgt
0800ca48  w    F .text	00000002 DMA1_Channel6_IRQHandler
0800b8ca g     F .text	00000016 USBD_CtlError
20000950 g     O .data	00000038 USBD_CDC
0800b6f2 g     F .text	0000000e USBD_ClrClassConfig
0801bbbc g     O .rodata	00000008 RTC_BKP5R_fields
0800ca48  w    F .text	00000002 UART4_IRQHandler
0800ca48  w    F .text	00000002 DMA2_Channel4_IRQHandler
0800be4a g     F .text	0000000e USBD_CDC_RegisterInterface
08003f8c g     F .text	00000002 __sfp_lock_acquire
08004cd0 g     F .text	00000000 memchr
08004060 g     F .text	000001d0 _free_r
0800ca48  w    F .text	00000002 TIM3_IRQHandler
0800ca48  w    F .text	00000002 RCC_IRQHandler
0800e798 g     O .rodata	00000020 RTC_CALR_fields
0800461c g     F .text	0000000c __locale_mb_cur_max
08007418 g     F .text	00000012 .hidden __aeabi_dcmpge
08011228 g     O .rodata	00000008 DAC_DHR12L1_fields
0800e878 g     O .rodata	00000030 TIM17_SR_fields
00001000 g       *ABS*	00000000 _Min_Heap_Size
08013a50 g     O .rodata	00000080 GPIOB_OTYPER_fields
0800ca48  w    F .text	00000002 DMA1_Channel1_IRQHandler
08017e50 g     O .rodata	00000008 RTC_BKP9R_fields
08018c40 g     O .rodata	00000100 CAN_F14R2_fields
080002c0 g     F .text	0000027a .hidden __aeabi_dsub
0800bf70 g     F .text	00000012 HAL_PCD_DataOutStageCallback
0800ca48 g       .text	00000002 Default_Handler
200008bc g     O .data	00000004 __malloc_sbrk_base
0800c188 g     F .text	0000001c USBD_VCP_ManufacturerStrDescriptor
08015140 g     O .rodata	00000088 GPIOA_LCKR_fields
080123f8 g     O .rodata	00000090 RTC_TAFCR_fields
20000a5c g     O .data	00000010 USBD_CDC_fops
08018d40 g     O .rodata	000000b0 GPIOA_registers
08011bb0 g     O .rodata	00000008 NVIC_ISPR2_fields
0800ca48  w    F .text	00000002 USBWakeUp_RMP_IRQHandler
08016458 g     O .rodata	00000060 TIM2_CCMR2_Output_fields
0800f868 g     O .rodata	00000088 GPIOB_LCKR_fields
0800f2e0 g     O .rodata	00000078 TIM8_CR2_fields
0800a484 g     F .text	00000010 HAL_PCD_EP_GetRxCount
0800ee90 g     O .rodata	00000030 CAN_BTR_fields
080005bc g     F .text	0000006a .hidden __floatundidf
0801bbc4 g     O .rodata	00000060 DMA1_CCR4_fields
0800fe10 g     O .rodata	00000020 NVIC_IPR10_fields
08012488 g     O .rodata	00000008 TIM17_ARR_fields
080122f0 g     O .rodata	00000100 CAN_F12R2_fields
0800536c g     F .text	000000ae __lshift
08016730 g     O .rodata	00000028 USART1_RQR_fields
08014de0 g     O .rodata	00000048 TIM17_DIER_fields
0800e270 g     O .rodata	00000008 RTC_BKP22R_fields
08016758 g     O .rodata	00000020 CAN_TDH2R_fields
08013e68 g     O .rodata	00000008 TIM1_RCR_fields
0800c072 g     F .text	0000000e USBD_LL_ClearStallEP
0801c0fc g     O .rodata	00000020 NVIC_IPR5_fields
0800fcd0 g     O .rodata	00000058 Flash_OBR_fields
0800ca48  w    F .text	00000002 EXTI15_10_IRQHandler
080105f8 g     O .rodata	00000018 CAN_TDT1R_fields
0800c920 g     F .text	000000d8 L3GD20_ReadXYZAngRate
080148f0 g     O .rodata	00000038 RTC_TR_fields
08015360 g     O .rodata	00000020 NVIC_IPR17_fields
08002c1c g     F .text	000000a4 __register_exitproc
0800fbf8 g     O .rodata	00000058 Flash_CR_fields
080116f8 g     O .rodata	00000058 SPI1_SR_fields
080113a0 g     O .rodata	00000040 USB_FS_DADDR_fields
08011e00 g     O .rodata	00000010 EXTI_SWIER2_fields
08009e7a g     F .text	0000002c HAL_PCD_SetAddress
080138d8 g     O .rodata	00000020 NVIC_IPR19_fields
080128c0 g     O .rodata	00000008 TIM6_SR_fields
0800e8c0 g     O .rodata	00000100 CAN_F1R1_fields
0801cf38 g     O .parsetable	0000000c magnetInitE
08017310 g     O .rodata	00000008 TIM17_PSC_fields
0800e808 g     O .rodata	00000020 SYSCFG_EXTICR2_fields
0800519c g     F .text	00000130 __multiply
08019218 g     O .rodata	00000008 SPI1_CRCPR_fields
0800828a g     F .text	0000001e LSM303DLHC_AccFilterConfig
08009770 g     F .text	000002c0 HAL_RCC_ClockConfig
08009b58 g     F .text	00000024 HAL_NVIC_SetPriorityGrouping
200008fc g     O .data	00000004 Commands
080187c8 g     O .rodata	00000010 ADC1_TR2_fields
20000ae4 g     O .bss	00000028 __malloc_current_mallinfo
08008394 g     F .text	0000001e LSM303DLHC_AccFilterClickCmd
080143d0 g     O .rodata	00000008 RTC_TSSSR_fields
080085b4 g     F .text	00000130 TaskInput
08012108 g     O .rodata	00000008 TIM6_CR2_fields
08016a48 g     O .rodata	00000050 RCC_CR_fields
08013cc0 g     O .rodata	000000e0 CAN_FM1R_fields
08014748 g     O .rodata	00000008 TIM1_CCR6_fields
08005698 g     F .text	000000ba __d2b
08018a18 g     O .rodata	00000098 USART1_CR2_fields
08016630 g     O .rodata	00000060 TIM1_BDTR_fields
08000e94 g     F .text	0000004c strcasecmp
0800e670 g     O .rodata	00000008 IWDG_WINR_fields
08013da0 g     O .rodata	00000048 ADC1_SMPR1_fields
0800c570 g     F .text	00000048 GYRO_IO_Read
08000294 g     F .text	00000004 my_Init
08011770 g     O .rodata	00000018 I2C1_OAR2_fields
08018538 g     O .rodata	00000100 CAN_F26R1_fields
080086e4 g     F .text	00000028 fetch_int32_arg
08001258 g     F .text	00000134 _strtoul_r
08014cc0 g     O .rodata	00000008 CRC_POL_fields
0801bd8c g     O .rodata	00000008 DMA1_CMAR4_fields
0800ca48  w    F .text	00000002 TIM7_IRQHandler
0800c7ea g     F .text	0000005c L3GD20_INT1InterruptConfig
0800bfb4 g     F .text	00000002 HAL_PCD_SuspendCallback
08016780 g     O .rodata	00000008 DMA1_CPAR3_fields
080126b8 g     O .rodata	00000008 RTC_BKP14R_fields
0800bcf0 g     F .text	0000000c USBD_CDC_GetDeviceQualifierDescriptor
08008894 g     F .text	00000006 _close_r
0800df10 g     O .rodata	00000008 SPI1_DR_fields
0800f2b8 g     O .rodata	00000018 RCC_CFGR2_fields
0800055c g     F .text	00000022 .hidden __aeabi_i2d
0800ee58 g     O .rodata	00000010 TIM15_DCR_fields
0800ef30 g     O .rodata	00000018 Flash_ACR_fields
0801be94 g     O .rodata	00000008 CRC_IDR_fields
200008cc g     O .data	0000002c Lsm303dlhcDrv
08011bb8 g     O .rodata	00000008 DMA1_CPAR5_fields
080180e0 g     O .rodata	00000100 CAN_F18R2_fields
080165e0 g     O .rodata	00000050 IWDG_registers
0800109c g     F .text	00000010 strtok
0801cf20 g     O .parsetable	0000000c CmdGyroE
08013758 g     O .rodata	00000008 IWDG_PR_fields
08014a70 g     O .rodata	00000020 NVIC_IPR11_fields
08013e70 g     O .rodata	00000050 COMP_COMP7_CSR_fields
0800e778 g     O .rodata	00000020 CAN_RF1R_fields
08008974 g     F .text	0000007c TerminalInit
08002b54 g     F .text	000000c8 __swsetup_r
08010d58 g     O .rodata	00000008 TIM8_ARR_fields
08007780  w    F .text	00000002 .hidden __aeabi_ldiv0
0800ca48  w    F .text	00000002 EXTI9_5_IRQHandler
0800b694 g     F .text	00000006 HAL_SPI_GetState
0800087c g     F .text	000001d0 .hidden __divdf3
08010948 g     O .rodata	00000008 ADC1_DR_fields
08003ee8 g     F .text	00000088 __sfp
080057ec g     F .text	00000046 __copybits
0800ca48  w    F .text	00000002 RTC_WKUP_IRQHandler
0801bd6c g     O .rodata	00000010 USART1_BRR_fields
08018290 g     O .rodata	00000050 TIM15_CCMR1_Output_fields
200004b4 g     O .data	00000408 __malloc_av_
08015030 g     O .rodata	00000088 SYSCFG_CFGR1_fields
08003f98 g     F .text	00000002 __sinit_lock_release
08008a46 g     F .text	00000010 TerminalReadNonBlock
08000628 g     F .text	00000254 .hidden __muldf3
08018e48 g     O .rodata	00000018 CAN_TDT0R_fields
0800880c g     F .text	00000054 CmdDump
08005d04 g     F .text	00000022 __sread
08013928 g     O .rodata	00000028 TIM16_CCMR1_Output_fields
08016cc0 g     O .rodata	00000018 WWDG_CFR_fields
080174a0 g     O .rodata	00000370 Peripherals
08017dd0 g     O .rodata	00000080 GPIOB_ODR_fields
08009b30  w    F .text	0000000c HAL_GetTick
08014cd0 g     O .rodata	00000050 USB_FS_USB_EP5R_fields
08012008 g     O .rodata	00000100 CAN_F11R1_fields
08004f6c g     F .text	00000002 __malloc_lock
08016778 g     O .rodata	00000008 NVIC_ISPR0_fields
0800f560 g     O .rodata	00000058 ADC1_ISR_fields
0800fab8 g     O .rodata	00000048 FPU_FPCCR_fields
08018be8 g     O .rodata	00000010 TSC_ICR_fields
080082c6 g     F .text	000000ce LSM303DLHC_AccReadXYZ
08010128 g     O .rodata	00000008 NVIC_IABR2_fields
08003d64 g     F .text	0000002c _fflush_r
08008a56 g     F .text	00000012 TerminalReadAnyNonBlock
0800c16c g     F .text	0000001c USBD_VCP_ProductStrDescriptor
08007044 g     F .text	0000005e _calloc_r
08019190 g     O .rodata	00000080 GPIOA_PUPDR_fields
0800ca48  w    F .text	00000002 SPI2_IRQHandler
08017178 g     O .rodata	00000008 RTC_BKP21R_fields
0801c36d g     O .rodata	00000012 hUSBDDeviceDesc
0800e248 g     O .rodata	00000028 RTC_TSDR_fields
08008bec g     F .text	0000000c USB_LP_CAN_RX0_IRQHandler
08016d50 g     O .rodata	00000048 RCC_CFGR3_fields
08000bcc g     F .text	0000009a memset
0800ca48  w    F .text	00000002 MemManage_Handler
08008198 g     F .text	000000a4 main
08016788 g     O .rodata	00000100 TSC_IOSCR_fields
0800dd30 g     O .rodata	000001e0 DMA1_registers
0800c4b0 g     F .text	00000014 BSP_PB_GetState
08014a98 g     O .rodata	00000020 SYSCFG_EXTICR3_fields
20000b10 g     O .bss	00000004 __malloc_max_total_mem
08011750 g     O .rodata	00000008 ADC1_JDR3_fields
08014a68 g     O .rodata	00000008 SPI1_TXCRCR_fields
08007034 g     F .text	00000010 __swbuf
0800b40c g     F .text	00000288 HAL_SPI_TransmitReceive
20000a6c g     O .data	00000004 SpixTimeout
0801ced8 g       *ABS*	00000000 _siccmram
0801bf24 g     O .rodata	00000050 COMP_COMP3_CSR_fields
08012970 g     O .rodata	00000020 NVIC_IPR9_fields
08012c10 g     O .rodata	00000040 DBGMCU_registers
08017108 g     O .rodata	00000020 NVIC_IPR16_fields
08011ab0 g     O .rodata	00000100 CAN_F2R2_fields
0800ca48  w    F .text	00000002 SVC_Handler
08005d88 g     F .text	00000008 __sclose
08007d64 g     F .text	00000004 matherr
0800ca48  w    F .text	00000002 DMA2_Channel5_IRQHandler
080104b8 g     O .rodata	000000e0 DMA1_IFCR_fields
08007128 g     F .text	00000010 fclose
0800f418 g     O .rodata	00000080 TSC_IOGCSR_fields
08001118 g     F .text	00000128 _strtol_r
08000a9c g     F .text	0000009e .hidden __truncdfsf2
08008b88 g     F .text	00000064 TerminalInputBufferWrite
0801cefc g     O .parsetable	0000000c turnOnMagnetometerE
08018e20 g     O .rodata	00000008 DMA1_CPAR1_fields
08002de8 g     F .text	00000e34 _dtoa_r
0800475c g     F .text	0000056c _malloc_r
080148b0 g     O .rodata	00000040 GPIOB_AFRL_fields
080072e4 g     F .text	0000001a __ascii_wctomb
0800f058 g     O .rodata	00000058 ADC1_IER_fields
080005cc g     F .text	0000005a .hidden __aeabi_l2d
0800f8f0 g     O .rodata	00000008 DAC_DHR8R1_fields
080161b8 g     O .rodata	00000030 TIM1_CCMR1_Input_fields
0800f1b8 g     O .rodata	00000100 TSC_IOASCR_fields
08010928 g     O .rodata	00000020 NVIC_IPR20_fields
08004534 g     F .text	0000004a _fwalk
0800b846 g     F .text	0000003e USBD_LL_Reset
08015a48 g     O .rodata	00000018 CAN_RDT1R_fields
08012eb0 g     O .rodata	00000080 GPIOA_BRR_fields
080173a0 g     O .rodata	00000100 CAN_F20R2_fields
08013e58 g     O .rodata	00000010 TSC_ISR_fields
0800c0d0 g     F .text	0000000c USBD_LL_GetRxDataSize
0800ca48  w    F .text	00000002 DMA1_Channel5_IRQHandler
0800823c g     F .text	00000020 LSM303DLHC_AccInit
0800ca48  w    F .text	00000002 USB_LP_IRQHandler
20001508 g     O .bss	00000800 UserRxBuffer
08014a28 g     O .rodata	00000040 SPI1_I2SCFGR_fields
0801c31c g     O .rodata	00000004 USBD_LangIDDesc
0800f738 g     O .rodata	00000100 CAN_F15R2_fields
0800ca48  w    F .text	00000002 EXTI4_IRQHandler
08016c68 g     O .rodata	00000050 USB_FS_USB_EP2R_fields
080058d8 g     F .text	0000004c putc
20000a78 g     O .data	00000020 LED_PORT
0800e510 g     O .rodata	00000008 TIM8_CCR6_fields
080083d0 g     F .text	00000046 LSM303DLHC_AccClickITEnable
0800b75a g     F .text	00000062 USBD_LL_DataOutStage
080123f0 g     O .rodata	00000008 RTC_BKP4R_fields
08003fc4 g     F .text	0000009c _malloc_trim_r
08017ca0 g     O .rodata	00000008 TSC_IOG7CR_fields
080168c8 g     O .rodata	00000008 RTC_BKP16R_fields
08013ad0 g     O .rodata	00000028 DBGMCU_CR_fields
080143b8 g     O .rodata	00000018 CAN_RDT0R_fields
0800fd28 g     O .rodata	00000008 ADC1_AWD2CR_fields
08018638 g     O .rodata	00000008 DMA1_CMAR5_fields
08012210 g     O .rodata	00000020 CAN_RDL0R_fields
08019220 g     O .rodata	00000008 DMA1_CPAR4_fields
08005da8 g     F .text	000002dc strcmp
08016f60 g     O .rodata	00000080 TIM6_registers
08007dfc g     F .text	00000028 CmdAccel
08006f04 g     F .text	00000018 vfiprintf
080140f0 g     O .rodata	00000008 RTC_BKP11R_fields
0800b20c g     F .text	00000006 HAL_I2C_GetState
0800912c g     F .text	00000068 SystemInit
080151f8 g     O .rodata	00000048 TIM16_BDTR_fields
08007340 g     F .text	0000007a .hidden __nedf2
08013bc0 g     O .rodata	00000070 RTC_ALRMBR_fields
08014560 g     O .rodata	00000010 TIM2_DCR_fields
08008432 g     F .text	00000008 LSM303DLHC_MagGetDataStatus
0801c29c g     O .rodata	00000050 ADC1_CR_fields
0800ca6c g     F .text	00000000 _fini
0800846c g     F .text	0000001c CmdW
08009e6e g     F .text	0000000c HAL_PCD_Start
0800ca48  w    F .text	00000002 TIM1_TRG_COM_TIM17_IRQHandler
08012c50 g     O .rodata	00000020 EXTI_EMR2_fields
0800825c g     F .text	00000012 LSM303DLHC_AccReadID
08007788 g     F .text	0000036c atan
0800f4d8 g     O .rodata	00000008 RTC_WUTR_fields
08016a98 g     O .rodata	00000008 DMA1_CPAR6_fields
080184e8 g     O .rodata	00000008 CRC_INIT_fields
0800e480 g     O .rodata	00000088 RTC_ISR_fields
0800f020 g     O .rodata	00000010 TIM1_DCR_fields
0800eb08 g     O .rodata	00000038 PWR_CR_fields
080110b8 g     O .rodata	00000030 TIM2_EGR_fields
08000b3c g     F .text	0000000c atexit
08018640 g     O .rodata	00000080 OPAMP_OPAMP1_CR_fields
0800fd30 g     O .rodata	00000060 FPU_registers
0800f0b8 g     O .rodata	00000100 EXTI_IMR1_fields
08008b50 g     F .text	00000038 _write_r
0800f9d0 g     O .rodata	00000010 ADC1_SQR4_fields
10000000 g       .ccmram	00000000 _eccmram
08018ab0 g     O .rodata	00000028 ADC1_SQR3_fields
0800ca48  w    F .text	00000002 DMA1_Channel3_IRQHandler
08018fe0 g     O .rodata	00000080 DBGMCU_APB1FZ_fields
0800463c g     F .text	00000010 setlocale
08014770 g     O .rodata	00000060 SPI1_CR2_fields
08018af8 g     O .rodata	00000010 ADC1_CALFACT_fields
08017308 g     O .rodata	00000008 RTC_BKP28R_fields
08009ad6  w    F .text	00000024 HAL_InitTick
0800fb78 g     O .rodata	00000020 TIM1_CCR5_fields
0800c0a6 g     F .text	0000000e USBD_LL_SetUSBAddress
08018348 g     O .rodata	00000020 NVIC_IPR12_fields
0801c380 g     O .rodata	00000010 LED_PIN
20000008 g     O .data	00000004 _impure_ptr
08014038 g     O .rodata	00000018 CAN_TDT2R_fields
080168d0 g     O .rodata	00000008 ADC1_JDR4_fields
08016888 g     O .rodata	00000040 TIM15_CR2_fields
08003c1c g     F .text	00000148 __sflush_r
0800eaa8 g     O .rodata	00000060 RCC_CFGR_fields
08009b20  w    F .text	00000010 HAL_IncTick
0800f3f0 g     O .rodata	00000028 TIM17_EGR_fields
0800c056 g     F .text	0000000e USBD_LL_CloseEP
0800ca48  w    F .text	00000002 ADC4_IRQHandler
08004630 g     F .text	00000004 __locale_cjk_lang
08016690 g     O .rodata	000000a0 RTC_CR_fields
0800bc28 g     F .text	00000010 USBD_CtlContinueSendData
08017e58 g     O .rodata	000000e0 DMA1_ISR_fields
0800ffd8 g     O .rodata	00000100 CAN_F6R1_fields
0800c7a2 g     F .text	0000001c L3GD20_ReadID
0800ca48  w    F .text	00000002 WWDG_IRQHandler
0800aeee  w    F .text	00000002 HAL_I2C_MspInit
0800e2e0 g     O .rodata	00000100 EXTI_EMR1_fields
080125f0 g     O .rodata	00000020 NVIC_IPR6_fields
08019228 g     O .rodata	00000010 TIM2_CCR3_fields
08016cf0 g     O .rodata	00000060 DMA1_CCR6_fields
080139d0 g     O .rodata	00000080 GPIOA_MODER_fields
08016da0 g     O .rodata	00000080 OPAMP_OPAMP2_CR_fields
08005574 g     F .text	00000054 __ulp
08003fb0 g     F .text	00000014 __fp_unlock_all
08014fb8 g     O .rodata	00000078 TIM1_CR2_fields
080115e8 g     O .rodata	00000010 RTC_PRER_fields
08007ea4 g     F .text	00000058 magnetInit
0800c0b4 g     F .text	0000000e USBD_LL_Transmit
0800ca48  w    F .text	00000002 TIM2_IRQHandler
08000290 g     F .text	00000004 my_Loop
080184b8 g     O .rodata	00000020 TIM16_CCER_fields
08009dd2 g     F .text	0000009c HAL_PCD_Init
200009d8 g     O .data	00000043 USBD_CDC_CfgHSDesc
0801cf14 g     O .parsetable	0000000c CmdDecodeE
08010718 g     O .rodata	00000100 CAN_F26R2_fields
08014b48 g     O .rodata	00000100 CAN_F6R2_fields
20000000 g       .data	00000000 myTickCount
0800029c g     F .text	00000018 clearAllLeds
08010950 g     O .rodata	00000100 CAN_F16R1_fields
0800e508 g     O .rodata	00000008 RTC_BKP27R_fields
080140e0 g     O .rodata	00000010 EXTI_RTSR2_fields
08018c00 g     O .rodata	00000028 TIM16_CR2_fields
0800fe38 g     O .rodata	00000070 RTC_ALRMAR_fields
08016ff0 g     O .rodata	00000008 TIM1_ARR_fields
0800bbd6 g     F .text	00000038 USBD_GetString
0800c424 g     F .text	00000018 BSP_LED_Toggle
080101b0 g     O .rodata	00000100 CAN_F22R2_fields
0800e148 g     O .rodata	00000100 CAN_F24R1_fields
0800464c g     F .text	00000008 localeconv
0800bf64 g     F .text	0000000c HAL_PCD_SetupStageCallback
0801bd94 g     O .rodata	00000100 CAN_F5R1_fields
08007bc4 g     F .text	000001a0 __ieee754_sqrt
0800ca48  w    F .text	00000002 COMP7_IRQHandler
08004654 g     F .text	0000005e __swhatbuf_r
20008000 g       *ABS*	00000000 _estack
080084a8 g     F .text	0000010c parse
08015718 g     O .rodata	00000008 RTC_BKP2R_fields
0800ca48  w    F .text	00000002 COMP1_2_3_IRQHandler
08014928 g     O .rodata	00000100 CAN_F17R1_fields
0800ca48  w    F .text	00000002 EXTI1_IRQHandler
0800fb98 g     O .rodata	00000060 TIM8_BDTR_fields
080073dc g     F .text	00000012 .hidden __aeabi_dcmpeq
08014f28 g     O .rodata	00000050 USB_FS_USB_EP1R_fields
0800df18 g     O .rodata	000000b0 ADC1_2_CSR_fields
08014dd8 g     O .rodata	00000008 FPU_FPCAR_fields
20000ac4 g       .data	00000000 _edata
08013460 g     O .rodata	000001a0 TIM8_registers
08011760 g     O .rodata	00000008 RTC_BKP30R_fields
08014c48 g     O .rodata	00000018 TIM17_CCMR1_Input_fields
10000000 g       .ccmram	00000000 _sccmram
08014428 g     O .rodata	00000038 TIM16_CR1_fields
0801bfb4 g     O .rodata	00000100 CAN_F17R2_fields
080100f0 g     O .rodata	00000038 TIM15_CR1_fields
08007138 g     F .text	00000098 __fputwc
08008ebc g     F .text	00000270 CmdDecode
08014050 g     O .rodata	00000008 TIM15_RCR_fields
08011bd0 g     O .rodata	00000080 GPIOB_IDR_fields
0800e0a0 g     O .rodata	00000050 TIM1_CCMR3_Output_fields
08013bb8 g     O .rodata	00000008 TIM8_DMAR_fields
0800ef80 g     O .rodata	00000080 Flash_registers
08012dc0 g     O .rodata	00000010 TIM16_DCR_fields
0801bd2c g     O .rodata	00000040 RCC_APB2RSTR_fields
0800870c g     F .text	00000028 fetch_uint32_arg
08016fe0 g     O .rodata	00000010 RTC_ALRMBSSR_fields
08016e28 g     O .rodata	00000040 SYSCFG_RCR_fields
0800ca48  w    F .text	00000002 USART2_IRQHandler
080187e0 g     O .rodata	00000038 TIM17_CR1_fields
080153b0 g     O .rodata	00000260 NVIC_registers
0800ca48  w    F .text	00000002 COMP4_5_6_IRQHandler
08005d2c g     F .text	0000003c __swrite
08009194 g     F .text	000005dc HAL_RCC_OscConfig
200008c0 g     O .data	00000004 __malloc_trim_threshold
08013fe8 g     O .rodata	00000008 TIM17_CCR1_fields
08010e90 g     O .rodata	00000028 I2C1_TIMINGR_fields
08017398 g     O .rodata	00000008 USB_FS_BTABLE_fields
08012950 g     O .rodata	00000020 CAN_TDH1R_fields
08004628 g     F .text	00000008 __locale_msgcharset
08014590 g     O .rodata	000000a8 I2C1_CR1_fields
08006108 g     F .text	00000dfc _vfiprintf_r
08000000 g     O .isr_vector	00000000 g_pfnVectors
0800bc0e g     F .text	0000001a USBD_CtlSendData
08017878 g     O .rodata	00000100 CAN_F15R1_fields
08016ba8 g     O .rodata	00000010 ADC1_2_CDR_fields
08004580 g     F .text	00000052 _fwalk_reent
08005460 g     F .text	00000114 __mdiff
080187d8 g     O .rodata	00000008 TIM6_PSC_fields
08000a4c g     F .text	0000004e .hidden __aeabi_d2iz
08016450 g     O .rodata	00000008 RTC_BKP15R_fields
08010d38 g     O .rodata	00000020 PWR_registers
08017858 g     O .rodata	00000020 Flash_SR_fields
08018e40 g     O .rodata	00000008 ADC1_JDR2_fields
08013870 g     O .rodata	00000008 RTC_BKP20R_fields
20000004 g     O .data	00000004 __ctype_ptr__
08011df8 g     O .rodata	00000008 DMA1_CNDTR6_fields
0800e678 g     O .rodata	00000100 CAN_F19R2_fields
0800ca48  w    F .text	00000002 I2C2_ER_IRQHandler
08012dd0 g     O .rodata	00000040 ADC1_2_CCR_fields
0800ca48  w    F .text	00000002 DMA1_Channel2_IRQHandler
0800e590 g     O .rodata	000000e0 DAC_registers
08018f60 g     O .rodata	00000080 GPIOA_OSPEEDR_fields
0801bcfc g     O .rodata	00000030 TIM8_CCMR2_Input_fields
08003f90 g     F .text	00000002 __sfp_lock_release
0800e518 g     O .rodata	00000048 TIM17_BDTR_fields
08015390 g     O .rodata	00000020 CAN_RDH1R_fields
08014848 g     O .rodata	00000060 TIM2_CCER_fields
080184d8 g     O .rodata	00000010 DAC_DHR8RD_fields
08008734 g     F .text	00000020 fetch_string_arg
0800c384 g     F .text	00000068 BSP_LED_Init
08013038 g     O .rodata	00000080 GPIOB_MODER_fields
0801cf08 g     O .parsetable	0000000c CmdDumpE
0801c30c g     O .rodata	00000010 PLLMULFactorTable
080110e8 g     O .rodata	00000098 USART1_CR3_fields
08008d1c g     F .text	00000050 DecodeField
08018098 g     O .rodata	00000020 CAN_RI0R_fields
0800ca48  w    F .text	00000002 TIM8_BRK_IRQHandler
0800fb00 g     O .rodata	00000020 DBGMCU_APB2FZ_fields
0800f2d0 g     O .rodata	00000008 TIM1_PSC_fields
08008e1c g     F .text	00000048 DecodePrintPeripherals
08012e10 g     O .rodata	00000038 TIM15_CCER_fields
0800cf0c g     O .rodata	00000101 _ctype_
080150b8 g     O .rodata	00000008 DMA1_CMAR7_fields
08007780  w    F .text	00000002 .hidden __aeabi_idiv0
08007440 g     F .text	0000002c .hidden __unorddf2
08011c68 g     O .rodata	00000020 CAN_RI1R_fields
080188d0 g     O .rodata	00000028 SYSCFG_CFGR2_fields
080128c8 g     O .rodata	00000088 RCC_CIR_fields
0801cf50 g     O .parsetable	0000000c CmdStatsE
0800ca48  w    F .text	00000002 FLASH_IRQHandler
08012c08 g     O .rodata	00000008 TIM15_DMAR_fields
080188f8 g     O .rodata	00000010 EXTI_FTSR2_fields
08012cb8 g     O .rodata	00000100 CAN_F10R2_fields
08010e70 g     O .rodata	00000020 NVIC_IPR3_fields
08018af0 g     O .rodata	00000008 DMA1_CNDTR1_fields
0800f840 g     O .rodata	00000028 I2C1_TIMEOUTR_fields
0800eec0 g     O .rodata	00000048 TIM15_BDTR_fields
0800c0f4 g     F .text	0000000c USBD_VCP_LangIDStrDescriptor
20001398 g     O .bss	00000100 USBD_StrDesc
08008a68 g     F .text	000000e8 TerminalOutputBufferWrite
0800ca48  w    F .text	00000002 BusFault_Handler
0800ca48  w    F .text	00000002 USART1_IRQHandler
08012e48 g     O .rodata	00000050 COMP_COMP1_CSR_fields
0801c0b4 g     O .rodata	00000048 TIM8_EGR_fields
080046b4 g     F .text	00000088 __smakebuf_r
08013710 g     O .rodata	00000040 TIM15_SR_fields
08000fc0 g     F .text	000000dc strlen
08010e30 g     O .rodata	00000040 RCC_APB2ENR_fields
0800ca48  w    F .text	00000002 SPI3_IRQHandler
080073cc g     F .text	00000010 .hidden __aeabi_cdcmpeq
08007330 g     F .text	0000008a .hidden __gedf2
20001d08 g     O .bss	0000003c TimHandle
08014d20 g     O .rodata	00000060 DMA1_CCR3_fields
080106d0 g     O .rodata	00000048 TIM1_CR1_fields
08017af8 g     O .rodata	00000018 IWDG_SR_fields
08018860 g     O .rodata	00000050 USB_FS_USB_EP6R_fields
08015a60 g     O .rodata	00000110 TIM16_registers
0800ac6a  w    F .text	00000002 HAL_PCDEx_SetConnectionState
08012b08 g     O .rodata	00000100 TIM17_registers
0800afb0 g     F .text	00000128 HAL_I2C_Mem_Write
08011540 g     O .rodata	00000098 TIM1_CCER_fields
200008c4 g     O .data	00000004 __wctomb
08014148 g     O .rodata	00000100 CAN_F3R2_fields
0800fd90 g     O .rodata	00000080 DAC_CR_fields
0800ca48  w    F .text	00000002 I2C1_ER_IRQHandler
080060f4 g     F .text	00000012 __sprint_r
0800f980 g     O .rodata	00000050 USB_FS_USB_EP7R_fields
080132d8 g     O .rodata	00000088 I2C1_ISR_fields
0800e278 g     O .rodata	00000060 TIM1_CCMR2_Output_fields
0800f4b8 g     O .rodata	00000020 NVIC_IPR8_fields
0801c2fc g     O .rodata	00000010 PredivFactorTable
08018908 g     O .rodata	00000008 TSC_IOG3CR_fields
08000580 g     F .text	0000003a .hidden __aeabi_f2d
0800c0c2 g     F .text	0000000e USBD_LL_PrepareReceive
08011788 g     O .rodata	00000008 DMA1_CNDTR3_fields
0800c7be g     F .text	0000002c L3GD20_RebootCmd
0800ec50 g     O .rodata	00000100 CAN_F27R1_fields
08013af8 g     O .rodata	00000010 TSC_IER_fields
08012a28 g     O .rodata	000000e0 CAN_FFA1R_fields
080115d8 g     O .rodata	00000010 TIM8_CNT_fields
08007300 g     F .text	00000030 _wctomb_r
08012db8 g     O .rodata	00000008 ADC1_AWD3CR_fields
08018ad8 g     O .rodata	00000008 RTC_BKP25R_fields
08013ee0 g     O .rodata	00000100 TSC_IOCCR_fields
08014ab8 g     O .rodata	00000080 OPAMP_OPAMP3_CR_fields
0800be68 g     F .text	0000000c USBD_CDC_SetRxBuffer
0801bc2c g     O .rodata	000000d0 EXTI_SWIER1_fields
080002c0 g     F .text	0000027a .hidden __subdf3
0800e478 g     O .rodata	00000008 TIM16_ARR_fields
08013860 g     O .rodata	00000010 DBGMCU_IDCODE_fields
080013a8 g     F .text	00001728 _vfprintf_r
0800512c g     F .text	0000005a __lo0bits
08015798 g     O .rodata	00000020 EXTI_IMR2_fields
08016d98 g     O .rodata	00000008 TIM6_EGR_fields
08015108 g     O .rodata	00000008 SPI1_RXCRCR_fields
0801bf1c g     O .rodata	00000008 I2C1_PECR_fields
0800a38a g     F .text	000000fa HAL_PCD_EP_Receive
0801baf4 g     O .rodata	00000018 ADC1_OFR3_fields
08010610 g     O .rodata	00000058 COMP_COMP6_CSR_fields
08014370 g     O .rodata	00000008 RTC_BKP1R_fields
080169e8 g     O .rodata	00000060 TIM8_CCMR1_Output_fields
08016510 g     O .rodata	000000b0 GPIOB_registers
08008d6c g     F .text	00000064 DecodeRegister
08012c70 g     O .rodata	00000048 TIM8_SMCR_fields
08008c70 g     F .text	00000058 DecodeReadRegister
0800e828 g     O .rodata	00000050 CAN_MCR_fields
0800728c g     F .text	00000058 wcrtomb
0800e8b8 g     O .rodata	00000008 DAC_DOR1_fields
080089f0 g     F .text	0000004c TerminalRead
08011698 g     O .rodata	00000060 TSC_CR_fields
0800f838 g     O .rodata	00000008 TIM2_DMAR_fields
0800e560 g     O .rodata	00000030 TIM8_CCMR1_Input_fields
080083b2 g     F .text	0000001e LSM303DLHC_AccIT1Enable
0800ed58 g     O .rodata	00000100 CAN_F12R1_fields
0800ca48  w    F .text	00000002 USBWakeUp_IRQHandler
0801be9c g     O .rodata	00000008 TIM16_PSC_fields
08010f58 g     O .rodata	00000008 USART1_RDR_fields
080150d0 g     O .rodata	00000038 RCC_BDCR_fields
08002ad0 g     F .text	00000018 vfprintf
08017180 g     O .rodata	00000010 TIM17_DCR_fields
08019210 g     O .rodata	00000008 NVIC_ISPR1_fields
0800f0b0 g     O .rodata	00000008 NVIC_ICPR2_fields
0801ced8 g     O .parsetable	0000000c CmdAccelE
08018910 g     O .rodata	00000100 CAN_F21R2_fields
0800be58 g     F .text	00000010 USBD_CDC_SetTxBuffer
080071f8 g     F .text	00000040 fputwc
0800f9e0 g     O .rodata	00000070 SYSCFG_registers
080130b8 g     O .rodata	00000080 OPAMP_OPAMP4_CR_fields
0800474c g     F .text	00000010 free
08003f94 g     F .text	00000002 __sinit_lock_acquire
0800ca48  w    F .text	00000002 DMA2_Channel3_IRQHandler
08013600 g     O .rodata	000000d0 EXTI_FTSR1_fields
0800c1c0 g     F .text	0000001c USBD_VCP_InterfaceStrDescriptor
08012f38 g     O .rodata	00000100 CAN_F7R1_fields
08004fd4 g     F .text	00000080 __multadd
0800b700 g     F .text	0000005a USBD_LL_SetupStage
08004fc0 g     F .text	00000012 _Bfree
08007efc g     F .text	0000000a Error_Handler
08017ae0 g     O .rodata	00000010 WWDG_CR_fields
0800ca48  w    F .text	00000002 EXTI2_TSC_IRQHandler
0800f978 g     O .rodata	00000008 NVIC_STIR_fields
0800ca48  w    F .text	00000002 TIM1_BRK_TIM15_IRQHandler
080164c0 g     O .rodata	00000050 TIM8_CCMR3_Output_fields



Disassembly of section .text:

080001c0 <deregister_tm_clones>:
 80001c0:	4b04      	ldr	r3, [pc, #16]	; (80001d4 <deregister_tm_clones+0x14>)
 80001c2:	4805      	ldr	r0, [pc, #20]	; (80001d8 <deregister_tm_clones+0x18>)
 80001c4:	1a1b      	subs	r3, r3, r0
 80001c6:	2b06      	cmp	r3, #6
 80001c8:	d902      	bls.n	80001d0 <deregister_tm_clones+0x10>
 80001ca:	4b04      	ldr	r3, [pc, #16]	; (80001dc <deregister_tm_clones+0x1c>)
 80001cc:	b103      	cbz	r3, 80001d0 <deregister_tm_clones+0x10>
 80001ce:	4718      	bx	r3
 80001d0:	4770      	bx	lr
 80001d2:	bf00      	nop
 80001d4:	20000ac7 	.word	0x20000ac7
 80001d8:	20000ac4 	.word	0x20000ac4
 80001dc:	00000000 	.word	0x00000000

080001e0 <register_tm_clones>:
 80001e0:	4905      	ldr	r1, [pc, #20]	; (80001f8 <register_tm_clones+0x18>)
 80001e2:	4806      	ldr	r0, [pc, #24]	; (80001fc <register_tm_clones+0x1c>)
 80001e4:	1a09      	subs	r1, r1, r0
 80001e6:	1089      	asrs	r1, r1, #2
 80001e8:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 80001ec:	1049      	asrs	r1, r1, #1
 80001ee:	d002      	beq.n	80001f6 <register_tm_clones+0x16>
 80001f0:	4b03      	ldr	r3, [pc, #12]	; (8000200 <register_tm_clones+0x20>)
 80001f2:	b103      	cbz	r3, 80001f6 <register_tm_clones+0x16>
 80001f4:	4718      	bx	r3
 80001f6:	4770      	bx	lr
 80001f8:	20000ac4 	.word	0x20000ac4
 80001fc:	20000ac4 	.word	0x20000ac4
 8000200:	00000000 	.word	0x00000000

08000204 <__do_global_dtors_aux>:
 8000204:	b510      	push	{r4, lr}
 8000206:	4c06      	ldr	r4, [pc, #24]	; (8000220 <__do_global_dtors_aux+0x1c>)
 8000208:	7823      	ldrb	r3, [r4, #0]
 800020a:	b943      	cbnz	r3, 800021e <__do_global_dtors_aux+0x1a>
 800020c:	f7ff ffd8 	bl	80001c0 <deregister_tm_clones>
 8000210:	4b04      	ldr	r3, [pc, #16]	; (8000224 <__do_global_dtors_aux+0x20>)
 8000212:	b113      	cbz	r3, 800021a <__do_global_dtors_aux+0x16>
 8000214:	4804      	ldr	r0, [pc, #16]	; (8000228 <__do_global_dtors_aux+0x24>)
 8000216:	f3af 8000 	nop.w
 800021a:	2301      	movs	r3, #1
 800021c:	7023      	strb	r3, [r4, #0]
 800021e:	bd10      	pop	{r4, pc}
 8000220:	20000ac4 	.word	0x20000ac4
 8000224:	00000000 	.word	0x00000000
 8000228:	0800ca60 	.word	0x0800ca60

0800022c <frame_dummy>:
 800022c:	b508      	push	{r3, lr}
 800022e:	4b08      	ldr	r3, [pc, #32]	; (8000250 <frame_dummy+0x24>)
 8000230:	b11b      	cbz	r3, 800023a <frame_dummy+0xe>
 8000232:	4908      	ldr	r1, [pc, #32]	; (8000254 <frame_dummy+0x28>)
 8000234:	4808      	ldr	r0, [pc, #32]	; (8000258 <frame_dummy+0x2c>)
 8000236:	f3af 8000 	nop.w
 800023a:	4808      	ldr	r0, [pc, #32]	; (800025c <frame_dummy+0x30>)
 800023c:	6803      	ldr	r3, [r0, #0]
 800023e:	b913      	cbnz	r3, 8000246 <frame_dummy+0x1a>
 8000240:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000244:	e7cc      	b.n	80001e0 <register_tm_clones>
 8000246:	4b06      	ldr	r3, [pc, #24]	; (8000260 <frame_dummy+0x34>)
 8000248:	2b00      	cmp	r3, #0
 800024a:	d0f9      	beq.n	8000240 <frame_dummy+0x14>
 800024c:	4798      	blx	r3
 800024e:	e7f7      	b.n	8000240 <frame_dummy+0x14>
 8000250:	00000000 	.word	0x00000000
 8000254:	20000ac8 	.word	0x20000ac8
 8000258:	0800ca60 	.word	0x0800ca60
 800025c:	20000ac4 	.word	0x20000ac4
 8000260:	00000000 	.word	0x00000000

08000264 <mytest>:
    .type   mytest, %function   @@ - symbol type (not req)
@@ Declaration : int mytest(int x)
@@ Uses r0 for param 0
@@   r0: x
mytest:
    push {lr}
 8000264:	b500      	push	{lr}
    push {r1}
 8000266:	b402      	push	{r1}
    push {r0-r7}
 8000268:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
    ldr  r0, =0
 800026a:	2000      	movs	r0, #0
    bl   BSP_LED_Toggle           @@ call BSP function
 800026c:	f00c f8da 	bl	800c424 <BSP_LED_Toggle>
    pop  {r0-r7}
 8000270:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
    ldr  r1, =myTickCount
 8000272:	4909      	ldr	r1, [pc, #36]	; (8000298 <my_Init+0x4>)
    ldr  r0, [r1]
 8000274:	6808      	ldr	r0, [r1, #0]
    pop  {r1} 
 8000276:	bc02      	pop	{r1}
    pop  {pc}
 8000278:	bd00      	pop	{pc}
 800027a:	bf00      	nop

0800027c <my_Tick>:
    .thumb_func             @@ /
    .type   my_Tick, %function   @@ - symbol type (not req)
@@ Declaration : void my_Tick( void )
@@ Uses nothing
my_Tick:
    push {lr}
 800027c:	b500      	push	{lr}
    push {r0-r1}
 800027e:	b403      	push	{r0, r1}

    ldr  r1, =myTickCount
 8000280:	4905      	ldr	r1, [pc, #20]	; (8000298 <my_Init+0x4>)
    ldr  r0, [r1]
 8000282:	6808      	ldr	r0, [r1, #0]
    add  r0, r0, #1
 8000284:	f100 0001 	add.w	r0, r0, #1
    str  r0, [r1]
 8000288:	6008      	str	r0, [r1, #0]
    pop {r0-r1}
 800028a:	bc03      	pop	{r0, r1}
    pop  {pc}
 800028c:	bd00      	pop	{pc}
 800028e:	bf00      	nop

08000290 <my_Loop>:
    .thumb_func             @@ /
    .type   my_Loop, %function   @@ - symbol type (not req)
@@ Declaration : void my_Loop( void )
@@ Uses nothing
my_Loop:
    push {lr}
 8000290:	b500      	push	{lr}
    pop  {pc}
 8000292:	bd00      	pop	{pc}

08000294 <my_Init>:
    .thumb_func             @@ /
    .type   my_Init, %function   @@ - symbol type (not req)
@@ Declaration : void my_Init( void )
@@ Uses nothing
my_Init:
    push {lr}
 8000294:	b500      	push	{lr}
    pop  {pc}
 8000296:	bd00      	pop	{pc}
    ldr  r1, =myTickCount
 8000298:	20000000 	.word	0x20000000

0800029c <clearAllLeds>:
    .equ GPIOE_BSRR, 0x48001018		@@This register is used to set/reset the GPIOE bits
    .equ GPIOE_ODR, 0x48001014		@@This register is used to read the states of the GPIOE

@@ Declaration : void clearAllLeds(void)
clearAllLeds:
    push {lr}
 800029c:	b500      	push	{lr}
    push {r1}
 800029e:	b402      	push	{r1}
    push {r0-r7}
 80002a0:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}

    ldr r6, =GPIOE_BSRR			@@ store BSRR to r6
 80002a2:	4e04      	ldr	r6, [pc, #16]	; (80002b4 <clearAllLeds+0x18>)
    mov  r0, #0				@@ using movt will cause the lsb of r0 to be loaded with
 80002a4:	f04f 0000 	mov.w	r0, #0
    movt r0, #0xFF00			@@ 2200, so r0 will be 0x00002200
 80002a8:	f6cf 7000 	movt	r0, #65280	; 0xff00
    str r0,[r6]				@@ loading 0x00002200 to r0 will turn off led3 and led10F
 80002ac:	6030      	str	r0, [r6, #0]

    pop  {r0-r7}
 80002ae:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
    pop  {r1} 
 80002b0:	bc02      	pop	{r1}
    pop  {pc}
 80002b2:	bd00      	pop	{pc}
    ldr r6, =GPIOE_BSRR			@@ store BSRR to r6
 80002b4:	48001018 	.word	0x48001018

080002b8 <__aeabi_drsub>:
 80002b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002bc:	e002      	b.n	80002c4 <__adddf3>
 80002be:	bf00      	nop

080002c0 <__aeabi_dsub>:
 80002c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002c4 <__adddf3>:
 80002c4:	b530      	push	{r4, r5, lr}
 80002c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ce:	ea94 0f05 	teq	r4, r5
 80002d2:	bf08      	it	eq
 80002d4:	ea90 0f02 	teqeq	r0, r2
 80002d8:	bf1f      	itttt	ne
 80002da:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002de:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ea:	f000 80e2 	beq.w	80004b2 <__adddf3+0x1ee>
 80002ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f6:	bfb8      	it	lt
 80002f8:	426d      	neglt	r5, r5
 80002fa:	dd0c      	ble.n	8000316 <__adddf3+0x52>
 80002fc:	442c      	add	r4, r5
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	ea82 0000 	eor.w	r0, r2, r0
 800030a:	ea83 0101 	eor.w	r1, r3, r1
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	2d36      	cmp	r5, #54	; 0x36
 8000318:	bf88      	it	hi
 800031a:	bd30      	pophi	{r4, r5, pc}
 800031c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000320:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000324:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000328:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x70>
 800032e:	4240      	negs	r0, r0
 8000330:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000334:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000338:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800033c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000340:	d002      	beq.n	8000348 <__adddf3+0x84>
 8000342:	4252      	negs	r2, r2
 8000344:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000348:	ea94 0f05 	teq	r4, r5
 800034c:	f000 80a7 	beq.w	800049e <__adddf3+0x1da>
 8000350:	f1a4 0401 	sub.w	r4, r4, #1
 8000354:	f1d5 0e20 	rsbs	lr, r5, #32
 8000358:	db0d      	blt.n	8000376 <__adddf3+0xb2>
 800035a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035e:	fa22 f205 	lsr.w	r2, r2, r5
 8000362:	1880      	adds	r0, r0, r2
 8000364:	f141 0100 	adc.w	r1, r1, #0
 8000368:	fa03 f20e 	lsl.w	r2, r3, lr
 800036c:	1880      	adds	r0, r0, r2
 800036e:	fa43 f305 	asr.w	r3, r3, r5
 8000372:	4159      	adcs	r1, r3
 8000374:	e00e      	b.n	8000394 <__adddf3+0xd0>
 8000376:	f1a5 0520 	sub.w	r5, r5, #32
 800037a:	f10e 0e20 	add.w	lr, lr, #32
 800037e:	2a01      	cmp	r2, #1
 8000380:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000384:	bf28      	it	cs
 8000386:	f04c 0c02 	orrcs.w	ip, ip, #2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	18c0      	adds	r0, r0, r3
 8000390:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	d507      	bpl.n	80003aa <__adddf3+0xe6>
 800039a:	f04f 0e00 	mov.w	lr, #0
 800039e:	f1dc 0c00 	rsbs	ip, ip, #0
 80003a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003aa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ae:	d31b      	bcc.n	80003e8 <__adddf3+0x124>
 80003b0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003b4:	d30c      	bcc.n	80003d0 <__adddf3+0x10c>
 80003b6:	0849      	lsrs	r1, r1, #1
 80003b8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c0:	f104 0401 	add.w	r4, r4, #1
 80003c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003cc:	f080 809a 	bcs.w	8000504 <__adddf3+0x240>
 80003d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003d4:	bf08      	it	eq
 80003d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003da:	f150 0000 	adcs.w	r0, r0, #0
 80003de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003e2:	ea41 0105 	orr.w	r1, r1, r5
 80003e6:	bd30      	pop	{r4, r5, pc}
 80003e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ec:	4140      	adcs	r0, r0
 80003ee:	eb41 0101 	adc.w	r1, r1, r1
 80003f2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003f6:	f1a4 0401 	sub.w	r4, r4, #1
 80003fa:	d1e9      	bne.n	80003d0 <__adddf3+0x10c>
 80003fc:	f091 0f00 	teq	r1, #0
 8000400:	bf04      	itt	eq
 8000402:	4601      	moveq	r1, r0
 8000404:	2000      	moveq	r0, #0
 8000406:	fab1 f381 	clz	r3, r1
 800040a:	bf08      	it	eq
 800040c:	3320      	addeq	r3, #32
 800040e:	f1a3 030b 	sub.w	r3, r3, #11
 8000412:	f1b3 0220 	subs.w	r2, r3, #32
 8000416:	da0c      	bge.n	8000432 <__adddf3+0x16e>
 8000418:	320c      	adds	r2, #12
 800041a:	dd08      	ble.n	800042e <__adddf3+0x16a>
 800041c:	f102 0c14 	add.w	ip, r2, #20
 8000420:	f1c2 020c 	rsb	r2, r2, #12
 8000424:	fa01 f00c 	lsl.w	r0, r1, ip
 8000428:	fa21 f102 	lsr.w	r1, r1, r2
 800042c:	e00c      	b.n	8000448 <__adddf3+0x184>
 800042e:	f102 0214 	add.w	r2, r2, #20
 8000432:	bfd8      	it	le
 8000434:	f1c2 0c20 	rsble	ip, r2, #32
 8000438:	fa01 f102 	lsl.w	r1, r1, r2
 800043c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000440:	bfdc      	itt	le
 8000442:	ea41 010c 	orrle.w	r1, r1, ip
 8000446:	4090      	lslle	r0, r2
 8000448:	1ae4      	subs	r4, r4, r3
 800044a:	bfa2      	ittt	ge
 800044c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000450:	4329      	orrge	r1, r5
 8000452:	bd30      	popge	{r4, r5, pc}
 8000454:	ea6f 0404 	mvn.w	r4, r4
 8000458:	3c1f      	subs	r4, #31
 800045a:	da1c      	bge.n	8000496 <__adddf3+0x1d2>
 800045c:	340c      	adds	r4, #12
 800045e:	dc0e      	bgt.n	800047e <__adddf3+0x1ba>
 8000460:	f104 0414 	add.w	r4, r4, #20
 8000464:	f1c4 0220 	rsb	r2, r4, #32
 8000468:	fa20 f004 	lsr.w	r0, r0, r4
 800046c:	fa01 f302 	lsl.w	r3, r1, r2
 8000470:	ea40 0003 	orr.w	r0, r0, r3
 8000474:	fa21 f304 	lsr.w	r3, r1, r4
 8000478:	ea45 0103 	orr.w	r1, r5, r3
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	f1c4 040c 	rsb	r4, r4, #12
 8000482:	f1c4 0220 	rsb	r2, r4, #32
 8000486:	fa20 f002 	lsr.w	r0, r0, r2
 800048a:	fa01 f304 	lsl.w	r3, r1, r4
 800048e:	ea40 0003 	orr.w	r0, r0, r3
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	fa21 f004 	lsr.w	r0, r1, r4
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f094 0f00 	teq	r4, #0
 80004a2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004a6:	bf06      	itte	eq
 80004a8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004ac:	3401      	addeq	r4, #1
 80004ae:	3d01      	subne	r5, #1
 80004b0:	e74e      	b.n	8000350 <__adddf3+0x8c>
 80004b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b6:	bf18      	it	ne
 80004b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004bc:	d029      	beq.n	8000512 <__adddf3+0x24e>
 80004be:	ea94 0f05 	teq	r4, r5
 80004c2:	bf08      	it	eq
 80004c4:	ea90 0f02 	teqeq	r0, r2
 80004c8:	d005      	beq.n	80004d6 <__adddf3+0x212>
 80004ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ce:	bf04      	itt	eq
 80004d0:	4619      	moveq	r1, r3
 80004d2:	4610      	moveq	r0, r2
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	ea91 0f03 	teq	r1, r3
 80004da:	bf1e      	ittt	ne
 80004dc:	2100      	movne	r1, #0
 80004de:	2000      	movne	r0, #0
 80004e0:	bd30      	popne	{r4, r5, pc}
 80004e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e6:	d105      	bne.n	80004f4 <__adddf3+0x230>
 80004e8:	0040      	lsls	r0, r0, #1
 80004ea:	4149      	adcs	r1, r1
 80004ec:	bf28      	it	cs
 80004ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f8:	bf3c      	itt	cc
 80004fa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004fe:	bd30      	popcc	{r4, r5, pc}
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000508:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000516:	bf1a      	itte	ne
 8000518:	4619      	movne	r1, r3
 800051a:	4610      	movne	r0, r2
 800051c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000520:	bf1c      	itt	ne
 8000522:	460b      	movne	r3, r1
 8000524:	4602      	movne	r2, r0
 8000526:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800052a:	bf06      	itte	eq
 800052c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000530:	ea91 0f03 	teqeq	r1, r3
 8000534:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	bf00      	nop

0800053c <__aeabi_ui2d>:
 800053c:	f090 0f00 	teq	r0, #0
 8000540:	bf04      	itt	eq
 8000542:	2100      	moveq	r1, #0
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000550:	f04f 0500 	mov.w	r5, #0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e750      	b.n	80003fc <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_i2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000570:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000574:	bf48      	it	mi
 8000576:	4240      	negmi	r0, r0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e73e      	b.n	80003fc <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_f2d>:
 8000580:	0042      	lsls	r2, r0, #1
 8000582:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000586:	ea4f 0131 	mov.w	r1, r1, rrx
 800058a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058e:	bf1f      	itttt	ne
 8000590:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000594:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000598:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800059c:	4770      	bxne	lr
 800059e:	f092 0f00 	teq	r2, #0
 80005a2:	bf14      	ite	ne
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e720      	b.n	80003fc <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aedc 	beq.w	80003aa <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6c1      	b.n	80003aa <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2f>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa4:	bf24      	itt	cs
 8000aa6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aae:	d90d      	bls.n	8000acc <__aeabi_d2f+0x30>
 8000ab0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000abc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac4:	bf08      	it	eq
 8000ac6:	f020 0001 	biceq.w	r0, r0, #1
 8000aca:	4770      	bx	lr
 8000acc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad0:	d121      	bne.n	8000b16 <__aeabi_d2f+0x7a>
 8000ad2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ad6:	bfbc      	itt	lt
 8000ad8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	4770      	bxlt	lr
 8000ade:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ae6:	f1c2 0218 	rsb	r2, r2, #24
 8000aea:	f1c2 0c20 	rsb	ip, r2, #32
 8000aee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af2:	fa20 f002 	lsr.w	r0, r0, r2
 8000af6:	bf18      	it	ne
 8000af8:	f040 0001 	orrne.w	r0, r0, #1
 8000afc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b08:	ea40 000c 	orr.w	r0, r0, ip
 8000b0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b14:	e7cc      	b.n	8000ab0 <__aeabi_d2f+0x14>
 8000b16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1a:	d107      	bne.n	8000b2c <__aeabi_d2f+0x90>
 8000b1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b20:	bf1e      	ittt	ne
 8000b22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2a:	4770      	bxne	lr
 8000b2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <atexit>:
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	4601      	mov	r1, r0
 8000b40:	461a      	mov	r2, r3
 8000b42:	4618      	mov	r0, r3
 8000b44:	f002 b86a 	b.w	8002c1c <__register_exitproc>

08000b48 <__errno>:
 8000b48:	4b01      	ldr	r3, [pc, #4]	; (8000b50 <__errno+0x8>)
 8000b4a:	6818      	ldr	r0, [r3, #0]
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	20000008 	.word	0x20000008

08000b54 <__libc_fini_array>:
 8000b54:	b538      	push	{r3, r4, r5, lr}
 8000b56:	4d07      	ldr	r5, [pc, #28]	; (8000b74 <__libc_fini_array+0x20>)
 8000b58:	4c07      	ldr	r4, [pc, #28]	; (8000b78 <__libc_fini_array+0x24>)
 8000b5a:	1b2c      	subs	r4, r5, r4
 8000b5c:	10a4      	asrs	r4, r4, #2
 8000b5e:	d005      	beq.n	8000b6c <__libc_fini_array+0x18>
 8000b60:	3c01      	subs	r4, #1
 8000b62:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8000b66:	4798      	blx	r3
 8000b68:	2c00      	cmp	r4, #0
 8000b6a:	d1f9      	bne.n	8000b60 <__libc_fini_array+0xc>
 8000b6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b70:	f00b bf7c 	b.w	800ca6c <_fini>
 8000b74:	0801c414 	.word	0x0801c414
 8000b78:	0801c410 	.word	0x0801c410

08000b7c <__libc_init_array>:
 8000b7c:	b570      	push	{r4, r5, r6, lr}
 8000b7e:	4e0f      	ldr	r6, [pc, #60]	; (8000bbc <__libc_init_array+0x40>)
 8000b80:	4d0f      	ldr	r5, [pc, #60]	; (8000bc0 <__libc_init_array+0x44>)
 8000b82:	1b76      	subs	r6, r6, r5
 8000b84:	10b6      	asrs	r6, r6, #2
 8000b86:	bf18      	it	ne
 8000b88:	2400      	movne	r4, #0
 8000b8a:	d005      	beq.n	8000b98 <__libc_init_array+0x1c>
 8000b8c:	3401      	adds	r4, #1
 8000b8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b92:	4798      	blx	r3
 8000b94:	42a6      	cmp	r6, r4
 8000b96:	d1f9      	bne.n	8000b8c <__libc_init_array+0x10>
 8000b98:	4e0a      	ldr	r6, [pc, #40]	; (8000bc4 <__libc_init_array+0x48>)
 8000b9a:	4d0b      	ldr	r5, [pc, #44]	; (8000bc8 <__libc_init_array+0x4c>)
 8000b9c:	1b76      	subs	r6, r6, r5
 8000b9e:	f00b ff5f 	bl	800ca60 <_init>
 8000ba2:	10b6      	asrs	r6, r6, #2
 8000ba4:	bf18      	it	ne
 8000ba6:	2400      	movne	r4, #0
 8000ba8:	d006      	beq.n	8000bb8 <__libc_init_array+0x3c>
 8000baa:	3401      	adds	r4, #1
 8000bac:	f855 3b04 	ldr.w	r3, [r5], #4
 8000bb0:	4798      	blx	r3
 8000bb2:	42a6      	cmp	r6, r4
 8000bb4:	d1f9      	bne.n	8000baa <__libc_init_array+0x2e>
 8000bb6:	bd70      	pop	{r4, r5, r6, pc}
 8000bb8:	bd70      	pop	{r4, r5, r6, pc}
 8000bba:	bf00      	nop
 8000bbc:	0801c408 	.word	0x0801c408
 8000bc0:	0801c408 	.word	0x0801c408
 8000bc4:	0801c410 	.word	0x0801c410
 8000bc8:	0801c408 	.word	0x0801c408

08000bcc <memset>:
 8000bcc:	b470      	push	{r4, r5, r6}
 8000bce:	0784      	lsls	r4, r0, #30
 8000bd0:	d046      	beq.n	8000c60 <memset+0x94>
 8000bd2:	1e54      	subs	r4, r2, #1
 8000bd4:	2a00      	cmp	r2, #0
 8000bd6:	d041      	beq.n	8000c5c <memset+0x90>
 8000bd8:	b2cd      	uxtb	r5, r1
 8000bda:	4603      	mov	r3, r0
 8000bdc:	e002      	b.n	8000be4 <memset+0x18>
 8000bde:	1e62      	subs	r2, r4, #1
 8000be0:	b3e4      	cbz	r4, 8000c5c <memset+0x90>
 8000be2:	4614      	mov	r4, r2
 8000be4:	f803 5b01 	strb.w	r5, [r3], #1
 8000be8:	079a      	lsls	r2, r3, #30
 8000bea:	d1f8      	bne.n	8000bde <memset+0x12>
 8000bec:	2c03      	cmp	r4, #3
 8000bee:	d92e      	bls.n	8000c4e <memset+0x82>
 8000bf0:	b2cd      	uxtb	r5, r1
 8000bf2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8000bf6:	2c0f      	cmp	r4, #15
 8000bf8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8000bfc:	d919      	bls.n	8000c32 <memset+0x66>
 8000bfe:	f103 0210 	add.w	r2, r3, #16
 8000c02:	4626      	mov	r6, r4
 8000c04:	3e10      	subs	r6, #16
 8000c06:	2e0f      	cmp	r6, #15
 8000c08:	f842 5c10 	str.w	r5, [r2, #-16]
 8000c0c:	f842 5c0c 	str.w	r5, [r2, #-12]
 8000c10:	f842 5c08 	str.w	r5, [r2, #-8]
 8000c14:	f842 5c04 	str.w	r5, [r2, #-4]
 8000c18:	f102 0210 	add.w	r2, r2, #16
 8000c1c:	d8f2      	bhi.n	8000c04 <memset+0x38>
 8000c1e:	f1a4 0210 	sub.w	r2, r4, #16
 8000c22:	f022 020f 	bic.w	r2, r2, #15
 8000c26:	f004 040f 	and.w	r4, r4, #15
 8000c2a:	3210      	adds	r2, #16
 8000c2c:	2c03      	cmp	r4, #3
 8000c2e:	4413      	add	r3, r2
 8000c30:	d90d      	bls.n	8000c4e <memset+0x82>
 8000c32:	461e      	mov	r6, r3
 8000c34:	4622      	mov	r2, r4
 8000c36:	3a04      	subs	r2, #4
 8000c38:	2a03      	cmp	r2, #3
 8000c3a:	f846 5b04 	str.w	r5, [r6], #4
 8000c3e:	d8fa      	bhi.n	8000c36 <memset+0x6a>
 8000c40:	1f22      	subs	r2, r4, #4
 8000c42:	f022 0203 	bic.w	r2, r2, #3
 8000c46:	3204      	adds	r2, #4
 8000c48:	4413      	add	r3, r2
 8000c4a:	f004 0403 	and.w	r4, r4, #3
 8000c4e:	b12c      	cbz	r4, 8000c5c <memset+0x90>
 8000c50:	b2c9      	uxtb	r1, r1
 8000c52:	441c      	add	r4, r3
 8000c54:	f803 1b01 	strb.w	r1, [r3], #1
 8000c58:	42a3      	cmp	r3, r4
 8000c5a:	d1fb      	bne.n	8000c54 <memset+0x88>
 8000c5c:	bc70      	pop	{r4, r5, r6}
 8000c5e:	4770      	bx	lr
 8000c60:	4614      	mov	r4, r2
 8000c62:	4603      	mov	r3, r0
 8000c64:	e7c2      	b.n	8000bec <memset+0x20>
 8000c66:	bf00      	nop

08000c68 <_printf_r>:
 8000c68:	b40e      	push	{r1, r2, r3}
 8000c6a:	b500      	push	{lr}
 8000c6c:	b082      	sub	sp, #8
 8000c6e:	ab03      	add	r3, sp, #12
 8000c70:	6881      	ldr	r1, [r0, #8]
 8000c72:	f853 2b04 	ldr.w	r2, [r3], #4
 8000c76:	9301      	str	r3, [sp, #4]
 8000c78:	f000 fb96 	bl	80013a8 <_vfprintf_r>
 8000c7c:	b002      	add	sp, #8
 8000c7e:	f85d eb04 	ldr.w	lr, [sp], #4
 8000c82:	b003      	add	sp, #12
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <printf>:
 8000c88:	b40f      	push	{r0, r1, r2, r3}
 8000c8a:	b500      	push	{lr}
 8000c8c:	4907      	ldr	r1, [pc, #28]	; (8000cac <printf+0x24>)
 8000c8e:	b083      	sub	sp, #12
 8000c90:	ab04      	add	r3, sp, #16
 8000c92:	6808      	ldr	r0, [r1, #0]
 8000c94:	f853 2b04 	ldr.w	r2, [r3], #4
 8000c98:	6881      	ldr	r1, [r0, #8]
 8000c9a:	9301      	str	r3, [sp, #4]
 8000c9c:	f000 fb84 	bl	80013a8 <_vfprintf_r>
 8000ca0:	b003      	add	sp, #12
 8000ca2:	f85d eb04 	ldr.w	lr, [sp], #4
 8000ca6:	b004      	add	sp, #16
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	20000008 	.word	0x20000008

08000cb0 <_putchar_r>:
 8000cb0:	6882      	ldr	r2, [r0, #8]
 8000cb2:	f004 bdef 	b.w	8005894 <_putc_r>
 8000cb6:	bf00      	nop

08000cb8 <putchar>:
 8000cb8:	4b03      	ldr	r3, [pc, #12]	; (8000cc8 <putchar+0x10>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4601      	mov	r1, r0
 8000cbe:	689a      	ldr	r2, [r3, #8]
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f004 bde7 	b.w	8005894 <_putc_r>
 8000cc6:	bf00      	nop
 8000cc8:	20000008 	.word	0x20000008

08000ccc <_puts_r>:
 8000ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cce:	4605      	mov	r5, r0
 8000cd0:	b089      	sub	sp, #36	; 0x24
 8000cd2:	4608      	mov	r0, r1
 8000cd4:	460c      	mov	r4, r1
 8000cd6:	f000 f973 	bl	8000fc0 <strlen>
 8000cda:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8000cdc:	4f14      	ldr	r7, [pc, #80]	; (8000d30 <_puts_r+0x64>)
 8000cde:	9404      	str	r4, [sp, #16]
 8000ce0:	2601      	movs	r6, #1
 8000ce2:	1c44      	adds	r4, r0, #1
 8000ce4:	a904      	add	r1, sp, #16
 8000ce6:	2202      	movs	r2, #2
 8000ce8:	9403      	str	r4, [sp, #12]
 8000cea:	9005      	str	r0, [sp, #20]
 8000cec:	68ac      	ldr	r4, [r5, #8]
 8000cee:	9706      	str	r7, [sp, #24]
 8000cf0:	9607      	str	r6, [sp, #28]
 8000cf2:	9101      	str	r1, [sp, #4]
 8000cf4:	9202      	str	r2, [sp, #8]
 8000cf6:	b1b3      	cbz	r3, 8000d26 <_puts_r+0x5a>
 8000cf8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000cfc:	049a      	lsls	r2, r3, #18
 8000cfe:	d406      	bmi.n	8000d0e <_puts_r+0x42>
 8000d00:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000d02:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000d0a:	81a3      	strh	r3, [r4, #12]
 8000d0c:	6662      	str	r2, [r4, #100]	; 0x64
 8000d0e:	4621      	mov	r1, r4
 8000d10:	4628      	mov	r0, r5
 8000d12:	aa01      	add	r2, sp, #4
 8000d14:	f003 fa8c 	bl	8004230 <__sfvwrite_r>
 8000d18:	2800      	cmp	r0, #0
 8000d1a:	bf14      	ite	ne
 8000d1c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000d20:	200a      	moveq	r0, #10
 8000d22:	b009      	add	sp, #36	; 0x24
 8000d24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d26:	4628      	mov	r0, r5
 8000d28:	f003 f92c 	bl	8003f84 <__sinit>
 8000d2c:	e7e4      	b.n	8000cf8 <_puts_r+0x2c>
 8000d2e:	bf00      	nop
 8000d30:	0801c394 	.word	0x0801c394

08000d34 <puts>:
 8000d34:	4b02      	ldr	r3, [pc, #8]	; (8000d40 <puts+0xc>)
 8000d36:	4601      	mov	r1, r0
 8000d38:	6818      	ldr	r0, [r3, #0]
 8000d3a:	f7ff bfc7 	b.w	8000ccc <_puts_r>
 8000d3e:	bf00      	nop
 8000d40:	20000008 	.word	0x20000008

08000d44 <setvbuf>:
 8000d44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d48:	4c51      	ldr	r4, [pc, #324]	; (8000e90 <setvbuf+0x14c>)
 8000d4a:	6825      	ldr	r5, [r4, #0]
 8000d4c:	b083      	sub	sp, #12
 8000d4e:	4604      	mov	r4, r0
 8000d50:	460f      	mov	r7, r1
 8000d52:	4690      	mov	r8, r2
 8000d54:	461e      	mov	r6, r3
 8000d56:	b115      	cbz	r5, 8000d5e <setvbuf+0x1a>
 8000d58:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d079      	beq.n	8000e52 <setvbuf+0x10e>
 8000d5e:	f1b8 0f02 	cmp.w	r8, #2
 8000d62:	d004      	beq.n	8000d6e <setvbuf+0x2a>
 8000d64:	f1b8 0f01 	cmp.w	r8, #1
 8000d68:	d87f      	bhi.n	8000e6a <setvbuf+0x126>
 8000d6a:	2e00      	cmp	r6, #0
 8000d6c:	db7d      	blt.n	8000e6a <setvbuf+0x126>
 8000d6e:	4621      	mov	r1, r4
 8000d70:	4628      	mov	r0, r5
 8000d72:	f002 fff7 	bl	8003d64 <_fflush_r>
 8000d76:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000d78:	b141      	cbz	r1, 8000d8c <setvbuf+0x48>
 8000d7a:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d002      	beq.n	8000d88 <setvbuf+0x44>
 8000d82:	4628      	mov	r0, r5
 8000d84:	f003 f96c 	bl	8004060 <_free_r>
 8000d88:	2300      	movs	r3, #0
 8000d8a:	6323      	str	r3, [r4, #48]	; 0x30
 8000d8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000d90:	2200      	movs	r2, #0
 8000d92:	61a2      	str	r2, [r4, #24]
 8000d94:	6062      	str	r2, [r4, #4]
 8000d96:	061a      	lsls	r2, r3, #24
 8000d98:	d454      	bmi.n	8000e44 <setvbuf+0x100>
 8000d9a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8000d9e:	f023 0303 	bic.w	r3, r3, #3
 8000da2:	f1b8 0f02 	cmp.w	r8, #2
 8000da6:	81a3      	strh	r3, [r4, #12]
 8000da8:	d039      	beq.n	8000e1e <setvbuf+0xda>
 8000daa:	ab01      	add	r3, sp, #4
 8000dac:	466a      	mov	r2, sp
 8000dae:	4621      	mov	r1, r4
 8000db0:	4628      	mov	r0, r5
 8000db2:	f003 fc4f 	bl	8004654 <__swhatbuf_r>
 8000db6:	89a3      	ldrh	r3, [r4, #12]
 8000db8:	4318      	orrs	r0, r3
 8000dba:	81a0      	strh	r0, [r4, #12]
 8000dbc:	b326      	cbz	r6, 8000e08 <setvbuf+0xc4>
 8000dbe:	b327      	cbz	r7, 8000e0a <setvbuf+0xc6>
 8000dc0:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d04d      	beq.n	8000e62 <setvbuf+0x11e>
 8000dc6:	9b00      	ldr	r3, [sp, #0]
 8000dc8:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 8000dcc:	6027      	str	r7, [r4, #0]
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	bf1c      	itt	ne
 8000dd2:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
 8000dd6:	81a0      	strhne	r0, [r4, #12]
 8000dd8:	f1b8 0f01 	cmp.w	r8, #1
 8000ddc:	bf08      	it	eq
 8000dde:	f040 0001 	orreq.w	r0, r0, #1
 8000de2:	b283      	uxth	r3, r0
 8000de4:	bf08      	it	eq
 8000de6:	81a0      	strheq	r0, [r4, #12]
 8000de8:	f003 0008 	and.w	r0, r3, #8
 8000dec:	b280      	uxth	r0, r0
 8000dee:	6127      	str	r7, [r4, #16]
 8000df0:	6166      	str	r6, [r4, #20]
 8000df2:	b318      	cbz	r0, 8000e3c <setvbuf+0xf8>
 8000df4:	f013 0001 	ands.w	r0, r3, #1
 8000df8:	d02f      	beq.n	8000e5a <setvbuf+0x116>
 8000dfa:	2000      	movs	r0, #0
 8000dfc:	4276      	negs	r6, r6
 8000dfe:	61a6      	str	r6, [r4, #24]
 8000e00:	60a0      	str	r0, [r4, #8]
 8000e02:	b003      	add	sp, #12
 8000e04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000e08:	9e00      	ldr	r6, [sp, #0]
 8000e0a:	4630      	mov	r0, r6
 8000e0c:	f003 fc96 	bl	800473c <malloc>
 8000e10:	4607      	mov	r7, r0
 8000e12:	b368      	cbz	r0, 8000e70 <setvbuf+0x12c>
 8000e14:	89a3      	ldrh	r3, [r4, #12]
 8000e16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e1a:	81a3      	strh	r3, [r4, #12]
 8000e1c:	e7d0      	b.n	8000dc0 <setvbuf+0x7c>
 8000e1e:	2000      	movs	r0, #0
 8000e20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000e24:	f043 0302 	orr.w	r3, r3, #2
 8000e28:	2500      	movs	r5, #0
 8000e2a:	2101      	movs	r1, #1
 8000e2c:	81a3      	strh	r3, [r4, #12]
 8000e2e:	60a5      	str	r5, [r4, #8]
 8000e30:	6022      	str	r2, [r4, #0]
 8000e32:	6122      	str	r2, [r4, #16]
 8000e34:	6161      	str	r1, [r4, #20]
 8000e36:	b003      	add	sp, #12
 8000e38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000e3c:	60a0      	str	r0, [r4, #8]
 8000e3e:	b003      	add	sp, #12
 8000e40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000e44:	6921      	ldr	r1, [r4, #16]
 8000e46:	4628      	mov	r0, r5
 8000e48:	f003 f90a 	bl	8004060 <_free_r>
 8000e4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000e50:	e7a3      	b.n	8000d9a <setvbuf+0x56>
 8000e52:	4628      	mov	r0, r5
 8000e54:	f003 f896 	bl	8003f84 <__sinit>
 8000e58:	e781      	b.n	8000d5e <setvbuf+0x1a>
 8000e5a:	60a6      	str	r6, [r4, #8]
 8000e5c:	b003      	add	sp, #12
 8000e5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000e62:	4628      	mov	r0, r5
 8000e64:	f003 f88e 	bl	8003f84 <__sinit>
 8000e68:	e7ad      	b.n	8000dc6 <setvbuf+0x82>
 8000e6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e6e:	e7e2      	b.n	8000e36 <setvbuf+0xf2>
 8000e70:	f8dd 9000 	ldr.w	r9, [sp]
 8000e74:	45b1      	cmp	r9, r6
 8000e76:	d006      	beq.n	8000e86 <setvbuf+0x142>
 8000e78:	4648      	mov	r0, r9
 8000e7a:	f003 fc5f 	bl	800473c <malloc>
 8000e7e:	4607      	mov	r7, r0
 8000e80:	b108      	cbz	r0, 8000e86 <setvbuf+0x142>
 8000e82:	464e      	mov	r6, r9
 8000e84:	e7c6      	b.n	8000e14 <setvbuf+0xd0>
 8000e86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000e8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e8e:	e7c7      	b.n	8000e20 <setvbuf+0xdc>
 8000e90:	20000008 	.word	0x20000008

08000e94 <strcasecmp>:
 8000e94:	4b11      	ldr	r3, [pc, #68]	; (8000edc <strcasecmp+0x48>)
 8000e96:	b430      	push	{r4, r5}
 8000e98:	681d      	ldr	r5, [r3, #0]
 8000e9a:	f810 4b01 	ldrb.w	r4, [r0], #1
 8000e9e:	192b      	adds	r3, r5, r4
 8000ea0:	4622      	mov	r2, r4
 8000ea2:	785b      	ldrb	r3, [r3, #1]
 8000ea4:	f003 0303 	and.w	r3, r3, #3
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000eae:	bf08      	it	eq
 8000eb0:	f104 0220 	addeq.w	r2, r4, #32
 8000eb4:	18ec      	adds	r4, r5, r3
 8000eb6:	7864      	ldrb	r4, [r4, #1]
 8000eb8:	f004 0403 	and.w	r4, r4, #3
 8000ebc:	2c01      	cmp	r4, #1
 8000ebe:	d006      	beq.n	8000ece <strcasecmp+0x3a>
 8000ec0:	1ad2      	subs	r2, r2, r3
 8000ec2:	d101      	bne.n	8000ec8 <strcasecmp+0x34>
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d1e8      	bne.n	8000e9a <strcasecmp+0x6>
 8000ec8:	4610      	mov	r0, r2
 8000eca:	bc30      	pop	{r4, r5}
 8000ecc:	4770      	bx	lr
 8000ece:	3320      	adds	r3, #32
 8000ed0:	1ad2      	subs	r2, r2, r3
 8000ed2:	d0e2      	beq.n	8000e9a <strcasecmp+0x6>
 8000ed4:	4610      	mov	r0, r2
 8000ed6:	bc30      	pop	{r4, r5}
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	20000004 	.word	0x20000004

08000ee0 <strcpy>:
 8000ee0:	ea80 0201 	eor.w	r2, r0, r1
 8000ee4:	4684      	mov	ip, r0
 8000ee6:	f012 0f03 	tst.w	r2, #3
 8000eea:	d14f      	bne.n	8000f8c <strcpy+0xac>
 8000eec:	f011 0f03 	tst.w	r1, #3
 8000ef0:	d132      	bne.n	8000f58 <strcpy+0x78>
 8000ef2:	f84d 4d04 	str.w	r4, [sp, #-4]!
 8000ef6:	f011 0f04 	tst.w	r1, #4
 8000efa:	f851 3b04 	ldr.w	r3, [r1], #4
 8000efe:	d00b      	beq.n	8000f18 <strcpy+0x38>
 8000f00:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 8000f04:	439a      	bics	r2, r3
 8000f06:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8000f0a:	bf04      	itt	eq
 8000f0c:	f84c 3b04 	streq.w	r3, [ip], #4
 8000f10:	f851 3b04 	ldreq.w	r3, [r1], #4
 8000f14:	d116      	bne.n	8000f44 <strcpy+0x64>
 8000f16:	bf00      	nop
 8000f18:	f851 4b04 	ldr.w	r4, [r1], #4
 8000f1c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 8000f20:	439a      	bics	r2, r3
 8000f22:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8000f26:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 8000f2a:	d10b      	bne.n	8000f44 <strcpy+0x64>
 8000f2c:	f84c 3b04 	str.w	r3, [ip], #4
 8000f30:	43a2      	bics	r2, r4
 8000f32:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8000f36:	bf04      	itt	eq
 8000f38:	f851 3b04 	ldreq.w	r3, [r1], #4
 8000f3c:	f84c 4b04 	streq.w	r4, [ip], #4
 8000f40:	d0ea      	beq.n	8000f18 <strcpy+0x38>
 8000f42:	4623      	mov	r3, r4
 8000f44:	f80c 3b01 	strb.w	r3, [ip], #1
 8000f48:	f013 0fff 	tst.w	r3, #255	; 0xff
 8000f4c:	ea4f 2333 	mov.w	r3, r3, ror #8
 8000f50:	d1f8      	bne.n	8000f44 <strcpy+0x64>
 8000f52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	f011 0f01 	tst.w	r1, #1
 8000f5c:	d006      	beq.n	8000f6c <strcpy+0x8c>
 8000f5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000f62:	f80c 2b01 	strb.w	r2, [ip], #1
 8000f66:	2a00      	cmp	r2, #0
 8000f68:	bf08      	it	eq
 8000f6a:	4770      	bxeq	lr
 8000f6c:	f011 0f02 	tst.w	r1, #2
 8000f70:	d0bf      	beq.n	8000ef2 <strcpy+0x12>
 8000f72:	f831 2b02 	ldrh.w	r2, [r1], #2
 8000f76:	f012 0fff 	tst.w	r2, #255	; 0xff
 8000f7a:	bf16      	itet	ne
 8000f7c:	f82c 2b02 	strhne.w	r2, [ip], #2
 8000f80:	f88c 2000 	strbeq.w	r2, [ip]
 8000f84:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
 8000f88:	d1b3      	bne.n	8000ef2 <strcpy+0x12>
 8000f8a:	4770      	bx	lr
 8000f8c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000f90:	f80c 2b01 	strb.w	r2, [ip], #1
 8000f94:	2a00      	cmp	r2, #0
 8000f96:	d1f9      	bne.n	8000f8c <strcpy+0xac>
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
	...

08000fc0 <strlen>:
 8000fc0:	f890 f000 	pld	[r0]
 8000fc4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 8000fc8:	f020 0107 	bic.w	r1, r0, #7
 8000fcc:	f06f 0c00 	mvn.w	ip, #0
 8000fd0:	f010 0407 	ands.w	r4, r0, #7
 8000fd4:	f891 f020 	pld	[r1, #32]
 8000fd8:	f040 8049 	bne.w	800106e <strlen+0xae>
 8000fdc:	f04f 0400 	mov.w	r4, #0
 8000fe0:	f06f 0007 	mvn.w	r0, #7
 8000fe4:	e9d1 2300 	ldrd	r2, r3, [r1]
 8000fe8:	f891 f040 	pld	[r1, #64]	; 0x40
 8000fec:	f100 0008 	add.w	r0, r0, #8
 8000ff0:	fa82 f24c 	uadd8	r2, r2, ip
 8000ff4:	faa4 f28c 	sel	r2, r4, ip
 8000ff8:	fa83 f34c 	uadd8	r3, r3, ip
 8000ffc:	faa2 f38c 	sel	r3, r2, ip
 8001000:	bb4b      	cbnz	r3, 8001056 <strlen+0x96>
 8001002:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8001006:	fa82 f24c 	uadd8	r2, r2, ip
 800100a:	f100 0008 	add.w	r0, r0, #8
 800100e:	faa4 f28c 	sel	r2, r4, ip
 8001012:	fa83 f34c 	uadd8	r3, r3, ip
 8001016:	faa2 f38c 	sel	r3, r2, ip
 800101a:	b9e3      	cbnz	r3, 8001056 <strlen+0x96>
 800101c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 8001020:	fa82 f24c 	uadd8	r2, r2, ip
 8001024:	f100 0008 	add.w	r0, r0, #8
 8001028:	faa4 f28c 	sel	r2, r4, ip
 800102c:	fa83 f34c 	uadd8	r3, r3, ip
 8001030:	faa2 f38c 	sel	r3, r2, ip
 8001034:	b97b      	cbnz	r3, 8001056 <strlen+0x96>
 8001036:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 800103a:	f101 0120 	add.w	r1, r1, #32
 800103e:	fa82 f24c 	uadd8	r2, r2, ip
 8001042:	f100 0008 	add.w	r0, r0, #8
 8001046:	faa4 f28c 	sel	r2, r4, ip
 800104a:	fa83 f34c 	uadd8	r3, r3, ip
 800104e:	faa2 f38c 	sel	r3, r2, ip
 8001052:	2b00      	cmp	r3, #0
 8001054:	d0c6      	beq.n	8000fe4 <strlen+0x24>
 8001056:	2a00      	cmp	r2, #0
 8001058:	bf04      	itt	eq
 800105a:	3004      	addeq	r0, #4
 800105c:	461a      	moveq	r2, r3
 800105e:	ba12      	rev	r2, r2
 8001060:	fab2 f282 	clz	r2, r2
 8001064:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 8001068:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 800106c:	4770      	bx	lr
 800106e:	e9d1 2300 	ldrd	r2, r3, [r1]
 8001072:	f004 0503 	and.w	r5, r4, #3
 8001076:	f1c4 0000 	rsb	r0, r4, #0
 800107a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 800107e:	f014 0f04 	tst.w	r4, #4
 8001082:	f891 f040 	pld	[r1, #64]	; 0x40
 8001086:	fa0c f505 	lsl.w	r5, ip, r5
 800108a:	ea62 0205 	orn	r2, r2, r5
 800108e:	bf1c      	itt	ne
 8001090:	ea63 0305 	ornne	r3, r3, r5
 8001094:	4662      	movne	r2, ip
 8001096:	f04f 0400 	mov.w	r4, #0
 800109a:	e7a9      	b.n	8000ff0 <strlen+0x30>

0800109c <strtok>:
 800109c:	4b02      	ldr	r3, [pc, #8]	; (80010a8 <strtok+0xc>)
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	2301      	movs	r3, #1
 80010a2:	325c      	adds	r2, #92	; 0x5c
 80010a4:	f000 b802 	b.w	80010ac <__strtok_r>
 80010a8:	20000008 	.word	0x20000008

080010ac <__strtok_r>:
 80010ac:	b4f0      	push	{r4, r5, r6, r7}
 80010ae:	b320      	cbz	r0, 80010fa <__strtok_r+0x4e>
 80010b0:	4607      	mov	r7, r0
 80010b2:	460d      	mov	r5, r1
 80010b4:	f817 6b01 	ldrb.w	r6, [r7], #1
 80010b8:	e001      	b.n	80010be <__strtok_r+0x12>
 80010ba:	42a6      	cmp	r6, r4
 80010bc:	d016      	beq.n	80010ec <__strtok_r+0x40>
 80010be:	f815 4b01 	ldrb.w	r4, [r5], #1
 80010c2:	2c00      	cmp	r4, #0
 80010c4:	d1f9      	bne.n	80010ba <__strtok_r+0xe>
 80010c6:	b1ee      	cbz	r6, 8001104 <__strtok_r+0x58>
 80010c8:	463e      	mov	r6, r7
 80010ca:	460c      	mov	r4, r1
 80010cc:	f816 5b01 	ldrb.w	r5, [r6], #1
 80010d0:	e000      	b.n	80010d4 <__strtok_r+0x28>
 80010d2:	b173      	cbz	r3, 80010f2 <__strtok_r+0x46>
 80010d4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80010d8:	429d      	cmp	r5, r3
 80010da:	d1fa      	bne.n	80010d2 <__strtok_r+0x26>
 80010dc:	b15d      	cbz	r5, 80010f6 <__strtok_r+0x4a>
 80010de:	2300      	movs	r3, #0
 80010e0:	703b      	strb	r3, [r7, #0]
 80010e2:	6016      	str	r6, [r2, #0]
 80010e4:	4606      	mov	r6, r0
 80010e6:	4630      	mov	r0, r6
 80010e8:	bcf0      	pop	{r4, r5, r6, r7}
 80010ea:	4770      	bx	lr
 80010ec:	b163      	cbz	r3, 8001108 <__strtok_r+0x5c>
 80010ee:	4638      	mov	r0, r7
 80010f0:	e7de      	b.n	80010b0 <__strtok_r+0x4>
 80010f2:	4637      	mov	r7, r6
 80010f4:	e7e8      	b.n	80010c8 <__strtok_r+0x1c>
 80010f6:	462e      	mov	r6, r5
 80010f8:	e7f3      	b.n	80010e2 <__strtok_r+0x36>
 80010fa:	6810      	ldr	r0, [r2, #0]
 80010fc:	2800      	cmp	r0, #0
 80010fe:	d1d7      	bne.n	80010b0 <__strtok_r+0x4>
 8001100:	4606      	mov	r6, r0
 8001102:	e7f0      	b.n	80010e6 <__strtok_r+0x3a>
 8001104:	6016      	str	r6, [r2, #0]
 8001106:	e7ee      	b.n	80010e6 <__strtok_r+0x3a>
 8001108:	6017      	str	r7, [r2, #0]
 800110a:	4606      	mov	r6, r0
 800110c:	7003      	strb	r3, [r0, #0]
 800110e:	e7ea      	b.n	80010e6 <__strtok_r+0x3a>

08001110 <strtok_r>:
 8001110:	2301      	movs	r3, #1
 8001112:	f7ff bfcb 	b.w	80010ac <__strtok_r>
 8001116:	bf00      	nop

08001118 <_strtol_r>:
 8001118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800111c:	4c47      	ldr	r4, [pc, #284]	; (800123c <_strtol_r+0x124>)
 800111e:	4683      	mov	fp, r0
 8001120:	460e      	mov	r6, r1
 8001122:	f8d4 e000 	ldr.w	lr, [r4]
 8001126:	e000      	b.n	800112a <_strtol_r+0x12>
 8001128:	4626      	mov	r6, r4
 800112a:	4634      	mov	r4, r6
 800112c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8001130:	eb0e 0005 	add.w	r0, lr, r5
 8001134:	7840      	ldrb	r0, [r0, #1]
 8001136:	f000 0008 	and.w	r0, r0, #8
 800113a:	f000 08ff 	and.w	r8, r0, #255	; 0xff
 800113e:	2800      	cmp	r0, #0
 8001140:	d1f2      	bne.n	8001128 <_strtol_r+0x10>
 8001142:	2d2d      	cmp	r5, #45	; 0x2d
 8001144:	d05c      	beq.n	8001200 <_strtol_r+0xe8>
 8001146:	2d2b      	cmp	r5, #43	; 0x2b
 8001148:	bf04      	itt	eq
 800114a:	7875      	ldrbeq	r5, [r6, #1]
 800114c:	1cb4      	addeq	r4, r6, #2
 800114e:	2b00      	cmp	r3, #0
 8001150:	d03e      	beq.n	80011d0 <_strtol_r+0xb8>
 8001152:	2b10      	cmp	r3, #16
 8001154:	d060      	beq.n	8001218 <_strtol_r+0x100>
 8001156:	469a      	mov	sl, r3
 8001158:	f1b8 0f00 	cmp.w	r8, #0
 800115c:	bf0c      	ite	eq
 800115e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001162:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 8001166:	2700      	movs	r7, #0
 8001168:	fbb0 f9fa 	udiv	r9, r0, sl
 800116c:	46bc      	mov	ip, r7
 800116e:	fb0a 0019 	mls	r0, sl, r9, r0
 8001172:	e00c      	b.n	800118e <_strtol_r+0x76>
 8001174:	3d30      	subs	r5, #48	; 0x30
 8001176:	42ab      	cmp	r3, r5
 8001178:	dd19      	ble.n	80011ae <_strtol_r+0x96>
 800117a:	1c7e      	adds	r6, r7, #1
 800117c:	d005      	beq.n	800118a <_strtol_r+0x72>
 800117e:	45cc      	cmp	ip, r9
 8001180:	d823      	bhi.n	80011ca <_strtol_r+0xb2>
 8001182:	d020      	beq.n	80011c6 <_strtol_r+0xae>
 8001184:	fb0a 5c0c 	mla	ip, sl, ip, r5
 8001188:	2701      	movs	r7, #1
 800118a:	f814 5b01 	ldrb.w	r5, [r4], #1
 800118e:	eb0e 0605 	add.w	r6, lr, r5
 8001192:	7876      	ldrb	r6, [r6, #1]
 8001194:	f016 0f04 	tst.w	r6, #4
 8001198:	d1ec      	bne.n	8001174 <_strtol_r+0x5c>
 800119a:	f016 0603 	ands.w	r6, r6, #3
 800119e:	d006      	beq.n	80011ae <_strtol_r+0x96>
 80011a0:	2e01      	cmp	r6, #1
 80011a2:	bf14      	ite	ne
 80011a4:	2657      	movne	r6, #87	; 0x57
 80011a6:	2637      	moveq	r6, #55	; 0x37
 80011a8:	1bad      	subs	r5, r5, r6
 80011aa:	42ab      	cmp	r3, r5
 80011ac:	dce5      	bgt.n	800117a <_strtol_r+0x62>
 80011ae:	1c7b      	adds	r3, r7, #1
 80011b0:	d016      	beq.n	80011e0 <_strtol_r+0xc8>
 80011b2:	f1b8 0f00 	cmp.w	r8, #0
 80011b6:	d110      	bne.n	80011da <_strtol_r+0xc2>
 80011b8:	4660      	mov	r0, ip
 80011ba:	2a00      	cmp	r2, #0
 80011bc:	d039      	beq.n	8001232 <_strtol_r+0x11a>
 80011be:	b9df      	cbnz	r7, 80011f8 <_strtol_r+0xe0>
 80011c0:	6011      	str	r1, [r2, #0]
 80011c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80011c6:	4285      	cmp	r5, r0
 80011c8:	dddc      	ble.n	8001184 <_strtol_r+0x6c>
 80011ca:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80011ce:	e7dc      	b.n	800118a <_strtol_r+0x72>
 80011d0:	2d30      	cmp	r5, #48	; 0x30
 80011d2:	d01a      	beq.n	800120a <_strtol_r+0xf2>
 80011d4:	230a      	movs	r3, #10
 80011d6:	469a      	mov	sl, r3
 80011d8:	e7be      	b.n	8001158 <_strtol_r+0x40>
 80011da:	f1cc 0c00 	rsb	ip, ip, #0
 80011de:	e7eb      	b.n	80011b8 <_strtol_r+0xa0>
 80011e0:	f1b8 0f00 	cmp.w	r8, #0
 80011e4:	f04f 0322 	mov.w	r3, #34	; 0x22
 80011e8:	bf0c      	ite	eq
 80011ea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80011ee:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 80011f2:	f8cb 3000 	str.w	r3, [fp]
 80011f6:	b1f2      	cbz	r2, 8001236 <_strtol_r+0x11e>
 80011f8:	1e61      	subs	r1, r4, #1
 80011fa:	6011      	str	r1, [r2, #0]
 80011fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001200:	1cb4      	adds	r4, r6, #2
 8001202:	7875      	ldrb	r5, [r6, #1]
 8001204:	f04f 0801 	mov.w	r8, #1
 8001208:	e7a1      	b.n	800114e <_strtol_r+0x36>
 800120a:	7823      	ldrb	r3, [r4, #0]
 800120c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8001210:	2b58      	cmp	r3, #88	; 0x58
 8001212:	d008      	beq.n	8001226 <_strtol_r+0x10e>
 8001214:	2308      	movs	r3, #8
 8001216:	e79e      	b.n	8001156 <_strtol_r+0x3e>
 8001218:	2d30      	cmp	r5, #48	; 0x30
 800121a:	d19c      	bne.n	8001156 <_strtol_r+0x3e>
 800121c:	7820      	ldrb	r0, [r4, #0]
 800121e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8001222:	2858      	cmp	r0, #88	; 0x58
 8001224:	d197      	bne.n	8001156 <_strtol_r+0x3e>
 8001226:	f04f 0a10 	mov.w	sl, #16
 800122a:	7865      	ldrb	r5, [r4, #1]
 800122c:	4653      	mov	r3, sl
 800122e:	3402      	adds	r4, #2
 8001230:	e792      	b.n	8001158 <_strtol_r+0x40>
 8001232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800123a:	bf00      	nop
 800123c:	20000004 	.word	0x20000004

08001240 <strtol>:
 8001240:	b410      	push	{r4}
 8001242:	4c04      	ldr	r4, [pc, #16]	; (8001254 <strtol+0x14>)
 8001244:	4613      	mov	r3, r2
 8001246:	460a      	mov	r2, r1
 8001248:	4601      	mov	r1, r0
 800124a:	6820      	ldr	r0, [r4, #0]
 800124c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001250:	f7ff bf62 	b.w	8001118 <_strtol_r>
 8001254:	20000008 	.word	0x20000008

08001258 <_strtoul_r>:
 8001258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800125c:	4c49      	ldr	r4, [pc, #292]	; (8001384 <_strtoul_r+0x12c>)
 800125e:	4682      	mov	sl, r0
 8001260:	460e      	mov	r6, r1
 8001262:	f8d4 e000 	ldr.w	lr, [r4]
 8001266:	e000      	b.n	800126a <_strtoul_r+0x12>
 8001268:	4626      	mov	r6, r4
 800126a:	4634      	mov	r4, r6
 800126c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8001270:	eb0e 0005 	add.w	r0, lr, r5
 8001274:	7840      	ldrb	r0, [r0, #1]
 8001276:	f000 0008 	and.w	r0, r0, #8
 800127a:	f000 0cff 	and.w	ip, r0, #255	; 0xff
 800127e:	2800      	cmp	r0, #0
 8001280:	d1f2      	bne.n	8001268 <_strtoul_r+0x10>
 8001282:	2d2d      	cmp	r5, #45	; 0x2d
 8001284:	d054      	beq.n	8001330 <_strtoul_r+0xd8>
 8001286:	2d2b      	cmp	r5, #43	; 0x2b
 8001288:	bf04      	itt	eq
 800128a:	7875      	ldrbeq	r5, [r6, #1]
 800128c:	1cb4      	addeq	r4, r6, #2
 800128e:	b15b      	cbz	r3, 80012a8 <_strtoul_r+0x50>
 8001290:	2b10      	cmp	r3, #16
 8001292:	d05e      	beq.n	8001352 <_strtoul_r+0xfa>
 8001294:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8001298:	fbb8 f8f3 	udiv	r8, r8, r3
 800129c:	fb03 fb08 	mul.w	fp, r3, r8
 80012a0:	ea6f 0b0b 	mvn.w	fp, fp
 80012a4:	4699      	mov	r9, r3
 80012a6:	e007      	b.n	80012b8 <_strtoul_r+0x60>
 80012a8:	2d30      	cmp	r5, #48	; 0x30
 80012aa:	d046      	beq.n	800133a <_strtoul_r+0xe2>
 80012ac:	230a      	movs	r3, #10
 80012ae:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 8001388 <_strtoul_r+0x130>
 80012b2:	4699      	mov	r9, r3
 80012b4:	f04f 0b05 	mov.w	fp, #5
 80012b8:	2700      	movs	r7, #0
 80012ba:	4638      	mov	r0, r7
 80012bc:	e00c      	b.n	80012d8 <_strtoul_r+0x80>
 80012be:	3d30      	subs	r5, #48	; 0x30
 80012c0:	42ab      	cmp	r3, r5
 80012c2:	dd19      	ble.n	80012f8 <_strtoul_r+0xa0>
 80012c4:	1c7e      	adds	r6, r7, #1
 80012c6:	d005      	beq.n	80012d4 <_strtoul_r+0x7c>
 80012c8:	4540      	cmp	r0, r8
 80012ca:	d822      	bhi.n	8001312 <_strtoul_r+0xba>
 80012cc:	d01f      	beq.n	800130e <_strtoul_r+0xb6>
 80012ce:	fb09 5000 	mla	r0, r9, r0, r5
 80012d2:	2701      	movs	r7, #1
 80012d4:	f814 5b01 	ldrb.w	r5, [r4], #1
 80012d8:	eb0e 0605 	add.w	r6, lr, r5
 80012dc:	7876      	ldrb	r6, [r6, #1]
 80012de:	f016 0f04 	tst.w	r6, #4
 80012e2:	d1ec      	bne.n	80012be <_strtoul_r+0x66>
 80012e4:	f016 0603 	ands.w	r6, r6, #3
 80012e8:	d006      	beq.n	80012f8 <_strtoul_r+0xa0>
 80012ea:	2e01      	cmp	r6, #1
 80012ec:	bf14      	ite	ne
 80012ee:	2657      	movne	r6, #87	; 0x57
 80012f0:	2637      	moveq	r6, #55	; 0x37
 80012f2:	1bad      	subs	r5, r5, r6
 80012f4:	42ab      	cmp	r3, r5
 80012f6:	dce5      	bgt.n	80012c4 <_strtoul_r+0x6c>
 80012f8:	2f00      	cmp	r7, #0
 80012fa:	db0f      	blt.n	800131c <_strtoul_r+0xc4>
 80012fc:	f1bc 0f00 	cmp.w	ip, #0
 8001300:	d000      	beq.n	8001304 <_strtoul_r+0xac>
 8001302:	4240      	negs	r0, r0
 8001304:	b142      	cbz	r2, 8001318 <_strtoul_r+0xc0>
 8001306:	b97f      	cbnz	r7, 8001328 <_strtoul_r+0xd0>
 8001308:	6011      	str	r1, [r2, #0]
 800130a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800130e:	455d      	cmp	r5, fp
 8001310:	dddd      	ble.n	80012ce <_strtoul_r+0x76>
 8001312:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001316:	e7dd      	b.n	80012d4 <_strtoul_r+0x7c>
 8001318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800131c:	2322      	movs	r3, #34	; 0x22
 800131e:	f8ca 3000 	str.w	r3, [sl]
 8001322:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001326:	b35a      	cbz	r2, 8001380 <_strtoul_r+0x128>
 8001328:	1e61      	subs	r1, r4, #1
 800132a:	6011      	str	r1, [r2, #0]
 800132c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001330:	1cb4      	adds	r4, r6, #2
 8001332:	7875      	ldrb	r5, [r6, #1]
 8001334:	f04f 0c01 	mov.w	ip, #1
 8001338:	e7a9      	b.n	800128e <_strtoul_r+0x36>
 800133a:	7823      	ldrb	r3, [r4, #0]
 800133c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8001340:	2b58      	cmp	r3, #88	; 0x58
 8001342:	d00d      	beq.n	8001360 <_strtoul_r+0x108>
 8001344:	2308      	movs	r3, #8
 8001346:	4699      	mov	r9, r3
 8001348:	f04f 0b07 	mov.w	fp, #7
 800134c:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
 8001350:	e7b2      	b.n	80012b8 <_strtoul_r+0x60>
 8001352:	2d30      	cmp	r5, #48	; 0x30
 8001354:	d10e      	bne.n	8001374 <_strtoul_r+0x11c>
 8001356:	7820      	ldrb	r0, [r4, #0]
 8001358:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800135c:	2858      	cmp	r0, #88	; 0x58
 800135e:	d109      	bne.n	8001374 <_strtoul_r+0x11c>
 8001360:	f04f 0910 	mov.w	r9, #16
 8001364:	7865      	ldrb	r5, [r4, #1]
 8001366:	464b      	mov	r3, r9
 8001368:	f04f 0b0f 	mov.w	fp, #15
 800136c:	3402      	adds	r4, #2
 800136e:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
 8001372:	e7a1      	b.n	80012b8 <_strtoul_r+0x60>
 8001374:	f04f 0b0f 	mov.w	fp, #15
 8001378:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
 800137c:	4699      	mov	r9, r3
 800137e:	e79b      	b.n	80012b8 <_strtoul_r+0x60>
 8001380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001384:	20000004 	.word	0x20000004
 8001388:	19999999 	.word	0x19999999

0800138c <strtoul>:
 800138c:	b410      	push	{r4}
 800138e:	4c04      	ldr	r4, [pc, #16]	; (80013a0 <strtoul+0x14>)
 8001390:	4613      	mov	r3, r2
 8001392:	460a      	mov	r2, r1
 8001394:	4601      	mov	r1, r0
 8001396:	6820      	ldr	r0, [r4, #0]
 8001398:	f85d 4b04 	ldr.w	r4, [sp], #4
 800139c:	f7ff bf5c 	b.w	8001258 <_strtoul_r>
 80013a0:	20000008 	.word	0x20000008
 80013a4:	00000000 	.word	0x00000000

080013a8 <_vfprintf_r>:
 80013a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013ac:	b0c1      	sub	sp, #260	; 0x104
 80013ae:	461c      	mov	r4, r3
 80013b0:	9104      	str	r1, [sp, #16]
 80013b2:	4616      	mov	r6, r2
 80013b4:	4605      	mov	r5, r0
 80013b6:	9006      	str	r0, [sp, #24]
 80013b8:	f003 f93c 	bl	8004634 <_localeconv_r>
 80013bc:	6803      	ldr	r3, [r0, #0]
 80013be:	9313      	str	r3, [sp, #76]	; 0x4c
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff fdfd 	bl	8000fc0 <strlen>
 80013c6:	940a      	str	r4, [sp, #40]	; 0x28
 80013c8:	9012      	str	r0, [sp, #72]	; 0x48
 80013ca:	b11d      	cbz	r5, 80013d4 <_vfprintf_r+0x2c>
 80013cc:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	f000 8124 	beq.w	800161c <_vfprintf_r+0x274>
 80013d4:	9804      	ldr	r0, [sp, #16]
 80013d6:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
 80013da:	b293      	uxth	r3, r2
 80013dc:	0499      	lsls	r1, r3, #18
 80013de:	d407      	bmi.n	80013f0 <_vfprintf_r+0x48>
 80013e0:	6e41      	ldr	r1, [r0, #100]	; 0x64
 80013e2:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
 80013e6:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 80013ea:	8183      	strh	r3, [r0, #12]
 80013ec:	6641      	str	r1, [r0, #100]	; 0x64
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	071a      	lsls	r2, r3, #28
 80013f2:	f140 80de 	bpl.w	80015b2 <_vfprintf_r+0x20a>
 80013f6:	9a04      	ldr	r2, [sp, #16]
 80013f8:	6912      	ldr	r2, [r2, #16]
 80013fa:	2a00      	cmp	r2, #0
 80013fc:	f000 80d9 	beq.w	80015b2 <_vfprintf_r+0x20a>
 8001400:	f003 031a 	and.w	r3, r3, #26
 8001404:	2b0a      	cmp	r3, #10
 8001406:	f000 80e2 	beq.w	80015ce <_vfprintf_r+0x226>
 800140a:	ed9f 7b87 	vldr	d7, [pc, #540]	; 8001628 <_vfprintf_r+0x280>
 800140e:	2300      	movs	r3, #0
 8001410:	9325      	str	r3, [sp, #148]	; 0x94
 8001412:	930e      	str	r3, [sp, #56]	; 0x38
 8001414:	9324      	str	r3, [sp, #144]	; 0x90
 8001416:	9315      	str	r3, [sp, #84]	; 0x54
 8001418:	9307      	str	r3, [sp, #28]
 800141a:	4b85      	ldr	r3, [pc, #532]	; (8001630 <_vfprintf_r+0x288>)
 800141c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8001420:	f103 0a10 	add.w	sl, r3, #16
 8001424:	ab30      	add	r3, sp, #192	; 0xc0
 8001426:	9323      	str	r3, [sp, #140]	; 0x8c
 8001428:	4699      	mov	r9, r3
 800142a:	46b0      	mov	r8, r6
 800142c:	f898 3000 	ldrb.w	r3, [r8]
 8001430:	4644      	mov	r4, r8
 8001432:	b1eb      	cbz	r3, 8001470 <_vfprintf_r+0xc8>
 8001434:	2b25      	cmp	r3, #37	; 0x25
 8001436:	d102      	bne.n	800143e <_vfprintf_r+0x96>
 8001438:	e01a      	b.n	8001470 <_vfprintf_r+0xc8>
 800143a:	2b25      	cmp	r3, #37	; 0x25
 800143c:	d003      	beq.n	8001446 <_vfprintf_r+0x9e>
 800143e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8001442:	2b00      	cmp	r3, #0
 8001444:	d1f9      	bne.n	800143a <_vfprintf_r+0x92>
 8001446:	ebc8 0504 	rsb	r5, r8, r4
 800144a:	b18d      	cbz	r5, 8001470 <_vfprintf_r+0xc8>
 800144c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800144e:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8001450:	f8c9 8000 	str.w	r8, [r9]
 8001454:	3301      	adds	r3, #1
 8001456:	442a      	add	r2, r5
 8001458:	2b07      	cmp	r3, #7
 800145a:	f8c9 5004 	str.w	r5, [r9, #4]
 800145e:	9225      	str	r2, [sp, #148]	; 0x94
 8001460:	9324      	str	r3, [sp, #144]	; 0x90
 8001462:	f300 80c2 	bgt.w	80015ea <_vfprintf_r+0x242>
 8001466:	f109 0908 	add.w	r9, r9, #8
 800146a:	9b07      	ldr	r3, [sp, #28]
 800146c:	442b      	add	r3, r5
 800146e:	9307      	str	r3, [sp, #28]
 8001470:	7823      	ldrb	r3, [r4, #0]
 8001472:	2b00      	cmp	r3, #0
 8001474:	f000 80c2 	beq.w	80015fc <_vfprintf_r+0x254>
 8001478:	2300      	movs	r3, #0
 800147a:	461a      	mov	r2, r3
 800147c:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8001480:	4619      	mov	r1, r3
 8001482:	9308      	str	r3, [sp, #32]
 8001484:	9303      	str	r3, [sp, #12]
 8001486:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800148a:	7863      	ldrb	r3, [r4, #1]
 800148c:	f104 0801 	add.w	r8, r4, #1
 8001490:	465d      	mov	r5, fp
 8001492:	f108 0801 	add.w	r8, r8, #1
 8001496:	f1a3 0020 	sub.w	r0, r3, #32
 800149a:	2858      	cmp	r0, #88	; 0x58
 800149c:	f200 8458 	bhi.w	8001d50 <_vfprintf_r+0x9a8>
 80014a0:	e8df f010 	tbh	[pc, r0, lsl #1]
 80014a4:	0456040e 	.word	0x0456040e
 80014a8:	04170456 	.word	0x04170456
 80014ac:	04560456 	.word	0x04560456
 80014b0:	04560456 	.word	0x04560456
 80014b4:	04560456 	.word	0x04560456
 80014b8:	04480361 	.word	0x04480361
 80014bc:	005d0456 	.word	0x005d0456
 80014c0:	04560108 	.word	0x04560108
 80014c4:	036f0124 	.word	0x036f0124
 80014c8:	036f036f 	.word	0x036f036f
 80014cc:	036f036f 	.word	0x036f036f
 80014d0:	036f036f 	.word	0x036f036f
 80014d4:	036f036f 	.word	0x036f036f
 80014d8:	04560456 	.word	0x04560456
 80014dc:	04560456 	.word	0x04560456
 80014e0:	04560456 	.word	0x04560456
 80014e4:	04560456 	.word	0x04560456
 80014e8:	04560456 	.word	0x04560456
 80014ec:	039c037f 	.word	0x039c037f
 80014f0:	039c0456 	.word	0x039c0456
 80014f4:	04560456 	.word	0x04560456
 80014f8:	04560456 	.word	0x04560456
 80014fc:	045603ea 	.word	0x045603ea
 8001500:	012b0456 	.word	0x012b0456
 8001504:	04560456 	.word	0x04560456
 8001508:	04560456 	.word	0x04560456
 800150c:	01540456 	.word	0x01540456
 8001510:	04560456 	.word	0x04560456
 8001514:	045602b3 	.word	0x045602b3
 8001518:	04560456 	.word	0x04560456
 800151c:	04560456 	.word	0x04560456
 8001520:	04560456 	.word	0x04560456
 8001524:	04560456 	.word	0x04560456
 8001528:	02f40456 	.word	0x02f40456
 800152c:	039c030e 	.word	0x039c030e
 8001530:	039c039c 	.word	0x039c039c
 8001534:	030e033e 	.word	0x030e033e
 8001538:	04560456 	.word	0x04560456
 800153c:	04560345 	.word	0x04560345
 8001540:	00ca034f 	.word	0x00ca034f
 8001544:	041f0064 	.word	0x041f0064
 8001548:	04270456 	.word	0x04270456
 800154c:	03f10456 	.word	0x03f10456
 8001550:	04560456 	.word	0x04560456
 8001554:	03f9      	.short	0x03f9
 8001556:	9808      	ldr	r0, [sp, #32]
 8001558:	930a      	str	r3, [sp, #40]	; 0x28
 800155a:	4240      	negs	r0, r0
 800155c:	9008      	str	r0, [sp, #32]
 800155e:	9b03      	ldr	r3, [sp, #12]
 8001560:	f043 0304 	orr.w	r3, r3, #4
 8001564:	9303      	str	r3, [sp, #12]
 8001566:	f898 3000 	ldrb.w	r3, [r8]
 800156a:	e792      	b.n	8001492 <_vfprintf_r+0xea>
 800156c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800156e:	46ab      	mov	fp, r5
 8001570:	2100      	movs	r1, #0
 8001572:	6804      	ldr	r4, [r0, #0]
 8001574:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 8001578:	1d07      	adds	r7, r0, #4
 800157a:	9803      	ldr	r0, [sp, #12]
 800157c:	2330      	movs	r3, #48	; 0x30
 800157e:	2278      	movs	r2, #120	; 0x78
 8001580:	458b      	cmp	fp, r1
 8001582:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 8001586:	f04f 0500 	mov.w	r5, #0
 800158a:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
 800158e:	f040 0302 	orr.w	r3, r0, #2
 8001592:	f2c0 83fa 	blt.w	8001d8a <_vfprintf_r+0x9e2>
 8001596:	f020 0380 	bic.w	r3, r0, #128	; 0x80
 800159a:	f043 0302 	orr.w	r3, r3, #2
 800159e:	9303      	str	r3, [sp, #12]
 80015a0:	ea54 0305 	orrs.w	r3, r4, r5
 80015a4:	970a      	str	r7, [sp, #40]	; 0x28
 80015a6:	f000 83cb 	beq.w	8001d40 <_vfprintf_r+0x998>
 80015aa:	460f      	mov	r7, r1
 80015ac:	920d      	str	r2, [sp, #52]	; 0x34
 80015ae:	4821      	ldr	r0, [pc, #132]	; (8001634 <_vfprintf_r+0x28c>)
 80015b0:	e25c      	b.n	8001a6c <_vfprintf_r+0x6c4>
 80015b2:	9904      	ldr	r1, [sp, #16]
 80015b4:	9806      	ldr	r0, [sp, #24]
 80015b6:	f001 facd 	bl	8002b54 <__swsetup_r>
 80015ba:	2800      	cmp	r0, #0
 80015bc:	f041 803c 	bne.w	8002638 <_vfprintf_r+0x1290>
 80015c0:	9b04      	ldr	r3, [sp, #16]
 80015c2:	899b      	ldrh	r3, [r3, #12]
 80015c4:	f003 031a 	and.w	r3, r3, #26
 80015c8:	2b0a      	cmp	r3, #10
 80015ca:	f47f af1e 	bne.w	800140a <_vfprintf_r+0x62>
 80015ce:	9904      	ldr	r1, [sp, #16]
 80015d0:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	f6ff af18 	blt.w	800140a <_vfprintf_r+0x62>
 80015da:	4623      	mov	r3, r4
 80015dc:	4632      	mov	r2, r6
 80015de:	9806      	ldr	r0, [sp, #24]
 80015e0:	f001 fa82 	bl	8002ae8 <__sbprintf>
 80015e4:	b041      	add	sp, #260	; 0x104
 80015e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80015ea:	aa23      	add	r2, sp, #140	; 0x8c
 80015ec:	9904      	ldr	r1, [sp, #16]
 80015ee:	9806      	ldr	r0, [sp, #24]
 80015f0:	f004 fd80 	bl	80060f4 <__sprint_r>
 80015f4:	b948      	cbnz	r0, 800160a <_vfprintf_r+0x262>
 80015f6:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 80015fa:	e736      	b.n	800146a <_vfprintf_r+0xc2>
 80015fc:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80015fe:	b123      	cbz	r3, 800160a <_vfprintf_r+0x262>
 8001600:	9806      	ldr	r0, [sp, #24]
 8001602:	9904      	ldr	r1, [sp, #16]
 8001604:	aa23      	add	r2, sp, #140	; 0x8c
 8001606:	f004 fd75 	bl	80060f4 <__sprint_r>
 800160a:	9b04      	ldr	r3, [sp, #16]
 800160c:	899b      	ldrh	r3, [r3, #12]
 800160e:	0659      	lsls	r1, r3, #25
 8001610:	f101 8012 	bmi.w	8002638 <_vfprintf_r+0x1290>
 8001614:	9807      	ldr	r0, [sp, #28]
 8001616:	b041      	add	sp, #260	; 0x104
 8001618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800161c:	9806      	ldr	r0, [sp, #24]
 800161e:	f002 fcb1 	bl	8003f84 <__sinit>
 8001622:	e6d7      	b.n	80013d4 <_vfprintf_r+0x2c>
 8001624:	f3af 8000 	nop.w
	...
 8001630:	0800d014 	.word	0x0800d014
 8001634:	0801c3bc 	.word	0x0801c3bc
 8001638:	930d      	str	r3, [sp, #52]	; 0x34
 800163a:	46ab      	mov	fp, r5
 800163c:	2a00      	cmp	r2, #0
 800163e:	f041 822b 	bne.w	8002a98 <_vfprintf_r+0x16f0>
 8001642:	9a03      	ldr	r2, [sp, #12]
 8001644:	f012 0320 	ands.w	r3, r2, #32
 8001648:	d064      	beq.n	8001714 <_vfprintf_r+0x36c>
 800164a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800164c:	3707      	adds	r7, #7
 800164e:	f027 0307 	bic.w	r3, r7, #7
 8001652:	2700      	movs	r7, #0
 8001654:	f103 0108 	add.w	r1, r3, #8
 8001658:	45bb      	cmp	fp, r7
 800165a:	910a      	str	r1, [sp, #40]	; 0x28
 800165c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001660:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 8001664:	f2c0 86ba 	blt.w	80023dc <_vfprintf_r+0x1034>
 8001668:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 800166c:	9303      	str	r3, [sp, #12]
 800166e:	ea54 0305 	orrs.w	r3, r4, r5
 8001672:	f000 8382 	beq.w	8001d7a <_vfprintf_r+0x9d2>
 8001676:	ae30      	add	r6, sp, #192	; 0xc0
 8001678:	08e2      	lsrs	r2, r4, #3
 800167a:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 800167e:	08e9      	lsrs	r1, r5, #3
 8001680:	f004 0307 	and.w	r3, r4, #7
 8001684:	460d      	mov	r5, r1
 8001686:	4614      	mov	r4, r2
 8001688:	3330      	adds	r3, #48	; 0x30
 800168a:	ea54 0205 	orrs.w	r2, r4, r5
 800168e:	f806 3d01 	strb.w	r3, [r6, #-1]!
 8001692:	d1f1      	bne.n	8001678 <_vfprintf_r+0x2d0>
 8001694:	9a03      	ldr	r2, [sp, #12]
 8001696:	07d2      	lsls	r2, r2, #31
 8001698:	f140 8096 	bpl.w	80017c8 <_vfprintf_r+0x420>
 800169c:	2b30      	cmp	r3, #48	; 0x30
 800169e:	f000 8093 	beq.w	80017c8 <_vfprintf_r+0x420>
 80016a2:	2230      	movs	r2, #48	; 0x30
 80016a4:	1e73      	subs	r3, r6, #1
 80016a6:	f806 2c01 	strb.w	r2, [r6, #-1]
 80016aa:	aa30      	add	r2, sp, #192	; 0xc0
 80016ac:	1ad2      	subs	r2, r2, r3
 80016ae:	9209      	str	r2, [sp, #36]	; 0x24
 80016b0:	461e      	mov	r6, r3
 80016b2:	e08c      	b.n	80017ce <_vfprintf_r+0x426>
 80016b4:	f898 3000 	ldrb.w	r3, [r8]
 80016b8:	2b2a      	cmp	r3, #42	; 0x2a
 80016ba:	f108 0401 	add.w	r4, r8, #1
 80016be:	f001 81c9 	beq.w	8002a54 <_vfprintf_r+0x16ac>
 80016c2:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 80016c6:	2809      	cmp	r0, #9
 80016c8:	bf98      	it	ls
 80016ca:	2500      	movls	r5, #0
 80016cc:	f201 8166 	bhi.w	800299c <_vfprintf_r+0x15f4>
 80016d0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80016d4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80016d8:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80016dc:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 80016e0:	2809      	cmp	r0, #9
 80016e2:	d9f5      	bls.n	80016d0 <_vfprintf_r+0x328>
 80016e4:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 80016e8:	46a0      	mov	r8, r4
 80016ea:	e6d4      	b.n	8001496 <_vfprintf_r+0xee>
 80016ec:	9b03      	ldr	r3, [sp, #12]
 80016ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016f2:	9303      	str	r3, [sp, #12]
 80016f4:	f898 3000 	ldrb.w	r3, [r8]
 80016f8:	e6cb      	b.n	8001492 <_vfprintf_r+0xea>
 80016fa:	930d      	str	r3, [sp, #52]	; 0x34
 80016fc:	46ab      	mov	fp, r5
 80016fe:	2a00      	cmp	r2, #0
 8001700:	f041 81d2 	bne.w	8002aa8 <_vfprintf_r+0x1700>
 8001704:	9b03      	ldr	r3, [sp, #12]
 8001706:	f043 0310 	orr.w	r3, r3, #16
 800170a:	9303      	str	r3, [sp, #12]
 800170c:	9a03      	ldr	r2, [sp, #12]
 800170e:	f012 0320 	ands.w	r3, r2, #32
 8001712:	d19a      	bne.n	800164a <_vfprintf_r+0x2a2>
 8001714:	9903      	ldr	r1, [sp, #12]
 8001716:	f011 0210 	ands.w	r2, r1, #16
 800171a:	f000 8634 	beq.w	8002386 <_vfprintf_r+0xfde>
 800171e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8001720:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8001724:	f1bb 0f00 	cmp.w	fp, #0
 8001728:	6804      	ldr	r4, [r0, #0]
 800172a:	f100 0704 	add.w	r7, r0, #4
 800172e:	f04f 0500 	mov.w	r5, #0
 8001732:	f2c0 8652 	blt.w	80023da <_vfprintf_r+0x1032>
 8001736:	460a      	mov	r2, r1
 8001738:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800173c:	9203      	str	r2, [sp, #12]
 800173e:	ea54 0205 	orrs.w	r2, r4, r5
 8001742:	970a      	str	r7, [sp, #40]	; 0x28
 8001744:	f000 8319 	beq.w	8001d7a <_vfprintf_r+0x9d2>
 8001748:	461f      	mov	r7, r3
 800174a:	e794      	b.n	8001676 <_vfprintf_r+0x2ce>
 800174c:	930d      	str	r3, [sp, #52]	; 0x34
 800174e:	46ab      	mov	fp, r5
 8001750:	2a00      	cmp	r2, #0
 8001752:	f041 8199 	bne.w	8002a88 <_vfprintf_r+0x16e0>
 8001756:	9b03      	ldr	r3, [sp, #12]
 8001758:	f043 0310 	orr.w	r3, r3, #16
 800175c:	9303      	str	r3, [sp, #12]
 800175e:	9a03      	ldr	r2, [sp, #12]
 8001760:	f012 0320 	ands.w	r3, r2, #32
 8001764:	f000 84fa 	beq.w	800215c <_vfprintf_r+0xdb4>
 8001768:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800176a:	3707      	adds	r7, #7
 800176c:	f027 0307 	bic.w	r3, r7, #7
 8001770:	2700      	movs	r7, #0
 8001772:	f103 0108 	add.w	r1, r3, #8
 8001776:	45bb      	cmp	fp, r7
 8001778:	910a      	str	r1, [sp, #40]	; 0x28
 800177a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800177e:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 8001782:	f2c0 8523 	blt.w	80021cc <_vfprintf_r+0xe24>
 8001786:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 800178a:	9303      	str	r3, [sp, #12]
 800178c:	ea54 0305 	orrs.w	r3, r4, r5
 8001790:	f000 81bc 	beq.w	8001b0c <_vfprintf_r+0x764>
 8001794:	2d00      	cmp	r5, #0
 8001796:	bf08      	it	eq
 8001798:	2c0a      	cmpeq	r4, #10
 800179a:	f0c0 851b 	bcc.w	80021d4 <_vfprintf_r+0xe2c>
 800179e:	ae30      	add	r6, sp, #192	; 0xc0
 80017a0:	4620      	mov	r0, r4
 80017a2:	4629      	mov	r1, r5
 80017a4:	220a      	movs	r2, #10
 80017a6:	2300      	movs	r3, #0
 80017a8:	f005 fe60 	bl	800746c <__aeabi_uldivmod>
 80017ac:	3230      	adds	r2, #48	; 0x30
 80017ae:	f806 2d01 	strb.w	r2, [r6, #-1]!
 80017b2:	4620      	mov	r0, r4
 80017b4:	4629      	mov	r1, r5
 80017b6:	2300      	movs	r3, #0
 80017b8:	220a      	movs	r2, #10
 80017ba:	f005 fe57 	bl	800746c <__aeabi_uldivmod>
 80017be:	4604      	mov	r4, r0
 80017c0:	460d      	mov	r5, r1
 80017c2:	ea54 0305 	orrs.w	r3, r4, r5
 80017c6:	d1eb      	bne.n	80017a0 <_vfprintf_r+0x3f8>
 80017c8:	ab30      	add	r3, sp, #192	; 0xc0
 80017ca:	1b9b      	subs	r3, r3, r6
 80017cc:	9309      	str	r3, [sp, #36]	; 0x24
 80017ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80017d0:	455b      	cmp	r3, fp
 80017d2:	bfb8      	it	lt
 80017d4:	465b      	movlt	r3, fp
 80017d6:	9305      	str	r3, [sp, #20]
 80017d8:	2300      	movs	r3, #0
 80017da:	930f      	str	r3, [sp, #60]	; 0x3c
 80017dc:	b117      	cbz	r7, 80017e4 <_vfprintf_r+0x43c>
 80017de:	9b05      	ldr	r3, [sp, #20]
 80017e0:	3301      	adds	r3, #1
 80017e2:	9305      	str	r3, [sp, #20]
 80017e4:	9b03      	ldr	r3, [sp, #12]
 80017e6:	f013 0302 	ands.w	r3, r3, #2
 80017ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80017ec:	d002      	beq.n	80017f4 <_vfprintf_r+0x44c>
 80017ee:	9b05      	ldr	r3, [sp, #20]
 80017f0:	3302      	adds	r3, #2
 80017f2:	9305      	str	r3, [sp, #20]
 80017f4:	9b03      	ldr	r3, [sp, #12]
 80017f6:	f013 0384 	ands.w	r3, r3, #132	; 0x84
 80017fa:	930c      	str	r3, [sp, #48]	; 0x30
 80017fc:	f040 82d2 	bne.w	8001da4 <_vfprintf_r+0x9fc>
 8001800:	9b08      	ldr	r3, [sp, #32]
 8001802:	9a05      	ldr	r2, [sp, #20]
 8001804:	1a9d      	subs	r5, r3, r2
 8001806:	2d00      	cmp	r5, #0
 8001808:	f340 82cc 	ble.w	8001da4 <_vfprintf_r+0x9fc>
 800180c:	2d10      	cmp	r5, #16
 800180e:	9925      	ldr	r1, [sp, #148]	; 0x94
 8001810:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8001812:	4fa8      	ldr	r7, [pc, #672]	; (8001ab4 <_vfprintf_r+0x70c>)
 8001814:	dd27      	ble.n	8001866 <_vfprintf_r+0x4be>
 8001816:	9614      	str	r6, [sp, #80]	; 0x50
 8001818:	4648      	mov	r0, r9
 800181a:	2410      	movs	r4, #16
 800181c:	46b9      	mov	r9, r7
 800181e:	9e04      	ldr	r6, [sp, #16]
 8001820:	462f      	mov	r7, r5
 8001822:	9d06      	ldr	r5, [sp, #24]
 8001824:	e004      	b.n	8001830 <_vfprintf_r+0x488>
 8001826:	3f10      	subs	r7, #16
 8001828:	2f10      	cmp	r7, #16
 800182a:	f100 0008 	add.w	r0, r0, #8
 800182e:	dd16      	ble.n	800185e <_vfprintf_r+0x4b6>
 8001830:	3201      	adds	r2, #1
 8001832:	4ba0      	ldr	r3, [pc, #640]	; (8001ab4 <_vfprintf_r+0x70c>)
 8001834:	9224      	str	r2, [sp, #144]	; 0x90
 8001836:	3110      	adds	r1, #16
 8001838:	2a07      	cmp	r2, #7
 800183a:	9125      	str	r1, [sp, #148]	; 0x94
 800183c:	e880 0018 	stmia.w	r0, {r3, r4}
 8001840:	ddf1      	ble.n	8001826 <_vfprintf_r+0x47e>
 8001842:	aa23      	add	r2, sp, #140	; 0x8c
 8001844:	4631      	mov	r1, r6
 8001846:	4628      	mov	r0, r5
 8001848:	f004 fc54 	bl	80060f4 <__sprint_r>
 800184c:	2800      	cmp	r0, #0
 800184e:	f47f aedc 	bne.w	800160a <_vfprintf_r+0x262>
 8001852:	3f10      	subs	r7, #16
 8001854:	2f10      	cmp	r7, #16
 8001856:	9925      	ldr	r1, [sp, #148]	; 0x94
 8001858:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800185a:	a830      	add	r0, sp, #192	; 0xc0
 800185c:	dce8      	bgt.n	8001830 <_vfprintf_r+0x488>
 800185e:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8001860:	463d      	mov	r5, r7
 8001862:	464f      	mov	r7, r9
 8001864:	4681      	mov	r9, r0
 8001866:	3201      	adds	r2, #1
 8001868:	186c      	adds	r4, r5, r1
 800186a:	2a07      	cmp	r2, #7
 800186c:	9425      	str	r4, [sp, #148]	; 0x94
 800186e:	9224      	str	r2, [sp, #144]	; 0x90
 8001870:	f8c9 7000 	str.w	r7, [r9]
 8001874:	f8c9 5004 	str.w	r5, [r9, #4]
 8001878:	f300 8428 	bgt.w	80020cc <_vfprintf_r+0xd24>
 800187c:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 8001880:	f109 0908 	add.w	r9, r9, #8
 8001884:	b177      	cbz	r7, 80018a4 <_vfprintf_r+0x4fc>
 8001886:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8001888:	3301      	adds	r3, #1
 800188a:	3401      	adds	r4, #1
 800188c:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
 8001890:	2201      	movs	r2, #1
 8001892:	2b07      	cmp	r3, #7
 8001894:	9425      	str	r4, [sp, #148]	; 0x94
 8001896:	9324      	str	r3, [sp, #144]	; 0x90
 8001898:	e889 0006 	stmia.w	r9, {r1, r2}
 800189c:	f300 83a0 	bgt.w	8001fe0 <_vfprintf_r+0xc38>
 80018a0:	f109 0908 	add.w	r9, r9, #8
 80018a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80018a6:	b16b      	cbz	r3, 80018c4 <_vfprintf_r+0x51c>
 80018a8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80018aa:	3301      	adds	r3, #1
 80018ac:	3402      	adds	r4, #2
 80018ae:	a91c      	add	r1, sp, #112	; 0x70
 80018b0:	2202      	movs	r2, #2
 80018b2:	2b07      	cmp	r3, #7
 80018b4:	9425      	str	r4, [sp, #148]	; 0x94
 80018b6:	9324      	str	r3, [sp, #144]	; 0x90
 80018b8:	e889 0006 	stmia.w	r9, {r1, r2}
 80018bc:	f300 839c 	bgt.w	8001ff8 <_vfprintf_r+0xc50>
 80018c0:	f109 0908 	add.w	r9, r9, #8
 80018c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80018c6:	2b80      	cmp	r3, #128	; 0x80
 80018c8:	f000 82d0 	beq.w	8001e6c <_vfprintf_r+0xac4>
 80018cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80018ce:	ebc3 070b 	rsb	r7, r3, fp
 80018d2:	2f00      	cmp	r7, #0
 80018d4:	dd33      	ble.n	800193e <_vfprintf_r+0x596>
 80018d6:	4a78      	ldr	r2, [pc, #480]	; (8001ab8 <_vfprintf_r+0x710>)
 80018d8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80018da:	920b      	str	r2, [sp, #44]	; 0x2c
 80018dc:	2f10      	cmp	r7, #16
 80018de:	dd22      	ble.n	8001926 <_vfprintf_r+0x57e>
 80018e0:	4622      	mov	r2, r4
 80018e2:	f04f 0b10 	mov.w	fp, #16
 80018e6:	9d06      	ldr	r5, [sp, #24]
 80018e8:	9c04      	ldr	r4, [sp, #16]
 80018ea:	e004      	b.n	80018f6 <_vfprintf_r+0x54e>
 80018ec:	3f10      	subs	r7, #16
 80018ee:	2f10      	cmp	r7, #16
 80018f0:	f109 0908 	add.w	r9, r9, #8
 80018f4:	dd16      	ble.n	8001924 <_vfprintf_r+0x57c>
 80018f6:	3301      	adds	r3, #1
 80018f8:	3210      	adds	r2, #16
 80018fa:	2b07      	cmp	r3, #7
 80018fc:	9225      	str	r2, [sp, #148]	; 0x94
 80018fe:	9324      	str	r3, [sp, #144]	; 0x90
 8001900:	e889 0c00 	stmia.w	r9, {sl, fp}
 8001904:	ddf2      	ble.n	80018ec <_vfprintf_r+0x544>
 8001906:	aa23      	add	r2, sp, #140	; 0x8c
 8001908:	4621      	mov	r1, r4
 800190a:	4628      	mov	r0, r5
 800190c:	f004 fbf2 	bl	80060f4 <__sprint_r>
 8001910:	2800      	cmp	r0, #0
 8001912:	f47f ae7a 	bne.w	800160a <_vfprintf_r+0x262>
 8001916:	3f10      	subs	r7, #16
 8001918:	2f10      	cmp	r7, #16
 800191a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800191c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800191e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8001922:	dce8      	bgt.n	80018f6 <_vfprintf_r+0x54e>
 8001924:	4614      	mov	r4, r2
 8001926:	3301      	adds	r3, #1
 8001928:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800192a:	9324      	str	r3, [sp, #144]	; 0x90
 800192c:	443c      	add	r4, r7
 800192e:	2b07      	cmp	r3, #7
 8001930:	9425      	str	r4, [sp, #148]	; 0x94
 8001932:	e889 0084 	stmia.w	r9, {r2, r7}
 8001936:	f300 8347 	bgt.w	8001fc8 <_vfprintf_r+0xc20>
 800193a:	f109 0908 	add.w	r9, r9, #8
 800193e:	9b03      	ldr	r3, [sp, #12]
 8001940:	05dd      	lsls	r5, r3, #23
 8001942:	f100 8231 	bmi.w	8001da8 <_vfprintf_r+0xa00>
 8001946:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8001948:	9909      	ldr	r1, [sp, #36]	; 0x24
 800194a:	f8c9 6000 	str.w	r6, [r9]
 800194e:	3301      	adds	r3, #1
 8001950:	440c      	add	r4, r1
 8001952:	2b07      	cmp	r3, #7
 8001954:	9425      	str	r4, [sp, #148]	; 0x94
 8001956:	f8c9 1004 	str.w	r1, [r9, #4]
 800195a:	9324      	str	r3, [sp, #144]	; 0x90
 800195c:	f300 831e 	bgt.w	8001f9c <_vfprintf_r+0xbf4>
 8001960:	f109 0908 	add.w	r9, r9, #8
 8001964:	9b03      	ldr	r3, [sp, #12]
 8001966:	0758      	lsls	r0, r3, #29
 8001968:	d53f      	bpl.n	80019ea <_vfprintf_r+0x642>
 800196a:	9b08      	ldr	r3, [sp, #32]
 800196c:	9a05      	ldr	r2, [sp, #20]
 800196e:	1a9d      	subs	r5, r3, r2
 8001970:	2d00      	cmp	r5, #0
 8001972:	dd3a      	ble.n	80019ea <_vfprintf_r+0x642>
 8001974:	2d10      	cmp	r5, #16
 8001976:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8001978:	4f4e      	ldr	r7, [pc, #312]	; (8001ab4 <_vfprintf_r+0x70c>)
 800197a:	dd23      	ble.n	80019c4 <_vfprintf_r+0x61c>
 800197c:	4622      	mov	r2, r4
 800197e:	2610      	movs	r6, #16
 8001980:	f8dd b018 	ldr.w	fp, [sp, #24]
 8001984:	9c04      	ldr	r4, [sp, #16]
 8001986:	e004      	b.n	8001992 <_vfprintf_r+0x5ea>
 8001988:	3d10      	subs	r5, #16
 800198a:	2d10      	cmp	r5, #16
 800198c:	f109 0908 	add.w	r9, r9, #8
 8001990:	dd17      	ble.n	80019c2 <_vfprintf_r+0x61a>
 8001992:	3301      	adds	r3, #1
 8001994:	4947      	ldr	r1, [pc, #284]	; (8001ab4 <_vfprintf_r+0x70c>)
 8001996:	9324      	str	r3, [sp, #144]	; 0x90
 8001998:	3210      	adds	r2, #16
 800199a:	2b07      	cmp	r3, #7
 800199c:	9225      	str	r2, [sp, #148]	; 0x94
 800199e:	e889 0042 	stmia.w	r9, {r1, r6}
 80019a2:	ddf1      	ble.n	8001988 <_vfprintf_r+0x5e0>
 80019a4:	aa23      	add	r2, sp, #140	; 0x8c
 80019a6:	4621      	mov	r1, r4
 80019a8:	4658      	mov	r0, fp
 80019aa:	f004 fba3 	bl	80060f4 <__sprint_r>
 80019ae:	2800      	cmp	r0, #0
 80019b0:	f47f ae2b 	bne.w	800160a <_vfprintf_r+0x262>
 80019b4:	3d10      	subs	r5, #16
 80019b6:	2d10      	cmp	r5, #16
 80019b8:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80019ba:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80019bc:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 80019c0:	dce7      	bgt.n	8001992 <_vfprintf_r+0x5ea>
 80019c2:	4614      	mov	r4, r2
 80019c4:	3301      	adds	r3, #1
 80019c6:	442c      	add	r4, r5
 80019c8:	2b07      	cmp	r3, #7
 80019ca:	9425      	str	r4, [sp, #148]	; 0x94
 80019cc:	9324      	str	r3, [sp, #144]	; 0x90
 80019ce:	f8c9 7000 	str.w	r7, [r9]
 80019d2:	f8c9 5004 	str.w	r5, [r9, #4]
 80019d6:	dd08      	ble.n	80019ea <_vfprintf_r+0x642>
 80019d8:	aa23      	add	r2, sp, #140	; 0x8c
 80019da:	9904      	ldr	r1, [sp, #16]
 80019dc:	9806      	ldr	r0, [sp, #24]
 80019de:	f004 fb89 	bl	80060f4 <__sprint_r>
 80019e2:	2800      	cmp	r0, #0
 80019e4:	f47f ae11 	bne.w	800160a <_vfprintf_r+0x262>
 80019e8:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80019ea:	9b07      	ldr	r3, [sp, #28]
 80019ec:	9a08      	ldr	r2, [sp, #32]
 80019ee:	9905      	ldr	r1, [sp, #20]
 80019f0:	428a      	cmp	r2, r1
 80019f2:	bfac      	ite	ge
 80019f4:	189b      	addge	r3, r3, r2
 80019f6:	185b      	addlt	r3, r3, r1
 80019f8:	9307      	str	r3, [sp, #28]
 80019fa:	2c00      	cmp	r4, #0
 80019fc:	f040 82da 	bne.w	8001fb4 <_vfprintf_r+0xc0c>
 8001a00:	2300      	movs	r3, #0
 8001a02:	9324      	str	r3, [sp, #144]	; 0x90
 8001a04:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8001a08:	e510      	b.n	800142c <_vfprintf_r+0x84>
 8001a0a:	930d      	str	r3, [sp, #52]	; 0x34
 8001a0c:	46ab      	mov	fp, r5
 8001a0e:	2a00      	cmp	r2, #0
 8001a10:	f041 8036 	bne.w	8002a80 <_vfprintf_r+0x16d8>
 8001a14:	9b03      	ldr	r3, [sp, #12]
 8001a16:	4829      	ldr	r0, [pc, #164]	; (8001abc <_vfprintf_r+0x714>)
 8001a18:	069c      	lsls	r4, r3, #26
 8001a1a:	f140 8146 	bpl.w	8001caa <_vfprintf_r+0x902>
 8001a1e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8001a20:	3707      	adds	r7, #7
 8001a22:	f027 0307 	bic.w	r3, r7, #7
 8001a26:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001a2a:	f103 0208 	add.w	r2, r3, #8
 8001a2e:	920a      	str	r2, [sp, #40]	; 0x28
 8001a30:	9a03      	ldr	r2, [sp, #12]
 8001a32:	f012 0701 	ands.w	r7, r2, #1
 8001a36:	f000 82eb 	beq.w	8002010 <_vfprintf_r+0xc68>
 8001a3a:	ea54 0305 	orrs.w	r3, r4, r5
 8001a3e:	f000 8580 	beq.w	8002542 <_vfprintf_r+0x119a>
 8001a42:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 8001a46:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
 8001a4a:	2700      	movs	r7, #0
 8001a4c:	9a03      	ldr	r2, [sp, #12]
 8001a4e:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 8001a52:	2330      	movs	r3, #48	; 0x30
 8001a54:	45bb      	cmp	fp, r7
 8001a56:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 8001a5a:	f042 0302 	orr.w	r3, r2, #2
 8001a5e:	f2c0 8735 	blt.w	80028cc <_vfprintf_r+0x1524>
 8001a62:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8001a66:	f043 0302 	orr.w	r3, r3, #2
 8001a6a:	9303      	str	r3, [sp, #12]
 8001a6c:	ae30      	add	r6, sp, #192	; 0xc0
 8001a6e:	0923      	lsrs	r3, r4, #4
 8001a70:	f004 010f 	and.w	r1, r4, #15
 8001a74:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 8001a78:	092a      	lsrs	r2, r5, #4
 8001a7a:	461c      	mov	r4, r3
 8001a7c:	4615      	mov	r5, r2
 8001a7e:	5c43      	ldrb	r3, [r0, r1]
 8001a80:	f806 3d01 	strb.w	r3, [r6, #-1]!
 8001a84:	ea54 0305 	orrs.w	r3, r4, r5
 8001a88:	d1f1      	bne.n	8001a6e <_vfprintf_r+0x6c6>
 8001a8a:	e69d      	b.n	80017c8 <_vfprintf_r+0x420>
 8001a8c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001a8e:	930d      	str	r3, [sp, #52]	; 0x34
 8001a90:	680a      	ldr	r2, [r1, #0]
 8001a92:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
 8001a96:	2300      	movs	r3, #0
 8001a98:	460a      	mov	r2, r1
 8001a9a:	461f      	mov	r7, r3
 8001a9c:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8001aa0:	3204      	adds	r2, #4
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	9305      	str	r3, [sp, #20]
 8001aa6:	46bb      	mov	fp, r7
 8001aa8:	970f      	str	r7, [sp, #60]	; 0x3c
 8001aaa:	920a      	str	r2, [sp, #40]	; 0x28
 8001aac:	9309      	str	r3, [sp, #36]	; 0x24
 8001aae:	ae26      	add	r6, sp, #152	; 0x98
 8001ab0:	e698      	b.n	80017e4 <_vfprintf_r+0x43c>
 8001ab2:	bf00      	nop
 8001ab4:	0800d014 	.word	0x0800d014
 8001ab8:	0800d024 	.word	0x0800d024
 8001abc:	0801c3a8 	.word	0x0801c3a8
 8001ac0:	930d      	str	r3, [sp, #52]	; 0x34
 8001ac2:	46ab      	mov	fp, r5
 8001ac4:	2a00      	cmp	r2, #0
 8001ac6:	f040 87e3 	bne.w	8002a90 <_vfprintf_r+0x16e8>
 8001aca:	9b03      	ldr	r3, [sp, #12]
 8001acc:	069b      	lsls	r3, r3, #26
 8001ace:	d574      	bpl.n	8001bba <_vfprintf_r+0x812>
 8001ad0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8001ad2:	3707      	adds	r7, #7
 8001ad4:	f027 0707 	bic.w	r7, r7, #7
 8001ad8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001adc:	f107 0108 	add.w	r1, r7, #8
 8001ae0:	910a      	str	r1, [sp, #40]	; 0x28
 8001ae2:	4614      	mov	r4, r2
 8001ae4:	461d      	mov	r5, r3
 8001ae6:	2a00      	cmp	r2, #0
 8001ae8:	f173 0300 	sbcs.w	r3, r3, #0
 8001aec:	f2c0 843a 	blt.w	8002364 <_vfprintf_r+0xfbc>
 8001af0:	f1bb 0f00 	cmp.w	fp, #0
 8001af4:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 8001af8:	f2c0 8368 	blt.w	80021cc <_vfprintf_r+0xe24>
 8001afc:	9b03      	ldr	r3, [sp, #12]
 8001afe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b02:	9303      	str	r3, [sp, #12]
 8001b04:	ea54 0305 	orrs.w	r3, r4, r5
 8001b08:	f47f ae44 	bne.w	8001794 <_vfprintf_r+0x3ec>
 8001b0c:	f1bb 0f00 	cmp.w	fp, #0
 8001b10:	f040 8408 	bne.w	8002324 <_vfprintf_r+0xf7c>
 8001b14:	f04f 0b00 	mov.w	fp, #0
 8001b18:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8001b1c:	ae30      	add	r6, sp, #192	; 0xc0
 8001b1e:	e656      	b.n	80017ce <_vfprintf_r+0x426>
 8001b20:	9b03      	ldr	r3, [sp, #12]
 8001b22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b26:	9303      	str	r3, [sp, #12]
 8001b28:	f898 3000 	ldrb.w	r3, [r8]
 8001b2c:	e4b1      	b.n	8001492 <_vfprintf_r+0xea>
 8001b2e:	f898 3000 	ldrb.w	r3, [r8]
 8001b32:	2b6c      	cmp	r3, #108	; 0x6c
 8001b34:	f000 85d0 	beq.w	80026d8 <_vfprintf_r+0x1330>
 8001b38:	9803      	ldr	r0, [sp, #12]
 8001b3a:	f040 0010 	orr.w	r0, r0, #16
 8001b3e:	9003      	str	r0, [sp, #12]
 8001b40:	e4a7      	b.n	8001492 <_vfprintf_r+0xea>
 8001b42:	2a00      	cmp	r2, #0
 8001b44:	f040 8798 	bne.w	8002a78 <_vfprintf_r+0x16d0>
 8001b48:	9b03      	ldr	r3, [sp, #12]
 8001b4a:	069f      	lsls	r7, r3, #26
 8001b4c:	f140 84e2 	bpl.w	8002514 <_vfprintf_r+0x116c>
 8001b50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001b52:	9907      	ldr	r1, [sp, #28]
 8001b54:	6813      	ldr	r3, [r2, #0]
 8001b56:	17cd      	asrs	r5, r1, #31
 8001b58:	4608      	mov	r0, r1
 8001b5a:	3204      	adds	r2, #4
 8001b5c:	4629      	mov	r1, r5
 8001b5e:	920a      	str	r2, [sp, #40]	; 0x28
 8001b60:	e9c3 0100 	strd	r0, r1, [r3]
 8001b64:	e462      	b.n	800142c <_vfprintf_r+0x84>
 8001b66:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8001b68:	6823      	ldr	r3, [r4, #0]
 8001b6a:	9308      	str	r3, [sp, #32]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	2800      	cmp	r0, #0
 8001b70:	4623      	mov	r3, r4
 8001b72:	f103 0304 	add.w	r3, r3, #4
 8001b76:	f6ff acee 	blt.w	8001556 <_vfprintf_r+0x1ae>
 8001b7a:	930a      	str	r3, [sp, #40]	; 0x28
 8001b7c:	f898 3000 	ldrb.w	r3, [r8]
 8001b80:	e487      	b.n	8001492 <_vfprintf_r+0xea>
 8001b82:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8001b86:	2300      	movs	r3, #0
 8001b88:	461c      	mov	r4, r3
 8001b8a:	f818 3b01 	ldrb.w	r3, [r8], #1
 8001b8e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8001b92:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8001b96:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8001b9a:	2809      	cmp	r0, #9
 8001b9c:	d9f5      	bls.n	8001b8a <_vfprintf_r+0x7e2>
 8001b9e:	9408      	str	r4, [sp, #32]
 8001ba0:	e479      	b.n	8001496 <_vfprintf_r+0xee>
 8001ba2:	930d      	str	r3, [sp, #52]	; 0x34
 8001ba4:	46ab      	mov	fp, r5
 8001ba6:	2a00      	cmp	r2, #0
 8001ba8:	f040 8762 	bne.w	8002a70 <_vfprintf_r+0x16c8>
 8001bac:	9b03      	ldr	r3, [sp, #12]
 8001bae:	f043 0310 	orr.w	r3, r3, #16
 8001bb2:	9303      	str	r3, [sp, #12]
 8001bb4:	9b03      	ldr	r3, [sp, #12]
 8001bb6:	069b      	lsls	r3, r3, #26
 8001bb8:	d48a      	bmi.n	8001ad0 <_vfprintf_r+0x728>
 8001bba:	9b03      	ldr	r3, [sp, #12]
 8001bbc:	06df      	lsls	r7, r3, #27
 8001bbe:	f100 8294 	bmi.w	80020ea <_vfprintf_r+0xd42>
 8001bc2:	9b03      	ldr	r3, [sp, #12]
 8001bc4:	065e      	lsls	r6, r3, #25
 8001bc6:	f140 8290 	bpl.w	80020ea <_vfprintf_r+0xd42>
 8001bca:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001bcc:	f9b1 4000 	ldrsh.w	r4, [r1]
 8001bd0:	3104      	adds	r1, #4
 8001bd2:	17e5      	asrs	r5, r4, #31
 8001bd4:	4622      	mov	r2, r4
 8001bd6:	462b      	mov	r3, r5
 8001bd8:	910a      	str	r1, [sp, #40]	; 0x28
 8001bda:	e784      	b.n	8001ae6 <_vfprintf_r+0x73e>
 8001bdc:	930d      	str	r3, [sp, #52]	; 0x34
 8001bde:	46ab      	mov	fp, r5
 8001be0:	2a00      	cmp	r2, #0
 8001be2:	f040 8769 	bne.w	8002ab8 <_vfprintf_r+0x1710>
 8001be6:	9b03      	ldr	r3, [sp, #12]
 8001be8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8001bea:	071d      	lsls	r5, r3, #28
 8001bec:	f107 0707 	add.w	r7, r7, #7
 8001bf0:	f140 8485 	bpl.w	80024fe <_vfprintf_r+0x1156>
 8001bf4:	f027 0307 	bic.w	r3, r7, #7
 8001bf8:	ed93 7b00 	vldr	d7, [r3]
 8001bfc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8001c00:	f103 0208 	add.w	r2, r3, #8
 8001c04:	920a      	str	r2, [sp, #40]	; 0x28
 8001c06:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
 8001c0a:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8001c0e:	9116      	str	r1, [sp, #88]	; 0x58
 8001c10:	9317      	str	r3, [sp, #92]	; 0x5c
 8001c12:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
 8001c16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c1a:	4620      	mov	r0, r4
 8001c1c:	4629      	mov	r1, r5
 8001c1e:	4bb5      	ldr	r3, [pc, #724]	; (8001ef4 <_vfprintf_r+0xb4c>)
 8001c20:	f005 fc0e 	bl	8007440 <__aeabi_dcmpun>
 8001c24:	2800      	cmp	r0, #0
 8001c26:	f040 83eb 	bne.w	8002400 <_vfprintf_r+0x1058>
 8001c2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c2e:	4bb1      	ldr	r3, [pc, #708]	; (8001ef4 <_vfprintf_r+0xb4c>)
 8001c30:	4620      	mov	r0, r4
 8001c32:	4629      	mov	r1, r5
 8001c34:	f005 fbe6 	bl	8007404 <__aeabi_dcmple>
 8001c38:	2800      	cmp	r0, #0
 8001c3a:	f040 83e1 	bne.w	8002400 <_vfprintf_r+0x1058>
 8001c3e:	2200      	movs	r2, #0
 8001c40:	2300      	movs	r3, #0
 8001c42:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8001c46:	f005 fbd3 	bl	80073f0 <__aeabi_dcmplt>
 8001c4a:	2800      	cmp	r0, #0
 8001c4c:	f040 8644 	bne.w	80028d8 <_vfprintf_r+0x1530>
 8001c50:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 8001c54:	4ea8      	ldr	r6, [pc, #672]	; (8001ef8 <_vfprintf_r+0xb50>)
 8001c56:	4ba9      	ldr	r3, [pc, #676]	; (8001efc <_vfprintf_r+0xb54>)
 8001c58:	9903      	ldr	r1, [sp, #12]
 8001c5a:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8001c5e:	9103      	str	r1, [sp, #12]
 8001c60:	990d      	ldr	r1, [sp, #52]	; 0x34
 8001c62:	2203      	movs	r2, #3
 8001c64:	f04f 0b00 	mov.w	fp, #0
 8001c68:	9205      	str	r2, [sp, #20]
 8001c6a:	2947      	cmp	r1, #71	; 0x47
 8001c6c:	bfd8      	it	le
 8001c6e:	461e      	movle	r6, r3
 8001c70:	9209      	str	r2, [sp, #36]	; 0x24
 8001c72:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
 8001c76:	e5b1      	b.n	80017dc <_vfprintf_r+0x434>
 8001c78:	9b03      	ldr	r3, [sp, #12]
 8001c7a:	f043 0308 	orr.w	r3, r3, #8
 8001c7e:	9303      	str	r3, [sp, #12]
 8001c80:	f898 3000 	ldrb.w	r3, [r8]
 8001c84:	e405      	b.n	8001492 <_vfprintf_r+0xea>
 8001c86:	930d      	str	r3, [sp, #52]	; 0x34
 8001c88:	46ab      	mov	fp, r5
 8001c8a:	2a00      	cmp	r2, #0
 8001c8c:	f43f ad67 	beq.w	800175e <_vfprintf_r+0x3b6>
 8001c90:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 8001c94:	e563      	b.n	800175e <_vfprintf_r+0x3b6>
 8001c96:	930d      	str	r3, [sp, #52]	; 0x34
 8001c98:	46ab      	mov	fp, r5
 8001c9a:	2a00      	cmp	r2, #0
 8001c9c:	f040 8708 	bne.w	8002ab0 <_vfprintf_r+0x1708>
 8001ca0:	9b03      	ldr	r3, [sp, #12]
 8001ca2:	4897      	ldr	r0, [pc, #604]	; (8001f00 <_vfprintf_r+0xb58>)
 8001ca4:	069c      	lsls	r4, r3, #26
 8001ca6:	f53f aeba 	bmi.w	8001a1e <_vfprintf_r+0x676>
 8001caa:	9b03      	ldr	r3, [sp, #12]
 8001cac:	06d9      	lsls	r1, r3, #27
 8001cae:	f140 8398 	bpl.w	80023e2 <_vfprintf_r+0x103a>
 8001cb2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	3304      	adds	r3, #4
 8001cb8:	6814      	ldr	r4, [r2, #0]
 8001cba:	930a      	str	r3, [sp, #40]	; 0x28
 8001cbc:	2500      	movs	r5, #0
 8001cbe:	e6b7      	b.n	8001a30 <_vfprintf_r+0x688>
 8001cc0:	f898 3000 	ldrb.w	r3, [r8]
 8001cc4:	2900      	cmp	r1, #0
 8001cc6:	f47f abe4 	bne.w	8001492 <_vfprintf_r+0xea>
 8001cca:	2201      	movs	r2, #1
 8001ccc:	2120      	movs	r1, #32
 8001cce:	f7ff bbe0 	b.w	8001492 <_vfprintf_r+0xea>
 8001cd2:	9b03      	ldr	r3, [sp, #12]
 8001cd4:	f043 0301 	orr.w	r3, r3, #1
 8001cd8:	9303      	str	r3, [sp, #12]
 8001cda:	f898 3000 	ldrb.w	r3, [r8]
 8001cde:	f7ff bbd8 	b.w	8001492 <_vfprintf_r+0xea>
 8001ce2:	9b03      	ldr	r3, [sp, #12]
 8001ce4:	f043 0320 	orr.w	r3, r3, #32
 8001ce8:	9303      	str	r3, [sp, #12]
 8001cea:	f898 3000 	ldrb.w	r3, [r8]
 8001cee:	f7ff bbd0 	b.w	8001492 <_vfprintf_r+0xea>
 8001cf2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001cf4:	930d      	str	r3, [sp, #52]	; 0x34
 8001cf6:	6816      	ldr	r6, [r2, #0]
 8001cf8:	2400      	movs	r4, #0
 8001cfa:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
 8001cfe:	1d17      	adds	r7, r2, #4
 8001d00:	2e00      	cmp	r6, #0
 8001d02:	f000 85ac 	beq.w	800285e <_vfprintf_r+0x14b6>
 8001d06:	2d00      	cmp	r5, #0
 8001d08:	f2c0 84fd 	blt.w	8002706 <_vfprintf_r+0x135e>
 8001d0c:	462a      	mov	r2, r5
 8001d0e:	4621      	mov	r1, r4
 8001d10:	4630      	mov	r0, r6
 8001d12:	f002 ffdd 	bl	8004cd0 <memchr>
 8001d16:	2800      	cmp	r0, #0
 8001d18:	f000 8616 	beq.w	8002948 <_vfprintf_r+0x15a0>
 8001d1c:	1b83      	subs	r3, r0, r6
 8001d1e:	9309      	str	r3, [sp, #36]	; 0x24
 8001d20:	46a3      	mov	fp, r4
 8001d22:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001d26:	970a      	str	r7, [sp, #40]	; 0x28
 8001d28:	9305      	str	r3, [sp, #20]
 8001d2a:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
 8001d2e:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 8001d32:	e553      	b.n	80017dc <_vfprintf_r+0x434>
 8001d34:	f898 3000 	ldrb.w	r3, [r8]
 8001d38:	2201      	movs	r2, #1
 8001d3a:	212b      	movs	r1, #43	; 0x2b
 8001d3c:	f7ff bba9 	b.w	8001492 <_vfprintf_r+0xea>
 8001d40:	486f      	ldr	r0, [pc, #444]	; (8001f00 <_vfprintf_r+0xb58>)
 8001d42:	920d      	str	r2, [sp, #52]	; 0x34
 8001d44:	f1bb 0f00 	cmp.w	fp, #0
 8001d48:	f040 8173 	bne.w	8002032 <_vfprintf_r+0xc8a>
 8001d4c:	465f      	mov	r7, fp
 8001d4e:	e6e1      	b.n	8001b14 <_vfprintf_r+0x76c>
 8001d50:	930d      	str	r3, [sp, #52]	; 0x34
 8001d52:	2a00      	cmp	r2, #0
 8001d54:	f040 86a4 	bne.w	8002aa0 <_vfprintf_r+0x16f8>
 8001d58:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001d5a:	2a00      	cmp	r2, #0
 8001d5c:	f43f ac4e 	beq.w	80015fc <_vfprintf_r+0x254>
 8001d60:	2300      	movs	r3, #0
 8001d62:	2101      	movs	r1, #1
 8001d64:	461f      	mov	r7, r3
 8001d66:	9105      	str	r1, [sp, #20]
 8001d68:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
 8001d6c:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8001d70:	469b      	mov	fp, r3
 8001d72:	930f      	str	r3, [sp, #60]	; 0x3c
 8001d74:	9109      	str	r1, [sp, #36]	; 0x24
 8001d76:	ae26      	add	r6, sp, #152	; 0x98
 8001d78:	e534      	b.n	80017e4 <_vfprintf_r+0x43c>
 8001d7a:	f1bb 0f00 	cmp.w	fp, #0
 8001d7e:	f000 85d4 	beq.w	800292a <_vfprintf_r+0x1582>
 8001d82:	2700      	movs	r7, #0
 8001d84:	2400      	movs	r4, #0
 8001d86:	2500      	movs	r5, #0
 8001d88:	e475      	b.n	8001676 <_vfprintf_r+0x2ce>
 8001d8a:	485d      	ldr	r0, [pc, #372]	; (8001f00 <_vfprintf_r+0xb58>)
 8001d8c:	9303      	str	r3, [sp, #12]
 8001d8e:	920d      	str	r2, [sp, #52]	; 0x34
 8001d90:	ea54 0305 	orrs.w	r3, r4, r5
 8001d94:	970a      	str	r7, [sp, #40]	; 0x28
 8001d96:	f04f 0700 	mov.w	r7, #0
 8001d9a:	f47f ae67 	bne.w	8001a6c <_vfprintf_r+0x6c4>
 8001d9e:	2400      	movs	r4, #0
 8001da0:	2500      	movs	r5, #0
 8001da2:	e663      	b.n	8001a6c <_vfprintf_r+0x6c4>
 8001da4:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8001da6:	e56d      	b.n	8001884 <_vfprintf_r+0x4dc>
 8001da8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001daa:	2b65      	cmp	r3, #101	; 0x65
 8001dac:	f340 80ae 	ble.w	8001f0c <_vfprintf_r+0xb64>
 8001db0:	2200      	movs	r2, #0
 8001db2:	2300      	movs	r3, #0
 8001db4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8001db8:	f005 fb10 	bl	80073dc <__aeabi_dcmpeq>
 8001dbc:	2800      	cmp	r0, #0
 8001dbe:	f000 813a 	beq.w	8002036 <_vfprintf_r+0xc8e>
 8001dc2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8001dc4:	4a4f      	ldr	r2, [pc, #316]	; (8001f04 <_vfprintf_r+0xb5c>)
 8001dc6:	f8c9 2000 	str.w	r2, [r9]
 8001dca:	3301      	adds	r3, #1
 8001dcc:	3401      	adds	r4, #1
 8001dce:	2201      	movs	r2, #1
 8001dd0:	2b07      	cmp	r3, #7
 8001dd2:	9425      	str	r4, [sp, #148]	; 0x94
 8001dd4:	9324      	str	r3, [sp, #144]	; 0x90
 8001dd6:	f8c9 2004 	str.w	r2, [r9, #4]
 8001dda:	f300 83cc 	bgt.w	8002576 <_vfprintf_r+0x11ce>
 8001dde:	f109 0908 	add.w	r9, r9, #8
 8001de2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8001de4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001de6:	4293      	cmp	r3, r2
 8001de8:	db03      	blt.n	8001df2 <_vfprintf_r+0xa4a>
 8001dea:	9b03      	ldr	r3, [sp, #12]
 8001dec:	07d8      	lsls	r0, r3, #31
 8001dee:	f57f adb9 	bpl.w	8001964 <_vfprintf_r+0x5bc>
 8001df2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8001df4:	9912      	ldr	r1, [sp, #72]	; 0x48
 8001df6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8001df8:	f8c9 2000 	str.w	r2, [r9]
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	440c      	add	r4, r1
 8001e00:	2b07      	cmp	r3, #7
 8001e02:	9425      	str	r4, [sp, #148]	; 0x94
 8001e04:	f8c9 1004 	str.w	r1, [r9, #4]
 8001e08:	9324      	str	r3, [sp, #144]	; 0x90
 8001e0a:	f300 846f 	bgt.w	80026ec <_vfprintf_r+0x1344>
 8001e0e:	f109 0908 	add.w	r9, r9, #8
 8001e12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001e14:	1e5d      	subs	r5, r3, #1
 8001e16:	2d00      	cmp	r5, #0
 8001e18:	f77f ada4 	ble.w	8001964 <_vfprintf_r+0x5bc>
 8001e1c:	4a3a      	ldr	r2, [pc, #232]	; (8001f08 <_vfprintf_r+0xb60>)
 8001e1e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8001e20:	920b      	str	r2, [sp, #44]	; 0x2c
 8001e22:	2d10      	cmp	r5, #16
 8001e24:	f340 81b4 	ble.w	8002190 <_vfprintf_r+0xde8>
 8001e28:	2610      	movs	r6, #16
 8001e2a:	9f06      	ldr	r7, [sp, #24]
 8001e2c:	f8dd b010 	ldr.w	fp, [sp, #16]
 8001e30:	e005      	b.n	8001e3e <_vfprintf_r+0xa96>
 8001e32:	f109 0908 	add.w	r9, r9, #8
 8001e36:	3d10      	subs	r5, #16
 8001e38:	2d10      	cmp	r5, #16
 8001e3a:	f340 81a9 	ble.w	8002190 <_vfprintf_r+0xde8>
 8001e3e:	3301      	adds	r3, #1
 8001e40:	3410      	adds	r4, #16
 8001e42:	2b07      	cmp	r3, #7
 8001e44:	9425      	str	r4, [sp, #148]	; 0x94
 8001e46:	9324      	str	r3, [sp, #144]	; 0x90
 8001e48:	f8c9 a000 	str.w	sl, [r9]
 8001e4c:	f8c9 6004 	str.w	r6, [r9, #4]
 8001e50:	ddef      	ble.n	8001e32 <_vfprintf_r+0xa8a>
 8001e52:	aa23      	add	r2, sp, #140	; 0x8c
 8001e54:	4659      	mov	r1, fp
 8001e56:	4638      	mov	r0, r7
 8001e58:	f004 f94c 	bl	80060f4 <__sprint_r>
 8001e5c:	2800      	cmp	r0, #0
 8001e5e:	f47f abd4 	bne.w	800160a <_vfprintf_r+0x262>
 8001e62:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8001e64:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8001e66:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8001e6a:	e7e4      	b.n	8001e36 <_vfprintf_r+0xa8e>
 8001e6c:	9b08      	ldr	r3, [sp, #32]
 8001e6e:	9a05      	ldr	r2, [sp, #20]
 8001e70:	1a9f      	subs	r7, r3, r2
 8001e72:	2f00      	cmp	r7, #0
 8001e74:	f77f ad2a 	ble.w	80018cc <_vfprintf_r+0x524>
 8001e78:	4a23      	ldr	r2, [pc, #140]	; (8001f08 <_vfprintf_r+0xb60>)
 8001e7a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8001e7c:	920b      	str	r2, [sp, #44]	; 0x2c
 8001e7e:	2f10      	cmp	r7, #16
 8001e80:	dd2b      	ble.n	8001eda <_vfprintf_r+0xb32>
 8001e82:	464a      	mov	r2, r9
 8001e84:	4621      	mov	r1, r4
 8001e86:	46b9      	mov	r9, r7
 8001e88:	2510      	movs	r5, #16
 8001e8a:	4637      	mov	r7, r6
 8001e8c:	9c06      	ldr	r4, [sp, #24]
 8001e8e:	9e04      	ldr	r6, [sp, #16]
 8001e90:	e006      	b.n	8001ea0 <_vfprintf_r+0xaf8>
 8001e92:	f1a9 0910 	sub.w	r9, r9, #16
 8001e96:	f1b9 0f10 	cmp.w	r9, #16
 8001e9a:	f102 0208 	add.w	r2, r2, #8
 8001e9e:	dd18      	ble.n	8001ed2 <_vfprintf_r+0xb2a>
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	3110      	adds	r1, #16
 8001ea4:	2b07      	cmp	r3, #7
 8001ea6:	9125      	str	r1, [sp, #148]	; 0x94
 8001ea8:	9324      	str	r3, [sp, #144]	; 0x90
 8001eaa:	f8c2 a000 	str.w	sl, [r2]
 8001eae:	6055      	str	r5, [r2, #4]
 8001eb0:	ddef      	ble.n	8001e92 <_vfprintf_r+0xaea>
 8001eb2:	aa23      	add	r2, sp, #140	; 0x8c
 8001eb4:	4631      	mov	r1, r6
 8001eb6:	4620      	mov	r0, r4
 8001eb8:	f004 f91c 	bl	80060f4 <__sprint_r>
 8001ebc:	2800      	cmp	r0, #0
 8001ebe:	f47f aba4 	bne.w	800160a <_vfprintf_r+0x262>
 8001ec2:	f1a9 0910 	sub.w	r9, r9, #16
 8001ec6:	f1b9 0f10 	cmp.w	r9, #16
 8001eca:	9925      	ldr	r1, [sp, #148]	; 0x94
 8001ecc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8001ece:	aa30      	add	r2, sp, #192	; 0xc0
 8001ed0:	dce6      	bgt.n	8001ea0 <_vfprintf_r+0xaf8>
 8001ed2:	463e      	mov	r6, r7
 8001ed4:	460c      	mov	r4, r1
 8001ed6:	464f      	mov	r7, r9
 8001ed8:	4691      	mov	r9, r2
 8001eda:	3301      	adds	r3, #1
 8001edc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001ede:	9324      	str	r3, [sp, #144]	; 0x90
 8001ee0:	443c      	add	r4, r7
 8001ee2:	2b07      	cmp	r3, #7
 8001ee4:	9425      	str	r4, [sp, #148]	; 0x94
 8001ee6:	e889 0084 	stmia.w	r9, {r2, r7}
 8001eea:	f300 822b 	bgt.w	8002344 <_vfprintf_r+0xf9c>
 8001eee:	f109 0908 	add.w	r9, r9, #8
 8001ef2:	e4eb      	b.n	80018cc <_vfprintf_r+0x524>
 8001ef4:	7fefffff 	.word	0x7fefffff
 8001ef8:	0801c39c 	.word	0x0801c39c
 8001efc:	0801c398 	.word	0x0801c398
 8001f00:	0801c3bc 	.word	0x0801c3bc
 8001f04:	0801c3d8 	.word	0x0801c3d8
 8001f08:	0800d024 	.word	0x0800d024
 8001f0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001f0e:	9d24      	ldr	r5, [sp, #144]	; 0x90
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	f340 81d0 	ble.w	80022b6 <_vfprintf_r+0xf0e>
 8001f16:	3501      	adds	r5, #1
 8001f18:	3401      	adds	r4, #1
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	2d07      	cmp	r5, #7
 8001f1e:	9425      	str	r4, [sp, #148]	; 0x94
 8001f20:	9524      	str	r5, [sp, #144]	; 0x90
 8001f22:	f8c9 6000 	str.w	r6, [r9]
 8001f26:	f8c9 3004 	str.w	r3, [r9, #4]
 8001f2a:	f300 81e1 	bgt.w	80022f0 <_vfprintf_r+0xf48>
 8001f2e:	f109 0908 	add.w	r9, r9, #8
 8001f32:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8001f34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8001f36:	f8c9 3000 	str.w	r3, [r9]
 8001f3a:	3501      	adds	r5, #1
 8001f3c:	4414      	add	r4, r2
 8001f3e:	2d07      	cmp	r5, #7
 8001f40:	9425      	str	r4, [sp, #148]	; 0x94
 8001f42:	9524      	str	r5, [sp, #144]	; 0x90
 8001f44:	f8c9 2004 	str.w	r2, [r9, #4]
 8001f48:	f300 81df 	bgt.w	800230a <_vfprintf_r+0xf62>
 8001f4c:	f109 0908 	add.w	r9, r9, #8
 8001f50:	2300      	movs	r3, #0
 8001f52:	2200      	movs	r2, #0
 8001f54:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8001f58:	f005 fa40 	bl	80073dc <__aeabi_dcmpeq>
 8001f5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001f5e:	2800      	cmp	r0, #0
 8001f60:	f040 80cc 	bne.w	80020fc <_vfprintf_r+0xd54>
 8001f64:	3b01      	subs	r3, #1
 8001f66:	3501      	adds	r5, #1
 8001f68:	3601      	adds	r6, #1
 8001f6a:	441c      	add	r4, r3
 8001f6c:	2d07      	cmp	r5, #7
 8001f6e:	9524      	str	r5, [sp, #144]	; 0x90
 8001f70:	9425      	str	r4, [sp, #148]	; 0x94
 8001f72:	f8c9 6000 	str.w	r6, [r9]
 8001f76:	f8c9 3004 	str.w	r3, [r9, #4]
 8001f7a:	f300 81ac 	bgt.w	80022d6 <_vfprintf_r+0xf2e>
 8001f7e:	f109 0908 	add.w	r9, r9, #8
 8001f82:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8001f84:	f8c9 2004 	str.w	r2, [r9, #4]
 8001f88:	3501      	adds	r5, #1
 8001f8a:	4414      	add	r4, r2
 8001f8c:	ab1f      	add	r3, sp, #124	; 0x7c
 8001f8e:	2d07      	cmp	r5, #7
 8001f90:	9425      	str	r4, [sp, #148]	; 0x94
 8001f92:	9524      	str	r5, [sp, #144]	; 0x90
 8001f94:	f8c9 3000 	str.w	r3, [r9]
 8001f98:	f77f ace2 	ble.w	8001960 <_vfprintf_r+0x5b8>
 8001f9c:	aa23      	add	r2, sp, #140	; 0x8c
 8001f9e:	9904      	ldr	r1, [sp, #16]
 8001fa0:	9806      	ldr	r0, [sp, #24]
 8001fa2:	f004 f8a7 	bl	80060f4 <__sprint_r>
 8001fa6:	2800      	cmp	r0, #0
 8001fa8:	f47f ab2f 	bne.w	800160a <_vfprintf_r+0x262>
 8001fac:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8001fae:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8001fb2:	e4d7      	b.n	8001964 <_vfprintf_r+0x5bc>
 8001fb4:	aa23      	add	r2, sp, #140	; 0x8c
 8001fb6:	9904      	ldr	r1, [sp, #16]
 8001fb8:	9806      	ldr	r0, [sp, #24]
 8001fba:	f004 f89b 	bl	80060f4 <__sprint_r>
 8001fbe:	2800      	cmp	r0, #0
 8001fc0:	f43f ad1e 	beq.w	8001a00 <_vfprintf_r+0x658>
 8001fc4:	f7ff bb21 	b.w	800160a <_vfprintf_r+0x262>
 8001fc8:	aa23      	add	r2, sp, #140	; 0x8c
 8001fca:	9904      	ldr	r1, [sp, #16]
 8001fcc:	9806      	ldr	r0, [sp, #24]
 8001fce:	f004 f891 	bl	80060f4 <__sprint_r>
 8001fd2:	2800      	cmp	r0, #0
 8001fd4:	f47f ab19 	bne.w	800160a <_vfprintf_r+0x262>
 8001fd8:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8001fda:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8001fde:	e4ae      	b.n	800193e <_vfprintf_r+0x596>
 8001fe0:	aa23      	add	r2, sp, #140	; 0x8c
 8001fe2:	9904      	ldr	r1, [sp, #16]
 8001fe4:	9806      	ldr	r0, [sp, #24]
 8001fe6:	f004 f885 	bl	80060f4 <__sprint_r>
 8001fea:	2800      	cmp	r0, #0
 8001fec:	f47f ab0d 	bne.w	800160a <_vfprintf_r+0x262>
 8001ff0:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8001ff2:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8001ff6:	e455      	b.n	80018a4 <_vfprintf_r+0x4fc>
 8001ff8:	aa23      	add	r2, sp, #140	; 0x8c
 8001ffa:	9904      	ldr	r1, [sp, #16]
 8001ffc:	9806      	ldr	r0, [sp, #24]
 8001ffe:	f004 f879 	bl	80060f4 <__sprint_r>
 8002002:	2800      	cmp	r0, #0
 8002004:	f47f ab01 	bne.w	800160a <_vfprintf_r+0x262>
 8002008:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800200a:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800200e:	e459      	b.n	80018c4 <_vfprintf_r+0x51c>
 8002010:	f1bb 0f00 	cmp.w	fp, #0
 8002014:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 8002018:	f2c0 830b 	blt.w	8002632 <_vfprintf_r+0x128a>
 800201c:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8002020:	9303      	str	r3, [sp, #12]
 8002022:	ea54 0305 	orrs.w	r3, r4, r5
 8002026:	f47f ad21 	bne.w	8001a6c <_vfprintf_r+0x6c4>
 800202a:	f1bb 0f00 	cmp.w	fp, #0
 800202e:	f43f ae8d 	beq.w	8001d4c <_vfprintf_r+0x9a4>
 8002032:	2700      	movs	r7, #0
 8002034:	e6b3      	b.n	8001d9e <_vfprintf_r+0x9f6>
 8002036:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8002038:	2d00      	cmp	r5, #0
 800203a:	f340 82a8 	ble.w	800258e <_vfprintf_r+0x11e6>
 800203e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002040:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002042:	4293      	cmp	r3, r2
 8002044:	bfa8      	it	ge
 8002046:	4613      	movge	r3, r2
 8002048:	2b00      	cmp	r3, #0
 800204a:	461d      	mov	r5, r3
 800204c:	dd0d      	ble.n	800206a <_vfprintf_r+0xcc2>
 800204e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8002050:	f8c9 6000 	str.w	r6, [r9]
 8002054:	3301      	adds	r3, #1
 8002056:	442c      	add	r4, r5
 8002058:	2b07      	cmp	r3, #7
 800205a:	9425      	str	r4, [sp, #148]	; 0x94
 800205c:	f8c9 5004 	str.w	r5, [r9, #4]
 8002060:	9324      	str	r3, [sp, #144]	; 0x90
 8002062:	f300 8382 	bgt.w	800276a <_vfprintf_r+0x13c2>
 8002066:	f109 0908 	add.w	r9, r9, #8
 800206a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800206c:	2d00      	cmp	r5, #0
 800206e:	bfa8      	it	ge
 8002070:	1b5b      	subge	r3, r3, r5
 8002072:	2b00      	cmp	r3, #0
 8002074:	461d      	mov	r5, r3
 8002076:	f340 80be 	ble.w	80021f6 <_vfprintf_r+0xe4e>
 800207a:	4ab9      	ldr	r2, [pc, #740]	; (8002360 <_vfprintf_r+0xfb8>)
 800207c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800207e:	920b      	str	r2, [sp, #44]	; 0x2c
 8002080:	2d10      	cmp	r5, #16
 8002082:	f340 826b 	ble.w	800255c <_vfprintf_r+0x11b4>
 8002086:	4622      	mov	r2, r4
 8002088:	2710      	movs	r7, #16
 800208a:	f8dd b018 	ldr.w	fp, [sp, #24]
 800208e:	9c04      	ldr	r4, [sp, #16]
 8002090:	e005      	b.n	800209e <_vfprintf_r+0xcf6>
 8002092:	f109 0908 	add.w	r9, r9, #8
 8002096:	3d10      	subs	r5, #16
 8002098:	2d10      	cmp	r5, #16
 800209a:	f340 825e 	ble.w	800255a <_vfprintf_r+0x11b2>
 800209e:	3301      	adds	r3, #1
 80020a0:	3210      	adds	r2, #16
 80020a2:	2b07      	cmp	r3, #7
 80020a4:	9225      	str	r2, [sp, #148]	; 0x94
 80020a6:	9324      	str	r3, [sp, #144]	; 0x90
 80020a8:	f8c9 a000 	str.w	sl, [r9]
 80020ac:	f8c9 7004 	str.w	r7, [r9, #4]
 80020b0:	ddef      	ble.n	8002092 <_vfprintf_r+0xcea>
 80020b2:	aa23      	add	r2, sp, #140	; 0x8c
 80020b4:	4621      	mov	r1, r4
 80020b6:	4658      	mov	r0, fp
 80020b8:	f004 f81c 	bl	80060f4 <__sprint_r>
 80020bc:	2800      	cmp	r0, #0
 80020be:	f47f aaa4 	bne.w	800160a <_vfprintf_r+0x262>
 80020c2:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80020c4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80020c6:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 80020ca:	e7e4      	b.n	8002096 <_vfprintf_r+0xcee>
 80020cc:	aa23      	add	r2, sp, #140	; 0x8c
 80020ce:	9904      	ldr	r1, [sp, #16]
 80020d0:	9806      	ldr	r0, [sp, #24]
 80020d2:	f004 f80f 	bl	80060f4 <__sprint_r>
 80020d6:	2800      	cmp	r0, #0
 80020d8:	f47f aa97 	bne.w	800160a <_vfprintf_r+0x262>
 80020dc:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 80020e0:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80020e2:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 80020e6:	f7ff bbcd 	b.w	8001884 <_vfprintf_r+0x4dc>
 80020ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80020ec:	6814      	ldr	r4, [r2, #0]
 80020ee:	4613      	mov	r3, r2
 80020f0:	3304      	adds	r3, #4
 80020f2:	17e5      	asrs	r5, r4, #31
 80020f4:	930a      	str	r3, [sp, #40]	; 0x28
 80020f6:	4622      	mov	r2, r4
 80020f8:	462b      	mov	r3, r5
 80020fa:	e4f4      	b.n	8001ae6 <_vfprintf_r+0x73e>
 80020fc:	1e5e      	subs	r6, r3, #1
 80020fe:	2e00      	cmp	r6, #0
 8002100:	f77f af3f 	ble.w	8001f82 <_vfprintf_r+0xbda>
 8002104:	4b96      	ldr	r3, [pc, #600]	; (8002360 <_vfprintf_r+0xfb8>)
 8002106:	930b      	str	r3, [sp, #44]	; 0x2c
 8002108:	2e10      	cmp	r6, #16
 800210a:	f340 8110 	ble.w	800232e <_vfprintf_r+0xf86>
 800210e:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8002112:	2710      	movs	r7, #16
 8002114:	46b0      	mov	r8, r6
 8002116:	f8dd b018 	ldr.w	fp, [sp, #24]
 800211a:	9e04      	ldr	r6, [sp, #16]
 800211c:	e007      	b.n	800212e <_vfprintf_r+0xd86>
 800211e:	f109 0908 	add.w	r9, r9, #8
 8002122:	f1a8 0810 	sub.w	r8, r8, #16
 8002126:	f1b8 0f10 	cmp.w	r8, #16
 800212a:	f340 80fd 	ble.w	8002328 <_vfprintf_r+0xf80>
 800212e:	3501      	adds	r5, #1
 8002130:	3410      	adds	r4, #16
 8002132:	2d07      	cmp	r5, #7
 8002134:	9425      	str	r4, [sp, #148]	; 0x94
 8002136:	9524      	str	r5, [sp, #144]	; 0x90
 8002138:	f8c9 a000 	str.w	sl, [r9]
 800213c:	f8c9 7004 	str.w	r7, [r9, #4]
 8002140:	dded      	ble.n	800211e <_vfprintf_r+0xd76>
 8002142:	aa23      	add	r2, sp, #140	; 0x8c
 8002144:	4631      	mov	r1, r6
 8002146:	4658      	mov	r0, fp
 8002148:	f003 ffd4 	bl	80060f4 <__sprint_r>
 800214c:	2800      	cmp	r0, #0
 800214e:	f47f aa5c 	bne.w	800160a <_vfprintf_r+0x262>
 8002152:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8002154:	9d24      	ldr	r5, [sp, #144]	; 0x90
 8002156:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800215a:	e7e2      	b.n	8002122 <_vfprintf_r+0xd7a>
 800215c:	9903      	ldr	r1, [sp, #12]
 800215e:	f011 0210 	ands.w	r2, r1, #16
 8002162:	d020      	beq.n	80021a6 <_vfprintf_r+0xdfe>
 8002164:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002166:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 800216a:	f1bb 0f00 	cmp.w	fp, #0
 800216e:	6804      	ldr	r4, [r0, #0]
 8002170:	f100 0704 	add.w	r7, r0, #4
 8002174:	f04f 0500 	mov.w	r5, #0
 8002178:	db26      	blt.n	80021c8 <_vfprintf_r+0xe20>
 800217a:	460a      	mov	r2, r1
 800217c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002180:	9203      	str	r2, [sp, #12]
 8002182:	ea54 0205 	orrs.w	r2, r4, r5
 8002186:	970a      	str	r7, [sp, #40]	; 0x28
 8002188:	461f      	mov	r7, r3
 800218a:	f47f ab03 	bne.w	8001794 <_vfprintf_r+0x3ec>
 800218e:	e4bd      	b.n	8001b0c <_vfprintf_r+0x764>
 8002190:	3301      	adds	r3, #1
 8002192:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002194:	9324      	str	r3, [sp, #144]	; 0x90
 8002196:	442c      	add	r4, r5
 8002198:	2b07      	cmp	r3, #7
 800219a:	9425      	str	r4, [sp, #148]	; 0x94
 800219c:	e889 0024 	stmia.w	r9, {r2, r5}
 80021a0:	f77f abde 	ble.w	8001960 <_vfprintf_r+0x5b8>
 80021a4:	e6fa      	b.n	8001f9c <_vfprintf_r+0xbf4>
 80021a6:	9903      	ldr	r1, [sp, #12]
 80021a8:	f011 0340 	ands.w	r3, r1, #64	; 0x40
 80021ac:	f040 8248 	bne.w	8002640 <_vfprintf_r+0x1298>
 80021b0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80021b2:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 80021b6:	f1bb 0f00 	cmp.w	fp, #0
 80021ba:	680c      	ldr	r4, [r1, #0]
 80021bc:	f101 0704 	add.w	r7, r1, #4
 80021c0:	f04f 0500 	mov.w	r5, #0
 80021c4:	f280 811a 	bge.w	80023fc <_vfprintf_r+0x1054>
 80021c8:	970a      	str	r7, [sp, #40]	; 0x28
 80021ca:	461f      	mov	r7, r3
 80021cc:	ea54 0305 	orrs.w	r3, r4, r5
 80021d0:	f47f aae0 	bne.w	8001794 <_vfprintf_r+0x3ec>
 80021d4:	ae40      	add	r6, sp, #256	; 0x100
 80021d6:	3430      	adds	r4, #48	; 0x30
 80021d8:	f806 4d41 	strb.w	r4, [r6, #-65]!
 80021dc:	f7ff baf4 	b.w	80017c8 <_vfprintf_r+0x420>
 80021e0:	aa23      	add	r2, sp, #140	; 0x8c
 80021e2:	9904      	ldr	r1, [sp, #16]
 80021e4:	9806      	ldr	r0, [sp, #24]
 80021e6:	f003 ff85 	bl	80060f4 <__sprint_r>
 80021ea:	2800      	cmp	r0, #0
 80021ec:	f47f aa0d 	bne.w	800160a <_vfprintf_r+0x262>
 80021f0:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80021f2:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 80021f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80021f8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80021fa:	4432      	add	r2, r6
 80021fc:	4617      	mov	r7, r2
 80021fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002200:	4293      	cmp	r3, r2
 8002202:	db47      	blt.n	8002294 <_vfprintf_r+0xeec>
 8002204:	9a03      	ldr	r2, [sp, #12]
 8002206:	07d2      	lsls	r2, r2, #31
 8002208:	d444      	bmi.n	8002294 <_vfprintf_r+0xeec>
 800220a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800220c:	440e      	add	r6, r1
 800220e:	1bf5      	subs	r5, r6, r7
 8002210:	1acb      	subs	r3, r1, r3
 8002212:	429d      	cmp	r5, r3
 8002214:	bfa8      	it	ge
 8002216:	461d      	movge	r5, r3
 8002218:	2d00      	cmp	r5, #0
 800221a:	462e      	mov	r6, r5
 800221c:	dd0d      	ble.n	800223a <_vfprintf_r+0xe92>
 800221e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8002220:	f8c9 7000 	str.w	r7, [r9]
 8002224:	3201      	adds	r2, #1
 8002226:	442c      	add	r4, r5
 8002228:	2a07      	cmp	r2, #7
 800222a:	9425      	str	r4, [sp, #148]	; 0x94
 800222c:	f8c9 5004 	str.w	r5, [r9, #4]
 8002230:	9224      	str	r2, [sp, #144]	; 0x90
 8002232:	f300 832b 	bgt.w	800288c <_vfprintf_r+0x14e4>
 8002236:	f109 0908 	add.w	r9, r9, #8
 800223a:	2e00      	cmp	r6, #0
 800223c:	bfac      	ite	ge
 800223e:	1b9d      	subge	r5, r3, r6
 8002240:	461d      	movlt	r5, r3
 8002242:	2d00      	cmp	r5, #0
 8002244:	f77f ab8e 	ble.w	8001964 <_vfprintf_r+0x5bc>
 8002248:	4a45      	ldr	r2, [pc, #276]	; (8002360 <_vfprintf_r+0xfb8>)
 800224a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800224c:	920b      	str	r2, [sp, #44]	; 0x2c
 800224e:	2d10      	cmp	r5, #16
 8002250:	dd9e      	ble.n	8002190 <_vfprintf_r+0xde8>
 8002252:	2610      	movs	r6, #16
 8002254:	9f06      	ldr	r7, [sp, #24]
 8002256:	f8dd b010 	ldr.w	fp, [sp, #16]
 800225a:	e004      	b.n	8002266 <_vfprintf_r+0xebe>
 800225c:	f109 0908 	add.w	r9, r9, #8
 8002260:	3d10      	subs	r5, #16
 8002262:	2d10      	cmp	r5, #16
 8002264:	dd94      	ble.n	8002190 <_vfprintf_r+0xde8>
 8002266:	3301      	adds	r3, #1
 8002268:	3410      	adds	r4, #16
 800226a:	2b07      	cmp	r3, #7
 800226c:	9425      	str	r4, [sp, #148]	; 0x94
 800226e:	9324      	str	r3, [sp, #144]	; 0x90
 8002270:	f8c9 a000 	str.w	sl, [r9]
 8002274:	f8c9 6004 	str.w	r6, [r9, #4]
 8002278:	ddf0      	ble.n	800225c <_vfprintf_r+0xeb4>
 800227a:	aa23      	add	r2, sp, #140	; 0x8c
 800227c:	4659      	mov	r1, fp
 800227e:	4638      	mov	r0, r7
 8002280:	f003 ff38 	bl	80060f4 <__sprint_r>
 8002284:	2800      	cmp	r0, #0
 8002286:	f47f a9c0 	bne.w	800160a <_vfprintf_r+0x262>
 800228a:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800228c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800228e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8002292:	e7e5      	b.n	8002260 <_vfprintf_r+0xeb8>
 8002294:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8002296:	9812      	ldr	r0, [sp, #72]	; 0x48
 8002298:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800229a:	f8c9 1000 	str.w	r1, [r9]
 800229e:	3201      	adds	r2, #1
 80022a0:	4404      	add	r4, r0
 80022a2:	2a07      	cmp	r2, #7
 80022a4:	9425      	str	r4, [sp, #148]	; 0x94
 80022a6:	f8c9 0004 	str.w	r0, [r9, #4]
 80022aa:	9224      	str	r2, [sp, #144]	; 0x90
 80022ac:	f300 82ca 	bgt.w	8002844 <_vfprintf_r+0x149c>
 80022b0:	f109 0908 	add.w	r9, r9, #8
 80022b4:	e7a9      	b.n	800220a <_vfprintf_r+0xe62>
 80022b6:	9b03      	ldr	r3, [sp, #12]
 80022b8:	07df      	lsls	r7, r3, #31
 80022ba:	f53f ae2c 	bmi.w	8001f16 <_vfprintf_r+0xb6e>
 80022be:	3501      	adds	r5, #1
 80022c0:	3401      	adds	r4, #1
 80022c2:	2301      	movs	r3, #1
 80022c4:	2d07      	cmp	r5, #7
 80022c6:	9425      	str	r4, [sp, #148]	; 0x94
 80022c8:	9524      	str	r5, [sp, #144]	; 0x90
 80022ca:	f8c9 6000 	str.w	r6, [r9]
 80022ce:	f8c9 3004 	str.w	r3, [r9, #4]
 80022d2:	f77f ae54 	ble.w	8001f7e <_vfprintf_r+0xbd6>
 80022d6:	aa23      	add	r2, sp, #140	; 0x8c
 80022d8:	9904      	ldr	r1, [sp, #16]
 80022da:	9806      	ldr	r0, [sp, #24]
 80022dc:	f003 ff0a 	bl	80060f4 <__sprint_r>
 80022e0:	2800      	cmp	r0, #0
 80022e2:	f47f a992 	bne.w	800160a <_vfprintf_r+0x262>
 80022e6:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80022e8:	9d24      	ldr	r5, [sp, #144]	; 0x90
 80022ea:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 80022ee:	e648      	b.n	8001f82 <_vfprintf_r+0xbda>
 80022f0:	aa23      	add	r2, sp, #140	; 0x8c
 80022f2:	9904      	ldr	r1, [sp, #16]
 80022f4:	9806      	ldr	r0, [sp, #24]
 80022f6:	f003 fefd 	bl	80060f4 <__sprint_r>
 80022fa:	2800      	cmp	r0, #0
 80022fc:	f47f a985 	bne.w	800160a <_vfprintf_r+0x262>
 8002300:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8002302:	9d24      	ldr	r5, [sp, #144]	; 0x90
 8002304:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8002308:	e613      	b.n	8001f32 <_vfprintf_r+0xb8a>
 800230a:	aa23      	add	r2, sp, #140	; 0x8c
 800230c:	9904      	ldr	r1, [sp, #16]
 800230e:	9806      	ldr	r0, [sp, #24]
 8002310:	f003 fef0 	bl	80060f4 <__sprint_r>
 8002314:	2800      	cmp	r0, #0
 8002316:	f47f a978 	bne.w	800160a <_vfprintf_r+0x262>
 800231a:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800231c:	9d24      	ldr	r5, [sp, #144]	; 0x90
 800231e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8002322:	e615      	b.n	8001f50 <_vfprintf_r+0xba8>
 8002324:	2400      	movs	r4, #0
 8002326:	e755      	b.n	80021d4 <_vfprintf_r+0xe2c>
 8002328:	4646      	mov	r6, r8
 800232a:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 800232e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002330:	3501      	adds	r5, #1
 8002332:	4434      	add	r4, r6
 8002334:	2d07      	cmp	r5, #7
 8002336:	9425      	str	r4, [sp, #148]	; 0x94
 8002338:	9524      	str	r5, [sp, #144]	; 0x90
 800233a:	e889 0048 	stmia.w	r9, {r3, r6}
 800233e:	f77f ae1e 	ble.w	8001f7e <_vfprintf_r+0xbd6>
 8002342:	e7c8      	b.n	80022d6 <_vfprintf_r+0xf2e>
 8002344:	aa23      	add	r2, sp, #140	; 0x8c
 8002346:	9904      	ldr	r1, [sp, #16]
 8002348:	9806      	ldr	r0, [sp, #24]
 800234a:	f003 fed3 	bl	80060f4 <__sprint_r>
 800234e:	2800      	cmp	r0, #0
 8002350:	f47f a95b 	bne.w	800160a <_vfprintf_r+0x262>
 8002354:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8002356:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800235a:	f7ff bab7 	b.w	80018cc <_vfprintf_r+0x524>
 800235e:	bf00      	nop
 8002360:	0800d024 	.word	0x0800d024
 8002364:	4264      	negs	r4, r4
 8002366:	f04f 072d 	mov.w	r7, #45	; 0x2d
 800236a:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800236e:	f1bb 0f00 	cmp.w	fp, #0
 8002372:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 8002376:	f6ff aa0d 	blt.w	8001794 <_vfprintf_r+0x3ec>
 800237a:	9b03      	ldr	r3, [sp, #12]
 800237c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002380:	9303      	str	r3, [sp, #12]
 8002382:	f7ff ba07 	b.w	8001794 <_vfprintf_r+0x3ec>
 8002386:	9903      	ldr	r1, [sp, #12]
 8002388:	f011 0340 	ands.w	r3, r1, #64	; 0x40
 800238c:	d017      	beq.n	80023be <_vfprintf_r+0x1016>
 800238e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002390:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
 8002394:	4603      	mov	r3, r0
 8002396:	f1bb 0f00 	cmp.w	fp, #0
 800239a:	f103 0304 	add.w	r3, r3, #4
 800239e:	8804      	ldrh	r4, [r0, #0]
 80023a0:	f04f 0500 	mov.w	r5, #0
 80023a4:	f2c0 8314 	blt.w	80029d0 <_vfprintf_r+0x1628>
 80023a8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80023ac:	9103      	str	r1, [sp, #12]
 80023ae:	ea54 0105 	orrs.w	r1, r4, r5
 80023b2:	930a      	str	r3, [sp, #40]	; 0x28
 80023b4:	f43f ace1 	beq.w	8001d7a <_vfprintf_r+0x9d2>
 80023b8:	4617      	mov	r7, r2
 80023ba:	f7ff b95c 	b.w	8001676 <_vfprintf_r+0x2ce>
 80023be:	990a      	ldr	r1, [sp, #40]	; 0x28
 80023c0:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 80023c4:	f1bb 0f00 	cmp.w	fp, #0
 80023c8:	680c      	ldr	r4, [r1, #0]
 80023ca:	f101 0704 	add.w	r7, r1, #4
 80023ce:	f04f 0500 	mov.w	r5, #0
 80023d2:	db02      	blt.n	80023da <_vfprintf_r+0x1032>
 80023d4:	9a03      	ldr	r2, [sp, #12]
 80023d6:	f7ff b9af 	b.w	8001738 <_vfprintf_r+0x390>
 80023da:	970a      	str	r7, [sp, #40]	; 0x28
 80023dc:	2700      	movs	r7, #0
 80023de:	f7ff b94a 	b.w	8001676 <_vfprintf_r+0x2ce>
 80023e2:	9b03      	ldr	r3, [sp, #12]
 80023e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80023e6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80023ea:	4613      	mov	r3, r2
 80023ec:	f000 8140 	beq.w	8002670 <_vfprintf_r+0x12c8>
 80023f0:	3304      	adds	r3, #4
 80023f2:	8814      	ldrh	r4, [r2, #0]
 80023f4:	930a      	str	r3, [sp, #40]	; 0x28
 80023f6:	2500      	movs	r5, #0
 80023f8:	f7ff bb1a 	b.w	8001a30 <_vfprintf_r+0x688>
 80023fc:	9a03      	ldr	r2, [sp, #12]
 80023fe:	e6bd      	b.n	800217c <_vfprintf_r+0xdd4>
 8002400:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8002404:	4602      	mov	r2, r0
 8002406:	460b      	mov	r3, r1
 8002408:	f005 f81a 	bl	8007440 <__aeabi_dcmpun>
 800240c:	2800      	cmp	r0, #0
 800240e:	f040 82e1 	bne.w	80029d4 <_vfprintf_r+0x162c>
 8002412:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002414:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 8002418:	f023 0720 	bic.w	r7, r3, #32
 800241c:	f000 8259 	beq.w	80028d2 <_vfprintf_r+0x152a>
 8002420:	2f47      	cmp	r7, #71	; 0x47
 8002422:	f000 8153 	beq.w	80026cc <_vfprintf_r+0x1324>
 8002426:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002428:	9a03      	ldr	r2, [sp, #12]
 800242a:	2b00      	cmp	r3, #0
 800242c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002430:	920b      	str	r2, [sp, #44]	; 0x2c
 8002432:	f2c0 8256 	blt.w	80028e2 <_vfprintf_r+0x153a>
 8002436:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
 800243a:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
 800243e:	2300      	movs	r3, #0
 8002440:	9305      	str	r3, [sp, #20]
 8002442:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002444:	2b66      	cmp	r3, #102	; 0x66
 8002446:	f000 8230 	beq.w	80028aa <_vfprintf_r+0x1502>
 800244a:	2b46      	cmp	r3, #70	; 0x46
 800244c:	f000 8123 	beq.w	8002696 <_vfprintf_r+0x12ee>
 8002450:	2f45      	cmp	r7, #69	; 0x45
 8002452:	bf0c      	ite	eq
 8002454:	f10b 0501 	addeq.w	r5, fp, #1
 8002458:	465d      	movne	r5, fp
 800245a:	aa21      	add	r2, sp, #132	; 0x84
 800245c:	ab1e      	add	r3, sp, #120	; 0x78
 800245e:	9201      	str	r2, [sp, #4]
 8002460:	9300      	str	r3, [sp, #0]
 8002462:	462a      	mov	r2, r5
 8002464:	ab1d      	add	r3, sp, #116	; 0x74
 8002466:	2102      	movs	r1, #2
 8002468:	ed9d 0b18 	vldr	d0, [sp, #96]	; 0x60
 800246c:	9806      	ldr	r0, [sp, #24]
 800246e:	f000 fcbb 	bl	8002de8 <_dtoa_r>
 8002472:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002474:	2b67      	cmp	r3, #103	; 0x67
 8002476:	4606      	mov	r6, r0
 8002478:	f040 8271 	bne.w	800295e <_vfprintf_r+0x15b6>
 800247c:	9b03      	ldr	r3, [sp, #12]
 800247e:	07da      	lsls	r2, r3, #31
 8002480:	f140 8290 	bpl.w	80029a4 <_vfprintf_r+0x15fc>
 8002484:	1974      	adds	r4, r6, r5
 8002486:	2200      	movs	r2, #0
 8002488:	2300      	movs	r3, #0
 800248a:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 800248e:	f004 ffa5 	bl	80073dc <__aeabi_dcmpeq>
 8002492:	2800      	cmp	r0, #0
 8002494:	f040 8175 	bne.w	8002782 <_vfprintf_r+0x13da>
 8002498:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800249a:	429c      	cmp	r4, r3
 800249c:	d906      	bls.n	80024ac <_vfprintf_r+0x1104>
 800249e:	2130      	movs	r1, #48	; 0x30
 80024a0:	1c5a      	adds	r2, r3, #1
 80024a2:	9221      	str	r2, [sp, #132]	; 0x84
 80024a4:	7019      	strb	r1, [r3, #0]
 80024a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80024a8:	429c      	cmp	r4, r3
 80024aa:	d8f9      	bhi.n	80024a0 <_vfprintf_r+0x10f8>
 80024ac:	1b9b      	subs	r3, r3, r6
 80024ae:	2f47      	cmp	r7, #71	; 0x47
 80024b0:	930e      	str	r3, [sp, #56]	; 0x38
 80024b2:	f000 8153 	beq.w	800275c <_vfprintf_r+0x13b4>
 80024b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80024b8:	2b65      	cmp	r3, #101	; 0x65
 80024ba:	f340 825f 	ble.w	800297c <_vfprintf_r+0x15d4>
 80024be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80024c0:	2b66      	cmp	r3, #102	; 0x66
 80024c2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80024c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80024c6:	f000 8222 	beq.w	800290e <_vfprintf_r+0x1566>
 80024ca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80024cc:	990e      	ldr	r1, [sp, #56]	; 0x38
 80024ce:	428a      	cmp	r2, r1
 80024d0:	f2c0 8210 	blt.w	80028f4 <_vfprintf_r+0x154c>
 80024d4:	9b03      	ldr	r3, [sp, #12]
 80024d6:	07db      	lsls	r3, r3, #31
 80024d8:	f100 8266 	bmi.w	80029a8 <_vfprintf_r+0x1600>
 80024dc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80024e0:	9209      	str	r2, [sp, #36]	; 0x24
 80024e2:	2267      	movs	r2, #103	; 0x67
 80024e4:	920d      	str	r2, [sp, #52]	; 0x34
 80024e6:	9a05      	ldr	r2, [sp, #20]
 80024e8:	2a00      	cmp	r2, #0
 80024ea:	f040 8114 	bne.w	8002716 <_vfprintf_r+0x136e>
 80024ee:	9305      	str	r3, [sp, #20]
 80024f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80024f2:	9303      	str	r3, [sp, #12]
 80024f4:	4693      	mov	fp, r2
 80024f6:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 80024fa:	f7ff b96f 	b.w	80017dc <_vfprintf_r+0x434>
 80024fe:	f027 0707 	bic.w	r7, r7, #7
 8002502:	ed97 7b00 	vldr	d7, [r7]
 8002506:	f107 0308 	add.w	r3, r7, #8
 800250a:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800250e:	930a      	str	r3, [sp, #40]	; 0x28
 8002510:	f7ff bb79 	b.w	8001c06 <_vfprintf_r+0x85e>
 8002514:	9b03      	ldr	r3, [sp, #12]
 8002516:	06de      	lsls	r6, r3, #27
 8002518:	d40b      	bmi.n	8002532 <_vfprintf_r+0x118a>
 800251a:	9b03      	ldr	r3, [sp, #12]
 800251c:	065d      	lsls	r5, r3, #25
 800251e:	d508      	bpl.n	8002532 <_vfprintf_r+0x118a>
 8002520:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002522:	6813      	ldr	r3, [r2, #0]
 8002524:	3204      	adds	r2, #4
 8002526:	920a      	str	r2, [sp, #40]	; 0x28
 8002528:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800252c:	801a      	strh	r2, [r3, #0]
 800252e:	f7fe bf7d 	b.w	800142c <_vfprintf_r+0x84>
 8002532:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002534:	6813      	ldr	r3, [r2, #0]
 8002536:	3204      	adds	r2, #4
 8002538:	920a      	str	r2, [sp, #40]	; 0x28
 800253a:	9a07      	ldr	r2, [sp, #28]
 800253c:	601a      	str	r2, [r3, #0]
 800253e:	f7fe bf75 	b.w	800142c <_vfprintf_r+0x84>
 8002542:	2700      	movs	r7, #0
 8002544:	45bb      	cmp	fp, r7
 8002546:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 800254a:	f6ff ac28 	blt.w	8001d9e <_vfprintf_r+0x9f6>
 800254e:	9b03      	ldr	r3, [sp, #12]
 8002550:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002554:	9303      	str	r3, [sp, #12]
 8002556:	f7ff bbf5 	b.w	8001d44 <_vfprintf_r+0x99c>
 800255a:	4614      	mov	r4, r2
 800255c:	3301      	adds	r3, #1
 800255e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002560:	9324      	str	r3, [sp, #144]	; 0x90
 8002562:	442c      	add	r4, r5
 8002564:	2b07      	cmp	r3, #7
 8002566:	9425      	str	r4, [sp, #148]	; 0x94
 8002568:	e889 0024 	stmia.w	r9, {r2, r5}
 800256c:	f73f ae38 	bgt.w	80021e0 <_vfprintf_r+0xe38>
 8002570:	f109 0908 	add.w	r9, r9, #8
 8002574:	e63f      	b.n	80021f6 <_vfprintf_r+0xe4e>
 8002576:	aa23      	add	r2, sp, #140	; 0x8c
 8002578:	9904      	ldr	r1, [sp, #16]
 800257a:	9806      	ldr	r0, [sp, #24]
 800257c:	f003 fdba 	bl	80060f4 <__sprint_r>
 8002580:	2800      	cmp	r0, #0
 8002582:	f47f a842 	bne.w	800160a <_vfprintf_r+0x262>
 8002586:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8002588:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800258c:	e429      	b.n	8001de2 <_vfprintf_r+0xa3a>
 800258e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8002590:	4aba      	ldr	r2, [pc, #744]	; (800287c <_vfprintf_r+0x14d4>)
 8002592:	f8c9 2000 	str.w	r2, [r9]
 8002596:	3301      	adds	r3, #1
 8002598:	3401      	adds	r4, #1
 800259a:	2201      	movs	r2, #1
 800259c:	2b07      	cmp	r3, #7
 800259e:	9425      	str	r4, [sp, #148]	; 0x94
 80025a0:	9324      	str	r3, [sp, #144]	; 0x90
 80025a2:	f8c9 2004 	str.w	r2, [r9, #4]
 80025a6:	dc69      	bgt.n	800267c <_vfprintf_r+0x12d4>
 80025a8:	f109 0908 	add.w	r9, r9, #8
 80025ac:	b92d      	cbnz	r5, 80025ba <_vfprintf_r+0x1212>
 80025ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80025b0:	b91b      	cbnz	r3, 80025ba <_vfprintf_r+0x1212>
 80025b2:	9b03      	ldr	r3, [sp, #12]
 80025b4:	07d9      	lsls	r1, r3, #31
 80025b6:	f57f a9d5 	bpl.w	8001964 <_vfprintf_r+0x5bc>
 80025ba:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80025bc:	9912      	ldr	r1, [sp, #72]	; 0x48
 80025be:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80025c0:	f8c9 2000 	str.w	r2, [r9]
 80025c4:	3301      	adds	r3, #1
 80025c6:	440c      	add	r4, r1
 80025c8:	2b07      	cmp	r3, #7
 80025ca:	9425      	str	r4, [sp, #148]	; 0x94
 80025cc:	f8c9 1004 	str.w	r1, [r9, #4]
 80025d0:	9324      	str	r3, [sp, #144]	; 0x90
 80025d2:	f300 81d5 	bgt.w	8002980 <_vfprintf_r+0x15d8>
 80025d6:	f109 0908 	add.w	r9, r9, #8
 80025da:	426d      	negs	r5, r5
 80025dc:	2d00      	cmp	r5, #0
 80025de:	f340 80b0 	ble.w	8002742 <_vfprintf_r+0x139a>
 80025e2:	4aa7      	ldr	r2, [pc, #668]	; (8002880 <_vfprintf_r+0x14d8>)
 80025e4:	920b      	str	r2, [sp, #44]	; 0x2c
 80025e6:	2d10      	cmp	r5, #16
 80025e8:	f340 811f 	ble.w	800282a <_vfprintf_r+0x1482>
 80025ec:	4622      	mov	r2, r4
 80025ee:	2710      	movs	r7, #16
 80025f0:	f8dd b018 	ldr.w	fp, [sp, #24]
 80025f4:	9c04      	ldr	r4, [sp, #16]
 80025f6:	e005      	b.n	8002604 <_vfprintf_r+0x125c>
 80025f8:	f109 0908 	add.w	r9, r9, #8
 80025fc:	3d10      	subs	r5, #16
 80025fe:	2d10      	cmp	r5, #16
 8002600:	f340 8112 	ble.w	8002828 <_vfprintf_r+0x1480>
 8002604:	3301      	adds	r3, #1
 8002606:	3210      	adds	r2, #16
 8002608:	2b07      	cmp	r3, #7
 800260a:	9225      	str	r2, [sp, #148]	; 0x94
 800260c:	9324      	str	r3, [sp, #144]	; 0x90
 800260e:	f8c9 a000 	str.w	sl, [r9]
 8002612:	f8c9 7004 	str.w	r7, [r9, #4]
 8002616:	ddef      	ble.n	80025f8 <_vfprintf_r+0x1250>
 8002618:	aa23      	add	r2, sp, #140	; 0x8c
 800261a:	4621      	mov	r1, r4
 800261c:	4658      	mov	r0, fp
 800261e:	f003 fd69 	bl	80060f4 <__sprint_r>
 8002622:	2800      	cmp	r0, #0
 8002624:	f47e aff1 	bne.w	800160a <_vfprintf_r+0x262>
 8002628:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800262a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800262c:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8002630:	e7e4      	b.n	80025fc <_vfprintf_r+0x1254>
 8002632:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8002634:	f7ff bbac 	b.w	8001d90 <_vfprintf_r+0x9e8>
 8002638:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800263c:	f7fe bfeb 	b.w	8001616 <_vfprintf_r+0x26e>
 8002640:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002642:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
 8002646:	4603      	mov	r3, r0
 8002648:	f1bb 0f00 	cmp.w	fp, #0
 800264c:	f103 0304 	add.w	r3, r3, #4
 8002650:	8804      	ldrh	r4, [r0, #0]
 8002652:	f04f 0500 	mov.w	r5, #0
 8002656:	f2c0 81b0 	blt.w	80029ba <_vfprintf_r+0x1612>
 800265a:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800265e:	9103      	str	r1, [sp, #12]
 8002660:	ea54 0105 	orrs.w	r1, r4, r5
 8002664:	930a      	str	r3, [sp, #40]	; 0x28
 8002666:	4617      	mov	r7, r2
 8002668:	f47f a894 	bne.w	8001794 <_vfprintf_r+0x3ec>
 800266c:	f7ff ba4e 	b.w	8001b0c <_vfprintf_r+0x764>
 8002670:	3304      	adds	r3, #4
 8002672:	6814      	ldr	r4, [r2, #0]
 8002674:	930a      	str	r3, [sp, #40]	; 0x28
 8002676:	2500      	movs	r5, #0
 8002678:	f7ff b9da 	b.w	8001a30 <_vfprintf_r+0x688>
 800267c:	aa23      	add	r2, sp, #140	; 0x8c
 800267e:	9904      	ldr	r1, [sp, #16]
 8002680:	9806      	ldr	r0, [sp, #24]
 8002682:	f003 fd37 	bl	80060f4 <__sprint_r>
 8002686:	2800      	cmp	r0, #0
 8002688:	f47e afbf 	bne.w	800160a <_vfprintf_r+0x262>
 800268c:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800268e:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8002690:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8002694:	e78a      	b.n	80025ac <_vfprintf_r+0x1204>
 8002696:	aa21      	add	r2, sp, #132	; 0x84
 8002698:	ab1e      	add	r3, sp, #120	; 0x78
 800269a:	9201      	str	r2, [sp, #4]
 800269c:	9300      	str	r3, [sp, #0]
 800269e:	465a      	mov	r2, fp
 80026a0:	ab1d      	add	r3, sp, #116	; 0x74
 80026a2:	2103      	movs	r1, #3
 80026a4:	ed9d 0b18 	vldr	d0, [sp, #96]	; 0x60
 80026a8:	9806      	ldr	r0, [sp, #24]
 80026aa:	f000 fb9d 	bl	8002de8 <_dtoa_r>
 80026ae:	465d      	mov	r5, fp
 80026b0:	4606      	mov	r6, r0
 80026b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80026b4:	2b46      	cmp	r3, #70	; 0x46
 80026b6:	eb06 0405 	add.w	r4, r6, r5
 80026ba:	f47f aee4 	bne.w	8002486 <_vfprintf_r+0x10de>
 80026be:	7833      	ldrb	r3, [r6, #0]
 80026c0:	2b30      	cmp	r3, #48	; 0x30
 80026c2:	f000 8196 	beq.w	80029f2 <_vfprintf_r+0x164a>
 80026c6:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80026c8:	442c      	add	r4, r5
 80026ca:	e6dc      	b.n	8002486 <_vfprintf_r+0x10de>
 80026cc:	f1bb 0f00 	cmp.w	fp, #0
 80026d0:	bf08      	it	eq
 80026d2:	f04f 0b01 	moveq.w	fp, #1
 80026d6:	e6a6      	b.n	8002426 <_vfprintf_r+0x107e>
 80026d8:	9b03      	ldr	r3, [sp, #12]
 80026da:	f043 0320 	orr.w	r3, r3, #32
 80026de:	9303      	str	r3, [sp, #12]
 80026e0:	f108 0801 	add.w	r8, r8, #1
 80026e4:	f898 3000 	ldrb.w	r3, [r8]
 80026e8:	f7fe bed3 	b.w	8001492 <_vfprintf_r+0xea>
 80026ec:	aa23      	add	r2, sp, #140	; 0x8c
 80026ee:	9904      	ldr	r1, [sp, #16]
 80026f0:	9806      	ldr	r0, [sp, #24]
 80026f2:	f003 fcff 	bl	80060f4 <__sprint_r>
 80026f6:	2800      	cmp	r0, #0
 80026f8:	f47e af87 	bne.w	800160a <_vfprintf_r+0x262>
 80026fc:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80026fe:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8002702:	f7ff bb86 	b.w	8001e12 <_vfprintf_r+0xa6a>
 8002706:	4630      	mov	r0, r6
 8002708:	f7fe fc5a 	bl	8000fc0 <strlen>
 800270c:	46a3      	mov	fp, r4
 800270e:	4603      	mov	r3, r0
 8002710:	9009      	str	r0, [sp, #36]	; 0x24
 8002712:	f7ff bb06 	b.w	8001d22 <_vfprintf_r+0x97a>
 8002716:	272d      	movs	r7, #45	; 0x2d
 8002718:	9305      	str	r3, [sp, #20]
 800271a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800271c:	9303      	str	r3, [sp, #12]
 800271e:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 8002722:	f04f 0b00 	mov.w	fp, #0
 8002726:	f7ff b85a 	b.w	80017de <_vfprintf_r+0x436>
 800272a:	aa23      	add	r2, sp, #140	; 0x8c
 800272c:	9904      	ldr	r1, [sp, #16]
 800272e:	9806      	ldr	r0, [sp, #24]
 8002730:	f003 fce0 	bl	80060f4 <__sprint_r>
 8002734:	2800      	cmp	r0, #0
 8002736:	f47e af68 	bne.w	800160a <_vfprintf_r+0x262>
 800273a:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800273c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800273e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8002742:	990e      	ldr	r1, [sp, #56]	; 0x38
 8002744:	f8c9 6000 	str.w	r6, [r9]
 8002748:	3301      	adds	r3, #1
 800274a:	440c      	add	r4, r1
 800274c:	2b07      	cmp	r3, #7
 800274e:	9425      	str	r4, [sp, #148]	; 0x94
 8002750:	9324      	str	r3, [sp, #144]	; 0x90
 8002752:	f8c9 1004 	str.w	r1, [r9, #4]
 8002756:	f77f a903 	ble.w	8001960 <_vfprintf_r+0x5b8>
 800275a:	e41f      	b.n	8001f9c <_vfprintf_r+0xbf4>
 800275c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800275e:	1cd8      	adds	r0, r3, #3
 8002760:	db11      	blt.n	8002786 <_vfprintf_r+0x13de>
 8002762:	459b      	cmp	fp, r3
 8002764:	db0f      	blt.n	8002786 <_vfprintf_r+0x13de>
 8002766:	930f      	str	r3, [sp, #60]	; 0x3c
 8002768:	e6af      	b.n	80024ca <_vfprintf_r+0x1122>
 800276a:	aa23      	add	r2, sp, #140	; 0x8c
 800276c:	9904      	ldr	r1, [sp, #16]
 800276e:	9806      	ldr	r0, [sp, #24]
 8002770:	f003 fcc0 	bl	80060f4 <__sprint_r>
 8002774:	2800      	cmp	r0, #0
 8002776:	f47e af48 	bne.w	800160a <_vfprintf_r+0x262>
 800277a:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800277c:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8002780:	e473      	b.n	800206a <_vfprintf_r+0xcc2>
 8002782:	4623      	mov	r3, r4
 8002784:	e692      	b.n	80024ac <_vfprintf_r+0x1104>
 8002786:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002788:	3a02      	subs	r2, #2
 800278a:	920d      	str	r2, [sp, #52]	; 0x34
 800278c:	3b01      	subs	r3, #1
 800278e:	2b00      	cmp	r3, #0
 8002790:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 8002794:	931d      	str	r3, [sp, #116]	; 0x74
 8002796:	bfb8      	it	lt
 8002798:	425b      	neglt	r3, r3
 800279a:	f88d 207c 	strb.w	r2, [sp, #124]	; 0x7c
 800279e:	bfb4      	ite	lt
 80027a0:	222d      	movlt	r2, #45	; 0x2d
 80027a2:	222b      	movge	r2, #43	; 0x2b
 80027a4:	2b09      	cmp	r3, #9
 80027a6:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
 80027aa:	f340 8109 	ble.w	80029c0 <_vfprintf_r+0x1618>
 80027ae:	f10d 008b 	add.w	r0, sp, #139	; 0x8b
 80027b2:	4604      	mov	r4, r0
 80027b4:	4a33      	ldr	r2, [pc, #204]	; (8002884 <_vfprintf_r+0x14dc>)
 80027b6:	fb82 2103 	smull	r2, r1, r2, r3
 80027ba:	17da      	asrs	r2, r3, #31
 80027bc:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 80027c0:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80027c4:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 80027c8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80027cc:	2a09      	cmp	r2, #9
 80027ce:	4613      	mov	r3, r2
 80027d0:	f804 1d01 	strb.w	r1, [r4, #-1]!
 80027d4:	dcee      	bgt.n	80027b4 <_vfprintf_r+0x140c>
 80027d6:	4621      	mov	r1, r4
 80027d8:	3330      	adds	r3, #48	; 0x30
 80027da:	b2da      	uxtb	r2, r3
 80027dc:	f801 2d01 	strb.w	r2, [r1, #-1]!
 80027e0:	4288      	cmp	r0, r1
 80027e2:	f240 816d 	bls.w	8002ac0 <_vfprintf_r+0x1718>
 80027e6:	f10d 017e 	add.w	r1, sp, #126	; 0x7e
 80027ea:	4623      	mov	r3, r4
 80027ec:	e001      	b.n	80027f2 <_vfprintf_r+0x144a>
 80027ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80027f2:	f801 2b01 	strb.w	r2, [r1], #1
 80027f6:	4298      	cmp	r0, r3
 80027f8:	d1f9      	bne.n	80027ee <_vfprintf_r+0x1446>
 80027fa:	1c43      	adds	r3, r0, #1
 80027fc:	1b1b      	subs	r3, r3, r4
 80027fe:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
 8002802:	4413      	add	r3, r2
 8002804:	aa1f      	add	r2, sp, #124	; 0x7c
 8002806:	1a9b      	subs	r3, r3, r2
 8002808:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800280a:	9315      	str	r3, [sp, #84]	; 0x54
 800280c:	2a01      	cmp	r2, #1
 800280e:	4413      	add	r3, r2
 8002810:	9309      	str	r3, [sp, #36]	; 0x24
 8002812:	f340 80fc 	ble.w	8002a0e <_vfprintf_r+0x1666>
 8002816:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002818:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800281a:	4413      	add	r3, r2
 800281c:	2200      	movs	r2, #0
 800281e:	9309      	str	r3, [sp, #36]	; 0x24
 8002820:	920f      	str	r2, [sp, #60]	; 0x3c
 8002822:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002826:	e65e      	b.n	80024e6 <_vfprintf_r+0x113e>
 8002828:	4614      	mov	r4, r2
 800282a:	3301      	adds	r3, #1
 800282c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800282e:	9324      	str	r3, [sp, #144]	; 0x90
 8002830:	442c      	add	r4, r5
 8002832:	2b07      	cmp	r3, #7
 8002834:	9425      	str	r4, [sp, #148]	; 0x94
 8002836:	e889 0024 	stmia.w	r9, {r2, r5}
 800283a:	f73f af76 	bgt.w	800272a <_vfprintf_r+0x1382>
 800283e:	f109 0908 	add.w	r9, r9, #8
 8002842:	e77e      	b.n	8002742 <_vfprintf_r+0x139a>
 8002844:	aa23      	add	r2, sp, #140	; 0x8c
 8002846:	9904      	ldr	r1, [sp, #16]
 8002848:	9806      	ldr	r0, [sp, #24]
 800284a:	f003 fc53 	bl	80060f4 <__sprint_r>
 800284e:	2800      	cmp	r0, #0
 8002850:	f47e aedb 	bne.w	800160a <_vfprintf_r+0x262>
 8002854:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8002856:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8002858:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800285c:	e4d5      	b.n	800220a <_vfprintf_r+0xe62>
 800285e:	2d06      	cmp	r5, #6
 8002860:	462b      	mov	r3, r5
 8002862:	bf28      	it	cs
 8002864:	2306      	movcs	r3, #6
 8002866:	9309      	str	r3, [sp, #36]	; 0x24
 8002868:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800286c:	46b3      	mov	fp, r6
 800286e:	970a      	str	r7, [sp, #40]	; 0x28
 8002870:	960f      	str	r6, [sp, #60]	; 0x3c
 8002872:	4637      	mov	r7, r6
 8002874:	9305      	str	r3, [sp, #20]
 8002876:	4e04      	ldr	r6, [pc, #16]	; (8002888 <_vfprintf_r+0x14e0>)
 8002878:	f7fe bfb0 	b.w	80017dc <_vfprintf_r+0x434>
 800287c:	0801c3d8 	.word	0x0801c3d8
 8002880:	0800d024 	.word	0x0800d024
 8002884:	66666667 	.word	0x66666667
 8002888:	0801c3d0 	.word	0x0801c3d0
 800288c:	aa23      	add	r2, sp, #140	; 0x8c
 800288e:	9904      	ldr	r1, [sp, #16]
 8002890:	9806      	ldr	r0, [sp, #24]
 8002892:	f003 fc2f 	bl	80060f4 <__sprint_r>
 8002896:	2800      	cmp	r0, #0
 8002898:	f47e aeb7 	bne.w	800160a <_vfprintf_r+0x262>
 800289c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800289e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80028a0:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 80028a8:	e4c7      	b.n	800223a <_vfprintf_r+0xe92>
 80028aa:	aa21      	add	r2, sp, #132	; 0x84
 80028ac:	ab1e      	add	r3, sp, #120	; 0x78
 80028ae:	9201      	str	r2, [sp, #4]
 80028b0:	9300      	str	r3, [sp, #0]
 80028b2:	465a      	mov	r2, fp
 80028b4:	ab1d      	add	r3, sp, #116	; 0x74
 80028b6:	2103      	movs	r1, #3
 80028b8:	ed9d 0b18 	vldr	d0, [sp, #96]	; 0x60
 80028bc:	9806      	ldr	r0, [sp, #24]
 80028be:	f000 fa93 	bl	8002de8 <_dtoa_r>
 80028c2:	465d      	mov	r5, fp
 80028c4:	4606      	mov	r6, r0
 80028c6:	eb00 040b 	add.w	r4, r0, fp
 80028ca:	e6f8      	b.n	80026be <_vfprintf_r+0x1316>
 80028cc:	9303      	str	r3, [sp, #12]
 80028ce:	f7ff b8cd 	b.w	8001a6c <_vfprintf_r+0x6c4>
 80028d2:	f04f 0b06 	mov.w	fp, #6
 80028d6:	e5a6      	b.n	8002426 <_vfprintf_r+0x107e>
 80028d8:	272d      	movs	r7, #45	; 0x2d
 80028da:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 80028de:	f7ff b9b9 	b.w	8001c54 <_vfprintf_r+0x8ac>
 80028e2:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
 80028e6:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
 80028ea:	9319      	str	r3, [sp, #100]	; 0x64
 80028ec:	232d      	movs	r3, #45	; 0x2d
 80028ee:	9118      	str	r1, [sp, #96]	; 0x60
 80028f0:	9305      	str	r3, [sp, #20]
 80028f2:	e5a6      	b.n	8002442 <_vfprintf_r+0x109a>
 80028f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80028f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80028f8:	4413      	add	r3, r2
 80028fa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80028fc:	9309      	str	r3, [sp, #36]	; 0x24
 80028fe:	2a00      	cmp	r2, #0
 8002900:	f340 808f 	ble.w	8002a22 <_vfprintf_r+0x167a>
 8002904:	2267      	movs	r2, #103	; 0x67
 8002906:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800290a:	920d      	str	r2, [sp, #52]	; 0x34
 800290c:	e5eb      	b.n	80024e6 <_vfprintf_r+0x113e>
 800290e:	2b00      	cmp	r3, #0
 8002910:	f340 808f 	ble.w	8002a32 <_vfprintf_r+0x168a>
 8002914:	f1bb 0f00 	cmp.w	fp, #0
 8002918:	d162      	bne.n	80029e0 <_vfprintf_r+0x1638>
 800291a:	9a03      	ldr	r2, [sp, #12]
 800291c:	07d1      	lsls	r1, r2, #31
 800291e:	d45f      	bmi.n	80029e0 <_vfprintf_r+0x1638>
 8002920:	461a      	mov	r2, r3
 8002922:	9209      	str	r2, [sp, #36]	; 0x24
 8002924:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002928:	e5dd      	b.n	80024e6 <_vfprintf_r+0x113e>
 800292a:	9b03      	ldr	r3, [sp, #12]
 800292c:	07db      	lsls	r3, r3, #31
 800292e:	465f      	mov	r7, fp
 8002930:	d505      	bpl.n	800293e <_vfprintf_r+0x1596>
 8002932:	ae40      	add	r6, sp, #256	; 0x100
 8002934:	2330      	movs	r3, #48	; 0x30
 8002936:	f806 3d41 	strb.w	r3, [r6, #-65]!
 800293a:	f7fe bf45 	b.w	80017c8 <_vfprintf_r+0x420>
 800293e:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8002942:	ae30      	add	r6, sp, #192	; 0xc0
 8002944:	f7fe bf43 	b.w	80017ce <_vfprintf_r+0x426>
 8002948:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 800294c:	970a      	str	r7, [sp, #40]	; 0x28
 800294e:	9305      	str	r3, [sp, #20]
 8002950:	9509      	str	r5, [sp, #36]	; 0x24
 8002952:	4683      	mov	fp, r0
 8002954:	900f      	str	r0, [sp, #60]	; 0x3c
 8002956:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 800295a:	f7fe bf3f 	b.w	80017dc <_vfprintf_r+0x434>
 800295e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002960:	2b47      	cmp	r3, #71	; 0x47
 8002962:	f47f ad8f 	bne.w	8002484 <_vfprintf_r+0x10dc>
 8002966:	9b03      	ldr	r3, [sp, #12]
 8002968:	07dc      	lsls	r4, r3, #31
 800296a:	f53f aea2 	bmi.w	80026b2 <_vfprintf_r+0x130a>
 800296e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002970:	2f47      	cmp	r7, #71	; 0x47
 8002972:	eba3 0306 	sub.w	r3, r3, r6
 8002976:	930e      	str	r3, [sp, #56]	; 0x38
 8002978:	f43f aef0 	beq.w	800275c <_vfprintf_r+0x13b4>
 800297c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800297e:	e705      	b.n	800278c <_vfprintf_r+0x13e4>
 8002980:	aa23      	add	r2, sp, #140	; 0x8c
 8002982:	9904      	ldr	r1, [sp, #16]
 8002984:	9806      	ldr	r0, [sp, #24]
 8002986:	f003 fbb5 	bl	80060f4 <__sprint_r>
 800298a:	2800      	cmp	r0, #0
 800298c:	f47e ae3d 	bne.w	800160a <_vfprintf_r+0x262>
 8002990:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8002992:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8002994:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8002996:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800299a:	e61e      	b.n	80025da <_vfprintf_r+0x1232>
 800299c:	46a0      	mov	r8, r4
 800299e:	2500      	movs	r5, #0
 80029a0:	f7fe bd79 	b.w	8001496 <_vfprintf_r+0xee>
 80029a4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80029a6:	e581      	b.n	80024ac <_vfprintf_r+0x1104>
 80029a8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80029aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80029ac:	4413      	add	r3, r2
 80029ae:	2267      	movs	r2, #103	; 0x67
 80029b0:	9309      	str	r3, [sp, #36]	; 0x24
 80029b2:	920d      	str	r2, [sp, #52]	; 0x34
 80029b4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80029b8:	e595      	b.n	80024e6 <_vfprintf_r+0x113e>
 80029ba:	930a      	str	r3, [sp, #40]	; 0x28
 80029bc:	4617      	mov	r7, r2
 80029be:	e405      	b.n	80021cc <_vfprintf_r+0xe24>
 80029c0:	3330      	adds	r3, #48	; 0x30
 80029c2:	2230      	movs	r2, #48	; 0x30
 80029c4:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 80029c8:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
 80029cc:	ab20      	add	r3, sp, #128	; 0x80
 80029ce:	e719      	b.n	8002804 <_vfprintf_r+0x145c>
 80029d0:	930a      	str	r3, [sp, #40]	; 0x28
 80029d2:	e503      	b.n	80023dc <_vfprintf_r+0x1034>
 80029d4:	4e3c      	ldr	r6, [pc, #240]	; (8002ac8 <_vfprintf_r+0x1720>)
 80029d6:	4b3d      	ldr	r3, [pc, #244]	; (8002acc <_vfprintf_r+0x1724>)
 80029d8:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 80029dc:	f7ff b93c 	b.w	8001c58 <_vfprintf_r+0x8b0>
 80029e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80029e2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80029e4:	189d      	adds	r5, r3, r2
 80029e6:	eb05 030b 	add.w	r3, r5, fp
 80029ea:	9309      	str	r3, [sp, #36]	; 0x24
 80029ec:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80029f0:	e579      	b.n	80024e6 <_vfprintf_r+0x113e>
 80029f2:	2200      	movs	r2, #0
 80029f4:	2300      	movs	r3, #0
 80029f6:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 80029fa:	f004 fcef 	bl	80073dc <__aeabi_dcmpeq>
 80029fe:	2800      	cmp	r0, #0
 8002a00:	f47f ae61 	bne.w	80026c6 <_vfprintf_r+0x131e>
 8002a04:	f1c5 0501 	rsb	r5, r5, #1
 8002a08:	951d      	str	r5, [sp, #116]	; 0x74
 8002a0a:	442c      	add	r4, r5
 8002a0c:	e53b      	b.n	8002486 <_vfprintf_r+0x10de>
 8002a0e:	9b03      	ldr	r3, [sp, #12]
 8002a10:	f013 0301 	ands.w	r3, r3, #1
 8002a14:	f47f aeff 	bne.w	8002816 <_vfprintf_r+0x146e>
 8002a18:	930f      	str	r3, [sp, #60]	; 0x3c
 8002a1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a1c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002a20:	e561      	b.n	80024e6 <_vfprintf_r+0x113e>
 8002a22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002a24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002a26:	f1c3 0301 	rsb	r3, r3, #1
 8002a2a:	441a      	add	r2, r3
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	9209      	str	r2, [sp, #36]	; 0x24
 8002a30:	e768      	b.n	8002904 <_vfprintf_r+0x155c>
 8002a32:	f1bb 0f00 	cmp.w	fp, #0
 8002a36:	d102      	bne.n	8002a3e <_vfprintf_r+0x1696>
 8002a38:	9b03      	ldr	r3, [sp, #12]
 8002a3a:	07da      	lsls	r2, r3, #31
 8002a3c:	d507      	bpl.n	8002a4e <_vfprintf_r+0x16a6>
 8002a3e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002a40:	1c5d      	adds	r5, r3, #1
 8002a42:	eb05 030b 	add.w	r3, r5, fp
 8002a46:	9309      	str	r3, [sp, #36]	; 0x24
 8002a48:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002a4c:	e54b      	b.n	80024e6 <_vfprintf_r+0x113e>
 8002a4e:	2301      	movs	r3, #1
 8002a50:	9309      	str	r3, [sp, #36]	; 0x24
 8002a52:	e548      	b.n	80024e6 <_vfprintf_r+0x113e>
 8002a54:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002a56:	f898 3001 	ldrb.w	r3, [r8, #1]
 8002a5a:	6805      	ldr	r5, [r0, #0]
 8002a5c:	3004      	adds	r0, #4
 8002a5e:	2d00      	cmp	r5, #0
 8002a60:	900a      	str	r0, [sp, #40]	; 0x28
 8002a62:	46a0      	mov	r8, r4
 8002a64:	f6be ad15 	bge.w	8001492 <_vfprintf_r+0xea>
 8002a68:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8002a6c:	f7fe bd11 	b.w	8001492 <_vfprintf_r+0xea>
 8002a70:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 8002a74:	f7ff b89a 	b.w	8001bac <_vfprintf_r+0x804>
 8002a78:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 8002a7c:	f7ff b864 	b.w	8001b48 <_vfprintf_r+0x7a0>
 8002a80:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 8002a84:	f7fe bfc6 	b.w	8001a14 <_vfprintf_r+0x66c>
 8002a88:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 8002a8c:	f7fe be63 	b.w	8001756 <_vfprintf_r+0x3ae>
 8002a90:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 8002a94:	f7ff b819 	b.w	8001aca <_vfprintf_r+0x722>
 8002a98:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 8002a9c:	f7fe bdd1 	b.w	8001642 <_vfprintf_r+0x29a>
 8002aa0:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 8002aa4:	f7ff b958 	b.w	8001d58 <_vfprintf_r+0x9b0>
 8002aa8:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 8002aac:	f7fe be2a 	b.w	8001704 <_vfprintf_r+0x35c>
 8002ab0:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 8002ab4:	f7ff b8f4 	b.w	8001ca0 <_vfprintf_r+0x8f8>
 8002ab8:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 8002abc:	f7ff b893 	b.w	8001be6 <_vfprintf_r+0x83e>
 8002ac0:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
 8002ac4:	e69e      	b.n	8002804 <_vfprintf_r+0x145c>
 8002ac6:	bf00      	nop
 8002ac8:	0801c3a4 	.word	0x0801c3a4
 8002acc:	0801c3a0 	.word	0x0801c3a0

08002ad0 <vfprintf>:
 8002ad0:	b410      	push	{r4}
 8002ad2:	4c04      	ldr	r4, [pc, #16]	; (8002ae4 <vfprintf+0x14>)
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	460a      	mov	r2, r1
 8002ad8:	4601      	mov	r1, r0
 8002ada:	6820      	ldr	r0, [r4, #0]
 8002adc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002ae0:	f7fe bc62 	b.w	80013a8 <_vfprintf_r>
 8002ae4:	20000008 	.word	0x20000008

08002ae8 <__sbprintf>:
 8002ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002aea:	460c      	mov	r4, r1
 8002aec:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 8002af0:	8989      	ldrh	r1, [r1, #12]
 8002af2:	6e66      	ldr	r6, [r4, #100]	; 0x64
 8002af4:	89e5      	ldrh	r5, [r4, #14]
 8002af6:	9619      	str	r6, [sp, #100]	; 0x64
 8002af8:	f021 0102 	bic.w	r1, r1, #2
 8002afc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8002afe:	f8ad 500e 	strh.w	r5, [sp, #14]
 8002b02:	2500      	movs	r5, #0
 8002b04:	69e7      	ldr	r7, [r4, #28]
 8002b06:	f8ad 100c 	strh.w	r1, [sp, #12]
 8002b0a:	9609      	str	r6, [sp, #36]	; 0x24
 8002b0c:	9506      	str	r5, [sp, #24]
 8002b0e:	ae1a      	add	r6, sp, #104	; 0x68
 8002b10:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8002b14:	4669      	mov	r1, sp
 8002b16:	9600      	str	r6, [sp, #0]
 8002b18:	9604      	str	r6, [sp, #16]
 8002b1a:	9502      	str	r5, [sp, #8]
 8002b1c:	9505      	str	r5, [sp, #20]
 8002b1e:	9707      	str	r7, [sp, #28]
 8002b20:	4606      	mov	r6, r0
 8002b22:	f7fe fc41 	bl	80013a8 <_vfprintf_r>
 8002b26:	1e05      	subs	r5, r0, #0
 8002b28:	db07      	blt.n	8002b3a <__sbprintf+0x52>
 8002b2a:	4630      	mov	r0, r6
 8002b2c:	4669      	mov	r1, sp
 8002b2e:	f001 f919 	bl	8003d64 <_fflush_r>
 8002b32:	2800      	cmp	r0, #0
 8002b34:	bf18      	it	ne
 8002b36:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 8002b3a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8002b3e:	065b      	lsls	r3, r3, #25
 8002b40:	d503      	bpl.n	8002b4a <__sbprintf+0x62>
 8002b42:	89a3      	ldrh	r3, [r4, #12]
 8002b44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b48:	81a3      	strh	r3, [r4, #12]
 8002b4a:	4628      	mov	r0, r5
 8002b4c:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 8002b50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b52:	bf00      	nop

08002b54 <__swsetup_r>:
 8002b54:	b538      	push	{r3, r4, r5, lr}
 8002b56:	4b30      	ldr	r3, [pc, #192]	; (8002c18 <__swsetup_r+0xc4>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4605      	mov	r5, r0
 8002b5c:	460c      	mov	r4, r1
 8002b5e:	b113      	cbz	r3, 8002b66 <__swsetup_r+0x12>
 8002b60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b62:	2a00      	cmp	r2, #0
 8002b64:	d038      	beq.n	8002bd8 <__swsetup_r+0x84>
 8002b66:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002b6a:	b293      	uxth	r3, r2
 8002b6c:	0718      	lsls	r0, r3, #28
 8002b6e:	d50c      	bpl.n	8002b8a <__swsetup_r+0x36>
 8002b70:	6920      	ldr	r0, [r4, #16]
 8002b72:	b1a8      	cbz	r0, 8002ba0 <__swsetup_r+0x4c>
 8002b74:	f013 0201 	ands.w	r2, r3, #1
 8002b78:	d01e      	beq.n	8002bb8 <__swsetup_r+0x64>
 8002b7a:	6963      	ldr	r3, [r4, #20]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	425b      	negs	r3, r3
 8002b80:	61a3      	str	r3, [r4, #24]
 8002b82:	60a2      	str	r2, [r4, #8]
 8002b84:	b1f0      	cbz	r0, 8002bc4 <__swsetup_r+0x70>
 8002b86:	2000      	movs	r0, #0
 8002b88:	bd38      	pop	{r3, r4, r5, pc}
 8002b8a:	06d9      	lsls	r1, r3, #27
 8002b8c:	d53c      	bpl.n	8002c08 <__swsetup_r+0xb4>
 8002b8e:	0758      	lsls	r0, r3, #29
 8002b90:	d426      	bmi.n	8002be0 <__swsetup_r+0x8c>
 8002b92:	6920      	ldr	r0, [r4, #16]
 8002b94:	f042 0308 	orr.w	r3, r2, #8
 8002b98:	81a3      	strh	r3, [r4, #12]
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	2800      	cmp	r0, #0
 8002b9e:	d1e9      	bne.n	8002b74 <__swsetup_r+0x20>
 8002ba0:	f403 7220 	and.w	r2, r3, #640	; 0x280
 8002ba4:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8002ba8:	d0e4      	beq.n	8002b74 <__swsetup_r+0x20>
 8002baa:	4628      	mov	r0, r5
 8002bac:	4621      	mov	r1, r4
 8002bae:	f001 fd81 	bl	80046b4 <__smakebuf_r>
 8002bb2:	89a3      	ldrh	r3, [r4, #12]
 8002bb4:	6920      	ldr	r0, [r4, #16]
 8002bb6:	e7dd      	b.n	8002b74 <__swsetup_r+0x20>
 8002bb8:	0799      	lsls	r1, r3, #30
 8002bba:	bf58      	it	pl
 8002bbc:	6962      	ldrpl	r2, [r4, #20]
 8002bbe:	60a2      	str	r2, [r4, #8]
 8002bc0:	2800      	cmp	r0, #0
 8002bc2:	d1e0      	bne.n	8002b86 <__swsetup_r+0x32>
 8002bc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002bc8:	061a      	lsls	r2, r3, #24
 8002bca:	d5dd      	bpl.n	8002b88 <__swsetup_r+0x34>
 8002bcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bd0:	81a3      	strh	r3, [r4, #12]
 8002bd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002bd6:	bd38      	pop	{r3, r4, r5, pc}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f001 f9d3 	bl	8003f84 <__sinit>
 8002bde:	e7c2      	b.n	8002b66 <__swsetup_r+0x12>
 8002be0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002be2:	b151      	cbz	r1, 8002bfa <__swsetup_r+0xa6>
 8002be4:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8002be8:	4299      	cmp	r1, r3
 8002bea:	d004      	beq.n	8002bf6 <__swsetup_r+0xa2>
 8002bec:	4628      	mov	r0, r5
 8002bee:	f001 fa37 	bl	8004060 <_free_r>
 8002bf2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	6323      	str	r3, [r4, #48]	; 0x30
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	6920      	ldr	r0, [r4, #16]
 8002bfe:	6063      	str	r3, [r4, #4]
 8002c00:	f022 0224 	bic.w	r2, r2, #36	; 0x24
 8002c04:	6020      	str	r0, [r4, #0]
 8002c06:	e7c5      	b.n	8002b94 <__swsetup_r+0x40>
 8002c08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c0c:	2309      	movs	r3, #9
 8002c0e:	602b      	str	r3, [r5, #0]
 8002c10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c14:	81a2      	strh	r2, [r4, #12]
 8002c16:	bd38      	pop	{r3, r4, r5, pc}
 8002c18:	20000008 	.word	0x20000008

08002c1c <__register_exitproc>:
 8002c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c20:	4c25      	ldr	r4, [pc, #148]	; (8002cb8 <__register_exitproc+0x9c>)
 8002c22:	6825      	ldr	r5, [r4, #0]
 8002c24:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
 8002c28:	4606      	mov	r6, r0
 8002c2a:	4688      	mov	r8, r1
 8002c2c:	4692      	mov	sl, r2
 8002c2e:	4699      	mov	r9, r3
 8002c30:	b3c4      	cbz	r4, 8002ca4 <__register_exitproc+0x88>
 8002c32:	6860      	ldr	r0, [r4, #4]
 8002c34:	281f      	cmp	r0, #31
 8002c36:	dc17      	bgt.n	8002c68 <__register_exitproc+0x4c>
 8002c38:	1c43      	adds	r3, r0, #1
 8002c3a:	b176      	cbz	r6, 8002c5a <__register_exitproc+0x3e>
 8002c3c:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8002c40:	2201      	movs	r2, #1
 8002c42:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
 8002c46:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
 8002c4a:	4082      	lsls	r2, r0
 8002c4c:	4311      	orrs	r1, r2
 8002c4e:	2e02      	cmp	r6, #2
 8002c50:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
 8002c54:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
 8002c58:	d01e      	beq.n	8002c98 <__register_exitproc+0x7c>
 8002c5a:	3002      	adds	r0, #2
 8002c5c:	6063      	str	r3, [r4, #4]
 8002c5e:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
 8002c62:	2000      	movs	r0, #0
 8002c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c68:	4b14      	ldr	r3, [pc, #80]	; (8002cbc <__register_exitproc+0xa0>)
 8002c6a:	b303      	cbz	r3, 8002cae <__register_exitproc+0x92>
 8002c6c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002c70:	f001 fd64 	bl	800473c <malloc>
 8002c74:	4604      	mov	r4, r0
 8002c76:	b1d0      	cbz	r0, 8002cae <__register_exitproc+0x92>
 8002c78:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 8002c7c:	2700      	movs	r7, #0
 8002c7e:	e880 0088 	stmia.w	r0, {r3, r7}
 8002c82:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 8002c86:	4638      	mov	r0, r7
 8002c88:	2301      	movs	r3, #1
 8002c8a:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
 8002c8e:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
 8002c92:	2e00      	cmp	r6, #0
 8002c94:	d0e1      	beq.n	8002c5a <__register_exitproc+0x3e>
 8002c96:	e7d1      	b.n	8002c3c <__register_exitproc+0x20>
 8002c98:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
 8002c9c:	430a      	orrs	r2, r1
 8002c9e:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
 8002ca2:	e7da      	b.n	8002c5a <__register_exitproc+0x3e>
 8002ca4:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
 8002ca8:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 8002cac:	e7c1      	b.n	8002c32 <__register_exitproc+0x16>
 8002cae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002cb6:	bf00      	nop
 8002cb8:	0800d010 	.word	0x0800d010
 8002cbc:	0800473d 	.word	0x0800473d

08002cc0 <quorem>:
 8002cc0:	6902      	ldr	r2, [r0, #16]
 8002cc2:	690b      	ldr	r3, [r1, #16]
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	f300 808d 	bgt.w	8002de4 <quorem+0x124>
 8002cca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8002cd2:	f101 0714 	add.w	r7, r1, #20
 8002cd6:	f100 0b14 	add.w	fp, r0, #20
 8002cda:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
 8002cde:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
 8002ce2:	ea4f 0488 	mov.w	r4, r8, lsl #2
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	3201      	adds	r2, #1
 8002cea:	fbb3 f9f2 	udiv	r9, r3, r2
 8002cee:	eb0b 0304 	add.w	r3, fp, r4
 8002cf2:	9400      	str	r4, [sp, #0]
 8002cf4:	eb07 0a04 	add.w	sl, r7, r4
 8002cf8:	9301      	str	r3, [sp, #4]
 8002cfa:	f1b9 0f00 	cmp.w	r9, #0
 8002cfe:	d039      	beq.n	8002d74 <quorem+0xb4>
 8002d00:	2500      	movs	r5, #0
 8002d02:	46bc      	mov	ip, r7
 8002d04:	46de      	mov	lr, fp
 8002d06:	462b      	mov	r3, r5
 8002d08:	f85c 6b04 	ldr.w	r6, [ip], #4
 8002d0c:	f8de 2000 	ldr.w	r2, [lr]
 8002d10:	b2b4      	uxth	r4, r6
 8002d12:	fb09 5504 	mla	r5, r9, r4, r5
 8002d16:	0c36      	lsrs	r6, r6, #16
 8002d18:	0c2c      	lsrs	r4, r5, #16
 8002d1a:	fb09 4406 	mla	r4, r9, r6, r4
 8002d1e:	b2ad      	uxth	r5, r5
 8002d20:	1b5b      	subs	r3, r3, r5
 8002d22:	b2a6      	uxth	r6, r4
 8002d24:	fa13 f382 	uxtah	r3, r3, r2
 8002d28:	ebc6 4612 	rsb	r6, r6, r2, lsr #16
 8002d2c:	eb06 4623 	add.w	r6, r6, r3, asr #16
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8002d36:	45e2      	cmp	sl, ip
 8002d38:	f84e 3b04 	str.w	r3, [lr], #4
 8002d3c:	ea4f 4514 	mov.w	r5, r4, lsr #16
 8002d40:	ea4f 4326 	mov.w	r3, r6, asr #16
 8002d44:	d2e0      	bcs.n	8002d08 <quorem+0x48>
 8002d46:	9b00      	ldr	r3, [sp, #0]
 8002d48:	f85b 3003 	ldr.w	r3, [fp, r3]
 8002d4c:	b993      	cbnz	r3, 8002d74 <quorem+0xb4>
 8002d4e:	9c01      	ldr	r4, [sp, #4]
 8002d50:	1f23      	subs	r3, r4, #4
 8002d52:	459b      	cmp	fp, r3
 8002d54:	d20c      	bcs.n	8002d70 <quorem+0xb0>
 8002d56:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8002d5a:	b94b      	cbnz	r3, 8002d70 <quorem+0xb0>
 8002d5c:	f1a4 0308 	sub.w	r3, r4, #8
 8002d60:	e002      	b.n	8002d68 <quorem+0xa8>
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	3b04      	subs	r3, #4
 8002d66:	b91a      	cbnz	r2, 8002d70 <quorem+0xb0>
 8002d68:	459b      	cmp	fp, r3
 8002d6a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8002d6e:	d3f8      	bcc.n	8002d62 <quorem+0xa2>
 8002d70:	f8c0 8010 	str.w	r8, [r0, #16]
 8002d74:	4604      	mov	r4, r0
 8002d76:	f002 fb51 	bl	800541c <__mcmp>
 8002d7a:	2800      	cmp	r0, #0
 8002d7c:	db2e      	blt.n	8002ddc <quorem+0x11c>
 8002d7e:	f109 0901 	add.w	r9, r9, #1
 8002d82:	465d      	mov	r5, fp
 8002d84:	2300      	movs	r3, #0
 8002d86:	f857 1b04 	ldr.w	r1, [r7], #4
 8002d8a:	6828      	ldr	r0, [r5, #0]
 8002d8c:	b28a      	uxth	r2, r1
 8002d8e:	1a9a      	subs	r2, r3, r2
 8002d90:	0c09      	lsrs	r1, r1, #16
 8002d92:	fa12 f280 	uxtah	r2, r2, r0
 8002d96:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
 8002d9a:	eb03 4322 	add.w	r3, r3, r2, asr #16
 8002d9e:	b291      	uxth	r1, r2
 8002da0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8002da4:	45ba      	cmp	sl, r7
 8002da6:	f845 1b04 	str.w	r1, [r5], #4
 8002daa:	ea4f 4323 	mov.w	r3, r3, asr #16
 8002dae:	d2ea      	bcs.n	8002d86 <quorem+0xc6>
 8002db0:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
 8002db4:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
 8002db8:	b982      	cbnz	r2, 8002ddc <quorem+0x11c>
 8002dba:	1f1a      	subs	r2, r3, #4
 8002dbc:	4593      	cmp	fp, r2
 8002dbe:	d20b      	bcs.n	8002dd8 <quorem+0x118>
 8002dc0:	f853 2c04 	ldr.w	r2, [r3, #-4]
 8002dc4:	b942      	cbnz	r2, 8002dd8 <quorem+0x118>
 8002dc6:	3b08      	subs	r3, #8
 8002dc8:	e002      	b.n	8002dd0 <quorem+0x110>
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	3b04      	subs	r3, #4
 8002dce:	b91a      	cbnz	r2, 8002dd8 <quorem+0x118>
 8002dd0:	459b      	cmp	fp, r3
 8002dd2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8002dd6:	d3f8      	bcc.n	8002dca <quorem+0x10a>
 8002dd8:	f8c4 8010 	str.w	r8, [r4, #16]
 8002ddc:	4648      	mov	r0, r9
 8002dde:	b003      	add	sp, #12
 8002de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002de4:	2000      	movs	r0, #0
 8002de6:	4770      	bx	lr

08002de8 <_dtoa_r>:
 8002de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dec:	ec57 6b10 	vmov	r6, r7, d0
 8002df0:	b09b      	sub	sp, #108	; 0x6c
 8002df2:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002df4:	9d24      	ldr	r5, [sp, #144]	; 0x90
 8002df6:	9100      	str	r1, [sp, #0]
 8002df8:	4681      	mov	r9, r0
 8002dfa:	9205      	str	r2, [sp, #20]
 8002dfc:	9303      	str	r3, [sp, #12]
 8002dfe:	ee10 aa10 	vmov	sl, s0
 8002e02:	46bb      	mov	fp, r7
 8002e04:	b154      	cbz	r4, 8002e1c <_dtoa_r+0x34>
 8002e06:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002e08:	6062      	str	r2, [r4, #4]
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	4093      	lsls	r3, r2
 8002e0e:	60a3      	str	r3, [r4, #8]
 8002e10:	4621      	mov	r1, r4
 8002e12:	f002 f8d5 	bl	8004fc0 <_Bfree>
 8002e16:	2300      	movs	r3, #0
 8002e18:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
 8002e1c:	f1bb 0f00 	cmp.w	fp, #0
 8002e20:	465c      	mov	r4, fp
 8002e22:	db34      	blt.n	8002e8e <_dtoa_r+0xa6>
 8002e24:	2300      	movs	r3, #0
 8002e26:	602b      	str	r3, [r5, #0]
 8002e28:	4ba1      	ldr	r3, [pc, #644]	; (80030b0 <_dtoa_r+0x2c8>)
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	4023      	ands	r3, r4
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d016      	beq.n	8002e60 <_dtoa_r+0x78>
 8002e32:	2200      	movs	r2, #0
 8002e34:	2300      	movs	r3, #0
 8002e36:	4650      	mov	r0, sl
 8002e38:	4659      	mov	r1, fp
 8002e3a:	f004 facf 	bl	80073dc <__aeabi_dcmpeq>
 8002e3e:	4656      	mov	r6, sl
 8002e40:	465f      	mov	r7, fp
 8002e42:	4680      	mov	r8, r0
 8002e44:	b348      	cbz	r0, 8002e9a <_dtoa_r+0xb2>
 8002e46:	9a03      	ldr	r2, [sp, #12]
 8002e48:	2301      	movs	r3, #1
 8002e4a:	6013      	str	r3, [r2, #0]
 8002e4c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	f000 80be 	beq.w	8002fd0 <_dtoa_r+0x1e8>
 8002e54:	4897      	ldr	r0, [pc, #604]	; (80030b4 <_dtoa_r+0x2cc>)
 8002e56:	6018      	str	r0, [r3, #0]
 8002e58:	3801      	subs	r0, #1
 8002e5a:	b01b      	add	sp, #108	; 0x6c
 8002e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e60:	9a03      	ldr	r2, [sp, #12]
 8002e62:	f242 730f 	movw	r3, #9999	; 0x270f
 8002e66:	6013      	str	r3, [r2, #0]
 8002e68:	f1ba 0f00 	cmp.w	sl, #0
 8002e6c:	f000 809a 	beq.w	8002fa4 <_dtoa_r+0x1bc>
 8002e70:	4891      	ldr	r0, [pc, #580]	; (80030b8 <_dtoa_r+0x2d0>)
 8002e72:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d0f0      	beq.n	8002e5a <_dtoa_r+0x72>
 8002e78:	78c3      	ldrb	r3, [r0, #3]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	f000 80aa 	beq.w	8002fd4 <_dtoa_r+0x1ec>
 8002e80:	f100 0308 	add.w	r3, r0, #8
 8002e84:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8002e86:	6013      	str	r3, [r2, #0]
 8002e88:	b01b      	add	sp, #108	; 0x6c
 8002e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e8e:	2301      	movs	r3, #1
 8002e90:	f02b 4400 	bic.w	r4, fp, #2147483648	; 0x80000000
 8002e94:	602b      	str	r3, [r5, #0]
 8002e96:	46a3      	mov	fp, r4
 8002e98:	e7c6      	b.n	8002e28 <_dtoa_r+0x40>
 8002e9a:	aa18      	add	r2, sp, #96	; 0x60
 8002e9c:	a919      	add	r1, sp, #100	; 0x64
 8002e9e:	ec47 6b10 	vmov	d0, r6, r7
 8002ea2:	4648      	mov	r0, r9
 8002ea4:	f002 fbf8 	bl	8005698 <__d2b>
 8002ea8:	0d25      	lsrs	r5, r4, #20
 8002eaa:	900a      	str	r0, [sp, #40]	; 0x28
 8002eac:	f040 8083 	bne.w	8002fb6 <_dtoa_r+0x1ce>
 8002eb0:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8002eb2:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8002eb4:	442e      	add	r6, r5
 8002eb6:	f206 4332 	addw	r3, r6, #1074	; 0x432
 8002eba:	2b20      	cmp	r3, #32
 8002ebc:	f340 8288 	ble.w	80033d0 <_dtoa_r+0x5e8>
 8002ec0:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8002ec4:	f206 4012 	addw	r0, r6, #1042	; 0x412
 8002ec8:	409c      	lsls	r4, r3
 8002eca:	fa2a f000 	lsr.w	r0, sl, r0
 8002ece:	4320      	orrs	r0, r4
 8002ed0:	f7fd fb34 	bl	800053c <__aeabi_ui2d>
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	1e74      	subs	r4, r6, #1
 8002ed8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8002edc:	930f      	str	r3, [sp, #60]	; 0x3c
 8002ede:	2200      	movs	r2, #0
 8002ee0:	4b76      	ldr	r3, [pc, #472]	; (80030bc <_dtoa_r+0x2d4>)
 8002ee2:	f7fd f9ed 	bl	80002c0 <__aeabi_dsub>
 8002ee6:	a36c      	add	r3, pc, #432	; (adr r3, 8003098 <_dtoa_r+0x2b0>)
 8002ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eec:	f7fd fb9c 	bl	8000628 <__aeabi_dmul>
 8002ef0:	a36b      	add	r3, pc, #428	; (adr r3, 80030a0 <_dtoa_r+0x2b8>)
 8002ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ef6:	f7fd f9e5 	bl	80002c4 <__adddf3>
 8002efa:	4606      	mov	r6, r0
 8002efc:	4620      	mov	r0, r4
 8002efe:	460f      	mov	r7, r1
 8002f00:	f7fd fb2c 	bl	800055c <__aeabi_i2d>
 8002f04:	a368      	add	r3, pc, #416	; (adr r3, 80030a8 <_dtoa_r+0x2c0>)
 8002f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f0a:	f7fd fb8d 	bl	8000628 <__aeabi_dmul>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	460b      	mov	r3, r1
 8002f12:	4630      	mov	r0, r6
 8002f14:	4639      	mov	r1, r7
 8002f16:	f7fd f9d5 	bl	80002c4 <__adddf3>
 8002f1a:	4606      	mov	r6, r0
 8002f1c:	460f      	mov	r7, r1
 8002f1e:	f7fd fd95 	bl	8000a4c <__aeabi_d2iz>
 8002f22:	2200      	movs	r2, #0
 8002f24:	9004      	str	r0, [sp, #16]
 8002f26:	2300      	movs	r3, #0
 8002f28:	4630      	mov	r0, r6
 8002f2a:	4639      	mov	r1, r7
 8002f2c:	f004 fa60 	bl	80073f0 <__aeabi_dcmplt>
 8002f30:	2800      	cmp	r0, #0
 8002f32:	f040 8228 	bne.w	8003386 <_dtoa_r+0x59e>
 8002f36:	9e04      	ldr	r6, [sp, #16]
 8002f38:	2e16      	cmp	r6, #22
 8002f3a:	f200 8221 	bhi.w	8003380 <_dtoa_r+0x598>
 8002f3e:	4b60      	ldr	r3, [pc, #384]	; (80030c0 <_dtoa_r+0x2d8>)
 8002f40:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8002f44:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f48:	4652      	mov	r2, sl
 8002f4a:	465b      	mov	r3, fp
 8002f4c:	f004 fa6e 	bl	800742c <__aeabi_dcmpgt>
 8002f50:	2800      	cmp	r0, #0
 8002f52:	f000 8242 	beq.w	80033da <_dtoa_r+0x5f2>
 8002f56:	1e73      	subs	r3, r6, #1
 8002f58:	9304      	str	r3, [sp, #16]
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	930d      	str	r3, [sp, #52]	; 0x34
 8002f5e:	1b2d      	subs	r5, r5, r4
 8002f60:	f1b5 0801 	subs.w	r8, r5, #1
 8002f64:	f100 822a 	bmi.w	80033bc <_dtoa_r+0x5d4>
 8002f68:	2300      	movs	r3, #0
 8002f6a:	9307      	str	r3, [sp, #28]
 8002f6c:	9b04      	ldr	r3, [sp, #16]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	f2c0 821b 	blt.w	80033aa <_dtoa_r+0x5c2>
 8002f74:	4498      	add	r8, r3
 8002f76:	930c      	str	r3, [sp, #48]	; 0x30
 8002f78:	2300      	movs	r3, #0
 8002f7a:	9306      	str	r3, [sp, #24]
 8002f7c:	9b00      	ldr	r3, [sp, #0]
 8002f7e:	2b09      	cmp	r3, #9
 8002f80:	d82a      	bhi.n	8002fd8 <_dtoa_r+0x1f0>
 8002f82:	2b05      	cmp	r3, #5
 8002f84:	f340 8644 	ble.w	8003c10 <_dtoa_r+0xe28>
 8002f88:	3b04      	subs	r3, #4
 8002f8a:	9300      	str	r3, [sp, #0]
 8002f8c:	2600      	movs	r6, #0
 8002f8e:	9b00      	ldr	r3, [sp, #0]
 8002f90:	3b02      	subs	r3, #2
 8002f92:	2b03      	cmp	r3, #3
 8002f94:	f200 8623 	bhi.w	8003bde <_dtoa_r+0xdf6>
 8002f98:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002f9c:	0224032b 	.word	0x0224032b
 8002fa0:	04500336 	.word	0x04500336
 8002fa4:	4b44      	ldr	r3, [pc, #272]	; (80030b8 <_dtoa_r+0x2d0>)
 8002fa6:	4a47      	ldr	r2, [pc, #284]	; (80030c4 <_dtoa_r+0x2dc>)
 8002fa8:	f3c4 0013 	ubfx	r0, r4, #0, #20
 8002fac:	2800      	cmp	r0, #0
 8002fae:	bf14      	ite	ne
 8002fb0:	4618      	movne	r0, r3
 8002fb2:	4610      	moveq	r0, r2
 8002fb4:	e75d      	b.n	8002e72 <_dtoa_r+0x8a>
 8002fb6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8002fba:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8002fbe:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8002fc2:	4650      	mov	r0, sl
 8002fc4:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 8002fc8:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8002fcc:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8002fce:	e786      	b.n	8002ede <_dtoa_r+0xf6>
 8002fd0:	483d      	ldr	r0, [pc, #244]	; (80030c8 <_dtoa_r+0x2e0>)
 8002fd2:	e742      	b.n	8002e5a <_dtoa_r+0x72>
 8002fd4:	1cc3      	adds	r3, r0, #3
 8002fd6:	e755      	b.n	8002e84 <_dtoa_r+0x9c>
 8002fd8:	2100      	movs	r1, #0
 8002fda:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 8002fde:	4648      	mov	r0, r9
 8002fe0:	460c      	mov	r4, r1
 8002fe2:	9100      	str	r1, [sp, #0]
 8002fe4:	f001 ffc6 	bl	8004f74 <_Balloc>
 8002fe8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002fec:	9308      	str	r3, [sp, #32]
 8002fee:	930e      	str	r3, [sp, #56]	; 0x38
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	9009      	str	r0, [sp, #36]	; 0x24
 8002ff4:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 8002ff8:	9405      	str	r4, [sp, #20]
 8002ffa:	930b      	str	r3, [sp, #44]	; 0x2c
 8002ffc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	f2c0 80d0 	blt.w	80031a4 <_dtoa_r+0x3bc>
 8003004:	9a04      	ldr	r2, [sp, #16]
 8003006:	2a0e      	cmp	r2, #14
 8003008:	f300 80cc 	bgt.w	80031a4 <_dtoa_r+0x3bc>
 800300c:	4b2c      	ldr	r3, [pc, #176]	; (80030c0 <_dtoa_r+0x2d8>)
 800300e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003012:	ed93 7b00 	vldr	d7, [r3]
 8003016:	9b05      	ldr	r3, [sp, #20]
 8003018:	2b00      	cmp	r3, #0
 800301a:	ed8d 7b00 	vstr	d7, [sp]
 800301e:	f2c0 82fe 	blt.w	800361e <_dtoa_r+0x836>
 8003022:	4656      	mov	r6, sl
 8003024:	465f      	mov	r7, fp
 8003026:	e9dd ab00 	ldrd	sl, fp, [sp]
 800302a:	4630      	mov	r0, r6
 800302c:	4652      	mov	r2, sl
 800302e:	465b      	mov	r3, fp
 8003030:	4639      	mov	r1, r7
 8003032:	f7fd fc23 	bl	800087c <__aeabi_ddiv>
 8003036:	f7fd fd09 	bl	8000a4c <__aeabi_d2iz>
 800303a:	4604      	mov	r4, r0
 800303c:	f7fd fa8e 	bl	800055c <__aeabi_i2d>
 8003040:	4652      	mov	r2, sl
 8003042:	465b      	mov	r3, fp
 8003044:	f7fd faf0 	bl	8000628 <__aeabi_dmul>
 8003048:	460b      	mov	r3, r1
 800304a:	4602      	mov	r2, r0
 800304c:	4639      	mov	r1, r7
 800304e:	4630      	mov	r0, r6
 8003050:	f7fd f936 	bl	80002c0 <__aeabi_dsub>
 8003054:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8003056:	f104 0330 	add.w	r3, r4, #48	; 0x30
 800305a:	702b      	strb	r3, [r5, #0]
 800305c:	9b08      	ldr	r3, [sp, #32]
 800305e:	2b01      	cmp	r3, #1
 8003060:	4606      	mov	r6, r0
 8003062:	460f      	mov	r7, r1
 8003064:	f105 0501 	add.w	r5, r5, #1
 8003068:	d061      	beq.n	800312e <_dtoa_r+0x346>
 800306a:	2200      	movs	r2, #0
 800306c:	4b17      	ldr	r3, [pc, #92]	; (80030cc <_dtoa_r+0x2e4>)
 800306e:	f7fd fadb 	bl	8000628 <__aeabi_dmul>
 8003072:	2200      	movs	r2, #0
 8003074:	2300      	movs	r3, #0
 8003076:	4606      	mov	r6, r0
 8003078:	460f      	mov	r7, r1
 800307a:	f004 f9af 	bl	80073dc <__aeabi_dcmpeq>
 800307e:	2800      	cmp	r0, #0
 8003080:	d17d      	bne.n	800317e <_dtoa_r+0x396>
 8003082:	f8cd 9014 	str.w	r9, [sp, #20]
 8003086:	f8dd a020 	ldr.w	sl, [sp, #32]
 800308a:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 800308e:	e9dd 8900 	ldrd	r8, r9, [sp]
 8003092:	e028      	b.n	80030e6 <_dtoa_r+0x2fe>
 8003094:	f3af 8000 	nop.w
 8003098:	636f4361 	.word	0x636f4361
 800309c:	3fd287a7 	.word	0x3fd287a7
 80030a0:	8b60c8b3 	.word	0x8b60c8b3
 80030a4:	3fc68a28 	.word	0x3fc68a28
 80030a8:	509f79fb 	.word	0x509f79fb
 80030ac:	3fd34413 	.word	0x3fd34413
 80030b0:	7ff00000 	.word	0x7ff00000
 80030b4:	0801c3d9 	.word	0x0801c3d9
 80030b8:	0801c3e8 	.word	0x0801c3e8
 80030bc:	3ff80000 	.word	0x3ff80000
 80030c0:	0800d048 	.word	0x0800d048
 80030c4:	0801c3dc 	.word	0x0801c3dc
 80030c8:	0801c3d8 	.word	0x0801c3d8
 80030cc:	40240000 	.word	0x40240000
 80030d0:	f7fd faaa 	bl	8000628 <__aeabi_dmul>
 80030d4:	2200      	movs	r2, #0
 80030d6:	2300      	movs	r3, #0
 80030d8:	4606      	mov	r6, r0
 80030da:	460f      	mov	r7, r1
 80030dc:	f004 f97e 	bl	80073dc <__aeabi_dcmpeq>
 80030e0:	2800      	cmp	r0, #0
 80030e2:	f040 83ae 	bne.w	8003842 <_dtoa_r+0xa5a>
 80030e6:	4642      	mov	r2, r8
 80030e8:	464b      	mov	r3, r9
 80030ea:	4630      	mov	r0, r6
 80030ec:	4639      	mov	r1, r7
 80030ee:	f7fd fbc5 	bl	800087c <__aeabi_ddiv>
 80030f2:	f7fd fcab 	bl	8000a4c <__aeabi_d2iz>
 80030f6:	4604      	mov	r4, r0
 80030f8:	f7fd fa30 	bl	800055c <__aeabi_i2d>
 80030fc:	4642      	mov	r2, r8
 80030fe:	464b      	mov	r3, r9
 8003100:	f7fd fa92 	bl	8000628 <__aeabi_dmul>
 8003104:	4602      	mov	r2, r0
 8003106:	460b      	mov	r3, r1
 8003108:	4630      	mov	r0, r6
 800310a:	4639      	mov	r1, r7
 800310c:	f7fd f8d8 	bl	80002c0 <__aeabi_dsub>
 8003110:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8003114:	f805 eb01 	strb.w	lr, [r5], #1
 8003118:	ebcb 0e05 	rsb	lr, fp, r5
 800311c:	45d6      	cmp	lr, sl
 800311e:	4606      	mov	r6, r0
 8003120:	460f      	mov	r7, r1
 8003122:	f04f 0200 	mov.w	r2, #0
 8003126:	4bae      	ldr	r3, [pc, #696]	; (80033e0 <_dtoa_r+0x5f8>)
 8003128:	d1d2      	bne.n	80030d0 <_dtoa_r+0x2e8>
 800312a:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800312e:	4632      	mov	r2, r6
 8003130:	463b      	mov	r3, r7
 8003132:	4630      	mov	r0, r6
 8003134:	4639      	mov	r1, r7
 8003136:	f7fd f8c5 	bl	80002c4 <__adddf3>
 800313a:	4606      	mov	r6, r0
 800313c:	460f      	mov	r7, r1
 800313e:	4602      	mov	r2, r0
 8003140:	460b      	mov	r3, r1
 8003142:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003146:	f004 f953 	bl	80073f0 <__aeabi_dcmplt>
 800314a:	b940      	cbnz	r0, 800315e <_dtoa_r+0x376>
 800314c:	4632      	mov	r2, r6
 800314e:	463b      	mov	r3, r7
 8003150:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003154:	f004 f942 	bl	80073dc <__aeabi_dcmpeq>
 8003158:	b188      	cbz	r0, 800317e <_dtoa_r+0x396>
 800315a:	07e3      	lsls	r3, r4, #31
 800315c:	d50f      	bpl.n	800317e <_dtoa_r+0x396>
 800315e:	f815 4c01 	ldrb.w	r4, [r5, #-1]
 8003162:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003164:	1e6b      	subs	r3, r5, #1
 8003166:	e004      	b.n	8003172 <_dtoa_r+0x38a>
 8003168:	429a      	cmp	r2, r3
 800316a:	f000 83fc 	beq.w	8003966 <_dtoa_r+0xb7e>
 800316e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003172:	2c39      	cmp	r4, #57	; 0x39
 8003174:	f103 0501 	add.w	r5, r3, #1
 8003178:	d0f6      	beq.n	8003168 <_dtoa_r+0x380>
 800317a:	3401      	adds	r4, #1
 800317c:	701c      	strb	r4, [r3, #0]
 800317e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003180:	4648      	mov	r0, r9
 8003182:	f001 ff1d 	bl	8004fc0 <_Bfree>
 8003186:	2200      	movs	r2, #0
 8003188:	9b04      	ldr	r3, [sp, #16]
 800318a:	702a      	strb	r2, [r5, #0]
 800318c:	9a03      	ldr	r2, [sp, #12]
 800318e:	3301      	adds	r3, #1
 8003190:	6013      	str	r3, [r2, #0]
 8003192:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8003194:	2b00      	cmp	r3, #0
 8003196:	f000 839b 	beq.w	80038d0 <_dtoa_r+0xae8>
 800319a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800319c:	601d      	str	r5, [r3, #0]
 800319e:	b01b      	add	sp, #108	; 0x6c
 80031a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80031a6:	2a00      	cmp	r2, #0
 80031a8:	f000 810e 	beq.w	80033c8 <_dtoa_r+0x5e0>
 80031ac:	9a00      	ldr	r2, [sp, #0]
 80031ae:	2a01      	cmp	r2, #1
 80031b0:	f340 8257 	ble.w	8003662 <_dtoa_r+0x87a>
 80031b4:	9b08      	ldr	r3, [sp, #32]
 80031b6:	9a06      	ldr	r2, [sp, #24]
 80031b8:	1e5f      	subs	r7, r3, #1
 80031ba:	42ba      	cmp	r2, r7
 80031bc:	f2c0 838b 	blt.w	80038d6 <_dtoa_r+0xaee>
 80031c0:	1bd7      	subs	r7, r2, r7
 80031c2:	9b08      	ldr	r3, [sp, #32]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	f2c0 8480 	blt.w	8003aca <_dtoa_r+0xce2>
 80031ca:	9d07      	ldr	r5, [sp, #28]
 80031cc:	9b08      	ldr	r3, [sp, #32]
 80031ce:	9a07      	ldr	r2, [sp, #28]
 80031d0:	2101      	movs	r1, #1
 80031d2:	441a      	add	r2, r3
 80031d4:	4648      	mov	r0, r9
 80031d6:	9207      	str	r2, [sp, #28]
 80031d8:	4498      	add	r8, r3
 80031da:	f001 ffd5 	bl	8005188 <__i2b>
 80031de:	4606      	mov	r6, r0
 80031e0:	b165      	cbz	r5, 80031fc <_dtoa_r+0x414>
 80031e2:	f1b8 0f00 	cmp.w	r8, #0
 80031e6:	dd09      	ble.n	80031fc <_dtoa_r+0x414>
 80031e8:	4545      	cmp	r5, r8
 80031ea:	9a07      	ldr	r2, [sp, #28]
 80031ec:	462b      	mov	r3, r5
 80031ee:	bfa8      	it	ge
 80031f0:	4643      	movge	r3, r8
 80031f2:	1ad2      	subs	r2, r2, r3
 80031f4:	9207      	str	r2, [sp, #28]
 80031f6:	1aed      	subs	r5, r5, r3
 80031f8:	ebc3 0808 	rsb	r8, r3, r8
 80031fc:	9b06      	ldr	r3, [sp, #24]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	f340 82f5 	ble.w	80037ee <_dtoa_r+0xa06>
 8003204:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003206:	2a00      	cmp	r2, #0
 8003208:	f000 8202 	beq.w	8003610 <_dtoa_r+0x828>
 800320c:	2f00      	cmp	r7, #0
 800320e:	f000 81ff 	beq.w	8003610 <_dtoa_r+0x828>
 8003212:	4631      	mov	r1, r6
 8003214:	463a      	mov	r2, r7
 8003216:	4648      	mov	r0, r9
 8003218:	f002 f858 	bl	80052cc <__pow5mult>
 800321c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800321e:	4601      	mov	r1, r0
 8003220:	4606      	mov	r6, r0
 8003222:	4648      	mov	r0, r9
 8003224:	f001 ffba 	bl	800519c <__multiply>
 8003228:	990a      	ldr	r1, [sp, #40]	; 0x28
 800322a:	4604      	mov	r4, r0
 800322c:	4648      	mov	r0, r9
 800322e:	f001 fec7 	bl	8004fc0 <_Bfree>
 8003232:	9b06      	ldr	r3, [sp, #24]
 8003234:	1bdb      	subs	r3, r3, r7
 8003236:	9306      	str	r3, [sp, #24]
 8003238:	f040 81e9 	bne.w	800360e <_dtoa_r+0x826>
 800323c:	2101      	movs	r1, #1
 800323e:	4648      	mov	r0, r9
 8003240:	f001 ffa2 	bl	8005188 <__i2b>
 8003244:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003246:	9006      	str	r0, [sp, #24]
 8003248:	2b00      	cmp	r3, #0
 800324a:	f000 8215 	beq.w	8003678 <_dtoa_r+0x890>
 800324e:	4601      	mov	r1, r0
 8003250:	461a      	mov	r2, r3
 8003252:	4648      	mov	r0, r9
 8003254:	f002 f83a 	bl	80052cc <__pow5mult>
 8003258:	9b00      	ldr	r3, [sp, #0]
 800325a:	9006      	str	r0, [sp, #24]
 800325c:	2b01      	cmp	r3, #1
 800325e:	f340 82f3 	ble.w	8003848 <_dtoa_r+0xa60>
 8003262:	2700      	movs	r7, #0
 8003264:	9a06      	ldr	r2, [sp, #24]
 8003266:	6913      	ldr	r3, [r2, #16]
 8003268:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800326c:	6918      	ldr	r0, [r3, #16]
 800326e:	f001 ff3d 	bl	80050ec <__hi0bits>
 8003272:	f1c0 0020 	rsb	r0, r0, #32
 8003276:	4440      	add	r0, r8
 8003278:	f010 001f 	ands.w	r0, r0, #31
 800327c:	f000 81fa 	beq.w	8003674 <_dtoa_r+0x88c>
 8003280:	f1c0 0320 	rsb	r3, r0, #32
 8003284:	2b04      	cmp	r3, #4
 8003286:	f340 84bd 	ble.w	8003c04 <_dtoa_r+0xe1c>
 800328a:	f1c0 001c 	rsb	r0, r0, #28
 800328e:	9b07      	ldr	r3, [sp, #28]
 8003290:	4403      	add	r3, r0
 8003292:	9307      	str	r3, [sp, #28]
 8003294:	4405      	add	r5, r0
 8003296:	4480      	add	r8, r0
 8003298:	9b07      	ldr	r3, [sp, #28]
 800329a:	2b00      	cmp	r3, #0
 800329c:	dd05      	ble.n	80032aa <_dtoa_r+0x4c2>
 800329e:	4621      	mov	r1, r4
 80032a0:	461a      	mov	r2, r3
 80032a2:	4648      	mov	r0, r9
 80032a4:	f002 f862 	bl	800536c <__lshift>
 80032a8:	4604      	mov	r4, r0
 80032aa:	f1b8 0f00 	cmp.w	r8, #0
 80032ae:	dd05      	ble.n	80032bc <_dtoa_r+0x4d4>
 80032b0:	4642      	mov	r2, r8
 80032b2:	9906      	ldr	r1, [sp, #24]
 80032b4:	4648      	mov	r0, r9
 80032b6:	f002 f859 	bl	800536c <__lshift>
 80032ba:	9006      	str	r0, [sp, #24]
 80032bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80032be:	2b00      	cmp	r3, #0
 80032c0:	f040 827a 	bne.w	80037b8 <_dtoa_r+0x9d0>
 80032c4:	9b08      	ldr	r3, [sp, #32]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	f340 8293 	ble.w	80037f2 <_dtoa_r+0xa0a>
 80032cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	f040 81f4 	bne.w	80036bc <_dtoa_r+0x8d4>
 80032d4:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80032d8:	9f08      	ldr	r7, [sp, #32]
 80032da:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80032de:	465d      	mov	r5, fp
 80032e0:	e002      	b.n	80032e8 <_dtoa_r+0x500>
 80032e2:	f001 fe77 	bl	8004fd4 <__multadd>
 80032e6:	4604      	mov	r4, r0
 80032e8:	4641      	mov	r1, r8
 80032ea:	4620      	mov	r0, r4
 80032ec:	f7ff fce8 	bl	8002cc0 <quorem>
 80032f0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80032f4:	f805 ab01 	strb.w	sl, [r5], #1
 80032f8:	ebcb 0305 	rsb	r3, fp, r5
 80032fc:	42bb      	cmp	r3, r7
 80032fe:	f04f 020a 	mov.w	r2, #10
 8003302:	f04f 0300 	mov.w	r3, #0
 8003306:	4621      	mov	r1, r4
 8003308:	4648      	mov	r0, r9
 800330a:	dbea      	blt.n	80032e2 <_dtoa_r+0x4fa>
 800330c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800330e:	9a08      	ldr	r2, [sp, #32]
 8003310:	2a01      	cmp	r2, #1
 8003312:	bfac      	ite	ge
 8003314:	189b      	addge	r3, r3, r2
 8003316:	3301      	addlt	r3, #1
 8003318:	461d      	mov	r5, r3
 800331a:	f04f 0b00 	mov.w	fp, #0
 800331e:	4621      	mov	r1, r4
 8003320:	2201      	movs	r2, #1
 8003322:	4648      	mov	r0, r9
 8003324:	f002 f822 	bl	800536c <__lshift>
 8003328:	9906      	ldr	r1, [sp, #24]
 800332a:	900a      	str	r0, [sp, #40]	; 0x28
 800332c:	f002 f876 	bl	800541c <__mcmp>
 8003330:	2800      	cmp	r0, #0
 8003332:	f340 8305 	ble.w	8003940 <_dtoa_r+0xb58>
 8003336:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800333a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800333c:	1e6b      	subs	r3, r5, #1
 800333e:	e004      	b.n	800334a <_dtoa_r+0x562>
 8003340:	428b      	cmp	r3, r1
 8003342:	f000 8274 	beq.w	800382e <_dtoa_r+0xa46>
 8003346:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800334a:	2a39      	cmp	r2, #57	; 0x39
 800334c:	f103 0501 	add.w	r5, r3, #1
 8003350:	d0f6      	beq.n	8003340 <_dtoa_r+0x558>
 8003352:	3201      	adds	r2, #1
 8003354:	701a      	strb	r2, [r3, #0]
 8003356:	9906      	ldr	r1, [sp, #24]
 8003358:	4648      	mov	r0, r9
 800335a:	f001 fe31 	bl	8004fc0 <_Bfree>
 800335e:	2e00      	cmp	r6, #0
 8003360:	f43f af0d 	beq.w	800317e <_dtoa_r+0x396>
 8003364:	f1bb 0f00 	cmp.w	fp, #0
 8003368:	d005      	beq.n	8003376 <_dtoa_r+0x58e>
 800336a:	45b3      	cmp	fp, r6
 800336c:	d003      	beq.n	8003376 <_dtoa_r+0x58e>
 800336e:	4659      	mov	r1, fp
 8003370:	4648      	mov	r0, r9
 8003372:	f001 fe25 	bl	8004fc0 <_Bfree>
 8003376:	4631      	mov	r1, r6
 8003378:	4648      	mov	r0, r9
 800337a:	f001 fe21 	bl	8004fc0 <_Bfree>
 800337e:	e6fe      	b.n	800317e <_dtoa_r+0x396>
 8003380:	2301      	movs	r3, #1
 8003382:	930d      	str	r3, [sp, #52]	; 0x34
 8003384:	e5eb      	b.n	8002f5e <_dtoa_r+0x176>
 8003386:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800338a:	4640      	mov	r0, r8
 800338c:	f7fd f8e6 	bl	800055c <__aeabi_i2d>
 8003390:	4602      	mov	r2, r0
 8003392:	460b      	mov	r3, r1
 8003394:	4630      	mov	r0, r6
 8003396:	4639      	mov	r1, r7
 8003398:	f004 f820 	bl	80073dc <__aeabi_dcmpeq>
 800339c:	2800      	cmp	r0, #0
 800339e:	f47f adca 	bne.w	8002f36 <_dtoa_r+0x14e>
 80033a2:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 80033a6:	9304      	str	r3, [sp, #16]
 80033a8:	e5c5      	b.n	8002f36 <_dtoa_r+0x14e>
 80033aa:	9a07      	ldr	r2, [sp, #28]
 80033ac:	9b04      	ldr	r3, [sp, #16]
 80033ae:	1ad2      	subs	r2, r2, r3
 80033b0:	425b      	negs	r3, r3
 80033b2:	9306      	str	r3, [sp, #24]
 80033b4:	2300      	movs	r3, #0
 80033b6:	9207      	str	r2, [sp, #28]
 80033b8:	930c      	str	r3, [sp, #48]	; 0x30
 80033ba:	e5df      	b.n	8002f7c <_dtoa_r+0x194>
 80033bc:	f1c8 0300 	rsb	r3, r8, #0
 80033c0:	9307      	str	r3, [sp, #28]
 80033c2:	f04f 0800 	mov.w	r8, #0
 80033c6:	e5d1      	b.n	8002f6c <_dtoa_r+0x184>
 80033c8:	9f06      	ldr	r7, [sp, #24]
 80033ca:	9d07      	ldr	r5, [sp, #28]
 80033cc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80033ce:	e707      	b.n	80031e0 <_dtoa_r+0x3f8>
 80033d0:	f1c3 0420 	rsb	r4, r3, #32
 80033d4:	fa0a f004 	lsl.w	r0, sl, r4
 80033d8:	e57a      	b.n	8002ed0 <_dtoa_r+0xe8>
 80033da:	900d      	str	r0, [sp, #52]	; 0x34
 80033dc:	e5bf      	b.n	8002f5e <_dtoa_r+0x176>
 80033de:	bf00      	nop
 80033e0:	40240000 	.word	0x40240000
 80033e4:	2300      	movs	r3, #0
 80033e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80033e8:	9b04      	ldr	r3, [sp, #16]
 80033ea:	9a05      	ldr	r2, [sp, #20]
 80033ec:	4413      	add	r3, r2
 80033ee:	930e      	str	r3, [sp, #56]	; 0x38
 80033f0:	3301      	adds	r3, #1
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	9308      	str	r3, [sp, #32]
 80033f6:	f340 827d 	ble.w	80038f4 <_dtoa_r+0xb0c>
 80033fa:	9c08      	ldr	r4, [sp, #32]
 80033fc:	4625      	mov	r5, r4
 80033fe:	2100      	movs	r1, #0
 8003400:	2d17      	cmp	r5, #23
 8003402:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 8003406:	d90b      	bls.n	8003420 <_dtoa_r+0x638>
 8003408:	2201      	movs	r2, #1
 800340a:	2304      	movs	r3, #4
 800340c:	005b      	lsls	r3, r3, #1
 800340e:	f103 0014 	add.w	r0, r3, #20
 8003412:	42a8      	cmp	r0, r5
 8003414:	4611      	mov	r1, r2
 8003416:	f102 0201 	add.w	r2, r2, #1
 800341a:	d9f7      	bls.n	800340c <_dtoa_r+0x624>
 800341c:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 8003420:	4648      	mov	r0, r9
 8003422:	f001 fda7 	bl	8004f74 <_Balloc>
 8003426:	2c0e      	cmp	r4, #14
 8003428:	9009      	str	r0, [sp, #36]	; 0x24
 800342a:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 800342e:	f63f ade5 	bhi.w	8002ffc <_dtoa_r+0x214>
 8003432:	2e00      	cmp	r6, #0
 8003434:	f43f ade2 	beq.w	8002ffc <_dtoa_r+0x214>
 8003438:	9904      	ldr	r1, [sp, #16]
 800343a:	2900      	cmp	r1, #0
 800343c:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
 8003440:	f340 829a 	ble.w	8003978 <_dtoa_r+0xb90>
 8003444:	4b90      	ldr	r3, [pc, #576]	; (8003688 <_dtoa_r+0x8a0>)
 8003446:	f001 020f 	and.w	r2, r1, #15
 800344a:	110e      	asrs	r6, r1, #4
 800344c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003450:	06f0      	lsls	r0, r6, #27
 8003452:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003456:	f140 8246 	bpl.w	80038e6 <_dtoa_r+0xafe>
 800345a:	4b8c      	ldr	r3, [pc, #560]	; (800368c <_dtoa_r+0x8a4>)
 800345c:	4650      	mov	r0, sl
 800345e:	4659      	mov	r1, fp
 8003460:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003464:	f7fd fa0a 	bl	800087c <__aeabi_ddiv>
 8003468:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 800346c:	f006 060f 	and.w	r6, r6, #15
 8003470:	f04f 0a03 	mov.w	sl, #3
 8003474:	b186      	cbz	r6, 8003498 <_dtoa_r+0x6b0>
 8003476:	4f85      	ldr	r7, [pc, #532]	; (800368c <_dtoa_r+0x8a4>)
 8003478:	07f1      	lsls	r1, r6, #31
 800347a:	d509      	bpl.n	8003490 <_dtoa_r+0x6a8>
 800347c:	4620      	mov	r0, r4
 800347e:	4629      	mov	r1, r5
 8003480:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003484:	f7fd f8d0 	bl	8000628 <__aeabi_dmul>
 8003488:	f10a 0a01 	add.w	sl, sl, #1
 800348c:	4604      	mov	r4, r0
 800348e:	460d      	mov	r5, r1
 8003490:	1076      	asrs	r6, r6, #1
 8003492:	f107 0708 	add.w	r7, r7, #8
 8003496:	d1ef      	bne.n	8003478 <_dtoa_r+0x690>
 8003498:	4622      	mov	r2, r4
 800349a:	462b      	mov	r3, r5
 800349c:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 80034a0:	f7fd f9ec 	bl	800087c <__aeabi_ddiv>
 80034a4:	4606      	mov	r6, r0
 80034a6:	460f      	mov	r7, r1
 80034a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80034aa:	b143      	cbz	r3, 80034be <_dtoa_r+0x6d6>
 80034ac:	2200      	movs	r2, #0
 80034ae:	4b78      	ldr	r3, [pc, #480]	; (8003690 <_dtoa_r+0x8a8>)
 80034b0:	4630      	mov	r0, r6
 80034b2:	4639      	mov	r1, r7
 80034b4:	f003 ff9c 	bl	80073f0 <__aeabi_dcmplt>
 80034b8:	2800      	cmp	r0, #0
 80034ba:	f040 831a 	bne.w	8003af2 <_dtoa_r+0xd0a>
 80034be:	4650      	mov	r0, sl
 80034c0:	f7fd f84c 	bl	800055c <__aeabi_i2d>
 80034c4:	4632      	mov	r2, r6
 80034c6:	463b      	mov	r3, r7
 80034c8:	f7fd f8ae 	bl	8000628 <__aeabi_dmul>
 80034cc:	4b71      	ldr	r3, [pc, #452]	; (8003694 <_dtoa_r+0x8ac>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	f7fc fef8 	bl	80002c4 <__adddf3>
 80034d4:	9b08      	ldr	r3, [sp, #32]
 80034d6:	4604      	mov	r4, r0
 80034d8:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	f000 81db 	beq.w	8003898 <_dtoa_r+0xab0>
 80034e2:	9b04      	ldr	r3, [sp, #16]
 80034e4:	9316      	str	r3, [sp, #88]	; 0x58
 80034e6:	9b08      	ldr	r3, [sp, #32]
 80034e8:	9312      	str	r3, [sp, #72]	; 0x48
 80034ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	f000 8294 	beq.w	8003a1a <_dtoa_r+0xc32>
 80034f2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80034f4:	4b64      	ldr	r3, [pc, #400]	; (8003688 <_dtoa_r+0x8a0>)
 80034f6:	4968      	ldr	r1, [pc, #416]	; (8003698 <_dtoa_r+0x8b0>)
 80034f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80034fc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003500:	2000      	movs	r0, #0
 8003502:	f7fd f9bb 	bl	800087c <__aeabi_ddiv>
 8003506:	4622      	mov	r2, r4
 8003508:	462b      	mov	r3, r5
 800350a:	f7fc fed9 	bl	80002c0 <__aeabi_dsub>
 800350e:	4682      	mov	sl, r0
 8003510:	468b      	mov	fp, r1
 8003512:	4630      	mov	r0, r6
 8003514:	4639      	mov	r1, r7
 8003516:	f7fd fa99 	bl	8000a4c <__aeabi_d2iz>
 800351a:	4604      	mov	r4, r0
 800351c:	f7fd f81e 	bl	800055c <__aeabi_i2d>
 8003520:	4602      	mov	r2, r0
 8003522:	460b      	mov	r3, r1
 8003524:	4630      	mov	r0, r6
 8003526:	4639      	mov	r1, r7
 8003528:	f7fc feca 	bl	80002c0 <__aeabi_dsub>
 800352c:	3430      	adds	r4, #48	; 0x30
 800352e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8003530:	b2e4      	uxtb	r4, r4
 8003532:	4606      	mov	r6, r0
 8003534:	460f      	mov	r7, r1
 8003536:	702c      	strb	r4, [r5, #0]
 8003538:	4602      	mov	r2, r0
 800353a:	460b      	mov	r3, r1
 800353c:	4650      	mov	r0, sl
 800353e:	4659      	mov	r1, fp
 8003540:	3501      	adds	r5, #1
 8003542:	f003 ff73 	bl	800742c <__aeabi_dcmpgt>
 8003546:	2800      	cmp	r0, #0
 8003548:	d150      	bne.n	80035ec <_dtoa_r+0x804>
 800354a:	4632      	mov	r2, r6
 800354c:	463b      	mov	r3, r7
 800354e:	2000      	movs	r0, #0
 8003550:	494f      	ldr	r1, [pc, #316]	; (8003690 <_dtoa_r+0x8a8>)
 8003552:	f7fc feb5 	bl	80002c0 <__aeabi_dsub>
 8003556:	4602      	mov	r2, r0
 8003558:	460b      	mov	r3, r1
 800355a:	4650      	mov	r0, sl
 800355c:	4659      	mov	r1, fp
 800355e:	f003 ff65 	bl	800742c <__aeabi_dcmpgt>
 8003562:	2800      	cmp	r0, #0
 8003564:	f040 8308 	bne.w	8003b78 <_dtoa_r+0xd90>
 8003568:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800356a:	2a01      	cmp	r2, #1
 800356c:	f340 81f7 	ble.w	800395e <_dtoa_r+0xb76>
 8003570:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003572:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003574:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
 8003578:	4413      	add	r3, r2
 800357a:	4698      	mov	r8, r3
 800357c:	e00d      	b.n	800359a <_dtoa_r+0x7b2>
 800357e:	2000      	movs	r0, #0
 8003580:	4943      	ldr	r1, [pc, #268]	; (8003690 <_dtoa_r+0x8a8>)
 8003582:	f7fc fe9d 	bl	80002c0 <__aeabi_dsub>
 8003586:	4652      	mov	r2, sl
 8003588:	465b      	mov	r3, fp
 800358a:	f003 ff31 	bl	80073f0 <__aeabi_dcmplt>
 800358e:	2800      	cmp	r0, #0
 8003590:	f040 82f2 	bne.w	8003b78 <_dtoa_r+0xd90>
 8003594:	4545      	cmp	r5, r8
 8003596:	f000 81e0 	beq.w	800395a <_dtoa_r+0xb72>
 800359a:	4650      	mov	r0, sl
 800359c:	4659      	mov	r1, fp
 800359e:	2200      	movs	r2, #0
 80035a0:	4b3e      	ldr	r3, [pc, #248]	; (800369c <_dtoa_r+0x8b4>)
 80035a2:	f7fd f841 	bl	8000628 <__aeabi_dmul>
 80035a6:	2200      	movs	r2, #0
 80035a8:	4b3c      	ldr	r3, [pc, #240]	; (800369c <_dtoa_r+0x8b4>)
 80035aa:	4682      	mov	sl, r0
 80035ac:	468b      	mov	fp, r1
 80035ae:	4630      	mov	r0, r6
 80035b0:	4639      	mov	r1, r7
 80035b2:	f7fd f839 	bl	8000628 <__aeabi_dmul>
 80035b6:	460f      	mov	r7, r1
 80035b8:	4606      	mov	r6, r0
 80035ba:	f7fd fa47 	bl	8000a4c <__aeabi_d2iz>
 80035be:	4604      	mov	r4, r0
 80035c0:	f7fc ffcc 	bl	800055c <__aeabi_i2d>
 80035c4:	4602      	mov	r2, r0
 80035c6:	460b      	mov	r3, r1
 80035c8:	4630      	mov	r0, r6
 80035ca:	4639      	mov	r1, r7
 80035cc:	f7fc fe78 	bl	80002c0 <__aeabi_dsub>
 80035d0:	3430      	adds	r4, #48	; 0x30
 80035d2:	b2e4      	uxtb	r4, r4
 80035d4:	4652      	mov	r2, sl
 80035d6:	465b      	mov	r3, fp
 80035d8:	f805 4b01 	strb.w	r4, [r5], #1
 80035dc:	4606      	mov	r6, r0
 80035de:	460f      	mov	r7, r1
 80035e0:	f003 ff06 	bl	80073f0 <__aeabi_dcmplt>
 80035e4:	4632      	mov	r2, r6
 80035e6:	463b      	mov	r3, r7
 80035e8:	2800      	cmp	r0, #0
 80035ea:	d0c8      	beq.n	800357e <_dtoa_r+0x796>
 80035ec:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80035ee:	9304      	str	r3, [sp, #16]
 80035f0:	e5c5      	b.n	800317e <_dtoa_r+0x396>
 80035f2:	2300      	movs	r3, #0
 80035f4:	930b      	str	r3, [sp, #44]	; 0x2c
 80035f6:	9b05      	ldr	r3, [sp, #20]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	f340 8180 	ble.w	80038fe <_dtoa_r+0xb16>
 80035fe:	461d      	mov	r5, r3
 8003600:	461c      	mov	r4, r3
 8003602:	930e      	str	r3, [sp, #56]	; 0x38
 8003604:	9308      	str	r3, [sp, #32]
 8003606:	e6fa      	b.n	80033fe <_dtoa_r+0x616>
 8003608:	2301      	movs	r3, #1
 800360a:	930b      	str	r3, [sp, #44]	; 0x2c
 800360c:	e7f3      	b.n	80035f6 <_dtoa_r+0x80e>
 800360e:	940a      	str	r4, [sp, #40]	; 0x28
 8003610:	9a06      	ldr	r2, [sp, #24]
 8003612:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003614:	4648      	mov	r0, r9
 8003616:	f001 fe59 	bl	80052cc <__pow5mult>
 800361a:	4604      	mov	r4, r0
 800361c:	e60e      	b.n	800323c <_dtoa_r+0x454>
 800361e:	9b08      	ldr	r3, [sp, #32]
 8003620:	2b00      	cmp	r3, #0
 8003622:	f73f acfe 	bgt.w	8003022 <_dtoa_r+0x23a>
 8003626:	f040 814f 	bne.w	80038c8 <_dtoa_r+0xae0>
 800362a:	2200      	movs	r2, #0
 800362c:	4b1c      	ldr	r3, [pc, #112]	; (80036a0 <_dtoa_r+0x8b8>)
 800362e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003632:	f7fc fff9 	bl	8000628 <__aeabi_dmul>
 8003636:	465b      	mov	r3, fp
 8003638:	4652      	mov	r2, sl
 800363a:	f003 feed 	bl	8007418 <__aeabi_dcmpge>
 800363e:	9b08      	ldr	r3, [sp, #32]
 8003640:	9306      	str	r3, [sp, #24]
 8003642:	461e      	mov	r6, r3
 8003644:	2800      	cmp	r0, #0
 8003646:	f000 80ea 	beq.w	800381e <_dtoa_r+0xa36>
 800364a:	9b05      	ldr	r3, [sp, #20]
 800364c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800364e:	43db      	mvns	r3, r3
 8003650:	9304      	str	r3, [sp, #16]
 8003652:	9906      	ldr	r1, [sp, #24]
 8003654:	4648      	mov	r0, r9
 8003656:	f001 fcb3 	bl	8004fc0 <_Bfree>
 800365a:	2e00      	cmp	r6, #0
 800365c:	f43f ad8f 	beq.w	800317e <_dtoa_r+0x396>
 8003660:	e689      	b.n	8003376 <_dtoa_r+0x58e>
 8003662:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003664:	2a00      	cmp	r2, #0
 8003666:	f000 8238 	beq.w	8003ada <_dtoa_r+0xcf2>
 800366a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800366e:	9f06      	ldr	r7, [sp, #24]
 8003670:	9d07      	ldr	r5, [sp, #28]
 8003672:	e5ac      	b.n	80031ce <_dtoa_r+0x3e6>
 8003674:	201c      	movs	r0, #28
 8003676:	e60a      	b.n	800328e <_dtoa_r+0x4a6>
 8003678:	9b00      	ldr	r3, [sp, #0]
 800367a:	2b01      	cmp	r3, #1
 800367c:	f340 8280 	ble.w	8003b80 <_dtoa_r+0xd98>
 8003680:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8003682:	2001      	movs	r0, #1
 8003684:	e5f7      	b.n	8003276 <_dtoa_r+0x48e>
 8003686:	bf00      	nop
 8003688:	0800d048 	.word	0x0800d048
 800368c:	0800d138 	.word	0x0800d138
 8003690:	3ff00000 	.word	0x3ff00000
 8003694:	401c0000 	.word	0x401c0000
 8003698:	3fe00000 	.word	0x3fe00000
 800369c:	40240000 	.word	0x40240000
 80036a0:	40140000 	.word	0x40140000
 80036a4:	4631      	mov	r1, r6
 80036a6:	2300      	movs	r3, #0
 80036a8:	220a      	movs	r2, #10
 80036aa:	4648      	mov	r0, r9
 80036ac:	f001 fc92 	bl	8004fd4 <__multadd>
 80036b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	4606      	mov	r6, r0
 80036b6:	f340 828d 	ble.w	8003bd4 <_dtoa_r+0xdec>
 80036ba:	9308      	str	r3, [sp, #32]
 80036bc:	2d00      	cmp	r5, #0
 80036be:	dd05      	ble.n	80036cc <_dtoa_r+0x8e4>
 80036c0:	4631      	mov	r1, r6
 80036c2:	462a      	mov	r2, r5
 80036c4:	4648      	mov	r0, r9
 80036c6:	f001 fe51 	bl	800536c <__lshift>
 80036ca:	4606      	mov	r6, r0
 80036cc:	2f00      	cmp	r7, #0
 80036ce:	f040 817c 	bne.w	80039ca <_dtoa_r+0xbe2>
 80036d2:	46b0      	mov	r8, r6
 80036d4:	9b08      	ldr	r3, [sp, #32]
 80036d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80036d8:	3b01      	subs	r3, #1
 80036da:	18d3      	adds	r3, r2, r3
 80036dc:	9308      	str	r3, [sp, #32]
 80036de:	f00a 0301 	and.w	r3, sl, #1
 80036e2:	930a      	str	r3, [sp, #40]	; 0x28
 80036e4:	4617      	mov	r7, r2
 80036e6:	f8dd b018 	ldr.w	fp, [sp, #24]
 80036ea:	4620      	mov	r0, r4
 80036ec:	4659      	mov	r1, fp
 80036ee:	f7ff fae7 	bl	8002cc0 <quorem>
 80036f2:	4631      	mov	r1, r6
 80036f4:	4605      	mov	r5, r0
 80036f6:	4620      	mov	r0, r4
 80036f8:	f001 fe90 	bl	800541c <__mcmp>
 80036fc:	4642      	mov	r2, r8
 80036fe:	4659      	mov	r1, fp
 8003700:	4682      	mov	sl, r0
 8003702:	4648      	mov	r0, r9
 8003704:	f001 feac 	bl	8005460 <__mdiff>
 8003708:	68c2      	ldr	r2, [r0, #12]
 800370a:	4683      	mov	fp, r0
 800370c:	f105 0330 	add.w	r3, r5, #48	; 0x30
 8003710:	2a00      	cmp	r2, #0
 8003712:	d149      	bne.n	80037a8 <_dtoa_r+0x9c0>
 8003714:	4601      	mov	r1, r0
 8003716:	4620      	mov	r0, r4
 8003718:	9307      	str	r3, [sp, #28]
 800371a:	f001 fe7f 	bl	800541c <__mcmp>
 800371e:	4659      	mov	r1, fp
 8003720:	9005      	str	r0, [sp, #20]
 8003722:	4648      	mov	r0, r9
 8003724:	f001 fc4c 	bl	8004fc0 <_Bfree>
 8003728:	9a05      	ldr	r2, [sp, #20]
 800372a:	9b07      	ldr	r3, [sp, #28]
 800372c:	b92a      	cbnz	r2, 800373a <_dtoa_r+0x952>
 800372e:	9900      	ldr	r1, [sp, #0]
 8003730:	b919      	cbnz	r1, 800373a <_dtoa_r+0x952>
 8003732:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003734:	2900      	cmp	r1, #0
 8003736:	f000 8235 	beq.w	8003ba4 <_dtoa_r+0xdbc>
 800373a:	f1ba 0f00 	cmp.w	sl, #0
 800373e:	f2c0 80e3 	blt.w	8003908 <_dtoa_r+0xb20>
 8003742:	d105      	bne.n	8003750 <_dtoa_r+0x968>
 8003744:	9900      	ldr	r1, [sp, #0]
 8003746:	b919      	cbnz	r1, 8003750 <_dtoa_r+0x968>
 8003748:	990a      	ldr	r1, [sp, #40]	; 0x28
 800374a:	2900      	cmp	r1, #0
 800374c:	f000 80dc 	beq.w	8003908 <_dtoa_r+0xb20>
 8003750:	2a00      	cmp	r2, #0
 8003752:	f300 814e 	bgt.w	80039f2 <_dtoa_r+0xc0a>
 8003756:	9a08      	ldr	r2, [sp, #32]
 8003758:	703b      	strb	r3, [r7, #0]
 800375a:	f107 0a01 	add.w	sl, r7, #1
 800375e:	4297      	cmp	r7, r2
 8003760:	4655      	mov	r5, sl
 8003762:	f000 8152 	beq.w	8003a0a <_dtoa_r+0xc22>
 8003766:	4621      	mov	r1, r4
 8003768:	2300      	movs	r3, #0
 800376a:	220a      	movs	r2, #10
 800376c:	4648      	mov	r0, r9
 800376e:	f001 fc31 	bl	8004fd4 <__multadd>
 8003772:	4546      	cmp	r6, r8
 8003774:	4604      	mov	r4, r0
 8003776:	4631      	mov	r1, r6
 8003778:	f04f 0300 	mov.w	r3, #0
 800377c:	f04f 020a 	mov.w	r2, #10
 8003780:	4648      	mov	r0, r9
 8003782:	d00b      	beq.n	800379c <_dtoa_r+0x9b4>
 8003784:	f001 fc26 	bl	8004fd4 <__multadd>
 8003788:	4641      	mov	r1, r8
 800378a:	4606      	mov	r6, r0
 800378c:	2300      	movs	r3, #0
 800378e:	220a      	movs	r2, #10
 8003790:	4648      	mov	r0, r9
 8003792:	f001 fc1f 	bl	8004fd4 <__multadd>
 8003796:	4657      	mov	r7, sl
 8003798:	4680      	mov	r8, r0
 800379a:	e7a4      	b.n	80036e6 <_dtoa_r+0x8fe>
 800379c:	f001 fc1a 	bl	8004fd4 <__multadd>
 80037a0:	4657      	mov	r7, sl
 80037a2:	4606      	mov	r6, r0
 80037a4:	4680      	mov	r8, r0
 80037a6:	e79e      	b.n	80036e6 <_dtoa_r+0x8fe>
 80037a8:	4601      	mov	r1, r0
 80037aa:	4648      	mov	r0, r9
 80037ac:	9305      	str	r3, [sp, #20]
 80037ae:	f001 fc07 	bl	8004fc0 <_Bfree>
 80037b2:	2201      	movs	r2, #1
 80037b4:	9b05      	ldr	r3, [sp, #20]
 80037b6:	e7c0      	b.n	800373a <_dtoa_r+0x952>
 80037b8:	9906      	ldr	r1, [sp, #24]
 80037ba:	4620      	mov	r0, r4
 80037bc:	f001 fe2e 	bl	800541c <__mcmp>
 80037c0:	2800      	cmp	r0, #0
 80037c2:	f6bf ad7f 	bge.w	80032c4 <_dtoa_r+0x4dc>
 80037c6:	4621      	mov	r1, r4
 80037c8:	9c04      	ldr	r4, [sp, #16]
 80037ca:	2300      	movs	r3, #0
 80037cc:	3c01      	subs	r4, #1
 80037ce:	220a      	movs	r2, #10
 80037d0:	4648      	mov	r0, r9
 80037d2:	9404      	str	r4, [sp, #16]
 80037d4:	f001 fbfe 	bl	8004fd4 <__multadd>
 80037d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80037da:	4604      	mov	r4, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	f47f af61 	bne.w	80036a4 <_dtoa_r+0x8bc>
 80037e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	f340 81ed 	ble.w	8003bc4 <_dtoa_r+0xddc>
 80037ea:	9308      	str	r3, [sp, #32]
 80037ec:	e572      	b.n	80032d4 <_dtoa_r+0x4ec>
 80037ee:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80037f0:	e524      	b.n	800323c <_dtoa_r+0x454>
 80037f2:	9b00      	ldr	r3, [sp, #0]
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	f77f ad69 	ble.w	80032cc <_dtoa_r+0x4e4>
 80037fa:	9b08      	ldr	r3, [sp, #32]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	f040 819d 	bne.w	8003b3c <_dtoa_r+0xd54>
 8003802:	9906      	ldr	r1, [sp, #24]
 8003804:	2205      	movs	r2, #5
 8003806:	4648      	mov	r0, r9
 8003808:	f001 fbe4 	bl	8004fd4 <__multadd>
 800380c:	4601      	mov	r1, r0
 800380e:	9006      	str	r0, [sp, #24]
 8003810:	4620      	mov	r0, r4
 8003812:	f001 fe03 	bl	800541c <__mcmp>
 8003816:	2800      	cmp	r0, #0
 8003818:	940a      	str	r4, [sp, #40]	; 0x28
 800381a:	f77f af16 	ble.w	800364a <_dtoa_r+0x862>
 800381e:	9a04      	ldr	r2, [sp, #16]
 8003820:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003822:	2331      	movs	r3, #49	; 0x31
 8003824:	3201      	adds	r2, #1
 8003826:	9204      	str	r2, [sp, #16]
 8003828:	700b      	strb	r3, [r1, #0]
 800382a:	1c4d      	adds	r5, r1, #1
 800382c:	e711      	b.n	8003652 <_dtoa_r+0x86a>
 800382e:	9a04      	ldr	r2, [sp, #16]
 8003830:	3201      	adds	r2, #1
 8003832:	9204      	str	r2, [sp, #16]
 8003834:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003836:	2331      	movs	r3, #49	; 0x31
 8003838:	7013      	strb	r3, [r2, #0]
 800383a:	e58c      	b.n	8003356 <_dtoa_r+0x56e>
 800383c:	2301      	movs	r3, #1
 800383e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003840:	e5d2      	b.n	80033e8 <_dtoa_r+0x600>
 8003842:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8003846:	e49a      	b.n	800317e <_dtoa_r+0x396>
 8003848:	f1ba 0f00 	cmp.w	sl, #0
 800384c:	f47f ad09 	bne.w	8003262 <_dtoa_r+0x47a>
 8003850:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8003854:	2b00      	cmp	r3, #0
 8003856:	f040 813e 	bne.w	8003ad6 <_dtoa_r+0xcee>
 800385a:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 800385e:	0d3f      	lsrs	r7, r7, #20
 8003860:	053f      	lsls	r7, r7, #20
 8003862:	b12f      	cbz	r7, 8003870 <_dtoa_r+0xa88>
 8003864:	9b07      	ldr	r3, [sp, #28]
 8003866:	3301      	adds	r3, #1
 8003868:	9307      	str	r3, [sp, #28]
 800386a:	f108 0801 	add.w	r8, r8, #1
 800386e:	2701      	movs	r7, #1
 8003870:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003872:	2001      	movs	r0, #1
 8003874:	2b00      	cmp	r3, #0
 8003876:	f43f acfe 	beq.w	8003276 <_dtoa_r+0x48e>
 800387a:	e4f3      	b.n	8003264 <_dtoa_r+0x47c>
 800387c:	4650      	mov	r0, sl
 800387e:	f7fc fe6d 	bl	800055c <__aeabi_i2d>
 8003882:	4632      	mov	r2, r6
 8003884:	463b      	mov	r3, r7
 8003886:	f7fc fecf 	bl	8000628 <__aeabi_dmul>
 800388a:	2200      	movs	r2, #0
 800388c:	4bbf      	ldr	r3, [pc, #764]	; (8003b8c <_dtoa_r+0xda4>)
 800388e:	f7fc fd19 	bl	80002c4 <__adddf3>
 8003892:	4604      	mov	r4, r0
 8003894:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8003898:	4630      	mov	r0, r6
 800389a:	4639      	mov	r1, r7
 800389c:	2200      	movs	r2, #0
 800389e:	4bbc      	ldr	r3, [pc, #752]	; (8003b90 <_dtoa_r+0xda8>)
 80038a0:	f7fc fd0e 	bl	80002c0 <__aeabi_dsub>
 80038a4:	4622      	mov	r2, r4
 80038a6:	462b      	mov	r3, r5
 80038a8:	4606      	mov	r6, r0
 80038aa:	460f      	mov	r7, r1
 80038ac:	f003 fdbe 	bl	800742c <__aeabi_dcmpgt>
 80038b0:	2800      	cmp	r0, #0
 80038b2:	f040 80ae 	bne.w	8003a12 <_dtoa_r+0xc2a>
 80038b6:	4622      	mov	r2, r4
 80038b8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80038bc:	4630      	mov	r0, r6
 80038be:	4639      	mov	r1, r7
 80038c0:	f003 fd96 	bl	80073f0 <__aeabi_dcmplt>
 80038c4:	2800      	cmp	r0, #0
 80038c6:	d04a      	beq.n	800395e <_dtoa_r+0xb76>
 80038c8:	2300      	movs	r3, #0
 80038ca:	9306      	str	r3, [sp, #24]
 80038cc:	461e      	mov	r6, r3
 80038ce:	e6bc      	b.n	800364a <_dtoa_r+0x862>
 80038d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80038d2:	f7ff bac2 	b.w	8002e5a <_dtoa_r+0x72>
 80038d6:	9b06      	ldr	r3, [sp, #24]
 80038d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80038da:	9706      	str	r7, [sp, #24]
 80038dc:	1afb      	subs	r3, r7, r3
 80038de:	441a      	add	r2, r3
 80038e0:	920c      	str	r2, [sp, #48]	; 0x30
 80038e2:	2700      	movs	r7, #0
 80038e4:	e46d      	b.n	80031c2 <_dtoa_r+0x3da>
 80038e6:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
 80038ea:	f04f 0a02 	mov.w	sl, #2
 80038ee:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 80038f2:	e5bf      	b.n	8003474 <_dtoa_r+0x68c>
 80038f4:	461c      	mov	r4, r3
 80038f6:	2100      	movs	r1, #0
 80038f8:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 80038fc:	e590      	b.n	8003420 <_dtoa_r+0x638>
 80038fe:	2401      	movs	r4, #1
 8003900:	940e      	str	r4, [sp, #56]	; 0x38
 8003902:	9408      	str	r4, [sp, #32]
 8003904:	9405      	str	r4, [sp, #20]
 8003906:	e7f6      	b.n	80038f6 <_dtoa_r+0xb0e>
 8003908:	2a00      	cmp	r2, #0
 800390a:	469a      	mov	sl, r3
 800390c:	dd11      	ble.n	8003932 <_dtoa_r+0xb4a>
 800390e:	4621      	mov	r1, r4
 8003910:	2201      	movs	r2, #1
 8003912:	4648      	mov	r0, r9
 8003914:	f001 fd2a 	bl	800536c <__lshift>
 8003918:	9906      	ldr	r1, [sp, #24]
 800391a:	4604      	mov	r4, r0
 800391c:	f001 fd7e 	bl	800541c <__mcmp>
 8003920:	2800      	cmp	r0, #0
 8003922:	f340 8148 	ble.w	8003bb6 <_dtoa_r+0xdce>
 8003926:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800392a:	f000 8109 	beq.w	8003b40 <_dtoa_r+0xd58>
 800392e:	f105 0a31 	add.w	sl, r5, #49	; 0x31
 8003932:	46b3      	mov	fp, r6
 8003934:	f887 a000 	strb.w	sl, [r7]
 8003938:	1c7d      	adds	r5, r7, #1
 800393a:	4646      	mov	r6, r8
 800393c:	940a      	str	r4, [sp, #40]	; 0x28
 800393e:	e50a      	b.n	8003356 <_dtoa_r+0x56e>
 8003940:	d104      	bne.n	800394c <_dtoa_r+0xb64>
 8003942:	f01a 0f01 	tst.w	sl, #1
 8003946:	d001      	beq.n	800394c <_dtoa_r+0xb64>
 8003948:	e4f5      	b.n	8003336 <_dtoa_r+0x54e>
 800394a:	4615      	mov	r5, r2
 800394c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003950:	2b30      	cmp	r3, #48	; 0x30
 8003952:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8003956:	d0f8      	beq.n	800394a <_dtoa_r+0xb62>
 8003958:	e4fd      	b.n	8003356 <_dtoa_r+0x56e>
 800395a:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
 800395e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
 8003962:	f7ff bb4b 	b.w	8002ffc <_dtoa_r+0x214>
 8003966:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003968:	2230      	movs	r2, #48	; 0x30
 800396a:	700a      	strb	r2, [r1, #0]
 800396c:	9a04      	ldr	r2, [sp, #16]
 800396e:	f815 4c01 	ldrb.w	r4, [r5, #-1]
 8003972:	3201      	adds	r2, #1
 8003974:	9204      	str	r2, [sp, #16]
 8003976:	e400      	b.n	800317a <_dtoa_r+0x392>
 8003978:	9b04      	ldr	r3, [sp, #16]
 800397a:	425c      	negs	r4, r3
 800397c:	2c00      	cmp	r4, #0
 800397e:	f000 80b3 	beq.w	8003ae8 <_dtoa_r+0xd00>
 8003982:	4b84      	ldr	r3, [pc, #528]	; (8003b94 <_dtoa_r+0xdac>)
 8003984:	f004 020f 	and.w	r2, r4, #15
 8003988:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800398c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003990:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003994:	f7fc fe48 	bl	8000628 <__aeabi_dmul>
 8003998:	1124      	asrs	r4, r4, #4
 800399a:	4606      	mov	r6, r0
 800399c:	460f      	mov	r7, r1
 800399e:	f000 8116 	beq.w	8003bce <_dtoa_r+0xde6>
 80039a2:	4d7d      	ldr	r5, [pc, #500]	; (8003b98 <_dtoa_r+0xdb0>)
 80039a4:	f04f 0a02 	mov.w	sl, #2
 80039a8:	07e2      	lsls	r2, r4, #31
 80039aa:	d509      	bpl.n	80039c0 <_dtoa_r+0xbd8>
 80039ac:	4630      	mov	r0, r6
 80039ae:	4639      	mov	r1, r7
 80039b0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80039b4:	f7fc fe38 	bl	8000628 <__aeabi_dmul>
 80039b8:	f10a 0a01 	add.w	sl, sl, #1
 80039bc:	4606      	mov	r6, r0
 80039be:	460f      	mov	r7, r1
 80039c0:	1064      	asrs	r4, r4, #1
 80039c2:	f105 0508 	add.w	r5, r5, #8
 80039c6:	d1ef      	bne.n	80039a8 <_dtoa_r+0xbc0>
 80039c8:	e56e      	b.n	80034a8 <_dtoa_r+0x6c0>
 80039ca:	6871      	ldr	r1, [r6, #4]
 80039cc:	4648      	mov	r0, r9
 80039ce:	f001 fad1 	bl	8004f74 <_Balloc>
 80039d2:	6933      	ldr	r3, [r6, #16]
 80039d4:	1c9a      	adds	r2, r3, #2
 80039d6:	4605      	mov	r5, r0
 80039d8:	0092      	lsls	r2, r2, #2
 80039da:	f106 010c 	add.w	r1, r6, #12
 80039de:	300c      	adds	r0, #12
 80039e0:	f001 f9c6 	bl	8004d70 <memcpy>
 80039e4:	4629      	mov	r1, r5
 80039e6:	2201      	movs	r2, #1
 80039e8:	4648      	mov	r0, r9
 80039ea:	f001 fcbf 	bl	800536c <__lshift>
 80039ee:	4680      	mov	r8, r0
 80039f0:	e670      	b.n	80036d4 <_dtoa_r+0x8ec>
 80039f2:	2b39      	cmp	r3, #57	; 0x39
 80039f4:	f000 80a4 	beq.w	8003b40 <_dtoa_r+0xd58>
 80039f8:	f103 0a01 	add.w	sl, r3, #1
 80039fc:	46b3      	mov	fp, r6
 80039fe:	f887 a000 	strb.w	sl, [r7]
 8003a02:	1c7d      	adds	r5, r7, #1
 8003a04:	4646      	mov	r6, r8
 8003a06:	940a      	str	r4, [sp, #40]	; 0x28
 8003a08:	e4a5      	b.n	8003356 <_dtoa_r+0x56e>
 8003a0a:	46b3      	mov	fp, r6
 8003a0c:	469a      	mov	sl, r3
 8003a0e:	4646      	mov	r6, r8
 8003a10:	e485      	b.n	800331e <_dtoa_r+0x536>
 8003a12:	2300      	movs	r3, #0
 8003a14:	9306      	str	r3, [sp, #24]
 8003a16:	461e      	mov	r6, r3
 8003a18:	e701      	b.n	800381e <_dtoa_r+0xa36>
 8003a1a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003a1c:	495d      	ldr	r1, [pc, #372]	; (8003b94 <_dtoa_r+0xdac>)
 8003a1e:	1e5a      	subs	r2, r3, #1
 8003a20:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8003a24:	462b      	mov	r3, r5
 8003a26:	9217      	str	r2, [sp, #92]	; 0x5c
 8003a28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003a2c:	4622      	mov	r2, r4
 8003a2e:	f7fc fdfb 	bl	8000628 <__aeabi_dmul>
 8003a32:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
 8003a36:	4639      	mov	r1, r7
 8003a38:	4630      	mov	r0, r6
 8003a3a:	f7fd f807 	bl	8000a4c <__aeabi_d2iz>
 8003a3e:	4604      	mov	r4, r0
 8003a40:	f7fc fd8c 	bl	800055c <__aeabi_i2d>
 8003a44:	460b      	mov	r3, r1
 8003a46:	4602      	mov	r2, r0
 8003a48:	4639      	mov	r1, r7
 8003a4a:	4630      	mov	r0, r6
 8003a4c:	f7fc fc38 	bl	80002c0 <__aeabi_dsub>
 8003a50:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003a52:	460f      	mov	r7, r1
 8003a54:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003a56:	3430      	adds	r4, #48	; 0x30
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	4606      	mov	r6, r0
 8003a5c:	700c      	strb	r4, [r1, #0]
 8003a5e:	f101 0501 	add.w	r5, r1, #1
 8003a62:	d020      	beq.n	8003aa6 <_dtoa_r+0xcbe>
 8003a64:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003a66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003a68:	4413      	add	r3, r2
 8003a6a:	469a      	mov	sl, r3
 8003a6c:	46ab      	mov	fp, r5
 8003a6e:	2200      	movs	r2, #0
 8003a70:	4b4a      	ldr	r3, [pc, #296]	; (8003b9c <_dtoa_r+0xdb4>)
 8003a72:	4630      	mov	r0, r6
 8003a74:	4639      	mov	r1, r7
 8003a76:	f7fc fdd7 	bl	8000628 <__aeabi_dmul>
 8003a7a:	460f      	mov	r7, r1
 8003a7c:	4606      	mov	r6, r0
 8003a7e:	f7fc ffe5 	bl	8000a4c <__aeabi_d2iz>
 8003a82:	4604      	mov	r4, r0
 8003a84:	f7fc fd6a 	bl	800055c <__aeabi_i2d>
 8003a88:	3430      	adds	r4, #48	; 0x30
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	460b      	mov	r3, r1
 8003a8e:	4630      	mov	r0, r6
 8003a90:	4639      	mov	r1, r7
 8003a92:	f7fc fc15 	bl	80002c0 <__aeabi_dsub>
 8003a96:	f80b 4b01 	strb.w	r4, [fp], #1
 8003a9a:	45da      	cmp	sl, fp
 8003a9c:	4606      	mov	r6, r0
 8003a9e:	460f      	mov	r7, r1
 8003aa0:	d1e5      	bne.n	8003a6e <_dtoa_r+0xc86>
 8003aa2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003aa4:	441d      	add	r5, r3
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	4b3d      	ldr	r3, [pc, #244]	; (8003ba0 <_dtoa_r+0xdb8>)
 8003aaa:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8003aae:	f7fc fc09 	bl	80002c4 <__adddf3>
 8003ab2:	4632      	mov	r2, r6
 8003ab4:	463b      	mov	r3, r7
 8003ab6:	f003 fc9b 	bl	80073f0 <__aeabi_dcmplt>
 8003aba:	2800      	cmp	r0, #0
 8003abc:	d048      	beq.n	8003b50 <_dtoa_r+0xd68>
 8003abe:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003ac0:	9304      	str	r3, [sp, #16]
 8003ac2:	f815 4c01 	ldrb.w	r4, [r5, #-1]
 8003ac6:	f7ff bb4c 	b.w	8003162 <_dtoa_r+0x37a>
 8003aca:	9b07      	ldr	r3, [sp, #28]
 8003acc:	9a08      	ldr	r2, [sp, #32]
 8003ace:	1a9d      	subs	r5, r3, r2
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	f7ff bb7c 	b.w	80031ce <_dtoa_r+0x3e6>
 8003ad6:	2700      	movs	r7, #0
 8003ad8:	e6ca      	b.n	8003870 <_dtoa_r+0xa88>
 8003ada:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8003adc:	9f06      	ldr	r7, [sp, #24]
 8003ade:	9d07      	ldr	r5, [sp, #28]
 8003ae0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003ae4:	f7ff bb73 	b.w	80031ce <_dtoa_r+0x3e6>
 8003ae8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8003aec:	f04f 0a02 	mov.w	sl, #2
 8003af0:	e4da      	b.n	80034a8 <_dtoa_r+0x6c0>
 8003af2:	9b08      	ldr	r3, [sp, #32]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	f43f aec1 	beq.w	800387c <_dtoa_r+0xa94>
 8003afa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	f77f af2e 	ble.w	800395e <_dtoa_r+0xb76>
 8003b02:	2200      	movs	r2, #0
 8003b04:	4b25      	ldr	r3, [pc, #148]	; (8003b9c <_dtoa_r+0xdb4>)
 8003b06:	4630      	mov	r0, r6
 8003b08:	4639      	mov	r1, r7
 8003b0a:	f7fc fd8d 	bl	8000628 <__aeabi_dmul>
 8003b0e:	4606      	mov	r6, r0
 8003b10:	460f      	mov	r7, r1
 8003b12:	f10a 0001 	add.w	r0, sl, #1
 8003b16:	f7fc fd21 	bl	800055c <__aeabi_i2d>
 8003b1a:	4632      	mov	r2, r6
 8003b1c:	463b      	mov	r3, r7
 8003b1e:	f7fc fd83 	bl	8000628 <__aeabi_dmul>
 8003b22:	2200      	movs	r2, #0
 8003b24:	4b19      	ldr	r3, [pc, #100]	; (8003b8c <_dtoa_r+0xda4>)
 8003b26:	f7fc fbcd 	bl	80002c4 <__adddf3>
 8003b2a:	9a04      	ldr	r2, [sp, #16]
 8003b2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003b2e:	9312      	str	r3, [sp, #72]	; 0x48
 8003b30:	3a01      	subs	r2, #1
 8003b32:	4604      	mov	r4, r0
 8003b34:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8003b38:	9216      	str	r2, [sp, #88]	; 0x58
 8003b3a:	e4d6      	b.n	80034ea <_dtoa_r+0x702>
 8003b3c:	940a      	str	r4, [sp, #40]	; 0x28
 8003b3e:	e584      	b.n	800364a <_dtoa_r+0x862>
 8003b40:	2239      	movs	r2, #57	; 0x39
 8003b42:	46b3      	mov	fp, r6
 8003b44:	940a      	str	r4, [sp, #40]	; 0x28
 8003b46:	4646      	mov	r6, r8
 8003b48:	703a      	strb	r2, [r7, #0]
 8003b4a:	1c7d      	adds	r5, r7, #1
 8003b4c:	f7ff bbf5 	b.w	800333a <_dtoa_r+0x552>
 8003b50:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8003b54:	2000      	movs	r0, #0
 8003b56:	4912      	ldr	r1, [pc, #72]	; (8003ba0 <_dtoa_r+0xdb8>)
 8003b58:	f7fc fbb2 	bl	80002c0 <__aeabi_dsub>
 8003b5c:	4632      	mov	r2, r6
 8003b5e:	463b      	mov	r3, r7
 8003b60:	f003 fc64 	bl	800742c <__aeabi_dcmpgt>
 8003b64:	b908      	cbnz	r0, 8003b6a <_dtoa_r+0xd82>
 8003b66:	e6fa      	b.n	800395e <_dtoa_r+0xb76>
 8003b68:	4615      	mov	r5, r2
 8003b6a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003b6e:	2b30      	cmp	r3, #48	; 0x30
 8003b70:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8003b74:	d0f8      	beq.n	8003b68 <_dtoa_r+0xd80>
 8003b76:	e539      	b.n	80035ec <_dtoa_r+0x804>
 8003b78:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003b7a:	9304      	str	r3, [sp, #16]
 8003b7c:	f7ff baf1 	b.w	8003162 <_dtoa_r+0x37a>
 8003b80:	f1ba 0f00 	cmp.w	sl, #0
 8003b84:	f47f ad7c 	bne.w	8003680 <_dtoa_r+0x898>
 8003b88:	e662      	b.n	8003850 <_dtoa_r+0xa68>
 8003b8a:	bf00      	nop
 8003b8c:	401c0000 	.word	0x401c0000
 8003b90:	40140000 	.word	0x40140000
 8003b94:	0800d048 	.word	0x0800d048
 8003b98:	0800d138 	.word	0x0800d138
 8003b9c:	40240000 	.word	0x40240000
 8003ba0:	3fe00000 	.word	0x3fe00000
 8003ba4:	2b39      	cmp	r3, #57	; 0x39
 8003ba6:	46d3      	mov	fp, sl
 8003ba8:	469a      	mov	sl, r3
 8003baa:	d0c9      	beq.n	8003b40 <_dtoa_r+0xd58>
 8003bac:	f1bb 0f00 	cmp.w	fp, #0
 8003bb0:	f73f aebd 	bgt.w	800392e <_dtoa_r+0xb46>
 8003bb4:	e6bd      	b.n	8003932 <_dtoa_r+0xb4a>
 8003bb6:	f47f aebc 	bne.w	8003932 <_dtoa_r+0xb4a>
 8003bba:	f01a 0f01 	tst.w	sl, #1
 8003bbe:	f43f aeb8 	beq.w	8003932 <_dtoa_r+0xb4a>
 8003bc2:	e6b0      	b.n	8003926 <_dtoa_r+0xb3e>
 8003bc4:	9b00      	ldr	r3, [sp, #0]
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	dc25      	bgt.n	8003c16 <_dtoa_r+0xe2e>
 8003bca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003bcc:	e60d      	b.n	80037ea <_dtoa_r+0xa02>
 8003bce:	f04f 0a02 	mov.w	sl, #2
 8003bd2:	e469      	b.n	80034a8 <_dtoa_r+0x6c0>
 8003bd4:	9b00      	ldr	r3, [sp, #0]
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	dc1d      	bgt.n	8003c16 <_dtoa_r+0xe2e>
 8003bda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003bdc:	e56d      	b.n	80036ba <_dtoa_r+0x8d2>
 8003bde:	2400      	movs	r4, #0
 8003be0:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
 8003be4:	4621      	mov	r1, r4
 8003be6:	4648      	mov	r0, r9
 8003be8:	f001 f9c4 	bl	8004f74 <_Balloc>
 8003bec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003bf0:	9308      	str	r3, [sp, #32]
 8003bf2:	930e      	str	r3, [sp, #56]	; 0x38
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	9009      	str	r0, [sp, #36]	; 0x24
 8003bf8:	9405      	str	r4, [sp, #20]
 8003bfa:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 8003bfe:	930b      	str	r3, [sp, #44]	; 0x2c
 8003c00:	f7ff b9fc 	b.w	8002ffc <_dtoa_r+0x214>
 8003c04:	f43f ab48 	beq.w	8003298 <_dtoa_r+0x4b0>
 8003c08:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 8003c0c:	f7ff bb3f 	b.w	800328e <_dtoa_r+0x4a6>
 8003c10:	2601      	movs	r6, #1
 8003c12:	f7ff b9bc 	b.w	8002f8e <_dtoa_r+0x1a6>
 8003c16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003c18:	9308      	str	r3, [sp, #32]
 8003c1a:	e5ee      	b.n	80037fa <_dtoa_r+0xa12>

08003c1c <__sflush_r>:
 8003c1c:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 8003c20:	b29a      	uxth	r2, r3
 8003c22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c26:	460d      	mov	r5, r1
 8003c28:	0711      	lsls	r1, r2, #28
 8003c2a:	4680      	mov	r8, r0
 8003c2c:	d43c      	bmi.n	8003ca8 <__sflush_r+0x8c>
 8003c2e:	686a      	ldr	r2, [r5, #4]
 8003c30:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003c34:	2a00      	cmp	r2, #0
 8003c36:	81ab      	strh	r3, [r5, #12]
 8003c38:	dd73      	ble.n	8003d22 <__sflush_r+0x106>
 8003c3a:	6aac      	ldr	r4, [r5, #40]	; 0x28
 8003c3c:	2c00      	cmp	r4, #0
 8003c3e:	d04b      	beq.n	8003cd8 <__sflush_r+0xbc>
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003c46:	2100      	movs	r1, #0
 8003c48:	b292      	uxth	r2, r2
 8003c4a:	f8d8 6000 	ldr.w	r6, [r8]
 8003c4e:	f8c8 1000 	str.w	r1, [r8]
 8003c52:	2a00      	cmp	r2, #0
 8003c54:	d069      	beq.n	8003d2a <__sflush_r+0x10e>
 8003c56:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8003c58:	075f      	lsls	r7, r3, #29
 8003c5a:	d505      	bpl.n	8003c68 <__sflush_r+0x4c>
 8003c5c:	6869      	ldr	r1, [r5, #4]
 8003c5e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003c60:	1a52      	subs	r2, r2, r1
 8003c62:	b10b      	cbz	r3, 8003c68 <__sflush_r+0x4c>
 8003c64:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8003c66:	1ad2      	subs	r2, r2, r3
 8003c68:	2300      	movs	r3, #0
 8003c6a:	69e9      	ldr	r1, [r5, #28]
 8003c6c:	4640      	mov	r0, r8
 8003c6e:	47a0      	blx	r4
 8003c70:	1c44      	adds	r4, r0, #1
 8003c72:	d03c      	beq.n	8003cee <__sflush_r+0xd2>
 8003c74:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 8003c78:	692a      	ldr	r2, [r5, #16]
 8003c7a:	602a      	str	r2, [r5, #0]
 8003c7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c80:	2200      	movs	r2, #0
 8003c82:	81ab      	strh	r3, [r5, #12]
 8003c84:	04db      	lsls	r3, r3, #19
 8003c86:	606a      	str	r2, [r5, #4]
 8003c88:	d449      	bmi.n	8003d1e <__sflush_r+0x102>
 8003c8a:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8003c8c:	f8c8 6000 	str.w	r6, [r8]
 8003c90:	b311      	cbz	r1, 8003cd8 <__sflush_r+0xbc>
 8003c92:	f105 0340 	add.w	r3, r5, #64	; 0x40
 8003c96:	4299      	cmp	r1, r3
 8003c98:	d002      	beq.n	8003ca0 <__sflush_r+0x84>
 8003c9a:	4640      	mov	r0, r8
 8003c9c:	f000 f9e0 	bl	8004060 <_free_r>
 8003ca0:	2000      	movs	r0, #0
 8003ca2:	6328      	str	r0, [r5, #48]	; 0x30
 8003ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ca8:	692e      	ldr	r6, [r5, #16]
 8003caa:	b1ae      	cbz	r6, 8003cd8 <__sflush_r+0xbc>
 8003cac:	682c      	ldr	r4, [r5, #0]
 8003cae:	602e      	str	r6, [r5, #0]
 8003cb0:	0790      	lsls	r0, r2, #30
 8003cb2:	bf0c      	ite	eq
 8003cb4:	696b      	ldreq	r3, [r5, #20]
 8003cb6:	2300      	movne	r3, #0
 8003cb8:	1ba4      	subs	r4, r4, r6
 8003cba:	60ab      	str	r3, [r5, #8]
 8003cbc:	e00a      	b.n	8003cd4 <__sflush_r+0xb8>
 8003cbe:	4623      	mov	r3, r4
 8003cc0:	4632      	mov	r2, r6
 8003cc2:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 8003cc4:	69e9      	ldr	r1, [r5, #28]
 8003cc6:	4640      	mov	r0, r8
 8003cc8:	47b8      	blx	r7
 8003cca:	2800      	cmp	r0, #0
 8003ccc:	eba4 0400 	sub.w	r4, r4, r0
 8003cd0:	4406      	add	r6, r0
 8003cd2:	dd04      	ble.n	8003cde <__sflush_r+0xc2>
 8003cd4:	2c00      	cmp	r4, #0
 8003cd6:	dcf2      	bgt.n	8003cbe <__sflush_r+0xa2>
 8003cd8:	2000      	movs	r0, #0
 8003cda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003cde:	89ab      	ldrh	r3, [r5, #12]
 8003ce0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ce4:	81ab      	strh	r3, [r5, #12]
 8003ce6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003cea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003cee:	f8d8 2000 	ldr.w	r2, [r8]
 8003cf2:	2a1d      	cmp	r2, #29
 8003cf4:	d8f3      	bhi.n	8003cde <__sflush_r+0xc2>
 8003cf6:	4b1a      	ldr	r3, [pc, #104]	; (8003d60 <__sflush_r+0x144>)
 8003cf8:	40d3      	lsrs	r3, r2
 8003cfa:	f003 0301 	and.w	r3, r3, #1
 8003cfe:	f083 0401 	eor.w	r4, r3, #1
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d0eb      	beq.n	8003cde <__sflush_r+0xc2>
 8003d06:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 8003d0a:	6929      	ldr	r1, [r5, #16]
 8003d0c:	6029      	str	r1, [r5, #0]
 8003d0e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d12:	04d9      	lsls	r1, r3, #19
 8003d14:	606c      	str	r4, [r5, #4]
 8003d16:	81ab      	strh	r3, [r5, #12]
 8003d18:	d5b7      	bpl.n	8003c8a <__sflush_r+0x6e>
 8003d1a:	2a00      	cmp	r2, #0
 8003d1c:	d1b5      	bne.n	8003c8a <__sflush_r+0x6e>
 8003d1e:	6528      	str	r0, [r5, #80]	; 0x50
 8003d20:	e7b3      	b.n	8003c8a <__sflush_r+0x6e>
 8003d22:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8003d24:	2a00      	cmp	r2, #0
 8003d26:	dc88      	bgt.n	8003c3a <__sflush_r+0x1e>
 8003d28:	e7d6      	b.n	8003cd8 <__sflush_r+0xbc>
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	69e9      	ldr	r1, [r5, #28]
 8003d2e:	4640      	mov	r0, r8
 8003d30:	47a0      	blx	r4
 8003d32:	1c43      	adds	r3, r0, #1
 8003d34:	4602      	mov	r2, r0
 8003d36:	d002      	beq.n	8003d3e <__sflush_r+0x122>
 8003d38:	89ab      	ldrh	r3, [r5, #12]
 8003d3a:	6aac      	ldr	r4, [r5, #40]	; 0x28
 8003d3c:	e78c      	b.n	8003c58 <__sflush_r+0x3c>
 8003d3e:	f8d8 3000 	ldr.w	r3, [r8]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d0f8      	beq.n	8003d38 <__sflush_r+0x11c>
 8003d46:	2b1d      	cmp	r3, #29
 8003d48:	d001      	beq.n	8003d4e <__sflush_r+0x132>
 8003d4a:	2b16      	cmp	r3, #22
 8003d4c:	d102      	bne.n	8003d54 <__sflush_r+0x138>
 8003d4e:	f8c8 6000 	str.w	r6, [r8]
 8003d52:	e7c1      	b.n	8003cd8 <__sflush_r+0xbc>
 8003d54:	89ab      	ldrh	r3, [r5, #12]
 8003d56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d5a:	81ab      	strh	r3, [r5, #12]
 8003d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d60:	20400001 	.word	0x20400001

08003d64 <_fflush_r>:
 8003d64:	b510      	push	{r4, lr}
 8003d66:	4604      	mov	r4, r0
 8003d68:	b082      	sub	sp, #8
 8003d6a:	b108      	cbz	r0, 8003d70 <_fflush_r+0xc>
 8003d6c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003d6e:	b153      	cbz	r3, 8003d86 <_fflush_r+0x22>
 8003d70:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 8003d74:	b908      	cbnz	r0, 8003d7a <_fflush_r+0x16>
 8003d76:	b002      	add	sp, #8
 8003d78:	bd10      	pop	{r4, pc}
 8003d7a:	4620      	mov	r0, r4
 8003d7c:	b002      	add	sp, #8
 8003d7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d82:	f7ff bf4b 	b.w	8003c1c <__sflush_r>
 8003d86:	9101      	str	r1, [sp, #4]
 8003d88:	f000 f8fc 	bl	8003f84 <__sinit>
 8003d8c:	9901      	ldr	r1, [sp, #4]
 8003d8e:	e7ef      	b.n	8003d70 <_fflush_r+0xc>

08003d90 <fflush>:
 8003d90:	b120      	cbz	r0, 8003d9c <fflush+0xc>
 8003d92:	4b05      	ldr	r3, [pc, #20]	; (8003da8 <fflush+0x18>)
 8003d94:	4601      	mov	r1, r0
 8003d96:	6818      	ldr	r0, [r3, #0]
 8003d98:	f7ff bfe4 	b.w	8003d64 <_fflush_r>
 8003d9c:	4b03      	ldr	r3, [pc, #12]	; (8003dac <fflush+0x1c>)
 8003d9e:	4904      	ldr	r1, [pc, #16]	; (8003db0 <fflush+0x20>)
 8003da0:	6818      	ldr	r0, [r3, #0]
 8003da2:	f000 bbed 	b.w	8004580 <_fwalk_reent>
 8003da6:	bf00      	nop
 8003da8:	20000008 	.word	0x20000008
 8003dac:	0800d010 	.word	0x0800d010
 8003db0:	08003d65 	.word	0x08003d65

08003db4 <__fp_unlock>:
 8003db4:	2000      	movs	r0, #0
 8003db6:	4770      	bx	lr

08003db8 <_cleanup_r>:
 8003db8:	4901      	ldr	r1, [pc, #4]	; (8003dc0 <_cleanup_r+0x8>)
 8003dba:	f000 bbe1 	b.w	8004580 <_fwalk_reent>
 8003dbe:	bf00      	nop
 8003dc0:	080070a5 	.word	0x080070a5

08003dc4 <__sinit.part.1>:
 8003dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dc8:	4b35      	ldr	r3, [pc, #212]	; (8003ea0 <__sinit.part.1+0xdc>)
 8003dca:	6845      	ldr	r5, [r0, #4]
 8003dcc:	63c3      	str	r3, [r0, #60]	; 0x3c
 8003dce:	2400      	movs	r4, #0
 8003dd0:	4607      	mov	r7, r0
 8003dd2:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
 8003dd6:	2304      	movs	r3, #4
 8003dd8:	2103      	movs	r1, #3
 8003dda:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
 8003dde:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
 8003de2:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
 8003de6:	b083      	sub	sp, #12
 8003de8:	602c      	str	r4, [r5, #0]
 8003dea:	606c      	str	r4, [r5, #4]
 8003dec:	60ac      	str	r4, [r5, #8]
 8003dee:	666c      	str	r4, [r5, #100]	; 0x64
 8003df0:	81ec      	strh	r4, [r5, #14]
 8003df2:	612c      	str	r4, [r5, #16]
 8003df4:	616c      	str	r4, [r5, #20]
 8003df6:	61ac      	str	r4, [r5, #24]
 8003df8:	81ab      	strh	r3, [r5, #12]
 8003dfa:	4621      	mov	r1, r4
 8003dfc:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8003e00:	2208      	movs	r2, #8
 8003e02:	f7fc fee3 	bl	8000bcc <memset>
 8003e06:	68be      	ldr	r6, [r7, #8]
 8003e08:	f8df b098 	ldr.w	fp, [pc, #152]	; 8003ea4 <__sinit.part.1+0xe0>
 8003e0c:	f8df a098 	ldr.w	sl, [pc, #152]	; 8003ea8 <__sinit.part.1+0xe4>
 8003e10:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8003eac <__sinit.part.1+0xe8>
 8003e14:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8003eb0 <__sinit.part.1+0xec>
 8003e18:	f8c5 b020 	str.w	fp, [r5, #32]
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	2209      	movs	r2, #9
 8003e20:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 8003e24:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 8003e28:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 8003e2c:	61ed      	str	r5, [r5, #28]
 8003e2e:	4621      	mov	r1, r4
 8003e30:	81f3      	strh	r3, [r6, #14]
 8003e32:	81b2      	strh	r2, [r6, #12]
 8003e34:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 8003e38:	6034      	str	r4, [r6, #0]
 8003e3a:	6074      	str	r4, [r6, #4]
 8003e3c:	60b4      	str	r4, [r6, #8]
 8003e3e:	6674      	str	r4, [r6, #100]	; 0x64
 8003e40:	6134      	str	r4, [r6, #16]
 8003e42:	6174      	str	r4, [r6, #20]
 8003e44:	61b4      	str	r4, [r6, #24]
 8003e46:	2208      	movs	r2, #8
 8003e48:	9301      	str	r3, [sp, #4]
 8003e4a:	f7fc febf 	bl	8000bcc <memset>
 8003e4e:	68fd      	ldr	r5, [r7, #12]
 8003e50:	61f6      	str	r6, [r6, #28]
 8003e52:	2012      	movs	r0, #18
 8003e54:	2202      	movs	r2, #2
 8003e56:	f8c6 b020 	str.w	fp, [r6, #32]
 8003e5a:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
 8003e5e:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
 8003e62:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
 8003e66:	4621      	mov	r1, r4
 8003e68:	81a8      	strh	r0, [r5, #12]
 8003e6a:	81ea      	strh	r2, [r5, #14]
 8003e6c:	602c      	str	r4, [r5, #0]
 8003e6e:	606c      	str	r4, [r5, #4]
 8003e70:	60ac      	str	r4, [r5, #8]
 8003e72:	666c      	str	r4, [r5, #100]	; 0x64
 8003e74:	612c      	str	r4, [r5, #16]
 8003e76:	616c      	str	r4, [r5, #20]
 8003e78:	61ac      	str	r4, [r5, #24]
 8003e7a:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8003e7e:	2208      	movs	r2, #8
 8003e80:	f7fc fea4 	bl	8000bcc <memset>
 8003e84:	9b01      	ldr	r3, [sp, #4]
 8003e86:	61ed      	str	r5, [r5, #28]
 8003e88:	f8c5 b020 	str.w	fp, [r5, #32]
 8003e8c:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 8003e90:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 8003e94:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 8003e98:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e9a:	b003      	add	sp, #12
 8003e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ea0:	08003db9 	.word	0x08003db9
 8003ea4:	08005d05 	.word	0x08005d05
 8003ea8:	08005d2d 	.word	0x08005d2d
 8003eac:	08005d69 	.word	0x08005d69
 8003eb0:	08005d89 	.word	0x08005d89

08003eb4 <__fp_lock>:
 8003eb4:	2000      	movs	r0, #0
 8003eb6:	4770      	bx	lr

08003eb8 <__sfmoreglue>:
 8003eb8:	b570      	push	{r4, r5, r6, lr}
 8003eba:	2368      	movs	r3, #104	; 0x68
 8003ebc:	1e4d      	subs	r5, r1, #1
 8003ebe:	fb03 f505 	mul.w	r5, r3, r5
 8003ec2:	460e      	mov	r6, r1
 8003ec4:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003ec8:	f000 fc48 	bl	800475c <_malloc_r>
 8003ecc:	4604      	mov	r4, r0
 8003ece:	b140      	cbz	r0, 8003ee2 <__sfmoreglue+0x2a>
 8003ed0:	2100      	movs	r1, #0
 8003ed2:	300c      	adds	r0, #12
 8003ed4:	6066      	str	r6, [r4, #4]
 8003ed6:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003eda:	6021      	str	r1, [r4, #0]
 8003edc:	60a0      	str	r0, [r4, #8]
 8003ede:	f7fc fe75 	bl	8000bcc <memset>
 8003ee2:	4620      	mov	r0, r4
 8003ee4:	bd70      	pop	{r4, r5, r6, pc}
 8003ee6:	bf00      	nop

08003ee8 <__sfp>:
 8003ee8:	4b20      	ldr	r3, [pc, #128]	; (8003f6c <__sfp+0x84>)
 8003eea:	b570      	push	{r4, r5, r6, lr}
 8003eec:	681d      	ldr	r5, [r3, #0]
 8003eee:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8003ef0:	4606      	mov	r6, r0
 8003ef2:	b913      	cbnz	r3, 8003efa <__sfp+0x12>
 8003ef4:	4628      	mov	r0, r5
 8003ef6:	f7ff ff65 	bl	8003dc4 <__sinit.part.1>
 8003efa:	f505 7538 	add.w	r5, r5, #736	; 0x2e0
 8003efe:	686b      	ldr	r3, [r5, #4]
 8003f00:	68ac      	ldr	r4, [r5, #8]
 8003f02:	3b01      	subs	r3, #1
 8003f04:	d505      	bpl.n	8003f12 <__sfp+0x2a>
 8003f06:	e021      	b.n	8003f4c <__sfp+0x64>
 8003f08:	3b01      	subs	r3, #1
 8003f0a:	1c5a      	adds	r2, r3, #1
 8003f0c:	f104 0468 	add.w	r4, r4, #104	; 0x68
 8003f10:	d01c      	beq.n	8003f4c <__sfp+0x64>
 8003f12:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003f16:	2a00      	cmp	r2, #0
 8003f18:	d1f6      	bne.n	8003f08 <__sfp+0x20>
 8003f1a:	2500      	movs	r5, #0
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f22:	81e2      	strh	r2, [r4, #14]
 8003f24:	81a3      	strh	r3, [r4, #12]
 8003f26:	6665      	str	r5, [r4, #100]	; 0x64
 8003f28:	6025      	str	r5, [r4, #0]
 8003f2a:	60a5      	str	r5, [r4, #8]
 8003f2c:	6065      	str	r5, [r4, #4]
 8003f2e:	6125      	str	r5, [r4, #16]
 8003f30:	6165      	str	r5, [r4, #20]
 8003f32:	61a5      	str	r5, [r4, #24]
 8003f34:	4629      	mov	r1, r5
 8003f36:	2208      	movs	r2, #8
 8003f38:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003f3c:	f7fc fe46 	bl	8000bcc <memset>
 8003f40:	6325      	str	r5, [r4, #48]	; 0x30
 8003f42:	6365      	str	r5, [r4, #52]	; 0x34
 8003f44:	6465      	str	r5, [r4, #68]	; 0x44
 8003f46:	64a5      	str	r5, [r4, #72]	; 0x48
 8003f48:	4620      	mov	r0, r4
 8003f4a:	bd70      	pop	{r4, r5, r6, pc}
 8003f4c:	682b      	ldr	r3, [r5, #0]
 8003f4e:	b10b      	cbz	r3, 8003f54 <__sfp+0x6c>
 8003f50:	461d      	mov	r5, r3
 8003f52:	e7d4      	b.n	8003efe <__sfp+0x16>
 8003f54:	2104      	movs	r1, #4
 8003f56:	4630      	mov	r0, r6
 8003f58:	f7ff ffae 	bl	8003eb8 <__sfmoreglue>
 8003f5c:	6028      	str	r0, [r5, #0]
 8003f5e:	b108      	cbz	r0, 8003f64 <__sfp+0x7c>
 8003f60:	4605      	mov	r5, r0
 8003f62:	e7cc      	b.n	8003efe <__sfp+0x16>
 8003f64:	230c      	movs	r3, #12
 8003f66:	6033      	str	r3, [r6, #0]
 8003f68:	bd70      	pop	{r4, r5, r6, pc}
 8003f6a:	bf00      	nop
 8003f6c:	0800d010 	.word	0x0800d010

08003f70 <_cleanup>:
 8003f70:	4b02      	ldr	r3, [pc, #8]	; (8003f7c <_cleanup+0xc>)
 8003f72:	4903      	ldr	r1, [pc, #12]	; (8003f80 <_cleanup+0x10>)
 8003f74:	6818      	ldr	r0, [r3, #0]
 8003f76:	f000 bb03 	b.w	8004580 <_fwalk_reent>
 8003f7a:	bf00      	nop
 8003f7c:	0800d010 	.word	0x0800d010
 8003f80:	080070a5 	.word	0x080070a5

08003f84 <__sinit>:
 8003f84:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003f86:	b103      	cbz	r3, 8003f8a <__sinit+0x6>
 8003f88:	4770      	bx	lr
 8003f8a:	e71b      	b.n	8003dc4 <__sinit.part.1>

08003f8c <__sfp_lock_acquire>:
 8003f8c:	4770      	bx	lr
 8003f8e:	bf00      	nop

08003f90 <__sfp_lock_release>:
 8003f90:	4770      	bx	lr
 8003f92:	bf00      	nop

08003f94 <__sinit_lock_acquire>:
 8003f94:	4770      	bx	lr
 8003f96:	bf00      	nop

08003f98 <__sinit_lock_release>:
 8003f98:	4770      	bx	lr
 8003f9a:	bf00      	nop

08003f9c <__fp_lock_all>:
 8003f9c:	4b02      	ldr	r3, [pc, #8]	; (8003fa8 <__fp_lock_all+0xc>)
 8003f9e:	4903      	ldr	r1, [pc, #12]	; (8003fac <__fp_lock_all+0x10>)
 8003fa0:	6818      	ldr	r0, [r3, #0]
 8003fa2:	f000 bac7 	b.w	8004534 <_fwalk>
 8003fa6:	bf00      	nop
 8003fa8:	20000008 	.word	0x20000008
 8003fac:	08003eb5 	.word	0x08003eb5

08003fb0 <__fp_unlock_all>:
 8003fb0:	4b02      	ldr	r3, [pc, #8]	; (8003fbc <__fp_unlock_all+0xc>)
 8003fb2:	4903      	ldr	r1, [pc, #12]	; (8003fc0 <__fp_unlock_all+0x10>)
 8003fb4:	6818      	ldr	r0, [r3, #0]
 8003fb6:	f000 babd 	b.w	8004534 <_fwalk>
 8003fba:	bf00      	nop
 8003fbc:	20000008 	.word	0x20000008
 8003fc0:	08003db5 	.word	0x08003db5

08003fc4 <_malloc_trim_r>:
 8003fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fc6:	4f23      	ldr	r7, [pc, #140]	; (8004054 <_malloc_trim_r+0x90>)
 8003fc8:	460c      	mov	r4, r1
 8003fca:	4606      	mov	r6, r0
 8003fcc:	f000 ffce 	bl	8004f6c <__malloc_lock>
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	685d      	ldr	r5, [r3, #4]
 8003fd4:	f025 0503 	bic.w	r5, r5, #3
 8003fd8:	1b29      	subs	r1, r5, r4
 8003fda:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
 8003fde:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 8003fe2:	f021 010f 	bic.w	r1, r1, #15
 8003fe6:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 8003fea:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8003fee:	db07      	blt.n	8004000 <_malloc_trim_r+0x3c>
 8003ff0:	2100      	movs	r1, #0
 8003ff2:	4630      	mov	r0, r6
 8003ff4:	f004 fc34 	bl	8008860 <_sbrk_r>
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	442b      	add	r3, r5
 8003ffc:	4298      	cmp	r0, r3
 8003ffe:	d004      	beq.n	800400a <_malloc_trim_r+0x46>
 8004000:	4630      	mov	r0, r6
 8004002:	f000 ffb5 	bl	8004f70 <__malloc_unlock>
 8004006:	2000      	movs	r0, #0
 8004008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800400a:	4261      	negs	r1, r4
 800400c:	4630      	mov	r0, r6
 800400e:	f004 fc27 	bl	8008860 <_sbrk_r>
 8004012:	3001      	adds	r0, #1
 8004014:	d00d      	beq.n	8004032 <_malloc_trim_r+0x6e>
 8004016:	4b10      	ldr	r3, [pc, #64]	; (8004058 <_malloc_trim_r+0x94>)
 8004018:	68ba      	ldr	r2, [r7, #8]
 800401a:	6819      	ldr	r1, [r3, #0]
 800401c:	1b2d      	subs	r5, r5, r4
 800401e:	f045 0501 	orr.w	r5, r5, #1
 8004022:	4630      	mov	r0, r6
 8004024:	1b09      	subs	r1, r1, r4
 8004026:	6055      	str	r5, [r2, #4]
 8004028:	6019      	str	r1, [r3, #0]
 800402a:	f000 ffa1 	bl	8004f70 <__malloc_unlock>
 800402e:	2001      	movs	r0, #1
 8004030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004032:	2100      	movs	r1, #0
 8004034:	4630      	mov	r0, r6
 8004036:	f004 fc13 	bl	8008860 <_sbrk_r>
 800403a:	68ba      	ldr	r2, [r7, #8]
 800403c:	1a83      	subs	r3, r0, r2
 800403e:	2b0f      	cmp	r3, #15
 8004040:	ddde      	ble.n	8004000 <_malloc_trim_r+0x3c>
 8004042:	4c06      	ldr	r4, [pc, #24]	; (800405c <_malloc_trim_r+0x98>)
 8004044:	4904      	ldr	r1, [pc, #16]	; (8004058 <_malloc_trim_r+0x94>)
 8004046:	6824      	ldr	r4, [r4, #0]
 8004048:	f043 0301 	orr.w	r3, r3, #1
 800404c:	1b00      	subs	r0, r0, r4
 800404e:	6053      	str	r3, [r2, #4]
 8004050:	6008      	str	r0, [r1, #0]
 8004052:	e7d5      	b.n	8004000 <_malloc_trim_r+0x3c>
 8004054:	200004b4 	.word	0x200004b4
 8004058:	20000ae4 	.word	0x20000ae4
 800405c:	200008bc 	.word	0x200008bc

08004060 <_free_r>:
 8004060:	2900      	cmp	r1, #0
 8004062:	d045      	beq.n	80040f0 <_free_r+0x90>
 8004064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004068:	460d      	mov	r5, r1
 800406a:	4680      	mov	r8, r0
 800406c:	f000 ff7e 	bl	8004f6c <__malloc_lock>
 8004070:	f855 7c04 	ldr.w	r7, [r5, #-4]
 8004074:	496a      	ldr	r1, [pc, #424]	; (8004220 <_free_r+0x1c0>)
 8004076:	f027 0301 	bic.w	r3, r7, #1
 800407a:	f1a5 0408 	sub.w	r4, r5, #8
 800407e:	18e2      	adds	r2, r4, r3
 8004080:	688e      	ldr	r6, [r1, #8]
 8004082:	6850      	ldr	r0, [r2, #4]
 8004084:	42b2      	cmp	r2, r6
 8004086:	f020 0003 	bic.w	r0, r0, #3
 800408a:	d062      	beq.n	8004152 <_free_r+0xf2>
 800408c:	07fe      	lsls	r6, r7, #31
 800408e:	6050      	str	r0, [r2, #4]
 8004090:	d40b      	bmi.n	80040aa <_free_r+0x4a>
 8004092:	f855 7c08 	ldr.w	r7, [r5, #-8]
 8004096:	1be4      	subs	r4, r4, r7
 8004098:	f101 0e08 	add.w	lr, r1, #8
 800409c:	68a5      	ldr	r5, [r4, #8]
 800409e:	4575      	cmp	r5, lr
 80040a0:	443b      	add	r3, r7
 80040a2:	d06f      	beq.n	8004184 <_free_r+0x124>
 80040a4:	68e7      	ldr	r7, [r4, #12]
 80040a6:	60ef      	str	r7, [r5, #12]
 80040a8:	60bd      	str	r5, [r7, #8]
 80040aa:	1815      	adds	r5, r2, r0
 80040ac:	686d      	ldr	r5, [r5, #4]
 80040ae:	07ed      	lsls	r5, r5, #31
 80040b0:	d542      	bpl.n	8004138 <_free_r+0xd8>
 80040b2:	f043 0201 	orr.w	r2, r3, #1
 80040b6:	6062      	str	r2, [r4, #4]
 80040b8:	50e3      	str	r3, [r4, r3]
 80040ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040be:	d218      	bcs.n	80040f2 <_free_r+0x92>
 80040c0:	08db      	lsrs	r3, r3, #3
 80040c2:	1c5a      	adds	r2, r3, #1
 80040c4:	684d      	ldr	r5, [r1, #4]
 80040c6:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
 80040ca:	60a7      	str	r7, [r4, #8]
 80040cc:	2001      	movs	r0, #1
 80040ce:	109b      	asrs	r3, r3, #2
 80040d0:	fa00 f303 	lsl.w	r3, r0, r3
 80040d4:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
 80040d8:	431d      	orrs	r5, r3
 80040da:	3808      	subs	r0, #8
 80040dc:	60e0      	str	r0, [r4, #12]
 80040de:	604d      	str	r5, [r1, #4]
 80040e0:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
 80040e4:	60fc      	str	r4, [r7, #12]
 80040e6:	4640      	mov	r0, r8
 80040e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80040ec:	f000 bf40 	b.w	8004f70 <__malloc_unlock>
 80040f0:	4770      	bx	lr
 80040f2:	0a5a      	lsrs	r2, r3, #9
 80040f4:	2a04      	cmp	r2, #4
 80040f6:	d853      	bhi.n	80041a0 <_free_r+0x140>
 80040f8:	099a      	lsrs	r2, r3, #6
 80040fa:	f102 0739 	add.w	r7, r2, #57	; 0x39
 80040fe:	007f      	lsls	r7, r7, #1
 8004100:	f102 0538 	add.w	r5, r2, #56	; 0x38
 8004104:	eb01 0087 	add.w	r0, r1, r7, lsl #2
 8004108:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
 800410c:	4944      	ldr	r1, [pc, #272]	; (8004220 <_free_r+0x1c0>)
 800410e:	3808      	subs	r0, #8
 8004110:	4290      	cmp	r0, r2
 8004112:	d04d      	beq.n	80041b0 <_free_r+0x150>
 8004114:	6851      	ldr	r1, [r2, #4]
 8004116:	f021 0103 	bic.w	r1, r1, #3
 800411a:	428b      	cmp	r3, r1
 800411c:	d202      	bcs.n	8004124 <_free_r+0xc4>
 800411e:	6892      	ldr	r2, [r2, #8]
 8004120:	4290      	cmp	r0, r2
 8004122:	d1f7      	bne.n	8004114 <_free_r+0xb4>
 8004124:	68d0      	ldr	r0, [r2, #12]
 8004126:	60e0      	str	r0, [r4, #12]
 8004128:	60a2      	str	r2, [r4, #8]
 800412a:	6084      	str	r4, [r0, #8]
 800412c:	60d4      	str	r4, [r2, #12]
 800412e:	4640      	mov	r0, r8
 8004130:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004134:	f000 bf1c 	b.w	8004f70 <__malloc_unlock>
 8004138:	6895      	ldr	r5, [r2, #8]
 800413a:	4f3a      	ldr	r7, [pc, #232]	; (8004224 <_free_r+0x1c4>)
 800413c:	42bd      	cmp	r5, r7
 800413e:	4403      	add	r3, r0
 8004140:	d03f      	beq.n	80041c2 <_free_r+0x162>
 8004142:	68d0      	ldr	r0, [r2, #12]
 8004144:	60e8      	str	r0, [r5, #12]
 8004146:	f043 0201 	orr.w	r2, r3, #1
 800414a:	6085      	str	r5, [r0, #8]
 800414c:	6062      	str	r2, [r4, #4]
 800414e:	50e3      	str	r3, [r4, r3]
 8004150:	e7b3      	b.n	80040ba <_free_r+0x5a>
 8004152:	07ff      	lsls	r7, r7, #31
 8004154:	4403      	add	r3, r0
 8004156:	d407      	bmi.n	8004168 <_free_r+0x108>
 8004158:	f855 2c08 	ldr.w	r2, [r5, #-8]
 800415c:	1aa4      	subs	r4, r4, r2
 800415e:	4413      	add	r3, r2
 8004160:	68a0      	ldr	r0, [r4, #8]
 8004162:	68e2      	ldr	r2, [r4, #12]
 8004164:	60c2      	str	r2, [r0, #12]
 8004166:	6090      	str	r0, [r2, #8]
 8004168:	4a2f      	ldr	r2, [pc, #188]	; (8004228 <_free_r+0x1c8>)
 800416a:	6812      	ldr	r2, [r2, #0]
 800416c:	f043 0001 	orr.w	r0, r3, #1
 8004170:	4293      	cmp	r3, r2
 8004172:	6060      	str	r0, [r4, #4]
 8004174:	608c      	str	r4, [r1, #8]
 8004176:	d3b6      	bcc.n	80040e6 <_free_r+0x86>
 8004178:	4b2c      	ldr	r3, [pc, #176]	; (800422c <_free_r+0x1cc>)
 800417a:	4640      	mov	r0, r8
 800417c:	6819      	ldr	r1, [r3, #0]
 800417e:	f7ff ff21 	bl	8003fc4 <_malloc_trim_r>
 8004182:	e7b0      	b.n	80040e6 <_free_r+0x86>
 8004184:	1811      	adds	r1, r2, r0
 8004186:	6849      	ldr	r1, [r1, #4]
 8004188:	07c9      	lsls	r1, r1, #31
 800418a:	d444      	bmi.n	8004216 <_free_r+0x1b6>
 800418c:	6891      	ldr	r1, [r2, #8]
 800418e:	68d2      	ldr	r2, [r2, #12]
 8004190:	60ca      	str	r2, [r1, #12]
 8004192:	4403      	add	r3, r0
 8004194:	f043 0001 	orr.w	r0, r3, #1
 8004198:	6091      	str	r1, [r2, #8]
 800419a:	6060      	str	r0, [r4, #4]
 800419c:	50e3      	str	r3, [r4, r3]
 800419e:	e7a2      	b.n	80040e6 <_free_r+0x86>
 80041a0:	2a14      	cmp	r2, #20
 80041a2:	d817      	bhi.n	80041d4 <_free_r+0x174>
 80041a4:	f102 075c 	add.w	r7, r2, #92	; 0x5c
 80041a8:	007f      	lsls	r7, r7, #1
 80041aa:	f102 055b 	add.w	r5, r2, #91	; 0x5b
 80041ae:	e7a9      	b.n	8004104 <_free_r+0xa4>
 80041b0:	10aa      	asrs	r2, r5, #2
 80041b2:	684b      	ldr	r3, [r1, #4]
 80041b4:	2501      	movs	r5, #1
 80041b6:	fa05 f202 	lsl.w	r2, r5, r2
 80041ba:	4313      	orrs	r3, r2
 80041bc:	604b      	str	r3, [r1, #4]
 80041be:	4602      	mov	r2, r0
 80041c0:	e7b1      	b.n	8004126 <_free_r+0xc6>
 80041c2:	f043 0201 	orr.w	r2, r3, #1
 80041c6:	614c      	str	r4, [r1, #20]
 80041c8:	610c      	str	r4, [r1, #16]
 80041ca:	60e5      	str	r5, [r4, #12]
 80041cc:	60a5      	str	r5, [r4, #8]
 80041ce:	6062      	str	r2, [r4, #4]
 80041d0:	50e3      	str	r3, [r4, r3]
 80041d2:	e788      	b.n	80040e6 <_free_r+0x86>
 80041d4:	2a54      	cmp	r2, #84	; 0x54
 80041d6:	d806      	bhi.n	80041e6 <_free_r+0x186>
 80041d8:	0b1a      	lsrs	r2, r3, #12
 80041da:	f102 076f 	add.w	r7, r2, #111	; 0x6f
 80041de:	007f      	lsls	r7, r7, #1
 80041e0:	f102 056e 	add.w	r5, r2, #110	; 0x6e
 80041e4:	e78e      	b.n	8004104 <_free_r+0xa4>
 80041e6:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80041ea:	d806      	bhi.n	80041fa <_free_r+0x19a>
 80041ec:	0bda      	lsrs	r2, r3, #15
 80041ee:	f102 0778 	add.w	r7, r2, #120	; 0x78
 80041f2:	007f      	lsls	r7, r7, #1
 80041f4:	f102 0577 	add.w	r5, r2, #119	; 0x77
 80041f8:	e784      	b.n	8004104 <_free_r+0xa4>
 80041fa:	f240 5054 	movw	r0, #1364	; 0x554
 80041fe:	4282      	cmp	r2, r0
 8004200:	d806      	bhi.n	8004210 <_free_r+0x1b0>
 8004202:	0c9a      	lsrs	r2, r3, #18
 8004204:	f102 077d 	add.w	r7, r2, #125	; 0x7d
 8004208:	007f      	lsls	r7, r7, #1
 800420a:	f102 057c 	add.w	r5, r2, #124	; 0x7c
 800420e:	e779      	b.n	8004104 <_free_r+0xa4>
 8004210:	27fe      	movs	r7, #254	; 0xfe
 8004212:	257e      	movs	r5, #126	; 0x7e
 8004214:	e776      	b.n	8004104 <_free_r+0xa4>
 8004216:	f043 0201 	orr.w	r2, r3, #1
 800421a:	6062      	str	r2, [r4, #4]
 800421c:	50e3      	str	r3, [r4, r3]
 800421e:	e762      	b.n	80040e6 <_free_r+0x86>
 8004220:	200004b4 	.word	0x200004b4
 8004224:	200004bc 	.word	0x200004bc
 8004228:	200008c0 	.word	0x200008c0
 800422c:	20000ae0 	.word	0x20000ae0

08004230 <__sfvwrite_r>:
 8004230:	6893      	ldr	r3, [r2, #8]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d076      	beq.n	8004324 <__sfvwrite_r+0xf4>
 8004236:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800423a:	898b      	ldrh	r3, [r1, #12]
 800423c:	b085      	sub	sp, #20
 800423e:	460c      	mov	r4, r1
 8004240:	0719      	lsls	r1, r3, #28
 8004242:	9001      	str	r0, [sp, #4]
 8004244:	4616      	mov	r6, r2
 8004246:	d529      	bpl.n	800429c <__sfvwrite_r+0x6c>
 8004248:	6922      	ldr	r2, [r4, #16]
 800424a:	b33a      	cbz	r2, 800429c <__sfvwrite_r+0x6c>
 800424c:	f003 0802 	and.w	r8, r3, #2
 8004250:	fa1f f088 	uxth.w	r0, r8
 8004254:	6835      	ldr	r5, [r6, #0]
 8004256:	2800      	cmp	r0, #0
 8004258:	d02f      	beq.n	80042ba <__sfvwrite_r+0x8a>
 800425a:	f04f 0900 	mov.w	r9, #0
 800425e:	4fb4      	ldr	r7, [pc, #720]	; (8004530 <__sfvwrite_r+0x300>)
 8004260:	46c8      	mov	r8, r9
 8004262:	46b2      	mov	sl, r6
 8004264:	45b8      	cmp	r8, r7
 8004266:	4643      	mov	r3, r8
 8004268:	464a      	mov	r2, r9
 800426a:	bf28      	it	cs
 800426c:	463b      	movcs	r3, r7
 800426e:	9801      	ldr	r0, [sp, #4]
 8004270:	f1b8 0f00 	cmp.w	r8, #0
 8004274:	d050      	beq.n	8004318 <__sfvwrite_r+0xe8>
 8004276:	69e1      	ldr	r1, [r4, #28]
 8004278:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800427a:	47b0      	blx	r6
 800427c:	2800      	cmp	r0, #0
 800427e:	dd71      	ble.n	8004364 <__sfvwrite_r+0x134>
 8004280:	f8da 3008 	ldr.w	r3, [sl, #8]
 8004284:	1a1b      	subs	r3, r3, r0
 8004286:	4481      	add	r9, r0
 8004288:	ebc0 0808 	rsb	r8, r0, r8
 800428c:	f8ca 3008 	str.w	r3, [sl, #8]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d1e7      	bne.n	8004264 <__sfvwrite_r+0x34>
 8004294:	2000      	movs	r0, #0
 8004296:	b005      	add	sp, #20
 8004298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800429c:	4621      	mov	r1, r4
 800429e:	9801      	ldr	r0, [sp, #4]
 80042a0:	f7fe fc58 	bl	8002b54 <__swsetup_r>
 80042a4:	2800      	cmp	r0, #0
 80042a6:	f040 813a 	bne.w	800451e <__sfvwrite_r+0x2ee>
 80042aa:	89a3      	ldrh	r3, [r4, #12]
 80042ac:	6835      	ldr	r5, [r6, #0]
 80042ae:	f003 0802 	and.w	r8, r3, #2
 80042b2:	fa1f f088 	uxth.w	r0, r8
 80042b6:	2800      	cmp	r0, #0
 80042b8:	d1cf      	bne.n	800425a <__sfvwrite_r+0x2a>
 80042ba:	f013 0901 	ands.w	r9, r3, #1
 80042be:	d15b      	bne.n	8004378 <__sfvwrite_r+0x148>
 80042c0:	464f      	mov	r7, r9
 80042c2:	9602      	str	r6, [sp, #8]
 80042c4:	b31f      	cbz	r7, 800430e <__sfvwrite_r+0xde>
 80042c6:	059a      	lsls	r2, r3, #22
 80042c8:	f8d4 8008 	ldr.w	r8, [r4, #8]
 80042cc:	d52c      	bpl.n	8004328 <__sfvwrite_r+0xf8>
 80042ce:	4547      	cmp	r7, r8
 80042d0:	46c2      	mov	sl, r8
 80042d2:	f0c0 80a4 	bcc.w	800441e <__sfvwrite_r+0x1ee>
 80042d6:	f413 6f90 	tst.w	r3, #1152	; 0x480
 80042da:	f040 80b1 	bne.w	8004440 <__sfvwrite_r+0x210>
 80042de:	6820      	ldr	r0, [r4, #0]
 80042e0:	4652      	mov	r2, sl
 80042e2:	4649      	mov	r1, r9
 80042e4:	f000 fdde 	bl	8004ea4 <memmove>
 80042e8:	68a0      	ldr	r0, [r4, #8]
 80042ea:	6823      	ldr	r3, [r4, #0]
 80042ec:	ebc8 0000 	rsb	r0, r8, r0
 80042f0:	4453      	add	r3, sl
 80042f2:	60a0      	str	r0, [r4, #8]
 80042f4:	6023      	str	r3, [r4, #0]
 80042f6:	4638      	mov	r0, r7
 80042f8:	9a02      	ldr	r2, [sp, #8]
 80042fa:	6893      	ldr	r3, [r2, #8]
 80042fc:	1a1b      	subs	r3, r3, r0
 80042fe:	4481      	add	r9, r0
 8004300:	1a3f      	subs	r7, r7, r0
 8004302:	6093      	str	r3, [r2, #8]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d0c5      	beq.n	8004294 <__sfvwrite_r+0x64>
 8004308:	89a3      	ldrh	r3, [r4, #12]
 800430a:	2f00      	cmp	r7, #0
 800430c:	d1db      	bne.n	80042c6 <__sfvwrite_r+0x96>
 800430e:	f8d5 9000 	ldr.w	r9, [r5]
 8004312:	686f      	ldr	r7, [r5, #4]
 8004314:	3508      	adds	r5, #8
 8004316:	e7d5      	b.n	80042c4 <__sfvwrite_r+0x94>
 8004318:	f8d5 9000 	ldr.w	r9, [r5]
 800431c:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8004320:	3508      	adds	r5, #8
 8004322:	e79f      	b.n	8004264 <__sfvwrite_r+0x34>
 8004324:	2000      	movs	r0, #0
 8004326:	4770      	bx	lr
 8004328:	6820      	ldr	r0, [r4, #0]
 800432a:	6923      	ldr	r3, [r4, #16]
 800432c:	4298      	cmp	r0, r3
 800432e:	d803      	bhi.n	8004338 <__sfvwrite_r+0x108>
 8004330:	6961      	ldr	r1, [r4, #20]
 8004332:	428f      	cmp	r7, r1
 8004334:	f080 80b7 	bcs.w	80044a6 <__sfvwrite_r+0x276>
 8004338:	45b8      	cmp	r8, r7
 800433a:	bf28      	it	cs
 800433c:	46b8      	movcs	r8, r7
 800433e:	4642      	mov	r2, r8
 8004340:	4649      	mov	r1, r9
 8004342:	f000 fdaf 	bl	8004ea4 <memmove>
 8004346:	68a3      	ldr	r3, [r4, #8]
 8004348:	6822      	ldr	r2, [r4, #0]
 800434a:	ebc8 0303 	rsb	r3, r8, r3
 800434e:	4442      	add	r2, r8
 8004350:	60a3      	str	r3, [r4, #8]
 8004352:	6022      	str	r2, [r4, #0]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d149      	bne.n	80043ec <__sfvwrite_r+0x1bc>
 8004358:	4621      	mov	r1, r4
 800435a:	9801      	ldr	r0, [sp, #4]
 800435c:	f7ff fd02 	bl	8003d64 <_fflush_r>
 8004360:	2800      	cmp	r0, #0
 8004362:	d043      	beq.n	80043ec <__sfvwrite_r+0x1bc>
 8004364:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004368:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800436c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004370:	81a3      	strh	r3, [r4, #12]
 8004372:	b005      	add	sp, #20
 8004374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004378:	4680      	mov	r8, r0
 800437a:	9002      	str	r0, [sp, #8]
 800437c:	4682      	mov	sl, r0
 800437e:	4681      	mov	r9, r0
 8004380:	f1b9 0f00 	cmp.w	r9, #0
 8004384:	d02a      	beq.n	80043dc <__sfvwrite_r+0x1ac>
 8004386:	9b02      	ldr	r3, [sp, #8]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d04c      	beq.n	8004426 <__sfvwrite_r+0x1f6>
 800438c:	6820      	ldr	r0, [r4, #0]
 800438e:	6923      	ldr	r3, [r4, #16]
 8004390:	6962      	ldr	r2, [r4, #20]
 8004392:	45c8      	cmp	r8, r9
 8004394:	46c3      	mov	fp, r8
 8004396:	bf28      	it	cs
 8004398:	46cb      	movcs	fp, r9
 800439a:	4298      	cmp	r0, r3
 800439c:	465f      	mov	r7, fp
 800439e:	d904      	bls.n	80043aa <__sfvwrite_r+0x17a>
 80043a0:	68a3      	ldr	r3, [r4, #8]
 80043a2:	4413      	add	r3, r2
 80043a4:	459b      	cmp	fp, r3
 80043a6:	f300 8090 	bgt.w	80044ca <__sfvwrite_r+0x29a>
 80043aa:	4593      	cmp	fp, r2
 80043ac:	db20      	blt.n	80043f0 <__sfvwrite_r+0x1c0>
 80043ae:	4613      	mov	r3, r2
 80043b0:	6a67      	ldr	r7, [r4, #36]	; 0x24
 80043b2:	69e1      	ldr	r1, [r4, #28]
 80043b4:	9801      	ldr	r0, [sp, #4]
 80043b6:	4652      	mov	r2, sl
 80043b8:	47b8      	blx	r7
 80043ba:	1e07      	subs	r7, r0, #0
 80043bc:	ddd2      	ble.n	8004364 <__sfvwrite_r+0x134>
 80043be:	ebb8 0807 	subs.w	r8, r8, r7
 80043c2:	d023      	beq.n	800440c <__sfvwrite_r+0x1dc>
 80043c4:	68b3      	ldr	r3, [r6, #8]
 80043c6:	1bdb      	subs	r3, r3, r7
 80043c8:	44ba      	add	sl, r7
 80043ca:	ebc7 0909 	rsb	r9, r7, r9
 80043ce:	60b3      	str	r3, [r6, #8]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	f43f af5f 	beq.w	8004294 <__sfvwrite_r+0x64>
 80043d6:	f1b9 0f00 	cmp.w	r9, #0
 80043da:	d1d4      	bne.n	8004386 <__sfvwrite_r+0x156>
 80043dc:	2300      	movs	r3, #0
 80043de:	f8d5 a000 	ldr.w	sl, [r5]
 80043e2:	f8d5 9004 	ldr.w	r9, [r5, #4]
 80043e6:	9302      	str	r3, [sp, #8]
 80043e8:	3508      	adds	r5, #8
 80043ea:	e7c9      	b.n	8004380 <__sfvwrite_r+0x150>
 80043ec:	4640      	mov	r0, r8
 80043ee:	e783      	b.n	80042f8 <__sfvwrite_r+0xc8>
 80043f0:	465a      	mov	r2, fp
 80043f2:	4651      	mov	r1, sl
 80043f4:	f000 fd56 	bl	8004ea4 <memmove>
 80043f8:	68a2      	ldr	r2, [r4, #8]
 80043fa:	6823      	ldr	r3, [r4, #0]
 80043fc:	ebcb 0202 	rsb	r2, fp, r2
 8004400:	445b      	add	r3, fp
 8004402:	ebb8 0807 	subs.w	r8, r8, r7
 8004406:	60a2      	str	r2, [r4, #8]
 8004408:	6023      	str	r3, [r4, #0]
 800440a:	d1db      	bne.n	80043c4 <__sfvwrite_r+0x194>
 800440c:	4621      	mov	r1, r4
 800440e:	9801      	ldr	r0, [sp, #4]
 8004410:	f7ff fca8 	bl	8003d64 <_fflush_r>
 8004414:	2800      	cmp	r0, #0
 8004416:	d1a5      	bne.n	8004364 <__sfvwrite_r+0x134>
 8004418:	f8cd 8008 	str.w	r8, [sp, #8]
 800441c:	e7d2      	b.n	80043c4 <__sfvwrite_r+0x194>
 800441e:	6820      	ldr	r0, [r4, #0]
 8004420:	46b8      	mov	r8, r7
 8004422:	46ba      	mov	sl, r7
 8004424:	e75c      	b.n	80042e0 <__sfvwrite_r+0xb0>
 8004426:	464a      	mov	r2, r9
 8004428:	210a      	movs	r1, #10
 800442a:	4650      	mov	r0, sl
 800442c:	f000 fc50 	bl	8004cd0 <memchr>
 8004430:	2800      	cmp	r0, #0
 8004432:	d06f      	beq.n	8004514 <__sfvwrite_r+0x2e4>
 8004434:	3001      	adds	r0, #1
 8004436:	2301      	movs	r3, #1
 8004438:	ebca 0800 	rsb	r8, sl, r0
 800443c:	9302      	str	r3, [sp, #8]
 800443e:	e7a5      	b.n	800438c <__sfvwrite_r+0x15c>
 8004440:	6962      	ldr	r2, [r4, #20]
 8004442:	6820      	ldr	r0, [r4, #0]
 8004444:	6921      	ldr	r1, [r4, #16]
 8004446:	eb02 0842 	add.w	r8, r2, r2, lsl #1
 800444a:	ebc1 0a00 	rsb	sl, r1, r0
 800444e:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
 8004452:	f10a 0001 	add.w	r0, sl, #1
 8004456:	ea4f 0868 	mov.w	r8, r8, asr #1
 800445a:	4438      	add	r0, r7
 800445c:	4540      	cmp	r0, r8
 800445e:	4642      	mov	r2, r8
 8004460:	bf84      	itt	hi
 8004462:	4680      	movhi	r8, r0
 8004464:	4642      	movhi	r2, r8
 8004466:	055b      	lsls	r3, r3, #21
 8004468:	d542      	bpl.n	80044f0 <__sfvwrite_r+0x2c0>
 800446a:	4611      	mov	r1, r2
 800446c:	9801      	ldr	r0, [sp, #4]
 800446e:	f000 f975 	bl	800475c <_malloc_r>
 8004472:	4683      	mov	fp, r0
 8004474:	2800      	cmp	r0, #0
 8004476:	d055      	beq.n	8004524 <__sfvwrite_r+0x2f4>
 8004478:	4652      	mov	r2, sl
 800447a:	6921      	ldr	r1, [r4, #16]
 800447c:	f000 fc78 	bl	8004d70 <memcpy>
 8004480:	89a3      	ldrh	r3, [r4, #12]
 8004482:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004486:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800448a:	81a3      	strh	r3, [r4, #12]
 800448c:	ebca 0308 	rsb	r3, sl, r8
 8004490:	eb0b 000a 	add.w	r0, fp, sl
 8004494:	f8c4 8014 	str.w	r8, [r4, #20]
 8004498:	f8c4 b010 	str.w	fp, [r4, #16]
 800449c:	6020      	str	r0, [r4, #0]
 800449e:	60a3      	str	r3, [r4, #8]
 80044a0:	46b8      	mov	r8, r7
 80044a2:	46ba      	mov	sl, r7
 80044a4:	e71c      	b.n	80042e0 <__sfvwrite_r+0xb0>
 80044a6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80044aa:	42bb      	cmp	r3, r7
 80044ac:	bf28      	it	cs
 80044ae:	463b      	movcs	r3, r7
 80044b0:	464a      	mov	r2, r9
 80044b2:	fb93 f3f1 	sdiv	r3, r3, r1
 80044b6:	9801      	ldr	r0, [sp, #4]
 80044b8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80044ba:	fb01 f303 	mul.w	r3, r1, r3
 80044be:	69e1      	ldr	r1, [r4, #28]
 80044c0:	47b0      	blx	r6
 80044c2:	2800      	cmp	r0, #0
 80044c4:	f73f af18 	bgt.w	80042f8 <__sfvwrite_r+0xc8>
 80044c8:	e74c      	b.n	8004364 <__sfvwrite_r+0x134>
 80044ca:	461a      	mov	r2, r3
 80044cc:	4651      	mov	r1, sl
 80044ce:	9303      	str	r3, [sp, #12]
 80044d0:	f000 fce8 	bl	8004ea4 <memmove>
 80044d4:	6822      	ldr	r2, [r4, #0]
 80044d6:	9b03      	ldr	r3, [sp, #12]
 80044d8:	9801      	ldr	r0, [sp, #4]
 80044da:	441a      	add	r2, r3
 80044dc:	6022      	str	r2, [r4, #0]
 80044de:	4621      	mov	r1, r4
 80044e0:	f7ff fc40 	bl	8003d64 <_fflush_r>
 80044e4:	9b03      	ldr	r3, [sp, #12]
 80044e6:	2800      	cmp	r0, #0
 80044e8:	f47f af3c 	bne.w	8004364 <__sfvwrite_r+0x134>
 80044ec:	461f      	mov	r7, r3
 80044ee:	e766      	b.n	80043be <__sfvwrite_r+0x18e>
 80044f0:	9801      	ldr	r0, [sp, #4]
 80044f2:	f001 fa17 	bl	8005924 <_realloc_r>
 80044f6:	4683      	mov	fp, r0
 80044f8:	2800      	cmp	r0, #0
 80044fa:	d1c7      	bne.n	800448c <__sfvwrite_r+0x25c>
 80044fc:	9d01      	ldr	r5, [sp, #4]
 80044fe:	6921      	ldr	r1, [r4, #16]
 8004500:	4628      	mov	r0, r5
 8004502:	f7ff fdad 	bl	8004060 <_free_r>
 8004506:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800450a:	220c      	movs	r2, #12
 800450c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004510:	602a      	str	r2, [r5, #0]
 8004512:	e729      	b.n	8004368 <__sfvwrite_r+0x138>
 8004514:	2301      	movs	r3, #1
 8004516:	f109 0801 	add.w	r8, r9, #1
 800451a:	9302      	str	r3, [sp, #8]
 800451c:	e736      	b.n	800438c <__sfvwrite_r+0x15c>
 800451e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004522:	e6b8      	b.n	8004296 <__sfvwrite_r+0x66>
 8004524:	9a01      	ldr	r2, [sp, #4]
 8004526:	230c      	movs	r3, #12
 8004528:	6013      	str	r3, [r2, #0]
 800452a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800452e:	e71b      	b.n	8004368 <__sfvwrite_r+0x138>
 8004530:	7ffffc00 	.word	0x7ffffc00

08004534 <_fwalk>:
 8004534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004538:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
 800453c:	d01b      	beq.n	8004576 <_fwalk+0x42>
 800453e:	4688      	mov	r8, r1
 8004540:	2600      	movs	r6, #0
 8004542:	687d      	ldr	r5, [r7, #4]
 8004544:	68bc      	ldr	r4, [r7, #8]
 8004546:	3d01      	subs	r5, #1
 8004548:	d40f      	bmi.n	800456a <_fwalk+0x36>
 800454a:	89a3      	ldrh	r3, [r4, #12]
 800454c:	2b01      	cmp	r3, #1
 800454e:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8004552:	d906      	bls.n	8004562 <_fwalk+0x2e>
 8004554:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8004558:	3301      	adds	r3, #1
 800455a:	4620      	mov	r0, r4
 800455c:	d001      	beq.n	8004562 <_fwalk+0x2e>
 800455e:	47c0      	blx	r8
 8004560:	4306      	orrs	r6, r0
 8004562:	1c6b      	adds	r3, r5, #1
 8004564:	f104 0468 	add.w	r4, r4, #104	; 0x68
 8004568:	d1ef      	bne.n	800454a <_fwalk+0x16>
 800456a:	683f      	ldr	r7, [r7, #0]
 800456c:	2f00      	cmp	r7, #0
 800456e:	d1e8      	bne.n	8004542 <_fwalk+0xe>
 8004570:	4630      	mov	r0, r6
 8004572:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004576:	463e      	mov	r6, r7
 8004578:	4630      	mov	r0, r6
 800457a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800457e:	bf00      	nop

08004580 <_fwalk_reent>:
 8004580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004584:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
 8004588:	d01f      	beq.n	80045ca <_fwalk_reent+0x4a>
 800458a:	4688      	mov	r8, r1
 800458c:	4606      	mov	r6, r0
 800458e:	f04f 0900 	mov.w	r9, #0
 8004592:	687d      	ldr	r5, [r7, #4]
 8004594:	68bc      	ldr	r4, [r7, #8]
 8004596:	3d01      	subs	r5, #1
 8004598:	d411      	bmi.n	80045be <_fwalk_reent+0x3e>
 800459a:	89a3      	ldrh	r3, [r4, #12]
 800459c:	2b01      	cmp	r3, #1
 800459e:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 80045a2:	d908      	bls.n	80045b6 <_fwalk_reent+0x36>
 80045a4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 80045a8:	3301      	adds	r3, #1
 80045aa:	4621      	mov	r1, r4
 80045ac:	4630      	mov	r0, r6
 80045ae:	d002      	beq.n	80045b6 <_fwalk_reent+0x36>
 80045b0:	47c0      	blx	r8
 80045b2:	ea49 0900 	orr.w	r9, r9, r0
 80045b6:	1c6b      	adds	r3, r5, #1
 80045b8:	f104 0468 	add.w	r4, r4, #104	; 0x68
 80045bc:	d1ed      	bne.n	800459a <_fwalk_reent+0x1a>
 80045be:	683f      	ldr	r7, [r7, #0]
 80045c0:	2f00      	cmp	r7, #0
 80045c2:	d1e6      	bne.n	8004592 <_fwalk_reent+0x12>
 80045c4:	4648      	mov	r0, r9
 80045c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80045ca:	46b9      	mov	r9, r7
 80045cc:	4648      	mov	r0, r9
 80045ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80045d2:	bf00      	nop

080045d4 <_setlocale_r>:
 80045d4:	b1b2      	cbz	r2, 8004604 <_setlocale_r+0x30>
 80045d6:	b510      	push	{r4, lr}
 80045d8:	490b      	ldr	r1, [pc, #44]	; (8004608 <_setlocale_r+0x34>)
 80045da:	4610      	mov	r0, r2
 80045dc:	4614      	mov	r4, r2
 80045de:	f001 fbe3 	bl	8005da8 <strcmp>
 80045e2:	b908      	cbnz	r0, 80045e8 <_setlocale_r+0x14>
 80045e4:	4809      	ldr	r0, [pc, #36]	; (800460c <_setlocale_r+0x38>)
 80045e6:	bd10      	pop	{r4, pc}
 80045e8:	4908      	ldr	r1, [pc, #32]	; (800460c <_setlocale_r+0x38>)
 80045ea:	4620      	mov	r0, r4
 80045ec:	f001 fbdc 	bl	8005da8 <strcmp>
 80045f0:	2800      	cmp	r0, #0
 80045f2:	d0f7      	beq.n	80045e4 <_setlocale_r+0x10>
 80045f4:	4620      	mov	r0, r4
 80045f6:	4906      	ldr	r1, [pc, #24]	; (8004610 <_setlocale_r+0x3c>)
 80045f8:	f001 fbd6 	bl	8005da8 <strcmp>
 80045fc:	2800      	cmp	r0, #0
 80045fe:	d0f1      	beq.n	80045e4 <_setlocale_r+0x10>
 8004600:	2000      	movs	r0, #0
 8004602:	bd10      	pop	{r4, pc}
 8004604:	4801      	ldr	r0, [pc, #4]	; (800460c <_setlocale_r+0x38>)
 8004606:	4770      	bx	lr
 8004608:	0801c3ec 	.word	0x0801c3ec
 800460c:	0801c390 	.word	0x0801c390
 8004610:	0801c3b8 	.word	0x0801c3b8

08004614 <__locale_charset>:
 8004614:	4800      	ldr	r0, [pc, #0]	; (8004618 <__locale_charset+0x4>)
 8004616:	4770      	bx	lr
 8004618:	20000438 	.word	0x20000438

0800461c <__locale_mb_cur_max>:
 800461c:	4b01      	ldr	r3, [pc, #4]	; (8004624 <__locale_mb_cur_max+0x8>)
 800461e:	6a18      	ldr	r0, [r3, #32]
 8004620:	4770      	bx	lr
 8004622:	bf00      	nop
 8004624:	20000438 	.word	0x20000438

08004628 <__locale_msgcharset>:
 8004628:	4800      	ldr	r0, [pc, #0]	; (800462c <__locale_msgcharset+0x4>)
 800462a:	4770      	bx	lr
 800462c:	2000045c 	.word	0x2000045c

08004630 <__locale_cjk_lang>:
 8004630:	2000      	movs	r0, #0
 8004632:	4770      	bx	lr

08004634 <_localeconv_r>:
 8004634:	4800      	ldr	r0, [pc, #0]	; (8004638 <_localeconv_r+0x4>)
 8004636:	4770      	bx	lr
 8004638:	2000047c 	.word	0x2000047c

0800463c <setlocale>:
 800463c:	4b02      	ldr	r3, [pc, #8]	; (8004648 <setlocale+0xc>)
 800463e:	460a      	mov	r2, r1
 8004640:	4601      	mov	r1, r0
 8004642:	6818      	ldr	r0, [r3, #0]
 8004644:	f7ff bfc6 	b.w	80045d4 <_setlocale_r>
 8004648:	20000008 	.word	0x20000008

0800464c <localeconv>:
 800464c:	4800      	ldr	r0, [pc, #0]	; (8004650 <localeconv+0x4>)
 800464e:	4770      	bx	lr
 8004650:	2000047c 	.word	0x2000047c

08004654 <__swhatbuf_r>:
 8004654:	b570      	push	{r4, r5, r6, lr}
 8004656:	460d      	mov	r5, r1
 8004658:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800465c:	2900      	cmp	r1, #0
 800465e:	b090      	sub	sp, #64	; 0x40
 8004660:	4614      	mov	r4, r2
 8004662:	461e      	mov	r6, r3
 8004664:	db14      	blt.n	8004690 <__swhatbuf_r+0x3c>
 8004666:	aa01      	add	r2, sp, #4
 8004668:	f004 f917 	bl	800889a <_fstat_r>
 800466c:	2800      	cmp	r0, #0
 800466e:	db0f      	blt.n	8004690 <__swhatbuf_r+0x3c>
 8004670:	9a02      	ldr	r2, [sp, #8]
 8004672:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004676:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
 800467a:	fab2 f282 	clz	r2, r2
 800467e:	0952      	lsrs	r2, r2, #5
 8004680:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004684:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004688:	6032      	str	r2, [r6, #0]
 800468a:	6023      	str	r3, [r4, #0]
 800468c:	b010      	add	sp, #64	; 0x40
 800468e:	bd70      	pop	{r4, r5, r6, pc}
 8004690:	89a8      	ldrh	r0, [r5, #12]
 8004692:	f000 0080 	and.w	r0, r0, #128	; 0x80
 8004696:	b282      	uxth	r2, r0
 8004698:	2000      	movs	r0, #0
 800469a:	6030      	str	r0, [r6, #0]
 800469c:	b11a      	cbz	r2, 80046a6 <__swhatbuf_r+0x52>
 800469e:	2340      	movs	r3, #64	; 0x40
 80046a0:	6023      	str	r3, [r4, #0]
 80046a2:	b010      	add	sp, #64	; 0x40
 80046a4:	bd70      	pop	{r4, r5, r6, pc}
 80046a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046aa:	4610      	mov	r0, r2
 80046ac:	6023      	str	r3, [r4, #0]
 80046ae:	b010      	add	sp, #64	; 0x40
 80046b0:	bd70      	pop	{r4, r5, r6, pc}
 80046b2:	bf00      	nop

080046b4 <__smakebuf_r>:
 80046b4:	898a      	ldrh	r2, [r1, #12]
 80046b6:	0792      	lsls	r2, r2, #30
 80046b8:	460b      	mov	r3, r1
 80046ba:	d506      	bpl.n	80046ca <__smakebuf_r+0x16>
 80046bc:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80046c0:	2101      	movs	r1, #1
 80046c2:	601a      	str	r2, [r3, #0]
 80046c4:	611a      	str	r2, [r3, #16]
 80046c6:	6159      	str	r1, [r3, #20]
 80046c8:	4770      	bx	lr
 80046ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046cc:	b083      	sub	sp, #12
 80046ce:	ab01      	add	r3, sp, #4
 80046d0:	466a      	mov	r2, sp
 80046d2:	460c      	mov	r4, r1
 80046d4:	4605      	mov	r5, r0
 80046d6:	f7ff ffbd 	bl	8004654 <__swhatbuf_r>
 80046da:	9900      	ldr	r1, [sp, #0]
 80046dc:	4606      	mov	r6, r0
 80046de:	4628      	mov	r0, r5
 80046e0:	f000 f83c 	bl	800475c <_malloc_r>
 80046e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046e8:	b1d0      	cbz	r0, 8004720 <__smakebuf_r+0x6c>
 80046ea:	9a01      	ldr	r2, [sp, #4]
 80046ec:	4f12      	ldr	r7, [pc, #72]	; (8004738 <__smakebuf_r+0x84>)
 80046ee:	9900      	ldr	r1, [sp, #0]
 80046f0:	63ef      	str	r7, [r5, #60]	; 0x3c
 80046f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046f6:	81a3      	strh	r3, [r4, #12]
 80046f8:	6020      	str	r0, [r4, #0]
 80046fa:	6120      	str	r0, [r4, #16]
 80046fc:	6161      	str	r1, [r4, #20]
 80046fe:	b91a      	cbnz	r2, 8004708 <__smakebuf_r+0x54>
 8004700:	4333      	orrs	r3, r6
 8004702:	81a3      	strh	r3, [r4, #12]
 8004704:	b003      	add	sp, #12
 8004706:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004708:	4628      	mov	r0, r5
 800470a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800470e:	f004 f8c9 	bl	80088a4 <_isatty_r>
 8004712:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004716:	2800      	cmp	r0, #0
 8004718:	d0f2      	beq.n	8004700 <__smakebuf_r+0x4c>
 800471a:	f043 0301 	orr.w	r3, r3, #1
 800471e:	e7ef      	b.n	8004700 <__smakebuf_r+0x4c>
 8004720:	059a      	lsls	r2, r3, #22
 8004722:	d4ef      	bmi.n	8004704 <__smakebuf_r+0x50>
 8004724:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004728:	f043 0302 	orr.w	r3, r3, #2
 800472c:	2101      	movs	r1, #1
 800472e:	81a3      	strh	r3, [r4, #12]
 8004730:	6022      	str	r2, [r4, #0]
 8004732:	6122      	str	r2, [r4, #16]
 8004734:	6161      	str	r1, [r4, #20]
 8004736:	e7e5      	b.n	8004704 <__smakebuf_r+0x50>
 8004738:	08003db9 	.word	0x08003db9

0800473c <malloc>:
 800473c:	4b02      	ldr	r3, [pc, #8]	; (8004748 <malloc+0xc>)
 800473e:	4601      	mov	r1, r0
 8004740:	6818      	ldr	r0, [r3, #0]
 8004742:	f000 b80b 	b.w	800475c <_malloc_r>
 8004746:	bf00      	nop
 8004748:	20000008 	.word	0x20000008

0800474c <free>:
 800474c:	4b02      	ldr	r3, [pc, #8]	; (8004758 <free+0xc>)
 800474e:	4601      	mov	r1, r0
 8004750:	6818      	ldr	r0, [r3, #0]
 8004752:	f7ff bc85 	b.w	8004060 <_free_r>
 8004756:	bf00      	nop
 8004758:	20000008 	.word	0x20000008

0800475c <_malloc_r>:
 800475c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004760:	f101 050b 	add.w	r5, r1, #11
 8004764:	2d16      	cmp	r5, #22
 8004766:	b083      	sub	sp, #12
 8004768:	4606      	mov	r6, r0
 800476a:	f240 809f 	bls.w	80048ac <_malloc_r+0x150>
 800476e:	f035 0507 	bics.w	r5, r5, #7
 8004772:	f100 80bf 	bmi.w	80048f4 <_malloc_r+0x198>
 8004776:	42a9      	cmp	r1, r5
 8004778:	f200 80bc 	bhi.w	80048f4 <_malloc_r+0x198>
 800477c:	f000 fbf6 	bl	8004f6c <__malloc_lock>
 8004780:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 8004784:	f0c0 8299 	bcc.w	8004cba <_malloc_r+0x55e>
 8004788:	0a6b      	lsrs	r3, r5, #9
 800478a:	f000 80ba 	beq.w	8004902 <_malloc_r+0x1a6>
 800478e:	2b04      	cmp	r3, #4
 8004790:	f200 8187 	bhi.w	8004aa2 <_malloc_r+0x346>
 8004794:	09a8      	lsrs	r0, r5, #6
 8004796:	f100 0e39 	add.w	lr, r0, #57	; 0x39
 800479a:	ea4f 034e 	mov.w	r3, lr, lsl #1
 800479e:	3038      	adds	r0, #56	; 0x38
 80047a0:	4fc6      	ldr	r7, [pc, #792]	; (8004abc <_malloc_r+0x360>)
 80047a2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80047a6:	f1a3 0108 	sub.w	r1, r3, #8
 80047aa:	685c      	ldr	r4, [r3, #4]
 80047ac:	42a1      	cmp	r1, r4
 80047ae:	d107      	bne.n	80047c0 <_malloc_r+0x64>
 80047b0:	e0ac      	b.n	800490c <_malloc_r+0x1b0>
 80047b2:	2a00      	cmp	r2, #0
 80047b4:	f280 80ac 	bge.w	8004910 <_malloc_r+0x1b4>
 80047b8:	68e4      	ldr	r4, [r4, #12]
 80047ba:	42a1      	cmp	r1, r4
 80047bc:	f000 80a6 	beq.w	800490c <_malloc_r+0x1b0>
 80047c0:	6863      	ldr	r3, [r4, #4]
 80047c2:	f023 0303 	bic.w	r3, r3, #3
 80047c6:	1b5a      	subs	r2, r3, r5
 80047c8:	2a0f      	cmp	r2, #15
 80047ca:	ddf2      	ble.n	80047b2 <_malloc_r+0x56>
 80047cc:	49bb      	ldr	r1, [pc, #748]	; (8004abc <_malloc_r+0x360>)
 80047ce:	693c      	ldr	r4, [r7, #16]
 80047d0:	f101 0e08 	add.w	lr, r1, #8
 80047d4:	4574      	cmp	r4, lr
 80047d6:	f000 81af 	beq.w	8004b38 <_malloc_r+0x3dc>
 80047da:	6863      	ldr	r3, [r4, #4]
 80047dc:	f023 0303 	bic.w	r3, r3, #3
 80047e0:	1b5a      	subs	r2, r3, r5
 80047e2:	2a0f      	cmp	r2, #15
 80047e4:	f300 8195 	bgt.w	8004b12 <_malloc_r+0x3b6>
 80047e8:	2a00      	cmp	r2, #0
 80047ea:	f8c1 e014 	str.w	lr, [r1, #20]
 80047ee:	f8c1 e010 	str.w	lr, [r1, #16]
 80047f2:	f280 809e 	bge.w	8004932 <_malloc_r+0x1d6>
 80047f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047fa:	f080 8163 	bcs.w	8004ac4 <_malloc_r+0x368>
 80047fe:	08db      	lsrs	r3, r3, #3
 8004800:	f103 0c01 	add.w	ip, r3, #1
 8004804:	2201      	movs	r2, #1
 8004806:	109b      	asrs	r3, r3, #2
 8004808:	fa02 f303 	lsl.w	r3, r2, r3
 800480c:	684a      	ldr	r2, [r1, #4]
 800480e:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
 8004812:	f8c4 8008 	str.w	r8, [r4, #8]
 8004816:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
 800481a:	431a      	orrs	r2, r3
 800481c:	f1a9 0308 	sub.w	r3, r9, #8
 8004820:	60e3      	str	r3, [r4, #12]
 8004822:	604a      	str	r2, [r1, #4]
 8004824:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
 8004828:	f8c8 400c 	str.w	r4, [r8, #12]
 800482c:	1083      	asrs	r3, r0, #2
 800482e:	2401      	movs	r4, #1
 8004830:	409c      	lsls	r4, r3
 8004832:	4294      	cmp	r4, r2
 8004834:	f200 808a 	bhi.w	800494c <_malloc_r+0x1f0>
 8004838:	4214      	tst	r4, r2
 800483a:	d106      	bne.n	800484a <_malloc_r+0xee>
 800483c:	f020 0003 	bic.w	r0, r0, #3
 8004840:	0064      	lsls	r4, r4, #1
 8004842:	4214      	tst	r4, r2
 8004844:	f100 0004 	add.w	r0, r0, #4
 8004848:	d0fa      	beq.n	8004840 <_malloc_r+0xe4>
 800484a:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
 800484e:	46cc      	mov	ip, r9
 8004850:	4680      	mov	r8, r0
 8004852:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8004856:	458c      	cmp	ip, r1
 8004858:	d107      	bne.n	800486a <_malloc_r+0x10e>
 800485a:	e16f      	b.n	8004b3c <_malloc_r+0x3e0>
 800485c:	2a00      	cmp	r2, #0
 800485e:	f280 817d 	bge.w	8004b5c <_malloc_r+0x400>
 8004862:	68c9      	ldr	r1, [r1, #12]
 8004864:	458c      	cmp	ip, r1
 8004866:	f000 8169 	beq.w	8004b3c <_malloc_r+0x3e0>
 800486a:	684b      	ldr	r3, [r1, #4]
 800486c:	f023 0303 	bic.w	r3, r3, #3
 8004870:	1b5a      	subs	r2, r3, r5
 8004872:	2a0f      	cmp	r2, #15
 8004874:	ddf2      	ble.n	800485c <_malloc_r+0x100>
 8004876:	460c      	mov	r4, r1
 8004878:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 800487c:	f854 8f08 	ldr.w	r8, [r4, #8]!
 8004880:	194b      	adds	r3, r1, r5
 8004882:	f045 0501 	orr.w	r5, r5, #1
 8004886:	604d      	str	r5, [r1, #4]
 8004888:	f042 0101 	orr.w	r1, r2, #1
 800488c:	f8c8 c00c 	str.w	ip, [r8, #12]
 8004890:	4630      	mov	r0, r6
 8004892:	f8cc 8008 	str.w	r8, [ip, #8]
 8004896:	617b      	str	r3, [r7, #20]
 8004898:	613b      	str	r3, [r7, #16]
 800489a:	f8c3 e00c 	str.w	lr, [r3, #12]
 800489e:	f8c3 e008 	str.w	lr, [r3, #8]
 80048a2:	6059      	str	r1, [r3, #4]
 80048a4:	509a      	str	r2, [r3, r2]
 80048a6:	f000 fb63 	bl	8004f70 <__malloc_unlock>
 80048aa:	e01f      	b.n	80048ec <_malloc_r+0x190>
 80048ac:	2910      	cmp	r1, #16
 80048ae:	d821      	bhi.n	80048f4 <_malloc_r+0x198>
 80048b0:	f000 fb5c 	bl	8004f6c <__malloc_lock>
 80048b4:	2510      	movs	r5, #16
 80048b6:	2306      	movs	r3, #6
 80048b8:	2002      	movs	r0, #2
 80048ba:	4f80      	ldr	r7, [pc, #512]	; (8004abc <_malloc_r+0x360>)
 80048bc:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80048c0:	f1a3 0208 	sub.w	r2, r3, #8
 80048c4:	685c      	ldr	r4, [r3, #4]
 80048c6:	4294      	cmp	r4, r2
 80048c8:	f000 8141 	beq.w	8004b4e <_malloc_r+0x3f2>
 80048cc:	6863      	ldr	r3, [r4, #4]
 80048ce:	68e1      	ldr	r1, [r4, #12]
 80048d0:	68a5      	ldr	r5, [r4, #8]
 80048d2:	f023 0303 	bic.w	r3, r3, #3
 80048d6:	4423      	add	r3, r4
 80048d8:	4630      	mov	r0, r6
 80048da:	685a      	ldr	r2, [r3, #4]
 80048dc:	60e9      	str	r1, [r5, #12]
 80048de:	f042 0201 	orr.w	r2, r2, #1
 80048e2:	608d      	str	r5, [r1, #8]
 80048e4:	605a      	str	r2, [r3, #4]
 80048e6:	f000 fb43 	bl	8004f70 <__malloc_unlock>
 80048ea:	3408      	adds	r4, #8
 80048ec:	4620      	mov	r0, r4
 80048ee:	b003      	add	sp, #12
 80048f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048f4:	2400      	movs	r4, #0
 80048f6:	230c      	movs	r3, #12
 80048f8:	4620      	mov	r0, r4
 80048fa:	6033      	str	r3, [r6, #0]
 80048fc:	b003      	add	sp, #12
 80048fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004902:	2380      	movs	r3, #128	; 0x80
 8004904:	f04f 0e40 	mov.w	lr, #64	; 0x40
 8004908:	203f      	movs	r0, #63	; 0x3f
 800490a:	e749      	b.n	80047a0 <_malloc_r+0x44>
 800490c:	4670      	mov	r0, lr
 800490e:	e75d      	b.n	80047cc <_malloc_r+0x70>
 8004910:	4423      	add	r3, r4
 8004912:	68e1      	ldr	r1, [r4, #12]
 8004914:	685a      	ldr	r2, [r3, #4]
 8004916:	68a5      	ldr	r5, [r4, #8]
 8004918:	f042 0201 	orr.w	r2, r2, #1
 800491c:	60e9      	str	r1, [r5, #12]
 800491e:	4630      	mov	r0, r6
 8004920:	608d      	str	r5, [r1, #8]
 8004922:	605a      	str	r2, [r3, #4]
 8004924:	f000 fb24 	bl	8004f70 <__malloc_unlock>
 8004928:	3408      	adds	r4, #8
 800492a:	4620      	mov	r0, r4
 800492c:	b003      	add	sp, #12
 800492e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004932:	4423      	add	r3, r4
 8004934:	4630      	mov	r0, r6
 8004936:	685a      	ldr	r2, [r3, #4]
 8004938:	f042 0201 	orr.w	r2, r2, #1
 800493c:	605a      	str	r2, [r3, #4]
 800493e:	f000 fb17 	bl	8004f70 <__malloc_unlock>
 8004942:	3408      	adds	r4, #8
 8004944:	4620      	mov	r0, r4
 8004946:	b003      	add	sp, #12
 8004948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800494c:	68bc      	ldr	r4, [r7, #8]
 800494e:	6863      	ldr	r3, [r4, #4]
 8004950:	f023 0803 	bic.w	r8, r3, #3
 8004954:	45a8      	cmp	r8, r5
 8004956:	d304      	bcc.n	8004962 <_malloc_r+0x206>
 8004958:	ebc5 0308 	rsb	r3, r5, r8
 800495c:	2b0f      	cmp	r3, #15
 800495e:	f300 8090 	bgt.w	8004a82 <_malloc_r+0x326>
 8004962:	f8df 915c 	ldr.w	r9, [pc, #348]	; 8004ac0 <_malloc_r+0x364>
 8004966:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 800496a:	f8d9 2000 	ldr.w	r2, [r9]
 800496e:	3301      	adds	r3, #1
 8004970:	eb04 0a08 	add.w	sl, r4, r8
 8004974:	442a      	add	r2, r5
 8004976:	f000 815c 	beq.w	8004c32 <_malloc_r+0x4d6>
 800497a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800497e:	320f      	adds	r2, #15
 8004980:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8004984:	f022 020f 	bic.w	r2, r2, #15
 8004988:	4611      	mov	r1, r2
 800498a:	4630      	mov	r0, r6
 800498c:	9201      	str	r2, [sp, #4]
 800498e:	f003 ff67 	bl	8008860 <_sbrk_r>
 8004992:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8004996:	4683      	mov	fp, r0
 8004998:	9a01      	ldr	r2, [sp, #4]
 800499a:	f000 8154 	beq.w	8004c46 <_malloc_r+0x4ea>
 800499e:	4582      	cmp	sl, r0
 80049a0:	f200 80f8 	bhi.w	8004b94 <_malloc_r+0x438>
 80049a4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80049a8:	45da      	cmp	sl, fp
 80049aa:	4411      	add	r1, r2
 80049ac:	f8c9 1004 	str.w	r1, [r9, #4]
 80049b0:	f000 814e 	beq.w	8004c50 <_malloc_r+0x4f4>
 80049b4:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 80049b8:	4840      	ldr	r0, [pc, #256]	; (8004abc <_malloc_r+0x360>)
 80049ba:	3301      	adds	r3, #1
 80049bc:	bf1b      	ittet	ne
 80049be:	ebca 0a0b 	rsbne	sl, sl, fp
 80049c2:	4451      	addne	r1, sl
 80049c4:	f8c0 b408 	streq.w	fp, [r0, #1032]	; 0x408
 80049c8:	f8c9 1004 	strne.w	r1, [r9, #4]
 80049cc:	f01b 0107 	ands.w	r1, fp, #7
 80049d0:	f000 8112 	beq.w	8004bf8 <_malloc_r+0x49c>
 80049d4:	f1c1 0308 	rsb	r3, r1, #8
 80049d8:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
 80049dc:	449b      	add	fp, r3
 80049de:	3108      	adds	r1, #8
 80049e0:	eb0b 0302 	add.w	r3, fp, r2
 80049e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049e8:	ebc3 0a01 	rsb	sl, r3, r1
 80049ec:	4651      	mov	r1, sl
 80049ee:	4630      	mov	r0, r6
 80049f0:	f003 ff36 	bl	8008860 <_sbrk_r>
 80049f4:	1c43      	adds	r3, r0, #1
 80049f6:	f000 813c 	beq.w	8004c72 <_malloc_r+0x516>
 80049fa:	ebcb 0300 	rsb	r3, fp, r0
 80049fe:	4453      	add	r3, sl
 8004a00:	f043 0301 	orr.w	r3, r3, #1
 8004a04:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8004a08:	f8c7 b008 	str.w	fp, [r7, #8]
 8004a0c:	4451      	add	r1, sl
 8004a0e:	42bc      	cmp	r4, r7
 8004a10:	f8cb 3004 	str.w	r3, [fp, #4]
 8004a14:	f8c9 1004 	str.w	r1, [r9, #4]
 8004a18:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 8004ac0 <_malloc_r+0x364>
 8004a1c:	d016      	beq.n	8004a4c <_malloc_r+0x2f0>
 8004a1e:	f1b8 0f0f 	cmp.w	r8, #15
 8004a22:	f240 80f7 	bls.w	8004c14 <_malloc_r+0x4b8>
 8004a26:	6862      	ldr	r2, [r4, #4]
 8004a28:	f1a8 030c 	sub.w	r3, r8, #12
 8004a2c:	f023 0307 	bic.w	r3, r3, #7
 8004a30:	18e0      	adds	r0, r4, r3
 8004a32:	f002 0201 	and.w	r2, r2, #1
 8004a36:	f04f 0e05 	mov.w	lr, #5
 8004a3a:	431a      	orrs	r2, r3
 8004a3c:	2b0f      	cmp	r3, #15
 8004a3e:	6062      	str	r2, [r4, #4]
 8004a40:	f8c0 e004 	str.w	lr, [r0, #4]
 8004a44:	f8c0 e008 	str.w	lr, [r0, #8]
 8004a48:	f200 8117 	bhi.w	8004c7a <_malloc_r+0x51e>
 8004a4c:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
 8004a50:	4a1b      	ldr	r2, [pc, #108]	; (8004ac0 <_malloc_r+0x364>)
 8004a52:	68bc      	ldr	r4, [r7, #8]
 8004a54:	4299      	cmp	r1, r3
 8004a56:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
 8004a5a:	bf88      	it	hi
 8004a5c:	62d1      	strhi	r1, [r2, #44]	; 0x2c
 8004a5e:	4a18      	ldr	r2, [pc, #96]	; (8004ac0 <_malloc_r+0x364>)
 8004a60:	4299      	cmp	r1, r3
 8004a62:	bf88      	it	hi
 8004a64:	6311      	strhi	r1, [r2, #48]	; 0x30
 8004a66:	6862      	ldr	r2, [r4, #4]
 8004a68:	f022 0203 	bic.w	r2, r2, #3
 8004a6c:	4295      	cmp	r5, r2
 8004a6e:	eba2 0305 	sub.w	r3, r2, r5
 8004a72:	d801      	bhi.n	8004a78 <_malloc_r+0x31c>
 8004a74:	2b0f      	cmp	r3, #15
 8004a76:	dc04      	bgt.n	8004a82 <_malloc_r+0x326>
 8004a78:	4630      	mov	r0, r6
 8004a7a:	f000 fa79 	bl	8004f70 <__malloc_unlock>
 8004a7e:	2400      	movs	r4, #0
 8004a80:	e734      	b.n	80048ec <_malloc_r+0x190>
 8004a82:	1962      	adds	r2, r4, r5
 8004a84:	f043 0301 	orr.w	r3, r3, #1
 8004a88:	f045 0501 	orr.w	r5, r5, #1
 8004a8c:	6065      	str	r5, [r4, #4]
 8004a8e:	4630      	mov	r0, r6
 8004a90:	60ba      	str	r2, [r7, #8]
 8004a92:	6053      	str	r3, [r2, #4]
 8004a94:	f000 fa6c 	bl	8004f70 <__malloc_unlock>
 8004a98:	3408      	adds	r4, #8
 8004a9a:	4620      	mov	r0, r4
 8004a9c:	b003      	add	sp, #12
 8004a9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004aa2:	2b14      	cmp	r3, #20
 8004aa4:	d969      	bls.n	8004b7a <_malloc_r+0x41e>
 8004aa6:	2b54      	cmp	r3, #84	; 0x54
 8004aa8:	f200 809c 	bhi.w	8004be4 <_malloc_r+0x488>
 8004aac:	0b28      	lsrs	r0, r5, #12
 8004aae:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
 8004ab2:	ea4f 034e 	mov.w	r3, lr, lsl #1
 8004ab6:	306e      	adds	r0, #110	; 0x6e
 8004ab8:	e672      	b.n	80047a0 <_malloc_r+0x44>
 8004aba:	bf00      	nop
 8004abc:	200004b4 	.word	0x200004b4
 8004ac0:	20000ae0 	.word	0x20000ae0
 8004ac4:	0a5a      	lsrs	r2, r3, #9
 8004ac6:	2a04      	cmp	r2, #4
 8004ac8:	d95e      	bls.n	8004b88 <_malloc_r+0x42c>
 8004aca:	2a14      	cmp	r2, #20
 8004acc:	f200 80b3 	bhi.w	8004c36 <_malloc_r+0x4da>
 8004ad0:	f102 015c 	add.w	r1, r2, #92	; 0x5c
 8004ad4:	0049      	lsls	r1, r1, #1
 8004ad6:	325b      	adds	r2, #91	; 0x5b
 8004ad8:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
 8004adc:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8004ae0:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 8004cc4 <_malloc_r+0x568>
 8004ae4:	f1ac 0c08 	sub.w	ip, ip, #8
 8004ae8:	458c      	cmp	ip, r1
 8004aea:	f000 8088 	beq.w	8004bfe <_malloc_r+0x4a2>
 8004aee:	684a      	ldr	r2, [r1, #4]
 8004af0:	f022 0203 	bic.w	r2, r2, #3
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d202      	bcs.n	8004afe <_malloc_r+0x3a2>
 8004af8:	6889      	ldr	r1, [r1, #8]
 8004afa:	458c      	cmp	ip, r1
 8004afc:	d1f7      	bne.n	8004aee <_malloc_r+0x392>
 8004afe:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	f8c4 c00c 	str.w	ip, [r4, #12]
 8004b08:	60a1      	str	r1, [r4, #8]
 8004b0a:	f8cc 4008 	str.w	r4, [ip, #8]
 8004b0e:	60cc      	str	r4, [r1, #12]
 8004b10:	e68c      	b.n	800482c <_malloc_r+0xd0>
 8004b12:	1963      	adds	r3, r4, r5
 8004b14:	f042 0701 	orr.w	r7, r2, #1
 8004b18:	f045 0501 	orr.w	r5, r5, #1
 8004b1c:	6065      	str	r5, [r4, #4]
 8004b1e:	4630      	mov	r0, r6
 8004b20:	614b      	str	r3, [r1, #20]
 8004b22:	610b      	str	r3, [r1, #16]
 8004b24:	f8c3 e00c 	str.w	lr, [r3, #12]
 8004b28:	f8c3 e008 	str.w	lr, [r3, #8]
 8004b2c:	605f      	str	r7, [r3, #4]
 8004b2e:	509a      	str	r2, [r3, r2]
 8004b30:	3408      	adds	r4, #8
 8004b32:	f000 fa1d 	bl	8004f70 <__malloc_unlock>
 8004b36:	e6d9      	b.n	80048ec <_malloc_r+0x190>
 8004b38:	684a      	ldr	r2, [r1, #4]
 8004b3a:	e677      	b.n	800482c <_malloc_r+0xd0>
 8004b3c:	f108 0801 	add.w	r8, r8, #1
 8004b40:	f018 0f03 	tst.w	r8, #3
 8004b44:	f10c 0c08 	add.w	ip, ip, #8
 8004b48:	f47f ae83 	bne.w	8004852 <_malloc_r+0xf6>
 8004b4c:	e030      	b.n	8004bb0 <_malloc_r+0x454>
 8004b4e:	68dc      	ldr	r4, [r3, #12]
 8004b50:	42a3      	cmp	r3, r4
 8004b52:	bf08      	it	eq
 8004b54:	3002      	addeq	r0, #2
 8004b56:	f43f ae39 	beq.w	80047cc <_malloc_r+0x70>
 8004b5a:	e6b7      	b.n	80048cc <_malloc_r+0x170>
 8004b5c:	440b      	add	r3, r1
 8004b5e:	460c      	mov	r4, r1
 8004b60:	685a      	ldr	r2, [r3, #4]
 8004b62:	68c9      	ldr	r1, [r1, #12]
 8004b64:	f854 5f08 	ldr.w	r5, [r4, #8]!
 8004b68:	f042 0201 	orr.w	r2, r2, #1
 8004b6c:	605a      	str	r2, [r3, #4]
 8004b6e:	4630      	mov	r0, r6
 8004b70:	60e9      	str	r1, [r5, #12]
 8004b72:	608d      	str	r5, [r1, #8]
 8004b74:	f000 f9fc 	bl	8004f70 <__malloc_unlock>
 8004b78:	e6b8      	b.n	80048ec <_malloc_r+0x190>
 8004b7a:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
 8004b7e:	f103 005b 	add.w	r0, r3, #91	; 0x5b
 8004b82:	ea4f 034e 	mov.w	r3, lr, lsl #1
 8004b86:	e60b      	b.n	80047a0 <_malloc_r+0x44>
 8004b88:	099a      	lsrs	r2, r3, #6
 8004b8a:	f102 0139 	add.w	r1, r2, #57	; 0x39
 8004b8e:	0049      	lsls	r1, r1, #1
 8004b90:	3238      	adds	r2, #56	; 0x38
 8004b92:	e7a1      	b.n	8004ad8 <_malloc_r+0x37c>
 8004b94:	42bc      	cmp	r4, r7
 8004b96:	4b4b      	ldr	r3, [pc, #300]	; (8004cc4 <_malloc_r+0x568>)
 8004b98:	f43f af04 	beq.w	80049a4 <_malloc_r+0x248>
 8004b9c:	689c      	ldr	r4, [r3, #8]
 8004b9e:	6862      	ldr	r2, [r4, #4]
 8004ba0:	f022 0203 	bic.w	r2, r2, #3
 8004ba4:	e762      	b.n	8004a6c <_malloc_r+0x310>
 8004ba6:	f859 3908 	ldr.w	r3, [r9], #-8
 8004baa:	4599      	cmp	r9, r3
 8004bac:	f040 8083 	bne.w	8004cb6 <_malloc_r+0x55a>
 8004bb0:	f010 0f03 	tst.w	r0, #3
 8004bb4:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 8004bb8:	d1f5      	bne.n	8004ba6 <_malloc_r+0x44a>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	ea23 0304 	bic.w	r3, r3, r4
 8004bc0:	607b      	str	r3, [r7, #4]
 8004bc2:	0064      	lsls	r4, r4, #1
 8004bc4:	429c      	cmp	r4, r3
 8004bc6:	f63f aec1 	bhi.w	800494c <_malloc_r+0x1f0>
 8004bca:	2c00      	cmp	r4, #0
 8004bcc:	f43f aebe 	beq.w	800494c <_malloc_r+0x1f0>
 8004bd0:	421c      	tst	r4, r3
 8004bd2:	4640      	mov	r0, r8
 8004bd4:	f47f ae39 	bne.w	800484a <_malloc_r+0xee>
 8004bd8:	0064      	lsls	r4, r4, #1
 8004bda:	421c      	tst	r4, r3
 8004bdc:	f100 0004 	add.w	r0, r0, #4
 8004be0:	d0fa      	beq.n	8004bd8 <_malloc_r+0x47c>
 8004be2:	e632      	b.n	800484a <_malloc_r+0xee>
 8004be4:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8004be8:	d818      	bhi.n	8004c1c <_malloc_r+0x4c0>
 8004bea:	0be8      	lsrs	r0, r5, #15
 8004bec:	f100 0e78 	add.w	lr, r0, #120	; 0x78
 8004bf0:	ea4f 034e 	mov.w	r3, lr, lsl #1
 8004bf4:	3077      	adds	r0, #119	; 0x77
 8004bf6:	e5d3      	b.n	80047a0 <_malloc_r+0x44>
 8004bf8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004bfc:	e6f0      	b.n	80049e0 <_malloc_r+0x284>
 8004bfe:	2101      	movs	r1, #1
 8004c00:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8004c04:	1092      	asrs	r2, r2, #2
 8004c06:	fa01 f202 	lsl.w	r2, r1, r2
 8004c0a:	431a      	orrs	r2, r3
 8004c0c:	f8c8 2004 	str.w	r2, [r8, #4]
 8004c10:	4661      	mov	r1, ip
 8004c12:	e777      	b.n	8004b04 <_malloc_r+0x3a8>
 8004c14:	2301      	movs	r3, #1
 8004c16:	f8cb 3004 	str.w	r3, [fp, #4]
 8004c1a:	e72d      	b.n	8004a78 <_malloc_r+0x31c>
 8004c1c:	f240 5254 	movw	r2, #1364	; 0x554
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d821      	bhi.n	8004c68 <_malloc_r+0x50c>
 8004c24:	0ca8      	lsrs	r0, r5, #18
 8004c26:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
 8004c2a:	ea4f 034e 	mov.w	r3, lr, lsl #1
 8004c2e:	307c      	adds	r0, #124	; 0x7c
 8004c30:	e5b6      	b.n	80047a0 <_malloc_r+0x44>
 8004c32:	3210      	adds	r2, #16
 8004c34:	e6a8      	b.n	8004988 <_malloc_r+0x22c>
 8004c36:	2a54      	cmp	r2, #84	; 0x54
 8004c38:	d827      	bhi.n	8004c8a <_malloc_r+0x52e>
 8004c3a:	0b1a      	lsrs	r2, r3, #12
 8004c3c:	f102 016f 	add.w	r1, r2, #111	; 0x6f
 8004c40:	0049      	lsls	r1, r1, #1
 8004c42:	326e      	adds	r2, #110	; 0x6e
 8004c44:	e748      	b.n	8004ad8 <_malloc_r+0x37c>
 8004c46:	68bc      	ldr	r4, [r7, #8]
 8004c48:	6862      	ldr	r2, [r4, #4]
 8004c4a:	f022 0203 	bic.w	r2, r2, #3
 8004c4e:	e70d      	b.n	8004a6c <_malloc_r+0x310>
 8004c50:	f3ca 030b 	ubfx	r3, sl, #0, #12
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	f47f aead 	bne.w	80049b4 <_malloc_r+0x258>
 8004c5a:	eb08 0302 	add.w	r3, r8, r2
 8004c5e:	68ba      	ldr	r2, [r7, #8]
 8004c60:	f043 0301 	orr.w	r3, r3, #1
 8004c64:	6053      	str	r3, [r2, #4]
 8004c66:	e6f1      	b.n	8004a4c <_malloc_r+0x2f0>
 8004c68:	23fe      	movs	r3, #254	; 0xfe
 8004c6a:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
 8004c6e:	207e      	movs	r0, #126	; 0x7e
 8004c70:	e596      	b.n	80047a0 <_malloc_r+0x44>
 8004c72:	2301      	movs	r3, #1
 8004c74:	f04f 0a00 	mov.w	sl, #0
 8004c78:	e6c4      	b.n	8004a04 <_malloc_r+0x2a8>
 8004c7a:	f104 0108 	add.w	r1, r4, #8
 8004c7e:	4630      	mov	r0, r6
 8004c80:	f7ff f9ee 	bl	8004060 <_free_r>
 8004c84:	f8da 1004 	ldr.w	r1, [sl, #4]
 8004c88:	e6e0      	b.n	8004a4c <_malloc_r+0x2f0>
 8004c8a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8004c8e:	d805      	bhi.n	8004c9c <_malloc_r+0x540>
 8004c90:	0bda      	lsrs	r2, r3, #15
 8004c92:	f102 0178 	add.w	r1, r2, #120	; 0x78
 8004c96:	0049      	lsls	r1, r1, #1
 8004c98:	3277      	adds	r2, #119	; 0x77
 8004c9a:	e71d      	b.n	8004ad8 <_malloc_r+0x37c>
 8004c9c:	f240 5154 	movw	r1, #1364	; 0x554
 8004ca0:	428a      	cmp	r2, r1
 8004ca2:	d805      	bhi.n	8004cb0 <_malloc_r+0x554>
 8004ca4:	0c9a      	lsrs	r2, r3, #18
 8004ca6:	f102 017d 	add.w	r1, r2, #125	; 0x7d
 8004caa:	0049      	lsls	r1, r1, #1
 8004cac:	327c      	adds	r2, #124	; 0x7c
 8004cae:	e713      	b.n	8004ad8 <_malloc_r+0x37c>
 8004cb0:	21fe      	movs	r1, #254	; 0xfe
 8004cb2:	227e      	movs	r2, #126	; 0x7e
 8004cb4:	e710      	b.n	8004ad8 <_malloc_r+0x37c>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	e783      	b.n	8004bc2 <_malloc_r+0x466>
 8004cba:	08e8      	lsrs	r0, r5, #3
 8004cbc:	1c43      	adds	r3, r0, #1
 8004cbe:	005b      	lsls	r3, r3, #1
 8004cc0:	e5fb      	b.n	80048ba <_malloc_r+0x15e>
 8004cc2:	bf00      	nop
 8004cc4:	200004b4 	.word	0x200004b4
	...

08004cd0 <memchr>:
 8004cd0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8004cd4:	2a10      	cmp	r2, #16
 8004cd6:	db2b      	blt.n	8004d30 <memchr+0x60>
 8004cd8:	f010 0f07 	tst.w	r0, #7
 8004cdc:	d008      	beq.n	8004cf0 <memchr+0x20>
 8004cde:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004ce2:	3a01      	subs	r2, #1
 8004ce4:	428b      	cmp	r3, r1
 8004ce6:	d02d      	beq.n	8004d44 <memchr+0x74>
 8004ce8:	f010 0f07 	tst.w	r0, #7
 8004cec:	b342      	cbz	r2, 8004d40 <memchr+0x70>
 8004cee:	d1f6      	bne.n	8004cde <memchr+0xe>
 8004cf0:	b4f0      	push	{r4, r5, r6, r7}
 8004cf2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8004cf6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8004cfa:	f022 0407 	bic.w	r4, r2, #7
 8004cfe:	f07f 0700 	mvns.w	r7, #0
 8004d02:	2300      	movs	r3, #0
 8004d04:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8004d08:	3c08      	subs	r4, #8
 8004d0a:	ea85 0501 	eor.w	r5, r5, r1
 8004d0e:	ea86 0601 	eor.w	r6, r6, r1
 8004d12:	fa85 f547 	uadd8	r5, r5, r7
 8004d16:	faa3 f587 	sel	r5, r3, r7
 8004d1a:	fa86 f647 	uadd8	r6, r6, r7
 8004d1e:	faa5 f687 	sel	r6, r5, r7
 8004d22:	b98e      	cbnz	r6, 8004d48 <memchr+0x78>
 8004d24:	d1ee      	bne.n	8004d04 <memchr+0x34>
 8004d26:	bcf0      	pop	{r4, r5, r6, r7}
 8004d28:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8004d2c:	f002 0207 	and.w	r2, r2, #7
 8004d30:	b132      	cbz	r2, 8004d40 <memchr+0x70>
 8004d32:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004d36:	3a01      	subs	r2, #1
 8004d38:	ea83 0301 	eor.w	r3, r3, r1
 8004d3c:	b113      	cbz	r3, 8004d44 <memchr+0x74>
 8004d3e:	d1f8      	bne.n	8004d32 <memchr+0x62>
 8004d40:	2000      	movs	r0, #0
 8004d42:	4770      	bx	lr
 8004d44:	3801      	subs	r0, #1
 8004d46:	4770      	bx	lr
 8004d48:	2d00      	cmp	r5, #0
 8004d4a:	bf06      	itte	eq
 8004d4c:	4635      	moveq	r5, r6
 8004d4e:	3803      	subeq	r0, #3
 8004d50:	3807      	subne	r0, #7
 8004d52:	f015 0f01 	tst.w	r5, #1
 8004d56:	d107      	bne.n	8004d68 <memchr+0x98>
 8004d58:	3001      	adds	r0, #1
 8004d5a:	f415 7f80 	tst.w	r5, #256	; 0x100
 8004d5e:	bf02      	ittt	eq
 8004d60:	3001      	addeq	r0, #1
 8004d62:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8004d66:	3001      	addeq	r0, #1
 8004d68:	bcf0      	pop	{r4, r5, r6, r7}
 8004d6a:	3801      	subs	r0, #1
 8004d6c:	4770      	bx	lr
 8004d6e:	bf00      	nop

08004d70 <memcpy>:
 8004d70:	4684      	mov	ip, r0
 8004d72:	ea41 0300 	orr.w	r3, r1, r0
 8004d76:	f013 0303 	ands.w	r3, r3, #3
 8004d7a:	d16d      	bne.n	8004e58 <memcpy+0xe8>
 8004d7c:	3a40      	subs	r2, #64	; 0x40
 8004d7e:	d341      	bcc.n	8004e04 <memcpy+0x94>
 8004d80:	f851 3b04 	ldr.w	r3, [r1], #4
 8004d84:	f840 3b04 	str.w	r3, [r0], #4
 8004d88:	f851 3b04 	ldr.w	r3, [r1], #4
 8004d8c:	f840 3b04 	str.w	r3, [r0], #4
 8004d90:	f851 3b04 	ldr.w	r3, [r1], #4
 8004d94:	f840 3b04 	str.w	r3, [r0], #4
 8004d98:	f851 3b04 	ldr.w	r3, [r1], #4
 8004d9c:	f840 3b04 	str.w	r3, [r0], #4
 8004da0:	f851 3b04 	ldr.w	r3, [r1], #4
 8004da4:	f840 3b04 	str.w	r3, [r0], #4
 8004da8:	f851 3b04 	ldr.w	r3, [r1], #4
 8004dac:	f840 3b04 	str.w	r3, [r0], #4
 8004db0:	f851 3b04 	ldr.w	r3, [r1], #4
 8004db4:	f840 3b04 	str.w	r3, [r0], #4
 8004db8:	f851 3b04 	ldr.w	r3, [r1], #4
 8004dbc:	f840 3b04 	str.w	r3, [r0], #4
 8004dc0:	f851 3b04 	ldr.w	r3, [r1], #4
 8004dc4:	f840 3b04 	str.w	r3, [r0], #4
 8004dc8:	f851 3b04 	ldr.w	r3, [r1], #4
 8004dcc:	f840 3b04 	str.w	r3, [r0], #4
 8004dd0:	f851 3b04 	ldr.w	r3, [r1], #4
 8004dd4:	f840 3b04 	str.w	r3, [r0], #4
 8004dd8:	f851 3b04 	ldr.w	r3, [r1], #4
 8004ddc:	f840 3b04 	str.w	r3, [r0], #4
 8004de0:	f851 3b04 	ldr.w	r3, [r1], #4
 8004de4:	f840 3b04 	str.w	r3, [r0], #4
 8004de8:	f851 3b04 	ldr.w	r3, [r1], #4
 8004dec:	f840 3b04 	str.w	r3, [r0], #4
 8004df0:	f851 3b04 	ldr.w	r3, [r1], #4
 8004df4:	f840 3b04 	str.w	r3, [r0], #4
 8004df8:	f851 3b04 	ldr.w	r3, [r1], #4
 8004dfc:	f840 3b04 	str.w	r3, [r0], #4
 8004e00:	3a40      	subs	r2, #64	; 0x40
 8004e02:	d2bd      	bcs.n	8004d80 <memcpy+0x10>
 8004e04:	3230      	adds	r2, #48	; 0x30
 8004e06:	d311      	bcc.n	8004e2c <memcpy+0xbc>
 8004e08:	f851 3b04 	ldr.w	r3, [r1], #4
 8004e0c:	f840 3b04 	str.w	r3, [r0], #4
 8004e10:	f851 3b04 	ldr.w	r3, [r1], #4
 8004e14:	f840 3b04 	str.w	r3, [r0], #4
 8004e18:	f851 3b04 	ldr.w	r3, [r1], #4
 8004e1c:	f840 3b04 	str.w	r3, [r0], #4
 8004e20:	f851 3b04 	ldr.w	r3, [r1], #4
 8004e24:	f840 3b04 	str.w	r3, [r0], #4
 8004e28:	3a10      	subs	r2, #16
 8004e2a:	d2ed      	bcs.n	8004e08 <memcpy+0x98>
 8004e2c:	320c      	adds	r2, #12
 8004e2e:	d305      	bcc.n	8004e3c <memcpy+0xcc>
 8004e30:	f851 3b04 	ldr.w	r3, [r1], #4
 8004e34:	f840 3b04 	str.w	r3, [r0], #4
 8004e38:	3a04      	subs	r2, #4
 8004e3a:	d2f9      	bcs.n	8004e30 <memcpy+0xc0>
 8004e3c:	3204      	adds	r2, #4
 8004e3e:	d008      	beq.n	8004e52 <memcpy+0xe2>
 8004e40:	07d2      	lsls	r2, r2, #31
 8004e42:	bf1c      	itt	ne
 8004e44:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8004e48:	f800 3b01 	strbne.w	r3, [r0], #1
 8004e4c:	d301      	bcc.n	8004e52 <memcpy+0xe2>
 8004e4e:	880b      	ldrh	r3, [r1, #0]
 8004e50:	8003      	strh	r3, [r0, #0]
 8004e52:	4660      	mov	r0, ip
 8004e54:	4770      	bx	lr
 8004e56:	bf00      	nop
 8004e58:	2a08      	cmp	r2, #8
 8004e5a:	d313      	bcc.n	8004e84 <memcpy+0x114>
 8004e5c:	078b      	lsls	r3, r1, #30
 8004e5e:	d08d      	beq.n	8004d7c <memcpy+0xc>
 8004e60:	f010 0303 	ands.w	r3, r0, #3
 8004e64:	d08a      	beq.n	8004d7c <memcpy+0xc>
 8004e66:	f1c3 0304 	rsb	r3, r3, #4
 8004e6a:	1ad2      	subs	r2, r2, r3
 8004e6c:	07db      	lsls	r3, r3, #31
 8004e6e:	bf1c      	itt	ne
 8004e70:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8004e74:	f800 3b01 	strbne.w	r3, [r0], #1
 8004e78:	d380      	bcc.n	8004d7c <memcpy+0xc>
 8004e7a:	f831 3b02 	ldrh.w	r3, [r1], #2
 8004e7e:	f820 3b02 	strh.w	r3, [r0], #2
 8004e82:	e77b      	b.n	8004d7c <memcpy+0xc>
 8004e84:	3a04      	subs	r2, #4
 8004e86:	d3d9      	bcc.n	8004e3c <memcpy+0xcc>
 8004e88:	3a01      	subs	r2, #1
 8004e8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e8e:	f800 3b01 	strb.w	r3, [r0], #1
 8004e92:	d2f9      	bcs.n	8004e88 <memcpy+0x118>
 8004e94:	780b      	ldrb	r3, [r1, #0]
 8004e96:	7003      	strb	r3, [r0, #0]
 8004e98:	784b      	ldrb	r3, [r1, #1]
 8004e9a:	7043      	strb	r3, [r0, #1]
 8004e9c:	788b      	ldrb	r3, [r1, #2]
 8004e9e:	7083      	strb	r3, [r0, #2]
 8004ea0:	4660      	mov	r0, ip
 8004ea2:	4770      	bx	lr

08004ea4 <memmove>:
 8004ea4:	4288      	cmp	r0, r1
 8004ea6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ea8:	d90d      	bls.n	8004ec6 <memmove+0x22>
 8004eaa:	188b      	adds	r3, r1, r2
 8004eac:	4298      	cmp	r0, r3
 8004eae:	d20a      	bcs.n	8004ec6 <memmove+0x22>
 8004eb0:	1881      	adds	r1, r0, r2
 8004eb2:	2a00      	cmp	r2, #0
 8004eb4:	d051      	beq.n	8004f5a <memmove+0xb6>
 8004eb6:	1a9a      	subs	r2, r3, r2
 8004eb8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004ebc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d1f9      	bne.n	8004eb8 <memmove+0x14>
 8004ec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ec6:	2a0f      	cmp	r2, #15
 8004ec8:	d948      	bls.n	8004f5c <memmove+0xb8>
 8004eca:	ea41 0300 	orr.w	r3, r1, r0
 8004ece:	079b      	lsls	r3, r3, #30
 8004ed0:	d146      	bne.n	8004f60 <memmove+0xbc>
 8004ed2:	f100 0410 	add.w	r4, r0, #16
 8004ed6:	f101 0310 	add.w	r3, r1, #16
 8004eda:	4615      	mov	r5, r2
 8004edc:	f853 6c10 	ldr.w	r6, [r3, #-16]
 8004ee0:	f844 6c10 	str.w	r6, [r4, #-16]
 8004ee4:	f853 6c0c 	ldr.w	r6, [r3, #-12]
 8004ee8:	f844 6c0c 	str.w	r6, [r4, #-12]
 8004eec:	f853 6c08 	ldr.w	r6, [r3, #-8]
 8004ef0:	f844 6c08 	str.w	r6, [r4, #-8]
 8004ef4:	3d10      	subs	r5, #16
 8004ef6:	f853 6c04 	ldr.w	r6, [r3, #-4]
 8004efa:	f844 6c04 	str.w	r6, [r4, #-4]
 8004efe:	2d0f      	cmp	r5, #15
 8004f00:	f103 0310 	add.w	r3, r3, #16
 8004f04:	f104 0410 	add.w	r4, r4, #16
 8004f08:	d8e8      	bhi.n	8004edc <memmove+0x38>
 8004f0a:	f1a2 0310 	sub.w	r3, r2, #16
 8004f0e:	f023 030f 	bic.w	r3, r3, #15
 8004f12:	f002 0e0f 	and.w	lr, r2, #15
 8004f16:	3310      	adds	r3, #16
 8004f18:	f1be 0f03 	cmp.w	lr, #3
 8004f1c:	4419      	add	r1, r3
 8004f1e:	4403      	add	r3, r0
 8004f20:	d921      	bls.n	8004f66 <memmove+0xc2>
 8004f22:	1f1e      	subs	r6, r3, #4
 8004f24:	460d      	mov	r5, r1
 8004f26:	4674      	mov	r4, lr
 8004f28:	3c04      	subs	r4, #4
 8004f2a:	f855 7b04 	ldr.w	r7, [r5], #4
 8004f2e:	f846 7f04 	str.w	r7, [r6, #4]!
 8004f32:	2c03      	cmp	r4, #3
 8004f34:	d8f8      	bhi.n	8004f28 <memmove+0x84>
 8004f36:	f1ae 0404 	sub.w	r4, lr, #4
 8004f3a:	f024 0403 	bic.w	r4, r4, #3
 8004f3e:	3404      	adds	r4, #4
 8004f40:	4423      	add	r3, r4
 8004f42:	4421      	add	r1, r4
 8004f44:	f002 0203 	and.w	r2, r2, #3
 8004f48:	b162      	cbz	r2, 8004f64 <memmove+0xc0>
 8004f4a:	3b01      	subs	r3, #1
 8004f4c:	440a      	add	r2, r1
 8004f4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f52:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f56:	428a      	cmp	r2, r1
 8004f58:	d1f9      	bne.n	8004f4e <memmove+0xaa>
 8004f5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	e7f3      	b.n	8004f48 <memmove+0xa4>
 8004f60:	4603      	mov	r3, r0
 8004f62:	e7f2      	b.n	8004f4a <memmove+0xa6>
 8004f64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f66:	4672      	mov	r2, lr
 8004f68:	e7ee      	b.n	8004f48 <memmove+0xa4>
 8004f6a:	bf00      	nop

08004f6c <__malloc_lock>:
 8004f6c:	4770      	bx	lr
 8004f6e:	bf00      	nop

08004f70 <__malloc_unlock>:
 8004f70:	4770      	bx	lr
 8004f72:	bf00      	nop

08004f74 <_Balloc>:
 8004f74:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8004f76:	b570      	push	{r4, r5, r6, lr}
 8004f78:	4605      	mov	r5, r0
 8004f7a:	460c      	mov	r4, r1
 8004f7c:	b14b      	cbz	r3, 8004f92 <_Balloc+0x1e>
 8004f7e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004f82:	b180      	cbz	r0, 8004fa6 <_Balloc+0x32>
 8004f84:	6802      	ldr	r2, [r0, #0]
 8004f86:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	6103      	str	r3, [r0, #16]
 8004f8e:	60c3      	str	r3, [r0, #12]
 8004f90:	bd70      	pop	{r4, r5, r6, pc}
 8004f92:	2221      	movs	r2, #33	; 0x21
 8004f94:	2104      	movs	r1, #4
 8004f96:	f002 f855 	bl	8007044 <_calloc_r>
 8004f9a:	64e8      	str	r0, [r5, #76]	; 0x4c
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	2800      	cmp	r0, #0
 8004fa0:	d1ed      	bne.n	8004f7e <_Balloc+0xa>
 8004fa2:	2000      	movs	r0, #0
 8004fa4:	bd70      	pop	{r4, r5, r6, pc}
 8004fa6:	2101      	movs	r1, #1
 8004fa8:	fa01 f604 	lsl.w	r6, r1, r4
 8004fac:	1d72      	adds	r2, r6, #5
 8004fae:	4628      	mov	r0, r5
 8004fb0:	0092      	lsls	r2, r2, #2
 8004fb2:	f002 f847 	bl	8007044 <_calloc_r>
 8004fb6:	2800      	cmp	r0, #0
 8004fb8:	d0f3      	beq.n	8004fa2 <_Balloc+0x2e>
 8004fba:	6044      	str	r4, [r0, #4]
 8004fbc:	6086      	str	r6, [r0, #8]
 8004fbe:	e7e4      	b.n	8004f8a <_Balloc+0x16>

08004fc0 <_Bfree>:
 8004fc0:	b131      	cbz	r1, 8004fd0 <_Bfree+0x10>
 8004fc2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8004fc4:	684a      	ldr	r2, [r1, #4]
 8004fc6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004fca:	6008      	str	r0, [r1, #0]
 8004fcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004fd0:	4770      	bx	lr
 8004fd2:	bf00      	nop

08004fd4 <__multadd>:
 8004fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fd6:	690c      	ldr	r4, [r1, #16]
 8004fd8:	b083      	sub	sp, #12
 8004fda:	460d      	mov	r5, r1
 8004fdc:	4606      	mov	r6, r0
 8004fde:	f101 0e14 	add.w	lr, r1, #20
 8004fe2:	2700      	movs	r7, #0
 8004fe4:	f8de 0000 	ldr.w	r0, [lr]
 8004fe8:	b281      	uxth	r1, r0
 8004fea:	fb02 3101 	mla	r1, r2, r1, r3
 8004fee:	0c0b      	lsrs	r3, r1, #16
 8004ff0:	0c00      	lsrs	r0, r0, #16
 8004ff2:	fb02 3300 	mla	r3, r2, r0, r3
 8004ff6:	b289      	uxth	r1, r1
 8004ff8:	3701      	adds	r7, #1
 8004ffa:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004ffe:	42bc      	cmp	r4, r7
 8005000:	f84e 1b04 	str.w	r1, [lr], #4
 8005004:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8005008:	dcec      	bgt.n	8004fe4 <__multadd+0x10>
 800500a:	b13b      	cbz	r3, 800501c <__multadd+0x48>
 800500c:	68aa      	ldr	r2, [r5, #8]
 800500e:	4294      	cmp	r4, r2
 8005010:	da07      	bge.n	8005022 <__multadd+0x4e>
 8005012:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 8005016:	3401      	adds	r4, #1
 8005018:	6153      	str	r3, [r2, #20]
 800501a:	612c      	str	r4, [r5, #16]
 800501c:	4628      	mov	r0, r5
 800501e:	b003      	add	sp, #12
 8005020:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005022:	6869      	ldr	r1, [r5, #4]
 8005024:	9301      	str	r3, [sp, #4]
 8005026:	3101      	adds	r1, #1
 8005028:	4630      	mov	r0, r6
 800502a:	f7ff ffa3 	bl	8004f74 <_Balloc>
 800502e:	692a      	ldr	r2, [r5, #16]
 8005030:	3202      	adds	r2, #2
 8005032:	f105 010c 	add.w	r1, r5, #12
 8005036:	4607      	mov	r7, r0
 8005038:	0092      	lsls	r2, r2, #2
 800503a:	300c      	adds	r0, #12
 800503c:	f7ff fe98 	bl	8004d70 <memcpy>
 8005040:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 8005042:	6869      	ldr	r1, [r5, #4]
 8005044:	9b01      	ldr	r3, [sp, #4]
 8005046:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 800504a:	6028      	str	r0, [r5, #0]
 800504c:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 8005050:	463d      	mov	r5, r7
 8005052:	e7de      	b.n	8005012 <__multadd+0x3e>

08005054 <__s2b>:
 8005054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005058:	4c23      	ldr	r4, [pc, #140]	; (80050e8 <__s2b+0x94>)
 800505a:	9d08      	ldr	r5, [sp, #32]
 800505c:	461f      	mov	r7, r3
 800505e:	3308      	adds	r3, #8
 8005060:	fb84 4e03 	smull	r4, lr, r4, r3
 8005064:	17db      	asrs	r3, r3, #31
 8005066:	ebc3 0e6e 	rsb	lr, r3, lr, asr #1
 800506a:	f1be 0f01 	cmp.w	lr, #1
 800506e:	4606      	mov	r6, r0
 8005070:	460c      	mov	r4, r1
 8005072:	4690      	mov	r8, r2
 8005074:	dd35      	ble.n	80050e2 <__s2b+0x8e>
 8005076:	2301      	movs	r3, #1
 8005078:	2100      	movs	r1, #0
 800507a:	005b      	lsls	r3, r3, #1
 800507c:	459e      	cmp	lr, r3
 800507e:	f101 0101 	add.w	r1, r1, #1
 8005082:	dcfa      	bgt.n	800507a <__s2b+0x26>
 8005084:	4630      	mov	r0, r6
 8005086:	f7ff ff75 	bl	8004f74 <_Balloc>
 800508a:	2301      	movs	r3, #1
 800508c:	f1b8 0f09 	cmp.w	r8, #9
 8005090:	6145      	str	r5, [r0, #20]
 8005092:	6103      	str	r3, [r0, #16]
 8005094:	dd21      	ble.n	80050da <__s2b+0x86>
 8005096:	f104 0909 	add.w	r9, r4, #9
 800509a:	464d      	mov	r5, r9
 800509c:	4444      	add	r4, r8
 800509e:	f815 3b01 	ldrb.w	r3, [r5], #1
 80050a2:	4601      	mov	r1, r0
 80050a4:	3b30      	subs	r3, #48	; 0x30
 80050a6:	220a      	movs	r2, #10
 80050a8:	4630      	mov	r0, r6
 80050aa:	f7ff ff93 	bl	8004fd4 <__multadd>
 80050ae:	42a5      	cmp	r5, r4
 80050b0:	d1f5      	bne.n	800509e <__s2b+0x4a>
 80050b2:	eb09 0408 	add.w	r4, r9, r8
 80050b6:	3c08      	subs	r4, #8
 80050b8:	4547      	cmp	r7, r8
 80050ba:	dd0c      	ble.n	80050d6 <__s2b+0x82>
 80050bc:	ebc8 0707 	rsb	r7, r8, r7
 80050c0:	4427      	add	r7, r4
 80050c2:	f814 3b01 	ldrb.w	r3, [r4], #1
 80050c6:	4601      	mov	r1, r0
 80050c8:	3b30      	subs	r3, #48	; 0x30
 80050ca:	220a      	movs	r2, #10
 80050cc:	4630      	mov	r0, r6
 80050ce:	f7ff ff81 	bl	8004fd4 <__multadd>
 80050d2:	42a7      	cmp	r7, r4
 80050d4:	d1f5      	bne.n	80050c2 <__s2b+0x6e>
 80050d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050da:	340a      	adds	r4, #10
 80050dc:	f04f 0809 	mov.w	r8, #9
 80050e0:	e7ea      	b.n	80050b8 <__s2b+0x64>
 80050e2:	2100      	movs	r1, #0
 80050e4:	e7ce      	b.n	8005084 <__s2b+0x30>
 80050e6:	bf00      	nop
 80050e8:	38e38e39 	.word	0x38e38e39

080050ec <__hi0bits>:
 80050ec:	0c03      	lsrs	r3, r0, #16
 80050ee:	041b      	lsls	r3, r3, #16
 80050f0:	b9b3      	cbnz	r3, 8005120 <__hi0bits+0x34>
 80050f2:	0400      	lsls	r0, r0, #16
 80050f4:	2310      	movs	r3, #16
 80050f6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80050fa:	bf04      	itt	eq
 80050fc:	0200      	lsleq	r0, r0, #8
 80050fe:	3308      	addeq	r3, #8
 8005100:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005104:	bf04      	itt	eq
 8005106:	0100      	lsleq	r0, r0, #4
 8005108:	3304      	addeq	r3, #4
 800510a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800510e:	bf04      	itt	eq
 8005110:	0080      	lsleq	r0, r0, #2
 8005112:	3302      	addeq	r3, #2
 8005114:	2800      	cmp	r0, #0
 8005116:	db07      	blt.n	8005128 <__hi0bits+0x3c>
 8005118:	0042      	lsls	r2, r0, #1
 800511a:	d403      	bmi.n	8005124 <__hi0bits+0x38>
 800511c:	2020      	movs	r0, #32
 800511e:	4770      	bx	lr
 8005120:	2300      	movs	r3, #0
 8005122:	e7e8      	b.n	80050f6 <__hi0bits+0xa>
 8005124:	1c58      	adds	r0, r3, #1
 8005126:	4770      	bx	lr
 8005128:	4618      	mov	r0, r3
 800512a:	4770      	bx	lr

0800512c <__lo0bits>:
 800512c:	6803      	ldr	r3, [r0, #0]
 800512e:	f013 0207 	ands.w	r2, r3, #7
 8005132:	d007      	beq.n	8005144 <__lo0bits+0x18>
 8005134:	07d9      	lsls	r1, r3, #31
 8005136:	d420      	bmi.n	800517a <__lo0bits+0x4e>
 8005138:	079a      	lsls	r2, r3, #30
 800513a:	d420      	bmi.n	800517e <__lo0bits+0x52>
 800513c:	089b      	lsrs	r3, r3, #2
 800513e:	6003      	str	r3, [r0, #0]
 8005140:	2002      	movs	r0, #2
 8005142:	4770      	bx	lr
 8005144:	b299      	uxth	r1, r3
 8005146:	b909      	cbnz	r1, 800514c <__lo0bits+0x20>
 8005148:	0c1b      	lsrs	r3, r3, #16
 800514a:	2210      	movs	r2, #16
 800514c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005150:	bf04      	itt	eq
 8005152:	0a1b      	lsreq	r3, r3, #8
 8005154:	3208      	addeq	r2, #8
 8005156:	0719      	lsls	r1, r3, #28
 8005158:	bf04      	itt	eq
 800515a:	091b      	lsreq	r3, r3, #4
 800515c:	3204      	addeq	r2, #4
 800515e:	0799      	lsls	r1, r3, #30
 8005160:	bf04      	itt	eq
 8005162:	089b      	lsreq	r3, r3, #2
 8005164:	3202      	addeq	r2, #2
 8005166:	07d9      	lsls	r1, r3, #31
 8005168:	d404      	bmi.n	8005174 <__lo0bits+0x48>
 800516a:	085b      	lsrs	r3, r3, #1
 800516c:	d101      	bne.n	8005172 <__lo0bits+0x46>
 800516e:	2020      	movs	r0, #32
 8005170:	4770      	bx	lr
 8005172:	3201      	adds	r2, #1
 8005174:	6003      	str	r3, [r0, #0]
 8005176:	4610      	mov	r0, r2
 8005178:	4770      	bx	lr
 800517a:	2000      	movs	r0, #0
 800517c:	4770      	bx	lr
 800517e:	085b      	lsrs	r3, r3, #1
 8005180:	6003      	str	r3, [r0, #0]
 8005182:	2001      	movs	r0, #1
 8005184:	4770      	bx	lr
 8005186:	bf00      	nop

08005188 <__i2b>:
 8005188:	b510      	push	{r4, lr}
 800518a:	460c      	mov	r4, r1
 800518c:	2101      	movs	r1, #1
 800518e:	f7ff fef1 	bl	8004f74 <_Balloc>
 8005192:	2201      	movs	r2, #1
 8005194:	6144      	str	r4, [r0, #20]
 8005196:	6102      	str	r2, [r0, #16]
 8005198:	bd10      	pop	{r4, pc}
 800519a:	bf00      	nop

0800519c <__multiply>:
 800519c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051a0:	690d      	ldr	r5, [r1, #16]
 80051a2:	6917      	ldr	r7, [r2, #16]
 80051a4:	42bd      	cmp	r5, r7
 80051a6:	b083      	sub	sp, #12
 80051a8:	460c      	mov	r4, r1
 80051aa:	4616      	mov	r6, r2
 80051ac:	da04      	bge.n	80051b8 <__multiply+0x1c>
 80051ae:	462a      	mov	r2, r5
 80051b0:	4634      	mov	r4, r6
 80051b2:	463d      	mov	r5, r7
 80051b4:	460e      	mov	r6, r1
 80051b6:	4617      	mov	r7, r2
 80051b8:	68a3      	ldr	r3, [r4, #8]
 80051ba:	6861      	ldr	r1, [r4, #4]
 80051bc:	eb05 0807 	add.w	r8, r5, r7
 80051c0:	4598      	cmp	r8, r3
 80051c2:	bfc8      	it	gt
 80051c4:	3101      	addgt	r1, #1
 80051c6:	f7ff fed5 	bl	8004f74 <_Balloc>
 80051ca:	f100 0c14 	add.w	ip, r0, #20
 80051ce:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
 80051d2:	45cc      	cmp	ip, r9
 80051d4:	9000      	str	r0, [sp, #0]
 80051d6:	d205      	bcs.n	80051e4 <__multiply+0x48>
 80051d8:	4663      	mov	r3, ip
 80051da:	2100      	movs	r1, #0
 80051dc:	f843 1b04 	str.w	r1, [r3], #4
 80051e0:	4599      	cmp	r9, r3
 80051e2:	d8fb      	bhi.n	80051dc <__multiply+0x40>
 80051e4:	f106 0214 	add.w	r2, r6, #20
 80051e8:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
 80051ec:	f104 0314 	add.w	r3, r4, #20
 80051f0:	4552      	cmp	r2, sl
 80051f2:	eb03 0e85 	add.w	lr, r3, r5, lsl #2
 80051f6:	d254      	bcs.n	80052a2 <__multiply+0x106>
 80051f8:	f8cd 9004 	str.w	r9, [sp, #4]
 80051fc:	4699      	mov	r9, r3
 80051fe:	f852 3b04 	ldr.w	r3, [r2], #4
 8005202:	fa1f fb83 	uxth.w	fp, r3
 8005206:	f1bb 0f00 	cmp.w	fp, #0
 800520a:	d020      	beq.n	800524e <__multiply+0xb2>
 800520c:	2000      	movs	r0, #0
 800520e:	464f      	mov	r7, r9
 8005210:	4666      	mov	r6, ip
 8005212:	4605      	mov	r5, r0
 8005214:	e000      	b.n	8005218 <__multiply+0x7c>
 8005216:	461e      	mov	r6, r3
 8005218:	f857 4b04 	ldr.w	r4, [r7], #4
 800521c:	6830      	ldr	r0, [r6, #0]
 800521e:	b2a1      	uxth	r1, r4
 8005220:	b283      	uxth	r3, r0
 8005222:	fb0b 3101 	mla	r1, fp, r1, r3
 8005226:	0c24      	lsrs	r4, r4, #16
 8005228:	0c00      	lsrs	r0, r0, #16
 800522a:	194b      	adds	r3, r1, r5
 800522c:	fb0b 0004 	mla	r0, fp, r4, r0
 8005230:	eb00 4013 	add.w	r0, r0, r3, lsr #16
 8005234:	b299      	uxth	r1, r3
 8005236:	4633      	mov	r3, r6
 8005238:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800523c:	45be      	cmp	lr, r7
 800523e:	ea4f 4510 	mov.w	r5, r0, lsr #16
 8005242:	f843 1b04 	str.w	r1, [r3], #4
 8005246:	d8e6      	bhi.n	8005216 <__multiply+0x7a>
 8005248:	6075      	str	r5, [r6, #4]
 800524a:	f852 3c04 	ldr.w	r3, [r2, #-4]
 800524e:	ea5f 4b13 	movs.w	fp, r3, lsr #16
 8005252:	d020      	beq.n	8005296 <__multiply+0xfa>
 8005254:	f8dc 3000 	ldr.w	r3, [ip]
 8005258:	4667      	mov	r7, ip
 800525a:	4618      	mov	r0, r3
 800525c:	464d      	mov	r5, r9
 800525e:	2100      	movs	r1, #0
 8005260:	e000      	b.n	8005264 <__multiply+0xc8>
 8005262:	4637      	mov	r7, r6
 8005264:	882c      	ldrh	r4, [r5, #0]
 8005266:	0c00      	lsrs	r0, r0, #16
 8005268:	fb0b 0004 	mla	r0, fp, r4, r0
 800526c:	4401      	add	r1, r0
 800526e:	b29c      	uxth	r4, r3
 8005270:	463e      	mov	r6, r7
 8005272:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
 8005276:	f846 3b04 	str.w	r3, [r6], #4
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f855 4b04 	ldr.w	r4, [r5], #4
 8005280:	b283      	uxth	r3, r0
 8005282:	0c24      	lsrs	r4, r4, #16
 8005284:	fb0b 3404 	mla	r4, fp, r4, r3
 8005288:	eb04 4311 	add.w	r3, r4, r1, lsr #16
 800528c:	45ae      	cmp	lr, r5
 800528e:	ea4f 4113 	mov.w	r1, r3, lsr #16
 8005292:	d8e6      	bhi.n	8005262 <__multiply+0xc6>
 8005294:	607b      	str	r3, [r7, #4]
 8005296:	4592      	cmp	sl, r2
 8005298:	f10c 0c04 	add.w	ip, ip, #4
 800529c:	d8af      	bhi.n	80051fe <__multiply+0x62>
 800529e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80052a2:	f1b8 0f00 	cmp.w	r8, #0
 80052a6:	dd0b      	ble.n	80052c0 <__multiply+0x124>
 80052a8:	f859 3c04 	ldr.w	r3, [r9, #-4]
 80052ac:	f1a9 0904 	sub.w	r9, r9, #4
 80052b0:	b11b      	cbz	r3, 80052ba <__multiply+0x11e>
 80052b2:	e005      	b.n	80052c0 <__multiply+0x124>
 80052b4:	f859 3d04 	ldr.w	r3, [r9, #-4]!
 80052b8:	b913      	cbnz	r3, 80052c0 <__multiply+0x124>
 80052ba:	f1b8 0801 	subs.w	r8, r8, #1
 80052be:	d1f9      	bne.n	80052b4 <__multiply+0x118>
 80052c0:	9800      	ldr	r0, [sp, #0]
 80052c2:	f8c0 8010 	str.w	r8, [r0, #16]
 80052c6:	b003      	add	sp, #12
 80052c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080052cc <__pow5mult>:
 80052cc:	f012 0303 	ands.w	r3, r2, #3
 80052d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052d4:	4614      	mov	r4, r2
 80052d6:	4607      	mov	r7, r0
 80052d8:	d12e      	bne.n	8005338 <__pow5mult+0x6c>
 80052da:	460e      	mov	r6, r1
 80052dc:	10a4      	asrs	r4, r4, #2
 80052de:	d01c      	beq.n	800531a <__pow5mult+0x4e>
 80052e0:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 80052e2:	b395      	cbz	r5, 800534a <__pow5mult+0x7e>
 80052e4:	07e3      	lsls	r3, r4, #31
 80052e6:	f04f 0800 	mov.w	r8, #0
 80052ea:	d406      	bmi.n	80052fa <__pow5mult+0x2e>
 80052ec:	1064      	asrs	r4, r4, #1
 80052ee:	d014      	beq.n	800531a <__pow5mult+0x4e>
 80052f0:	6828      	ldr	r0, [r5, #0]
 80052f2:	b1a8      	cbz	r0, 8005320 <__pow5mult+0x54>
 80052f4:	4605      	mov	r5, r0
 80052f6:	07e3      	lsls	r3, r4, #31
 80052f8:	d5f8      	bpl.n	80052ec <__pow5mult+0x20>
 80052fa:	462a      	mov	r2, r5
 80052fc:	4631      	mov	r1, r6
 80052fe:	4638      	mov	r0, r7
 8005300:	f7ff ff4c 	bl	800519c <__multiply>
 8005304:	b1b6      	cbz	r6, 8005334 <__pow5mult+0x68>
 8005306:	6872      	ldr	r2, [r6, #4]
 8005308:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800530a:	1064      	asrs	r4, r4, #1
 800530c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005310:	6031      	str	r1, [r6, #0]
 8005312:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 8005316:	4606      	mov	r6, r0
 8005318:	d1ea      	bne.n	80052f0 <__pow5mult+0x24>
 800531a:	4630      	mov	r0, r6
 800531c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005320:	462a      	mov	r2, r5
 8005322:	4629      	mov	r1, r5
 8005324:	4638      	mov	r0, r7
 8005326:	f7ff ff39 	bl	800519c <__multiply>
 800532a:	6028      	str	r0, [r5, #0]
 800532c:	f8c0 8000 	str.w	r8, [r0]
 8005330:	4605      	mov	r5, r0
 8005332:	e7e0      	b.n	80052f6 <__pow5mult+0x2a>
 8005334:	4606      	mov	r6, r0
 8005336:	e7d9      	b.n	80052ec <__pow5mult+0x20>
 8005338:	1e5a      	subs	r2, r3, #1
 800533a:	4d0b      	ldr	r5, [pc, #44]	; (8005368 <__pow5mult+0x9c>)
 800533c:	2300      	movs	r3, #0
 800533e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8005342:	f7ff fe47 	bl	8004fd4 <__multadd>
 8005346:	4606      	mov	r6, r0
 8005348:	e7c8      	b.n	80052dc <__pow5mult+0x10>
 800534a:	2101      	movs	r1, #1
 800534c:	4638      	mov	r0, r7
 800534e:	f7ff fe11 	bl	8004f74 <_Balloc>
 8005352:	f240 2171 	movw	r1, #625	; 0x271
 8005356:	2201      	movs	r2, #1
 8005358:	2300      	movs	r3, #0
 800535a:	6141      	str	r1, [r0, #20]
 800535c:	6102      	str	r2, [r0, #16]
 800535e:	4605      	mov	r5, r0
 8005360:	64b8      	str	r0, [r7, #72]	; 0x48
 8005362:	6003      	str	r3, [r0, #0]
 8005364:	e7be      	b.n	80052e4 <__pow5mult+0x18>
 8005366:	bf00      	nop
 8005368:	0800d038 	.word	0x0800d038

0800536c <__lshift>:
 800536c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005370:	4691      	mov	r9, r2
 8005372:	690a      	ldr	r2, [r1, #16]
 8005374:	688b      	ldr	r3, [r1, #8]
 8005376:	ea4f 1469 	mov.w	r4, r9, asr #5
 800537a:	eb04 0802 	add.w	r8, r4, r2
 800537e:	f108 0501 	add.w	r5, r8, #1
 8005382:	429d      	cmp	r5, r3
 8005384:	460e      	mov	r6, r1
 8005386:	4682      	mov	sl, r0
 8005388:	6849      	ldr	r1, [r1, #4]
 800538a:	dd04      	ble.n	8005396 <__lshift+0x2a>
 800538c:	005b      	lsls	r3, r3, #1
 800538e:	429d      	cmp	r5, r3
 8005390:	f101 0101 	add.w	r1, r1, #1
 8005394:	dcfa      	bgt.n	800538c <__lshift+0x20>
 8005396:	4650      	mov	r0, sl
 8005398:	f7ff fdec 	bl	8004f74 <_Balloc>
 800539c:	2c00      	cmp	r4, #0
 800539e:	f100 0214 	add.w	r2, r0, #20
 80053a2:	dd38      	ble.n	8005416 <__lshift+0xaa>
 80053a4:	eb02 0384 	add.w	r3, r2, r4, lsl #2
 80053a8:	2100      	movs	r1, #0
 80053aa:	f842 1b04 	str.w	r1, [r2], #4
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d1fb      	bne.n	80053aa <__lshift+0x3e>
 80053b2:	6934      	ldr	r4, [r6, #16]
 80053b4:	f106 0114 	add.w	r1, r6, #20
 80053b8:	f019 091f 	ands.w	r9, r9, #31
 80053bc:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
 80053c0:	d021      	beq.n	8005406 <__lshift+0x9a>
 80053c2:	f1c9 0220 	rsb	r2, r9, #32
 80053c6:	2400      	movs	r4, #0
 80053c8:	680f      	ldr	r7, [r1, #0]
 80053ca:	fa07 fc09 	lsl.w	ip, r7, r9
 80053ce:	ea4c 0404 	orr.w	r4, ip, r4
 80053d2:	469c      	mov	ip, r3
 80053d4:	f843 4b04 	str.w	r4, [r3], #4
 80053d8:	f851 4b04 	ldr.w	r4, [r1], #4
 80053dc:	458e      	cmp	lr, r1
 80053de:	fa24 f402 	lsr.w	r4, r4, r2
 80053e2:	d8f1      	bhi.n	80053c8 <__lshift+0x5c>
 80053e4:	f8cc 4004 	str.w	r4, [ip, #4]
 80053e8:	b10c      	cbz	r4, 80053ee <__lshift+0x82>
 80053ea:	f108 0502 	add.w	r5, r8, #2
 80053ee:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
 80053f2:	6872      	ldr	r2, [r6, #4]
 80053f4:	3d01      	subs	r5, #1
 80053f6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80053fa:	6105      	str	r5, [r0, #16]
 80053fc:	6031      	str	r1, [r6, #0]
 80053fe:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 8005402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005406:	3b04      	subs	r3, #4
 8005408:	f851 2b04 	ldr.w	r2, [r1], #4
 800540c:	f843 2f04 	str.w	r2, [r3, #4]!
 8005410:	458e      	cmp	lr, r1
 8005412:	d8f9      	bhi.n	8005408 <__lshift+0x9c>
 8005414:	e7eb      	b.n	80053ee <__lshift+0x82>
 8005416:	4613      	mov	r3, r2
 8005418:	e7cb      	b.n	80053b2 <__lshift+0x46>
 800541a:	bf00      	nop

0800541c <__mcmp>:
 800541c:	6902      	ldr	r2, [r0, #16]
 800541e:	690b      	ldr	r3, [r1, #16]
 8005420:	1ad2      	subs	r2, r2, r3
 8005422:	d113      	bne.n	800544c <__mcmp+0x30>
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	3014      	adds	r0, #20
 8005428:	3114      	adds	r1, #20
 800542a:	4419      	add	r1, r3
 800542c:	b410      	push	{r4}
 800542e:	4403      	add	r3, r0
 8005430:	e001      	b.n	8005436 <__mcmp+0x1a>
 8005432:	4298      	cmp	r0, r3
 8005434:	d20c      	bcs.n	8005450 <__mcmp+0x34>
 8005436:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 800543a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800543e:	4294      	cmp	r4, r2
 8005440:	d0f7      	beq.n	8005432 <__mcmp+0x16>
 8005442:	d309      	bcc.n	8005458 <__mcmp+0x3c>
 8005444:	2001      	movs	r0, #1
 8005446:	f85d 4b04 	ldr.w	r4, [sp], #4
 800544a:	4770      	bx	lr
 800544c:	4610      	mov	r0, r2
 800544e:	4770      	bx	lr
 8005450:	2000      	movs	r0, #0
 8005452:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005456:	4770      	bx	lr
 8005458:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800545c:	e7f3      	b.n	8005446 <__mcmp+0x2a>
 800545e:	bf00      	nop

08005460 <__mdiff>:
 8005460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005464:	690b      	ldr	r3, [r1, #16]
 8005466:	460f      	mov	r7, r1
 8005468:	6911      	ldr	r1, [r2, #16]
 800546a:	1a5b      	subs	r3, r3, r1
 800546c:	2b00      	cmp	r3, #0
 800546e:	4690      	mov	r8, r2
 8005470:	d117      	bne.n	80054a2 <__mdiff+0x42>
 8005472:	0089      	lsls	r1, r1, #2
 8005474:	f107 0214 	add.w	r2, r7, #20
 8005478:	f108 0514 	add.w	r5, r8, #20
 800547c:	1853      	adds	r3, r2, r1
 800547e:	4429      	add	r1, r5
 8005480:	e001      	b.n	8005486 <__mdiff+0x26>
 8005482:	429a      	cmp	r2, r3
 8005484:	d25e      	bcs.n	8005544 <__mdiff+0xe4>
 8005486:	f853 6d04 	ldr.w	r6, [r3, #-4]!
 800548a:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800548e:	42a6      	cmp	r6, r4
 8005490:	d0f7      	beq.n	8005482 <__mdiff+0x22>
 8005492:	d260      	bcs.n	8005556 <__mdiff+0xf6>
 8005494:	463b      	mov	r3, r7
 8005496:	4614      	mov	r4, r2
 8005498:	4647      	mov	r7, r8
 800549a:	f04f 0901 	mov.w	r9, #1
 800549e:	4698      	mov	r8, r3
 80054a0:	e006      	b.n	80054b0 <__mdiff+0x50>
 80054a2:	db5d      	blt.n	8005560 <__mdiff+0x100>
 80054a4:	f107 0514 	add.w	r5, r7, #20
 80054a8:	f102 0414 	add.w	r4, r2, #20
 80054ac:	f04f 0900 	mov.w	r9, #0
 80054b0:	6879      	ldr	r1, [r7, #4]
 80054b2:	f7ff fd5f 	bl	8004f74 <_Balloc>
 80054b6:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80054ba:	693e      	ldr	r6, [r7, #16]
 80054bc:	f8c0 900c 	str.w	r9, [r0, #12]
 80054c0:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
 80054c4:	46a6      	mov	lr, r4
 80054c6:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 80054ca:	f100 0414 	add.w	r4, r0, #20
 80054ce:	2300      	movs	r3, #0
 80054d0:	f85e 1b04 	ldr.w	r1, [lr], #4
 80054d4:	f855 8b04 	ldr.w	r8, [r5], #4
 80054d8:	b28a      	uxth	r2, r1
 80054da:	fa13 f388 	uxtah	r3, r3, r8
 80054de:	0c09      	lsrs	r1, r1, #16
 80054e0:	1a9a      	subs	r2, r3, r2
 80054e2:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
 80054e6:	eb03 4322 	add.w	r3, r3, r2, asr #16
 80054ea:	b292      	uxth	r2, r2
 80054ec:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80054f0:	45f4      	cmp	ip, lr
 80054f2:	f844 2b04 	str.w	r2, [r4], #4
 80054f6:	ea4f 4323 	mov.w	r3, r3, asr #16
 80054fa:	d8e9      	bhi.n	80054d0 <__mdiff+0x70>
 80054fc:	42af      	cmp	r7, r5
 80054fe:	d917      	bls.n	8005530 <__mdiff+0xd0>
 8005500:	46a4      	mov	ip, r4
 8005502:	4629      	mov	r1, r5
 8005504:	f851 eb04 	ldr.w	lr, [r1], #4
 8005508:	fa13 f28e 	uxtah	r2, r3, lr
 800550c:	1413      	asrs	r3, r2, #16
 800550e:	eb03 431e 	add.w	r3, r3, lr, lsr #16
 8005512:	b292      	uxth	r2, r2
 8005514:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005518:	428f      	cmp	r7, r1
 800551a:	f84c 2b04 	str.w	r2, [ip], #4
 800551e:	ea4f 4323 	mov.w	r3, r3, asr #16
 8005522:	d8ef      	bhi.n	8005504 <__mdiff+0xa4>
 8005524:	43ed      	mvns	r5, r5
 8005526:	443d      	add	r5, r7
 8005528:	f025 0503 	bic.w	r5, r5, #3
 800552c:	3504      	adds	r5, #4
 800552e:	442c      	add	r4, r5
 8005530:	3c04      	subs	r4, #4
 8005532:	b922      	cbnz	r2, 800553e <__mdiff+0xde>
 8005534:	f854 3d04 	ldr.w	r3, [r4, #-4]!
 8005538:	3e01      	subs	r6, #1
 800553a:	2b00      	cmp	r3, #0
 800553c:	d0fa      	beq.n	8005534 <__mdiff+0xd4>
 800553e:	6106      	str	r6, [r0, #16]
 8005540:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005544:	2100      	movs	r1, #0
 8005546:	f7ff fd15 	bl	8004f74 <_Balloc>
 800554a:	2201      	movs	r2, #1
 800554c:	2300      	movs	r3, #0
 800554e:	6102      	str	r2, [r0, #16]
 8005550:	6143      	str	r3, [r0, #20]
 8005552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005556:	462c      	mov	r4, r5
 8005558:	f04f 0900 	mov.w	r9, #0
 800555c:	4615      	mov	r5, r2
 800555e:	e7a7      	b.n	80054b0 <__mdiff+0x50>
 8005560:	463b      	mov	r3, r7
 8005562:	f107 0414 	add.w	r4, r7, #20
 8005566:	f108 0514 	add.w	r5, r8, #20
 800556a:	4647      	mov	r7, r8
 800556c:	f04f 0901 	mov.w	r9, #1
 8005570:	4698      	mov	r8, r3
 8005572:	e79d      	b.n	80054b0 <__mdiff+0x50>

08005574 <__ulp>:
 8005574:	4b13      	ldr	r3, [pc, #76]	; (80055c4 <__ulp+0x50>)
 8005576:	ee10 2a90 	vmov	r2, s1
 800557a:	401a      	ands	r2, r3
 800557c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8005580:	2b00      	cmp	r3, #0
 8005582:	dd04      	ble.n	800558e <__ulp+0x1a>
 8005584:	2000      	movs	r0, #0
 8005586:	4619      	mov	r1, r3
 8005588:	ec41 0b10 	vmov	d0, r0, r1
 800558c:	4770      	bx	lr
 800558e:	425b      	negs	r3, r3
 8005590:	151b      	asrs	r3, r3, #20
 8005592:	2b13      	cmp	r3, #19
 8005594:	dd0d      	ble.n	80055b2 <__ulp+0x3e>
 8005596:	3b14      	subs	r3, #20
 8005598:	2b1e      	cmp	r3, #30
 800559a:	bfdd      	ittte	le
 800559c:	f1c3 031f 	rsble	r3, r3, #31
 80055a0:	2201      	movle	r2, #1
 80055a2:	fa02 f303 	lslle.w	r3, r2, r3
 80055a6:	2301      	movgt	r3, #1
 80055a8:	2100      	movs	r1, #0
 80055aa:	4618      	mov	r0, r3
 80055ac:	ec41 0b10 	vmov	d0, r0, r1
 80055b0:	4770      	bx	lr
 80055b2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80055b6:	2000      	movs	r0, #0
 80055b8:	fa42 f103 	asr.w	r1, r2, r3
 80055bc:	ec41 0b10 	vmov	d0, r0, r1
 80055c0:	4770      	bx	lr
 80055c2:	bf00      	nop
 80055c4:	7ff00000 	.word	0x7ff00000

080055c8 <__b2d>:
 80055c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055cc:	6906      	ldr	r6, [r0, #16]
 80055ce:	f100 0814 	add.w	r8, r0, #20
 80055d2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80055d6:	f856 7c04 	ldr.w	r7, [r6, #-4]
 80055da:	4638      	mov	r0, r7
 80055dc:	f7ff fd86 	bl	80050ec <__hi0bits>
 80055e0:	f1c0 0320 	rsb	r3, r0, #32
 80055e4:	280a      	cmp	r0, #10
 80055e6:	600b      	str	r3, [r1, #0]
 80055e8:	f1a6 0304 	sub.w	r3, r6, #4
 80055ec:	dc18      	bgt.n	8005620 <__b2d+0x58>
 80055ee:	4598      	cmp	r8, r3
 80055f0:	f1c0 020b 	rsb	r2, r0, #11
 80055f4:	bf38      	it	cc
 80055f6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80055fa:	fa27 f102 	lsr.w	r1, r7, r2
 80055fe:	f100 0015 	add.w	r0, r0, #21
 8005602:	f041 557f 	orr.w	r5, r1, #1069547520	; 0x3fc00000
 8005606:	bf34      	ite	cc
 8005608:	40d3      	lsrcc	r3, r2
 800560a:	2300      	movcs	r3, #0
 800560c:	fa07 f000 	lsl.w	r0, r7, r0
 8005610:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8005614:	ea40 0403 	orr.w	r4, r0, r3
 8005618:	ec45 4b10 	vmov	d0, r4, r5
 800561c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005620:	4598      	cmp	r8, r3
 8005622:	d220      	bcs.n	8005666 <__b2d+0x9e>
 8005624:	f1b0 030b 	subs.w	r3, r0, #11
 8005628:	f856 2c08 	ldr.w	r2, [r6, #-8]
 800562c:	d01e      	beq.n	800566c <__b2d+0xa4>
 800562e:	fa07 f003 	lsl.w	r0, r7, r3
 8005632:	f040 577f 	orr.w	r7, r0, #1069547520	; 0x3fc00000
 8005636:	f1c3 0e20 	rsb	lr, r3, #32
 800563a:	f1a6 0108 	sub.w	r1, r6, #8
 800563e:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005642:	fa22 f00e 	lsr.w	r0, r2, lr
 8005646:	4588      	cmp	r8, r1
 8005648:	ea47 0500 	orr.w	r5, r7, r0
 800564c:	d220      	bcs.n	8005690 <__b2d+0xc8>
 800564e:	f856 1c0c 	ldr.w	r1, [r6, #-12]
 8005652:	fa02 f003 	lsl.w	r0, r2, r3
 8005656:	fa21 f30e 	lsr.w	r3, r1, lr
 800565a:	4318      	orrs	r0, r3
 800565c:	4604      	mov	r4, r0
 800565e:	ec45 4b10 	vmov	d0, r4, r5
 8005662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005666:	380b      	subs	r0, #11
 8005668:	d109      	bne.n	800567e <__b2d+0xb6>
 800566a:	4602      	mov	r2, r0
 800566c:	f047 557f 	orr.w	r5, r7, #1069547520	; 0x3fc00000
 8005670:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8005674:	4614      	mov	r4, r2
 8005676:	ec45 4b10 	vmov	d0, r4, r5
 800567a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800567e:	fa07 f000 	lsl.w	r0, r7, r0
 8005682:	f040 557f 	orr.w	r5, r0, #1069547520	; 0x3fc00000
 8005686:	2000      	movs	r0, #0
 8005688:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800568c:	4604      	mov	r4, r0
 800568e:	e7e6      	b.n	800565e <__b2d+0x96>
 8005690:	fa02 f003 	lsl.w	r0, r2, r3
 8005694:	4604      	mov	r4, r0
 8005696:	e7e2      	b.n	800565e <__b2d+0x96>

08005698 <__d2b>:
 8005698:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800569c:	ec57 6b10 	vmov	r6, r7, d0
 80056a0:	b083      	sub	sp, #12
 80056a2:	4688      	mov	r8, r1
 80056a4:	2101      	movs	r1, #1
 80056a6:	463c      	mov	r4, r7
 80056a8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80056ac:	4617      	mov	r7, r2
 80056ae:	f7ff fc61 	bl	8004f74 <_Balloc>
 80056b2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80056b6:	4681      	mov	r9, r0
 80056b8:	b10d      	cbz	r5, 80056be <__d2b+0x26>
 80056ba:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 80056be:	9401      	str	r4, [sp, #4]
 80056c0:	b31e      	cbz	r6, 800570a <__d2b+0x72>
 80056c2:	a802      	add	r0, sp, #8
 80056c4:	f840 6d08 	str.w	r6, [r0, #-8]!
 80056c8:	f7ff fd30 	bl	800512c <__lo0bits>
 80056cc:	2800      	cmp	r0, #0
 80056ce:	d134      	bne.n	800573a <__d2b+0xa2>
 80056d0:	e89d 000c 	ldmia.w	sp, {r2, r3}
 80056d4:	f8c9 2014 	str.w	r2, [r9, #20]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	bf0c      	ite	eq
 80056dc:	2101      	moveq	r1, #1
 80056de:	2102      	movne	r1, #2
 80056e0:	f8c9 3018 	str.w	r3, [r9, #24]
 80056e4:	f8c9 1010 	str.w	r1, [r9, #16]
 80056e8:	b9dd      	cbnz	r5, 8005722 <__d2b+0x8a>
 80056ea:	eb09 0381 	add.w	r3, r9, r1, lsl #2
 80056ee:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80056f2:	f8c8 0000 	str.w	r0, [r8]
 80056f6:	6918      	ldr	r0, [r3, #16]
 80056f8:	f7ff fcf8 	bl	80050ec <__hi0bits>
 80056fc:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005700:	6038      	str	r0, [r7, #0]
 8005702:	4648      	mov	r0, r9
 8005704:	b003      	add	sp, #12
 8005706:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800570a:	a801      	add	r0, sp, #4
 800570c:	f7ff fd0e 	bl	800512c <__lo0bits>
 8005710:	9b01      	ldr	r3, [sp, #4]
 8005712:	f8c9 3014 	str.w	r3, [r9, #20]
 8005716:	2101      	movs	r1, #1
 8005718:	3020      	adds	r0, #32
 800571a:	f8c9 1010 	str.w	r1, [r9, #16]
 800571e:	2d00      	cmp	r5, #0
 8005720:	d0e3      	beq.n	80056ea <__d2b+0x52>
 8005722:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005726:	4405      	add	r5, r0
 8005728:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800572c:	f8c8 5000 	str.w	r5, [r8]
 8005730:	6038      	str	r0, [r7, #0]
 8005732:	4648      	mov	r0, r9
 8005734:	b003      	add	sp, #12
 8005736:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800573a:	e89d 000c 	ldmia.w	sp, {r2, r3}
 800573e:	f1c0 0120 	rsb	r1, r0, #32
 8005742:	fa03 f101 	lsl.w	r1, r3, r1
 8005746:	430a      	orrs	r2, r1
 8005748:	40c3      	lsrs	r3, r0
 800574a:	9301      	str	r3, [sp, #4]
 800574c:	f8c9 2014 	str.w	r2, [r9, #20]
 8005750:	e7c2      	b.n	80056d8 <__d2b+0x40>
 8005752:	bf00      	nop

08005754 <__ratio>:
 8005754:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005758:	b083      	sub	sp, #12
 800575a:	4688      	mov	r8, r1
 800575c:	4669      	mov	r1, sp
 800575e:	4681      	mov	r9, r0
 8005760:	f7ff ff32 	bl	80055c8 <__b2d>
 8005764:	4640      	mov	r0, r8
 8005766:	a901      	add	r1, sp, #4
 8005768:	ec55 4b10 	vmov	r4, r5, d0
 800576c:	f7ff ff2c 	bl	80055c8 <__b2d>
 8005770:	e89d 000a 	ldmia.w	sp, {r1, r3}
 8005774:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8005778:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800577c:	1ac9      	subs	r1, r1, r3
 800577e:	1a10      	subs	r0, r2, r0
 8005780:	eb01 1340 	add.w	r3, r1, r0, lsl #5
 8005784:	2b00      	cmp	r3, #0
 8005786:	ec57 6b10 	vmov	r6, r7, d0
 800578a:	dd0d      	ble.n	80057a8 <__ratio+0x54>
 800578c:	eb05 5103 	add.w	r1, r5, r3, lsl #20
 8005790:	460d      	mov	r5, r1
 8005792:	4632      	mov	r2, r6
 8005794:	463b      	mov	r3, r7
 8005796:	4620      	mov	r0, r4
 8005798:	4629      	mov	r1, r5
 800579a:	f7fb f86f 	bl	800087c <__aeabi_ddiv>
 800579e:	ec41 0b10 	vmov	d0, r0, r1
 80057a2:	b003      	add	sp, #12
 80057a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80057a8:	eba7 5903 	sub.w	r9, r7, r3, lsl #20
 80057ac:	ee10 6a10 	vmov	r6, s0
 80057b0:	464f      	mov	r7, r9
 80057b2:	e7ee      	b.n	8005792 <__ratio+0x3e>

080057b4 <_mprec_log10>:
 80057b4:	2817      	cmp	r0, #23
 80057b6:	b510      	push	{r4, lr}
 80057b8:	4604      	mov	r4, r0
 80057ba:	dd0a      	ble.n	80057d2 <_mprec_log10+0x1e>
 80057bc:	4908      	ldr	r1, [pc, #32]	; (80057e0 <_mprec_log10+0x2c>)
 80057be:	2000      	movs	r0, #0
 80057c0:	2200      	movs	r2, #0
 80057c2:	4b08      	ldr	r3, [pc, #32]	; (80057e4 <_mprec_log10+0x30>)
 80057c4:	f7fa ff30 	bl	8000628 <__aeabi_dmul>
 80057c8:	3c01      	subs	r4, #1
 80057ca:	d1f9      	bne.n	80057c0 <_mprec_log10+0xc>
 80057cc:	ec41 0b10 	vmov	d0, r0, r1
 80057d0:	bd10      	pop	{r4, pc}
 80057d2:	4b05      	ldr	r3, [pc, #20]	; (80057e8 <_mprec_log10+0x34>)
 80057d4:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
 80057d8:	ed94 0b04 	vldr	d0, [r4, #16]
 80057dc:	bd10      	pop	{r4, pc}
 80057de:	bf00      	nop
 80057e0:	3ff00000 	.word	0x3ff00000
 80057e4:	40240000 	.word	0x40240000
 80057e8:	0800d038 	.word	0x0800d038

080057ec <__copybits>:
 80057ec:	b470      	push	{r4, r5, r6}
 80057ee:	6914      	ldr	r4, [r2, #16]
 80057f0:	f102 0314 	add.w	r3, r2, #20
 80057f4:	3901      	subs	r1, #1
 80057f6:	114e      	asrs	r6, r1, #5
 80057f8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80057fc:	3601      	adds	r6, #1
 80057fe:	42a3      	cmp	r3, r4
 8005800:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8005804:	d20c      	bcs.n	8005820 <__copybits+0x34>
 8005806:	1f01      	subs	r1, r0, #4
 8005808:	f853 5b04 	ldr.w	r5, [r3], #4
 800580c:	f841 5f04 	str.w	r5, [r1, #4]!
 8005810:	429c      	cmp	r4, r3
 8005812:	d8f9      	bhi.n	8005808 <__copybits+0x1c>
 8005814:	1aa3      	subs	r3, r4, r2
 8005816:	3b15      	subs	r3, #21
 8005818:	f023 0303 	bic.w	r3, r3, #3
 800581c:	3304      	adds	r3, #4
 800581e:	4418      	add	r0, r3
 8005820:	4286      	cmp	r6, r0
 8005822:	d904      	bls.n	800582e <__copybits+0x42>
 8005824:	2300      	movs	r3, #0
 8005826:	f840 3b04 	str.w	r3, [r0], #4
 800582a:	4286      	cmp	r6, r0
 800582c:	d8fb      	bhi.n	8005826 <__copybits+0x3a>
 800582e:	bc70      	pop	{r4, r5, r6}
 8005830:	4770      	bx	lr
 8005832:	bf00      	nop

08005834 <__any_on>:
 8005834:	6903      	ldr	r3, [r0, #16]
 8005836:	114a      	asrs	r2, r1, #5
 8005838:	4293      	cmp	r3, r2
 800583a:	b410      	push	{r4}
 800583c:	f100 0414 	add.w	r4, r0, #20
 8005840:	da10      	bge.n	8005864 <__any_on+0x30>
 8005842:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005846:	429c      	cmp	r4, r3
 8005848:	d221      	bcs.n	800588e <__any_on+0x5a>
 800584a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800584e:	3b04      	subs	r3, #4
 8005850:	b118      	cbz	r0, 800585a <__any_on+0x26>
 8005852:	e015      	b.n	8005880 <__any_on+0x4c>
 8005854:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005858:	b992      	cbnz	r2, 8005880 <__any_on+0x4c>
 800585a:	429c      	cmp	r4, r3
 800585c:	d3fa      	bcc.n	8005854 <__any_on+0x20>
 800585e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005862:	4770      	bx	lr
 8005864:	dd10      	ble.n	8005888 <__any_on+0x54>
 8005866:	f011 011f 	ands.w	r1, r1, #31
 800586a:	d00d      	beq.n	8005888 <__any_on+0x54>
 800586c:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
 8005870:	fa20 f301 	lsr.w	r3, r0, r1
 8005874:	fa03 f101 	lsl.w	r1, r3, r1
 8005878:	4288      	cmp	r0, r1
 800587a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800587e:	d0e2      	beq.n	8005846 <__any_on+0x12>
 8005880:	2001      	movs	r0, #1
 8005882:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005886:	4770      	bx	lr
 8005888:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800588c:	e7db      	b.n	8005846 <__any_on+0x12>
 800588e:	2000      	movs	r0, #0
 8005890:	e7e5      	b.n	800585e <__any_on+0x2a>
 8005892:	bf00      	nop

08005894 <_putc_r>:
 8005894:	b570      	push	{r4, r5, r6, lr}
 8005896:	460d      	mov	r5, r1
 8005898:	4614      	mov	r4, r2
 800589a:	4606      	mov	r6, r0
 800589c:	b118      	cbz	r0, 80058a6 <_putc_r+0x12>
 800589e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80058a0:	b90b      	cbnz	r3, 80058a6 <_putc_r+0x12>
 80058a2:	f7fe fb6f 	bl	8003f84 <__sinit>
 80058a6:	68a3      	ldr	r3, [r4, #8]
 80058a8:	3b01      	subs	r3, #1
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	60a3      	str	r3, [r4, #8]
 80058ae:	db05      	blt.n	80058bc <_putc_r+0x28>
 80058b0:	b2e8      	uxtb	r0, r5
 80058b2:	6823      	ldr	r3, [r4, #0]
 80058b4:	1c5a      	adds	r2, r3, #1
 80058b6:	6022      	str	r2, [r4, #0]
 80058b8:	701d      	strb	r5, [r3, #0]
 80058ba:	bd70      	pop	{r4, r5, r6, pc}
 80058bc:	69a2      	ldr	r2, [r4, #24]
 80058be:	4293      	cmp	r3, r2
 80058c0:	db02      	blt.n	80058c8 <_putc_r+0x34>
 80058c2:	b2e8      	uxtb	r0, r5
 80058c4:	280a      	cmp	r0, #10
 80058c6:	d1f4      	bne.n	80058b2 <_putc_r+0x1e>
 80058c8:	4622      	mov	r2, r4
 80058ca:	4629      	mov	r1, r5
 80058cc:	4630      	mov	r0, r6
 80058ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80058d2:	f001 bb59 	b.w	8006f88 <__swbuf_r>
 80058d6:	bf00      	nop

080058d8 <putc>:
 80058d8:	4b11      	ldr	r3, [pc, #68]	; (8005920 <putc+0x48>)
 80058da:	b570      	push	{r4, r5, r6, lr}
 80058dc:	681d      	ldr	r5, [r3, #0]
 80058de:	4606      	mov	r6, r0
 80058e0:	460c      	mov	r4, r1
 80058e2:	b125      	cbz	r5, 80058ee <putc+0x16>
 80058e4:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80058e6:	b913      	cbnz	r3, 80058ee <putc+0x16>
 80058e8:	4628      	mov	r0, r5
 80058ea:	f7fe fb4b 	bl	8003f84 <__sinit>
 80058ee:	68a3      	ldr	r3, [r4, #8]
 80058f0:	3b01      	subs	r3, #1
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	60a3      	str	r3, [r4, #8]
 80058f6:	db05      	blt.n	8005904 <putc+0x2c>
 80058f8:	b2f0      	uxtb	r0, r6
 80058fa:	6823      	ldr	r3, [r4, #0]
 80058fc:	1c5a      	adds	r2, r3, #1
 80058fe:	6022      	str	r2, [r4, #0]
 8005900:	701e      	strb	r6, [r3, #0]
 8005902:	bd70      	pop	{r4, r5, r6, pc}
 8005904:	69a2      	ldr	r2, [r4, #24]
 8005906:	4293      	cmp	r3, r2
 8005908:	db02      	blt.n	8005910 <putc+0x38>
 800590a:	b2f0      	uxtb	r0, r6
 800590c:	280a      	cmp	r0, #10
 800590e:	d1f4      	bne.n	80058fa <putc+0x22>
 8005910:	4622      	mov	r2, r4
 8005912:	4631      	mov	r1, r6
 8005914:	4628      	mov	r0, r5
 8005916:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800591a:	f001 bb35 	b.w	8006f88 <__swbuf_r>
 800591e:	bf00      	nop
 8005920:	20000008 	.word	0x20000008

08005924 <_realloc_r>:
 8005924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005928:	4617      	mov	r7, r2
 800592a:	b083      	sub	sp, #12
 800592c:	2900      	cmp	r1, #0
 800592e:	f000 80c1 	beq.w	8005ab4 <_realloc_r+0x190>
 8005932:	460e      	mov	r6, r1
 8005934:	4681      	mov	r9, r0
 8005936:	f107 050b 	add.w	r5, r7, #11
 800593a:	f7ff fb17 	bl	8004f6c <__malloc_lock>
 800593e:	f856 ec04 	ldr.w	lr, [r6, #-4]
 8005942:	2d16      	cmp	r5, #22
 8005944:	f02e 0403 	bic.w	r4, lr, #3
 8005948:	f1a6 0808 	sub.w	r8, r6, #8
 800594c:	d840      	bhi.n	80059d0 <_realloc_r+0xac>
 800594e:	2210      	movs	r2, #16
 8005950:	4615      	mov	r5, r2
 8005952:	42af      	cmp	r7, r5
 8005954:	d841      	bhi.n	80059da <_realloc_r+0xb6>
 8005956:	4294      	cmp	r4, r2
 8005958:	da75      	bge.n	8005a46 <_realloc_r+0x122>
 800595a:	4bc9      	ldr	r3, [pc, #804]	; (8005c80 <_realloc_r+0x35c>)
 800595c:	6899      	ldr	r1, [r3, #8]
 800595e:	eb08 0004 	add.w	r0, r8, r4
 8005962:	4288      	cmp	r0, r1
 8005964:	6841      	ldr	r1, [r0, #4]
 8005966:	f000 80d9 	beq.w	8005b1c <_realloc_r+0x1f8>
 800596a:	f021 0301 	bic.w	r3, r1, #1
 800596e:	4403      	add	r3, r0
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	07db      	lsls	r3, r3, #31
 8005974:	d57d      	bpl.n	8005a72 <_realloc_r+0x14e>
 8005976:	f01e 0f01 	tst.w	lr, #1
 800597a:	d035      	beq.n	80059e8 <_realloc_r+0xc4>
 800597c:	4639      	mov	r1, r7
 800597e:	4648      	mov	r0, r9
 8005980:	f7fe feec 	bl	800475c <_malloc_r>
 8005984:	4607      	mov	r7, r0
 8005986:	b1e0      	cbz	r0, 80059c2 <_realloc_r+0x9e>
 8005988:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800598c:	f023 0301 	bic.w	r3, r3, #1
 8005990:	4443      	add	r3, r8
 8005992:	f1a0 0208 	sub.w	r2, r0, #8
 8005996:	429a      	cmp	r2, r3
 8005998:	f000 8144 	beq.w	8005c24 <_realloc_r+0x300>
 800599c:	1f22      	subs	r2, r4, #4
 800599e:	2a24      	cmp	r2, #36	; 0x24
 80059a0:	f200 8131 	bhi.w	8005c06 <_realloc_r+0x2e2>
 80059a4:	2a13      	cmp	r2, #19
 80059a6:	f200 8104 	bhi.w	8005bb2 <_realloc_r+0x28e>
 80059aa:	4603      	mov	r3, r0
 80059ac:	4632      	mov	r2, r6
 80059ae:	6811      	ldr	r1, [r2, #0]
 80059b0:	6019      	str	r1, [r3, #0]
 80059b2:	6851      	ldr	r1, [r2, #4]
 80059b4:	6059      	str	r1, [r3, #4]
 80059b6:	6892      	ldr	r2, [r2, #8]
 80059b8:	609a      	str	r2, [r3, #8]
 80059ba:	4631      	mov	r1, r6
 80059bc:	4648      	mov	r0, r9
 80059be:	f7fe fb4f 	bl	8004060 <_free_r>
 80059c2:	4648      	mov	r0, r9
 80059c4:	f7ff fad4 	bl	8004f70 <__malloc_unlock>
 80059c8:	4638      	mov	r0, r7
 80059ca:	b003      	add	sp, #12
 80059cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059d0:	f025 0507 	bic.w	r5, r5, #7
 80059d4:	2d00      	cmp	r5, #0
 80059d6:	462a      	mov	r2, r5
 80059d8:	dabb      	bge.n	8005952 <_realloc_r+0x2e>
 80059da:	230c      	movs	r3, #12
 80059dc:	2000      	movs	r0, #0
 80059de:	f8c9 3000 	str.w	r3, [r9]
 80059e2:	b003      	add	sp, #12
 80059e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059e8:	f856 3c08 	ldr.w	r3, [r6, #-8]
 80059ec:	ebc3 0a08 	rsb	sl, r3, r8
 80059f0:	f8da 3004 	ldr.w	r3, [sl, #4]
 80059f4:	f023 0c03 	bic.w	ip, r3, #3
 80059f8:	eb04 030c 	add.w	r3, r4, ip
 80059fc:	4293      	cmp	r3, r2
 80059fe:	dbbd      	blt.n	800597c <_realloc_r+0x58>
 8005a00:	4657      	mov	r7, sl
 8005a02:	f8da 100c 	ldr.w	r1, [sl, #12]
 8005a06:	f857 0f08 	ldr.w	r0, [r7, #8]!
 8005a0a:	1f22      	subs	r2, r4, #4
 8005a0c:	2a24      	cmp	r2, #36	; 0x24
 8005a0e:	60c1      	str	r1, [r0, #12]
 8005a10:	6088      	str	r0, [r1, #8]
 8005a12:	f200 8117 	bhi.w	8005c44 <_realloc_r+0x320>
 8005a16:	2a13      	cmp	r2, #19
 8005a18:	f240 8112 	bls.w	8005c40 <_realloc_r+0x31c>
 8005a1c:	6831      	ldr	r1, [r6, #0]
 8005a1e:	f8ca 1008 	str.w	r1, [sl, #8]
 8005a22:	6871      	ldr	r1, [r6, #4]
 8005a24:	f8ca 100c 	str.w	r1, [sl, #12]
 8005a28:	2a1b      	cmp	r2, #27
 8005a2a:	f200 812b 	bhi.w	8005c84 <_realloc_r+0x360>
 8005a2e:	3608      	adds	r6, #8
 8005a30:	f10a 0210 	add.w	r2, sl, #16
 8005a34:	6831      	ldr	r1, [r6, #0]
 8005a36:	6011      	str	r1, [r2, #0]
 8005a38:	6871      	ldr	r1, [r6, #4]
 8005a3a:	6051      	str	r1, [r2, #4]
 8005a3c:	68b1      	ldr	r1, [r6, #8]
 8005a3e:	6091      	str	r1, [r2, #8]
 8005a40:	463e      	mov	r6, r7
 8005a42:	461c      	mov	r4, r3
 8005a44:	46d0      	mov	r8, sl
 8005a46:	1b63      	subs	r3, r4, r5
 8005a48:	2b0f      	cmp	r3, #15
 8005a4a:	d81d      	bhi.n	8005a88 <_realloc_r+0x164>
 8005a4c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005a50:	f003 0301 	and.w	r3, r3, #1
 8005a54:	4323      	orrs	r3, r4
 8005a56:	4444      	add	r4, r8
 8005a58:	f8c8 3004 	str.w	r3, [r8, #4]
 8005a5c:	6863      	ldr	r3, [r4, #4]
 8005a5e:	f043 0301 	orr.w	r3, r3, #1
 8005a62:	6063      	str	r3, [r4, #4]
 8005a64:	4648      	mov	r0, r9
 8005a66:	f7ff fa83 	bl	8004f70 <__malloc_unlock>
 8005a6a:	4630      	mov	r0, r6
 8005a6c:	b003      	add	sp, #12
 8005a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a72:	f021 0103 	bic.w	r1, r1, #3
 8005a76:	4421      	add	r1, r4
 8005a78:	4291      	cmp	r1, r2
 8005a7a:	db21      	blt.n	8005ac0 <_realloc_r+0x19c>
 8005a7c:	68c3      	ldr	r3, [r0, #12]
 8005a7e:	6882      	ldr	r2, [r0, #8]
 8005a80:	460c      	mov	r4, r1
 8005a82:	60d3      	str	r3, [r2, #12]
 8005a84:	609a      	str	r2, [r3, #8]
 8005a86:	e7de      	b.n	8005a46 <_realloc_r+0x122>
 8005a88:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8005a8c:	eb08 0105 	add.w	r1, r8, r5
 8005a90:	f002 0201 	and.w	r2, r2, #1
 8005a94:	4315      	orrs	r5, r2
 8005a96:	f043 0201 	orr.w	r2, r3, #1
 8005a9a:	440b      	add	r3, r1
 8005a9c:	f8c8 5004 	str.w	r5, [r8, #4]
 8005aa0:	604a      	str	r2, [r1, #4]
 8005aa2:	685a      	ldr	r2, [r3, #4]
 8005aa4:	f042 0201 	orr.w	r2, r2, #1
 8005aa8:	3108      	adds	r1, #8
 8005aaa:	605a      	str	r2, [r3, #4]
 8005aac:	4648      	mov	r0, r9
 8005aae:	f7fe fad7 	bl	8004060 <_free_r>
 8005ab2:	e7d7      	b.n	8005a64 <_realloc_r+0x140>
 8005ab4:	4611      	mov	r1, r2
 8005ab6:	b003      	add	sp, #12
 8005ab8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005abc:	f7fe be4e 	b.w	800475c <_malloc_r>
 8005ac0:	f01e 0f01 	tst.w	lr, #1
 8005ac4:	f47f af5a 	bne.w	800597c <_realloc_r+0x58>
 8005ac8:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8005acc:	ebc3 0a08 	rsb	sl, r3, r8
 8005ad0:	f8da 3004 	ldr.w	r3, [sl, #4]
 8005ad4:	f023 0c03 	bic.w	ip, r3, #3
 8005ad8:	eb01 0e0c 	add.w	lr, r1, ip
 8005adc:	4596      	cmp	lr, r2
 8005ade:	db8b      	blt.n	80059f8 <_realloc_r+0xd4>
 8005ae0:	68c3      	ldr	r3, [r0, #12]
 8005ae2:	6882      	ldr	r2, [r0, #8]
 8005ae4:	4657      	mov	r7, sl
 8005ae6:	60d3      	str	r3, [r2, #12]
 8005ae8:	609a      	str	r2, [r3, #8]
 8005aea:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8005aee:	f8da 300c 	ldr.w	r3, [sl, #12]
 8005af2:	60cb      	str	r3, [r1, #12]
 8005af4:	1f22      	subs	r2, r4, #4
 8005af6:	2a24      	cmp	r2, #36	; 0x24
 8005af8:	6099      	str	r1, [r3, #8]
 8005afa:	f200 8099 	bhi.w	8005c30 <_realloc_r+0x30c>
 8005afe:	2a13      	cmp	r2, #19
 8005b00:	d962      	bls.n	8005bc8 <_realloc_r+0x2a4>
 8005b02:	6833      	ldr	r3, [r6, #0]
 8005b04:	f8ca 3008 	str.w	r3, [sl, #8]
 8005b08:	6873      	ldr	r3, [r6, #4]
 8005b0a:	f8ca 300c 	str.w	r3, [sl, #12]
 8005b0e:	2a1b      	cmp	r2, #27
 8005b10:	f200 80a0 	bhi.w	8005c54 <_realloc_r+0x330>
 8005b14:	3608      	adds	r6, #8
 8005b16:	f10a 0310 	add.w	r3, sl, #16
 8005b1a:	e056      	b.n	8005bca <_realloc_r+0x2a6>
 8005b1c:	f021 0b03 	bic.w	fp, r1, #3
 8005b20:	44a3      	add	fp, r4
 8005b22:	f105 0010 	add.w	r0, r5, #16
 8005b26:	4583      	cmp	fp, r0
 8005b28:	da59      	bge.n	8005bde <_realloc_r+0x2ba>
 8005b2a:	f01e 0f01 	tst.w	lr, #1
 8005b2e:	f47f af25 	bne.w	800597c <_realloc_r+0x58>
 8005b32:	f856 1c08 	ldr.w	r1, [r6, #-8]
 8005b36:	ebc1 0a08 	rsb	sl, r1, r8
 8005b3a:	f8da 1004 	ldr.w	r1, [sl, #4]
 8005b3e:	f021 0c03 	bic.w	ip, r1, #3
 8005b42:	44e3      	add	fp, ip
 8005b44:	4558      	cmp	r0, fp
 8005b46:	f73f af57 	bgt.w	80059f8 <_realloc_r+0xd4>
 8005b4a:	4657      	mov	r7, sl
 8005b4c:	f8da 100c 	ldr.w	r1, [sl, #12]
 8005b50:	f857 0f08 	ldr.w	r0, [r7, #8]!
 8005b54:	1f22      	subs	r2, r4, #4
 8005b56:	2a24      	cmp	r2, #36	; 0x24
 8005b58:	60c1      	str	r1, [r0, #12]
 8005b5a:	6088      	str	r0, [r1, #8]
 8005b5c:	f200 80b4 	bhi.w	8005cc8 <_realloc_r+0x3a4>
 8005b60:	2a13      	cmp	r2, #19
 8005b62:	f240 80a5 	bls.w	8005cb0 <_realloc_r+0x38c>
 8005b66:	6831      	ldr	r1, [r6, #0]
 8005b68:	f8ca 1008 	str.w	r1, [sl, #8]
 8005b6c:	6871      	ldr	r1, [r6, #4]
 8005b6e:	f8ca 100c 	str.w	r1, [sl, #12]
 8005b72:	2a1b      	cmp	r2, #27
 8005b74:	f200 80af 	bhi.w	8005cd6 <_realloc_r+0x3b2>
 8005b78:	3608      	adds	r6, #8
 8005b7a:	f10a 0210 	add.w	r2, sl, #16
 8005b7e:	6831      	ldr	r1, [r6, #0]
 8005b80:	6011      	str	r1, [r2, #0]
 8005b82:	6871      	ldr	r1, [r6, #4]
 8005b84:	6051      	str	r1, [r2, #4]
 8005b86:	68b1      	ldr	r1, [r6, #8]
 8005b88:	6091      	str	r1, [r2, #8]
 8005b8a:	eb0a 0105 	add.w	r1, sl, r5
 8005b8e:	ebc5 020b 	rsb	r2, r5, fp
 8005b92:	f042 0201 	orr.w	r2, r2, #1
 8005b96:	6099      	str	r1, [r3, #8]
 8005b98:	604a      	str	r2, [r1, #4]
 8005b9a:	f8da 3004 	ldr.w	r3, [sl, #4]
 8005b9e:	f003 0301 	and.w	r3, r3, #1
 8005ba2:	431d      	orrs	r5, r3
 8005ba4:	4648      	mov	r0, r9
 8005ba6:	f8ca 5004 	str.w	r5, [sl, #4]
 8005baa:	f7ff f9e1 	bl	8004f70 <__malloc_unlock>
 8005bae:	4638      	mov	r0, r7
 8005bb0:	e75c      	b.n	8005a6c <_realloc_r+0x148>
 8005bb2:	6833      	ldr	r3, [r6, #0]
 8005bb4:	6003      	str	r3, [r0, #0]
 8005bb6:	6873      	ldr	r3, [r6, #4]
 8005bb8:	6043      	str	r3, [r0, #4]
 8005bba:	2a1b      	cmp	r2, #27
 8005bbc:	d827      	bhi.n	8005c0e <_realloc_r+0x2ea>
 8005bbe:	f100 0308 	add.w	r3, r0, #8
 8005bc2:	f106 0208 	add.w	r2, r6, #8
 8005bc6:	e6f2      	b.n	80059ae <_realloc_r+0x8a>
 8005bc8:	463b      	mov	r3, r7
 8005bca:	6832      	ldr	r2, [r6, #0]
 8005bcc:	601a      	str	r2, [r3, #0]
 8005bce:	6872      	ldr	r2, [r6, #4]
 8005bd0:	605a      	str	r2, [r3, #4]
 8005bd2:	68b2      	ldr	r2, [r6, #8]
 8005bd4:	609a      	str	r2, [r3, #8]
 8005bd6:	463e      	mov	r6, r7
 8005bd8:	4674      	mov	r4, lr
 8005bda:	46d0      	mov	r8, sl
 8005bdc:	e733      	b.n	8005a46 <_realloc_r+0x122>
 8005bde:	eb08 0105 	add.w	r1, r8, r5
 8005be2:	ebc5 0b0b 	rsb	fp, r5, fp
 8005be6:	f04b 0201 	orr.w	r2, fp, #1
 8005bea:	6099      	str	r1, [r3, #8]
 8005bec:	604a      	str	r2, [r1, #4]
 8005bee:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8005bf2:	f003 0301 	and.w	r3, r3, #1
 8005bf6:	431d      	orrs	r5, r3
 8005bf8:	4648      	mov	r0, r9
 8005bfa:	f846 5c04 	str.w	r5, [r6, #-4]
 8005bfe:	f7ff f9b7 	bl	8004f70 <__malloc_unlock>
 8005c02:	4630      	mov	r0, r6
 8005c04:	e732      	b.n	8005a6c <_realloc_r+0x148>
 8005c06:	4631      	mov	r1, r6
 8005c08:	f7ff f94c 	bl	8004ea4 <memmove>
 8005c0c:	e6d5      	b.n	80059ba <_realloc_r+0x96>
 8005c0e:	68b3      	ldr	r3, [r6, #8]
 8005c10:	6083      	str	r3, [r0, #8]
 8005c12:	68f3      	ldr	r3, [r6, #12]
 8005c14:	60c3      	str	r3, [r0, #12]
 8005c16:	2a24      	cmp	r2, #36	; 0x24
 8005c18:	d028      	beq.n	8005c6c <_realloc_r+0x348>
 8005c1a:	f100 0310 	add.w	r3, r0, #16
 8005c1e:	f106 0210 	add.w	r2, r6, #16
 8005c22:	e6c4      	b.n	80059ae <_realloc_r+0x8a>
 8005c24:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8005c28:	f023 0303 	bic.w	r3, r3, #3
 8005c2c:	441c      	add	r4, r3
 8005c2e:	e70a      	b.n	8005a46 <_realloc_r+0x122>
 8005c30:	4631      	mov	r1, r6
 8005c32:	4638      	mov	r0, r7
 8005c34:	4674      	mov	r4, lr
 8005c36:	46d0      	mov	r8, sl
 8005c38:	f7ff f934 	bl	8004ea4 <memmove>
 8005c3c:	463e      	mov	r6, r7
 8005c3e:	e702      	b.n	8005a46 <_realloc_r+0x122>
 8005c40:	463a      	mov	r2, r7
 8005c42:	e6f7      	b.n	8005a34 <_realloc_r+0x110>
 8005c44:	4631      	mov	r1, r6
 8005c46:	4638      	mov	r0, r7
 8005c48:	461c      	mov	r4, r3
 8005c4a:	46d0      	mov	r8, sl
 8005c4c:	f7ff f92a 	bl	8004ea4 <memmove>
 8005c50:	463e      	mov	r6, r7
 8005c52:	e6f8      	b.n	8005a46 <_realloc_r+0x122>
 8005c54:	68b3      	ldr	r3, [r6, #8]
 8005c56:	f8ca 3010 	str.w	r3, [sl, #16]
 8005c5a:	68f3      	ldr	r3, [r6, #12]
 8005c5c:	f8ca 3014 	str.w	r3, [sl, #20]
 8005c60:	2a24      	cmp	r2, #36	; 0x24
 8005c62:	d01b      	beq.n	8005c9c <_realloc_r+0x378>
 8005c64:	3610      	adds	r6, #16
 8005c66:	f10a 0318 	add.w	r3, sl, #24
 8005c6a:	e7ae      	b.n	8005bca <_realloc_r+0x2a6>
 8005c6c:	6933      	ldr	r3, [r6, #16]
 8005c6e:	6103      	str	r3, [r0, #16]
 8005c70:	6973      	ldr	r3, [r6, #20]
 8005c72:	6143      	str	r3, [r0, #20]
 8005c74:	f106 0218 	add.w	r2, r6, #24
 8005c78:	f100 0318 	add.w	r3, r0, #24
 8005c7c:	e697      	b.n	80059ae <_realloc_r+0x8a>
 8005c7e:	bf00      	nop
 8005c80:	200004b4 	.word	0x200004b4
 8005c84:	68b1      	ldr	r1, [r6, #8]
 8005c86:	f8ca 1010 	str.w	r1, [sl, #16]
 8005c8a:	68f1      	ldr	r1, [r6, #12]
 8005c8c:	f8ca 1014 	str.w	r1, [sl, #20]
 8005c90:	2a24      	cmp	r2, #36	; 0x24
 8005c92:	d00f      	beq.n	8005cb4 <_realloc_r+0x390>
 8005c94:	3610      	adds	r6, #16
 8005c96:	f10a 0218 	add.w	r2, sl, #24
 8005c9a:	e6cb      	b.n	8005a34 <_realloc_r+0x110>
 8005c9c:	6933      	ldr	r3, [r6, #16]
 8005c9e:	f8ca 3018 	str.w	r3, [sl, #24]
 8005ca2:	6973      	ldr	r3, [r6, #20]
 8005ca4:	f8ca 301c 	str.w	r3, [sl, #28]
 8005ca8:	3618      	adds	r6, #24
 8005caa:	f10a 0320 	add.w	r3, sl, #32
 8005cae:	e78c      	b.n	8005bca <_realloc_r+0x2a6>
 8005cb0:	463a      	mov	r2, r7
 8005cb2:	e764      	b.n	8005b7e <_realloc_r+0x25a>
 8005cb4:	6932      	ldr	r2, [r6, #16]
 8005cb6:	f8ca 2018 	str.w	r2, [sl, #24]
 8005cba:	6972      	ldr	r2, [r6, #20]
 8005cbc:	f8ca 201c 	str.w	r2, [sl, #28]
 8005cc0:	3618      	adds	r6, #24
 8005cc2:	f10a 0220 	add.w	r2, sl, #32
 8005cc6:	e6b5      	b.n	8005a34 <_realloc_r+0x110>
 8005cc8:	4631      	mov	r1, r6
 8005cca:	4638      	mov	r0, r7
 8005ccc:	9301      	str	r3, [sp, #4]
 8005cce:	f7ff f8e9 	bl	8004ea4 <memmove>
 8005cd2:	9b01      	ldr	r3, [sp, #4]
 8005cd4:	e759      	b.n	8005b8a <_realloc_r+0x266>
 8005cd6:	68b1      	ldr	r1, [r6, #8]
 8005cd8:	f8ca 1010 	str.w	r1, [sl, #16]
 8005cdc:	68f1      	ldr	r1, [r6, #12]
 8005cde:	f8ca 1014 	str.w	r1, [sl, #20]
 8005ce2:	2a24      	cmp	r2, #36	; 0x24
 8005ce4:	d003      	beq.n	8005cee <_realloc_r+0x3ca>
 8005ce6:	3610      	adds	r6, #16
 8005ce8:	f10a 0218 	add.w	r2, sl, #24
 8005cec:	e747      	b.n	8005b7e <_realloc_r+0x25a>
 8005cee:	6932      	ldr	r2, [r6, #16]
 8005cf0:	f8ca 2018 	str.w	r2, [sl, #24]
 8005cf4:	6972      	ldr	r2, [r6, #20]
 8005cf6:	f8ca 201c 	str.w	r2, [sl, #28]
 8005cfa:	3618      	adds	r6, #24
 8005cfc:	f10a 0220 	add.w	r2, sl, #32
 8005d00:	e73d      	b.n	8005b7e <_realloc_r+0x25a>
 8005d02:	bf00      	nop

08005d04 <__sread>:
 8005d04:	b510      	push	{r4, lr}
 8005d06:	460c      	mov	r4, r1
 8005d08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d0c:	f002 fe96 	bl	8008a3c <_read_r>
 8005d10:	2800      	cmp	r0, #0
 8005d12:	db03      	blt.n	8005d1c <__sread+0x18>
 8005d14:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005d16:	4403      	add	r3, r0
 8005d18:	6523      	str	r3, [r4, #80]	; 0x50
 8005d1a:	bd10      	pop	{r4, pc}
 8005d1c:	89a3      	ldrh	r3, [r4, #12]
 8005d1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d22:	81a3      	strh	r3, [r4, #12]
 8005d24:	bd10      	pop	{r4, pc}
 8005d26:	bf00      	nop

08005d28 <__seofread>:
 8005d28:	2000      	movs	r0, #0
 8005d2a:	4770      	bx	lr

08005d2c <__swrite>:
 8005d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d30:	4616      	mov	r6, r2
 8005d32:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005d36:	461f      	mov	r7, r3
 8005d38:	05d3      	lsls	r3, r2, #23
 8005d3a:	460c      	mov	r4, r1
 8005d3c:	4605      	mov	r5, r0
 8005d3e:	d507      	bpl.n	8005d50 <__swrite+0x24>
 8005d40:	2200      	movs	r2, #0
 8005d42:	2302      	movs	r3, #2
 8005d44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d48:	f002 fdae 	bl	80088a8 <_lseek_r>
 8005d4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d54:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005d58:	81a2      	strh	r2, [r4, #12]
 8005d5a:	463b      	mov	r3, r7
 8005d5c:	4632      	mov	r2, r6
 8005d5e:	4628      	mov	r0, r5
 8005d60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d64:	f002 bef4 	b.w	8008b50 <_write_r>

08005d68 <__sseek>:
 8005d68:	b510      	push	{r4, lr}
 8005d6a:	460c      	mov	r4, r1
 8005d6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d70:	f002 fd9a 	bl	80088a8 <_lseek_r>
 8005d74:	89a3      	ldrh	r3, [r4, #12]
 8005d76:	1c42      	adds	r2, r0, #1
 8005d78:	bf0e      	itee	eq
 8005d7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005d7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005d82:	6520      	strne	r0, [r4, #80]	; 0x50
 8005d84:	81a3      	strh	r3, [r4, #12]
 8005d86:	bd10      	pop	{r4, pc}

08005d88 <__sclose>:
 8005d88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d8c:	f002 bd82 	b.w	8008894 <_close_r>
	...
 8005da0:	eba2 0003 	sub.w	r0, r2, r3
 8005da4:	4770      	bx	lr
 8005da6:	bf00      	nop

08005da8 <strcmp>:
 8005da8:	7802      	ldrb	r2, [r0, #0]
 8005daa:	780b      	ldrb	r3, [r1, #0]
 8005dac:	2a01      	cmp	r2, #1
 8005dae:	bf28      	it	cs
 8005db0:	429a      	cmpcs	r2, r3
 8005db2:	d1f5      	bne.n	8005da0 <__sclose+0x18>
 8005db4:	e96d 4504 	strd	r4, r5, [sp, #-16]!
 8005db8:	ea40 0401 	orr.w	r4, r0, r1
 8005dbc:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005dc0:	f06f 0c00 	mvn.w	ip, #0
 8005dc4:	ea4f 7244 	mov.w	r2, r4, lsl #29
 8005dc8:	b312      	cbz	r2, 8005e10 <strcmp+0x68>
 8005dca:	ea80 0401 	eor.w	r4, r0, r1
 8005dce:	f014 0f07 	tst.w	r4, #7
 8005dd2:	d16a      	bne.n	8005eaa <strcmp+0x102>
 8005dd4:	f000 0407 	and.w	r4, r0, #7
 8005dd8:	f020 0007 	bic.w	r0, r0, #7
 8005ddc:	f004 0503 	and.w	r5, r4, #3
 8005de0:	f021 0107 	bic.w	r1, r1, #7
 8005de4:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 8005de8:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 8005dec:	f014 0f04 	tst.w	r4, #4
 8005df0:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 8005df4:	fa0c f405 	lsl.w	r4, ip, r5
 8005df8:	ea62 0204 	orn	r2, r2, r4
 8005dfc:	ea66 0604 	orn	r6, r6, r4
 8005e00:	d00a      	beq.n	8005e18 <strcmp+0x70>
 8005e02:	ea63 0304 	orn	r3, r3, r4
 8005e06:	4662      	mov	r2, ip
 8005e08:	ea67 0704 	orn	r7, r7, r4
 8005e0c:	4666      	mov	r6, ip
 8005e0e:	e003      	b.n	8005e18 <strcmp+0x70>
 8005e10:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 8005e14:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 8005e18:	fa82 f54c 	uadd8	r5, r2, ip
 8005e1c:	ea82 0406 	eor.w	r4, r2, r6
 8005e20:	faa4 f48c 	sel	r4, r4, ip
 8005e24:	bb6c      	cbnz	r4, 8005e82 <strcmp+0xda>
 8005e26:	fa83 f54c 	uadd8	r5, r3, ip
 8005e2a:	ea83 0507 	eor.w	r5, r3, r7
 8005e2e:	faa5 f58c 	sel	r5, r5, ip
 8005e32:	b995      	cbnz	r5, 8005e5a <strcmp+0xb2>
 8005e34:	e950 2302 	ldrd	r2, r3, [r0, #-8]
 8005e38:	e951 6702 	ldrd	r6, r7, [r1, #-8]
 8005e3c:	fa82 f54c 	uadd8	r5, r2, ip
 8005e40:	ea82 0406 	eor.w	r4, r2, r6
 8005e44:	faa4 f48c 	sel	r4, r4, ip
 8005e48:	fa83 f54c 	uadd8	r5, r3, ip
 8005e4c:	ea83 0507 	eor.w	r5, r3, r7
 8005e50:	faa5 f58c 	sel	r5, r5, ip
 8005e54:	4325      	orrs	r5, r4
 8005e56:	d0db      	beq.n	8005e10 <strcmp+0x68>
 8005e58:	b99c      	cbnz	r4, 8005e82 <strcmp+0xda>
 8005e5a:	ba2d      	rev	r5, r5
 8005e5c:	fab5 f485 	clz	r4, r5
 8005e60:	f024 0407 	bic.w	r4, r4, #7
 8005e64:	fa27 f104 	lsr.w	r1, r7, r4
 8005e68:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005e6c:	fa23 f304 	lsr.w	r3, r3, r4
 8005e70:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8005e74:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8005e78:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8005e7c:	eba0 0001 	sub.w	r0, r0, r1
 8005e80:	4770      	bx	lr
 8005e82:	ba24      	rev	r4, r4
 8005e84:	fab4 f484 	clz	r4, r4
 8005e88:	f024 0407 	bic.w	r4, r4, #7
 8005e8c:	fa26 f104 	lsr.w	r1, r6, r4
 8005e90:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005e94:	fa22 f204 	lsr.w	r2, r2, r4
 8005e98:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 8005e9c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8005ea0:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8005ea4:	eba0 0001 	sub.w	r0, r0, r1
 8005ea8:	4770      	bx	lr
 8005eaa:	f014 0f03 	tst.w	r4, #3
 8005eae:	d13c      	bne.n	8005f2a <strcmp+0x182>
 8005eb0:	f010 0403 	ands.w	r4, r0, #3
 8005eb4:	d128      	bne.n	8005f08 <strcmp+0x160>
 8005eb6:	f850 2b08 	ldr.w	r2, [r0], #8
 8005eba:	f851 3b08 	ldr.w	r3, [r1], #8
 8005ebe:	fa82 f54c 	uadd8	r5, r2, ip
 8005ec2:	ea82 0503 	eor.w	r5, r2, r3
 8005ec6:	faa5 f58c 	sel	r5, r5, ip
 8005eca:	b95d      	cbnz	r5, 8005ee4 <strcmp+0x13c>
 8005ecc:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8005ed0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ed4:	fa82 f54c 	uadd8	r5, r2, ip
 8005ed8:	ea82 0503 	eor.w	r5, r2, r3
 8005edc:	faa5 f58c 	sel	r5, r5, ip
 8005ee0:	2d00      	cmp	r5, #0
 8005ee2:	d0e8      	beq.n	8005eb6 <strcmp+0x10e>
 8005ee4:	ba2d      	rev	r5, r5
 8005ee6:	fab5 f485 	clz	r4, r5
 8005eea:	f024 0407 	bic.w	r4, r4, #7
 8005eee:	fa23 f104 	lsr.w	r1, r3, r4
 8005ef2:	fa22 f204 	lsr.w	r2, r2, r4
 8005ef6:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 8005efa:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8005efe:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8005f02:	eba0 0001 	sub.w	r0, r0, r1
 8005f06:	4770      	bx	lr
 8005f08:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8005f0c:	f020 0003 	bic.w	r0, r0, #3
 8005f10:	f850 2b08 	ldr.w	r2, [r0], #8
 8005f14:	f021 0103 	bic.w	r1, r1, #3
 8005f18:	f851 3b08 	ldr.w	r3, [r1], #8
 8005f1c:	fa0c f404 	lsl.w	r4, ip, r4
 8005f20:	ea62 0204 	orn	r2, r2, r4
 8005f24:	ea63 0304 	orn	r3, r3, r4
 8005f28:	e7c9      	b.n	8005ebe <strcmp+0x116>
 8005f2a:	f010 0403 	ands.w	r4, r0, #3
 8005f2e:	d01a      	beq.n	8005f66 <strcmp+0x1be>
 8005f30:	eba1 0104 	sub.w	r1, r1, r4
 8005f34:	f020 0003 	bic.w	r0, r0, #3
 8005f38:	07e4      	lsls	r4, r4, #31
 8005f3a:	f850 2b04 	ldr.w	r2, [r0], #4
 8005f3e:	d006      	beq.n	8005f4e <strcmp+0x1a6>
 8005f40:	d20f      	bcs.n	8005f62 <strcmp+0x1ba>
 8005f42:	788b      	ldrb	r3, [r1, #2]
 8005f44:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
 8005f48:	1ae4      	subs	r4, r4, r3
 8005f4a:	d106      	bne.n	8005f5a <strcmp+0x1b2>
 8005f4c:	b12b      	cbz	r3, 8005f5a <strcmp+0x1b2>
 8005f4e:	78cb      	ldrb	r3, [r1, #3]
 8005f50:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
 8005f54:	1ae4      	subs	r4, r4, r3
 8005f56:	d100      	bne.n	8005f5a <strcmp+0x1b2>
 8005f58:	b91b      	cbnz	r3, 8005f62 <strcmp+0x1ba>
 8005f5a:	4620      	mov	r0, r4
 8005f5c:	f85d 4b10 	ldr.w	r4, [sp], #16
 8005f60:	4770      	bx	lr
 8005f62:	f101 0104 	add.w	r1, r1, #4
 8005f66:	f850 2b04 	ldr.w	r2, [r0], #4
 8005f6a:	07cc      	lsls	r4, r1, #31
 8005f6c:	f021 0103 	bic.w	r1, r1, #3
 8005f70:	f851 3b04 	ldr.w	r3, [r1], #4
 8005f74:	d848      	bhi.n	8006008 <strcmp+0x260>
 8005f76:	d224      	bcs.n	8005fc2 <strcmp+0x21a>
 8005f78:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
 8005f7c:	fa82 f54c 	uadd8	r5, r2, ip
 8005f80:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
 8005f84:	faa5 f58c 	sel	r5, r5, ip
 8005f88:	d10a      	bne.n	8005fa0 <strcmp+0x1f8>
 8005f8a:	b965      	cbnz	r5, 8005fa6 <strcmp+0x1fe>
 8005f8c:	f851 3b04 	ldr.w	r3, [r1], #4
 8005f90:	ea84 0402 	eor.w	r4, r4, r2
 8005f94:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
 8005f98:	d10e      	bne.n	8005fb8 <strcmp+0x210>
 8005f9a:	f850 2b04 	ldr.w	r2, [r0], #4
 8005f9e:	e7eb      	b.n	8005f78 <strcmp+0x1d0>
 8005fa0:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8005fa4:	e055      	b.n	8006052 <strcmp+0x2aa>
 8005fa6:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 8005faa:	d14d      	bne.n	8006048 <strcmp+0x2a0>
 8005fac:	7808      	ldrb	r0, [r1, #0]
 8005fae:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8005fb2:	f1c0 0000 	rsb	r0, r0, #0
 8005fb6:	4770      	bx	lr
 8005fb8:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8005fbc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8005fc0:	e047      	b.n	8006052 <strcmp+0x2aa>
 8005fc2:	ea02 441c 	and.w	r4, r2, ip, lsr #16
 8005fc6:	fa82 f54c 	uadd8	r5, r2, ip
 8005fca:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
 8005fce:	faa5 f58c 	sel	r5, r5, ip
 8005fd2:	d10a      	bne.n	8005fea <strcmp+0x242>
 8005fd4:	b965      	cbnz	r5, 8005ff0 <strcmp+0x248>
 8005fd6:	f851 3b04 	ldr.w	r3, [r1], #4
 8005fda:	ea84 0402 	eor.w	r4, r4, r2
 8005fde:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
 8005fe2:	d10c      	bne.n	8005ffe <strcmp+0x256>
 8005fe4:	f850 2b04 	ldr.w	r2, [r0], #4
 8005fe8:	e7eb      	b.n	8005fc2 <strcmp+0x21a>
 8005fea:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8005fee:	e030      	b.n	8006052 <strcmp+0x2aa>
 8005ff0:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
 8005ff4:	d128      	bne.n	8006048 <strcmp+0x2a0>
 8005ff6:	880b      	ldrh	r3, [r1, #0]
 8005ff8:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8005ffc:	e029      	b.n	8006052 <strcmp+0x2aa>
 8005ffe:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8006002:	ea03 431c 	and.w	r3, r3, ip, lsr #16
 8006006:	e024      	b.n	8006052 <strcmp+0x2aa>
 8006008:	f002 04ff 	and.w	r4, r2, #255	; 0xff
 800600c:	fa82 f54c 	uadd8	r5, r2, ip
 8006010:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
 8006014:	faa5 f58c 	sel	r5, r5, ip
 8006018:	d10a      	bne.n	8006030 <strcmp+0x288>
 800601a:	b965      	cbnz	r5, 8006036 <strcmp+0x28e>
 800601c:	f851 3b04 	ldr.w	r3, [r1], #4
 8006020:	ea84 0402 	eor.w	r4, r4, r2
 8006024:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
 8006028:	d109      	bne.n	800603e <strcmp+0x296>
 800602a:	f850 2b04 	ldr.w	r2, [r0], #4
 800602e:	e7eb      	b.n	8006008 <strcmp+0x260>
 8006030:	ea4f 6313 	mov.w	r3, r3, lsr #24
 8006034:	e00d      	b.n	8006052 <strcmp+0x2aa>
 8006036:	f015 0fff 	tst.w	r5, #255	; 0xff
 800603a:	d105      	bne.n	8006048 <strcmp+0x2a0>
 800603c:	680b      	ldr	r3, [r1, #0]
 800603e:	ea4f 2212 	mov.w	r2, r2, lsr #8
 8006042:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006046:	e004      	b.n	8006052 <strcmp+0x2aa>
 8006048:	f04f 0000 	mov.w	r0, #0
 800604c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8006050:	4770      	bx	lr
 8006052:	ba12      	rev	r2, r2
 8006054:	ba1b      	rev	r3, r3
 8006056:	fa82 f44c 	uadd8	r4, r2, ip
 800605a:	ea82 0403 	eor.w	r4, r2, r3
 800605e:	faa4 f58c 	sel	r5, r4, ip
 8006062:	fab5 f485 	clz	r4, r5
 8006066:	fa02 f204 	lsl.w	r2, r2, r4
 800606a:	fa03 f304 	lsl.w	r3, r3, r4
 800606e:	ea4f 6012 	mov.w	r0, r2, lsr #24
 8006072:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8006076:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
 800607a:	4770      	bx	lr

0800607c <__sprint_r.part.0>:
 800607c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800607e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006082:	049c      	lsls	r4, r3, #18
 8006084:	4692      	mov	sl, r2
 8006086:	d52c      	bpl.n	80060e2 <__sprint_r.part.0+0x66>
 8006088:	6893      	ldr	r3, [r2, #8]
 800608a:	6812      	ldr	r2, [r2, #0]
 800608c:	b33b      	cbz	r3, 80060de <__sprint_r.part.0+0x62>
 800608e:	460f      	mov	r7, r1
 8006090:	4680      	mov	r8, r0
 8006092:	f102 0908 	add.w	r9, r2, #8
 8006096:	e919 0060 	ldmdb	r9, {r5, r6}
 800609a:	08b6      	lsrs	r6, r6, #2
 800609c:	d017      	beq.n	80060ce <__sprint_r.part.0+0x52>
 800609e:	3d04      	subs	r5, #4
 80060a0:	2400      	movs	r4, #0
 80060a2:	e001      	b.n	80060a8 <__sprint_r.part.0+0x2c>
 80060a4:	42a6      	cmp	r6, r4
 80060a6:	d010      	beq.n	80060ca <__sprint_r.part.0+0x4e>
 80060a8:	463a      	mov	r2, r7
 80060aa:	f855 1f04 	ldr.w	r1, [r5, #4]!
 80060ae:	4640      	mov	r0, r8
 80060b0:	f001 f88e 	bl	80071d0 <_fputwc_r>
 80060b4:	1c43      	adds	r3, r0, #1
 80060b6:	f104 0401 	add.w	r4, r4, #1
 80060ba:	d1f3      	bne.n	80060a4 <__sprint_r.part.0+0x28>
 80060bc:	2300      	movs	r3, #0
 80060be:	f8ca 3008 	str.w	r3, [sl, #8]
 80060c2:	f8ca 3004 	str.w	r3, [sl, #4]
 80060c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060ca:	f8da 3008 	ldr.w	r3, [sl, #8]
 80060ce:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
 80060d2:	f8ca 3008 	str.w	r3, [sl, #8]
 80060d6:	f109 0908 	add.w	r9, r9, #8
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d1db      	bne.n	8006096 <__sprint_r.part.0+0x1a>
 80060de:	2000      	movs	r0, #0
 80060e0:	e7ec      	b.n	80060bc <__sprint_r.part.0+0x40>
 80060e2:	f7fe f8a5 	bl	8004230 <__sfvwrite_r>
 80060e6:	2300      	movs	r3, #0
 80060e8:	f8ca 3008 	str.w	r3, [sl, #8]
 80060ec:	f8ca 3004 	str.w	r3, [sl, #4]
 80060f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080060f4 <__sprint_r>:
 80060f4:	6893      	ldr	r3, [r2, #8]
 80060f6:	b103      	cbz	r3, 80060fa <__sprint_r+0x6>
 80060f8:	e7c0      	b.n	800607c <__sprint_r.part.0>
 80060fa:	b410      	push	{r4}
 80060fc:	4618      	mov	r0, r3
 80060fe:	6053      	str	r3, [r2, #4]
 8006100:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006104:	4770      	bx	lr
 8006106:	bf00      	nop

08006108 <_vfiprintf_r>:
 8006108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800610c:	b0ab      	sub	sp, #172	; 0xac
 800610e:	461c      	mov	r4, r3
 8006110:	9100      	str	r1, [sp, #0]
 8006112:	4690      	mov	r8, r2
 8006114:	9304      	str	r3, [sp, #16]
 8006116:	9005      	str	r0, [sp, #20]
 8006118:	b118      	cbz	r0, 8006122 <_vfiprintf_r+0x1a>
 800611a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800611c:	2b00      	cmp	r3, #0
 800611e:	f000 80de 	beq.w	80062de <_vfiprintf_r+0x1d6>
 8006122:	9800      	ldr	r0, [sp, #0]
 8006124:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
 8006128:	b28a      	uxth	r2, r1
 800612a:	0495      	lsls	r5, r2, #18
 800612c:	d407      	bmi.n	800613e <_vfiprintf_r+0x36>
 800612e:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8006130:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
 8006134:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006138:	8182      	strh	r2, [r0, #12]
 800613a:	6643      	str	r3, [r0, #100]	; 0x64
 800613c:	b292      	uxth	r2, r2
 800613e:	0711      	lsls	r1, r2, #28
 8006140:	f140 80b1 	bpl.w	80062a6 <_vfiprintf_r+0x19e>
 8006144:	9b00      	ldr	r3, [sp, #0]
 8006146:	691b      	ldr	r3, [r3, #16]
 8006148:	2b00      	cmp	r3, #0
 800614a:	f000 80ac 	beq.w	80062a6 <_vfiprintf_r+0x19e>
 800614e:	f002 021a 	and.w	r2, r2, #26
 8006152:	2a0a      	cmp	r2, #10
 8006154:	f000 80b5 	beq.w	80062c2 <_vfiprintf_r+0x1ba>
 8006158:	2300      	movs	r3, #0
 800615a:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
 800615e:	9302      	str	r3, [sp, #8]
 8006160:	930f      	str	r3, [sp, #60]	; 0x3c
 8006162:	930e      	str	r3, [sp, #56]	; 0x38
 8006164:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 8006168:	46da      	mov	sl, fp
 800616a:	f898 3000 	ldrb.w	r3, [r8]
 800616e:	4644      	mov	r4, r8
 8006170:	b1fb      	cbz	r3, 80061b2 <_vfiprintf_r+0xaa>
 8006172:	2b25      	cmp	r3, #37	; 0x25
 8006174:	d102      	bne.n	800617c <_vfiprintf_r+0x74>
 8006176:	e01c      	b.n	80061b2 <_vfiprintf_r+0xaa>
 8006178:	2b25      	cmp	r3, #37	; 0x25
 800617a:	d003      	beq.n	8006184 <_vfiprintf_r+0x7c>
 800617c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8006180:	2b00      	cmp	r3, #0
 8006182:	d1f9      	bne.n	8006178 <_vfiprintf_r+0x70>
 8006184:	ebc8 0504 	rsb	r5, r8, r4
 8006188:	b19d      	cbz	r5, 80061b2 <_vfiprintf_r+0xaa>
 800618a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800618c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800618e:	f8ca 8000 	str.w	r8, [sl]
 8006192:	3301      	adds	r3, #1
 8006194:	442a      	add	r2, r5
 8006196:	2b07      	cmp	r3, #7
 8006198:	f8ca 5004 	str.w	r5, [sl, #4]
 800619c:	920f      	str	r2, [sp, #60]	; 0x3c
 800619e:	930e      	str	r3, [sp, #56]	; 0x38
 80061a0:	dd7b      	ble.n	800629a <_vfiprintf_r+0x192>
 80061a2:	2a00      	cmp	r2, #0
 80061a4:	f040 8528 	bne.w	8006bf8 <_vfiprintf_r+0xaf0>
 80061a8:	9b02      	ldr	r3, [sp, #8]
 80061aa:	920e      	str	r2, [sp, #56]	; 0x38
 80061ac:	442b      	add	r3, r5
 80061ae:	46da      	mov	sl, fp
 80061b0:	9302      	str	r3, [sp, #8]
 80061b2:	7823      	ldrb	r3, [r4, #0]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	f000 843e 	beq.w	8006a36 <_vfiprintf_r+0x92e>
 80061ba:	2100      	movs	r1, #0
 80061bc:	f04f 0300 	mov.w	r3, #0
 80061c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80061c4:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 80061c8:	f104 0801 	add.w	r8, r4, #1
 80061cc:	7863      	ldrb	r3, [r4, #1]
 80061ce:	9201      	str	r2, [sp, #4]
 80061d0:	4608      	mov	r0, r1
 80061d2:	460e      	mov	r6, r1
 80061d4:	460c      	mov	r4, r1
 80061d6:	f108 0801 	add.w	r8, r8, #1
 80061da:	f1a3 0220 	sub.w	r2, r3, #32
 80061de:	2a58      	cmp	r2, #88	; 0x58
 80061e0:	f200 8393 	bhi.w	800690a <_vfiprintf_r+0x802>
 80061e4:	e8df f012 	tbh	[pc, r2, lsl #1]
 80061e8:	03910346 	.word	0x03910346
 80061ec:	034e0391 	.word	0x034e0391
 80061f0:	03910391 	.word	0x03910391
 80061f4:	03910391 	.word	0x03910391
 80061f8:	03910391 	.word	0x03910391
 80061fc:	02670289 	.word	0x02670289
 8006200:	00800391 	.word	0x00800391
 8006204:	0391026c 	.word	0x0391026c
 8006208:	025901c6 	.word	0x025901c6
 800620c:	02590259 	.word	0x02590259
 8006210:	02590259 	.word	0x02590259
 8006214:	02590259 	.word	0x02590259
 8006218:	02590259 	.word	0x02590259
 800621c:	03910391 	.word	0x03910391
 8006220:	03910391 	.word	0x03910391
 8006224:	03910391 	.word	0x03910391
 8006228:	03910391 	.word	0x03910391
 800622c:	03910391 	.word	0x03910391
 8006230:	039101cb 	.word	0x039101cb
 8006234:	03910391 	.word	0x03910391
 8006238:	03910391 	.word	0x03910391
 800623c:	03910391 	.word	0x03910391
 8006240:	03910391 	.word	0x03910391
 8006244:	02140391 	.word	0x02140391
 8006248:	03910391 	.word	0x03910391
 800624c:	03910391 	.word	0x03910391
 8006250:	02ee0391 	.word	0x02ee0391
 8006254:	03910391 	.word	0x03910391
 8006258:	03910311 	.word	0x03910311
 800625c:	03910391 	.word	0x03910391
 8006260:	03910391 	.word	0x03910391
 8006264:	03910391 	.word	0x03910391
 8006268:	03910391 	.word	0x03910391
 800626c:	03340391 	.word	0x03340391
 8006270:	0391038a 	.word	0x0391038a
 8006274:	03910391 	.word	0x03910391
 8006278:	038a0367 	.word	0x038a0367
 800627c:	03910391 	.word	0x03910391
 8006280:	0391036c 	.word	0x0391036c
 8006284:	02950379 	.word	0x02950379
 8006288:	02e90085 	.word	0x02e90085
 800628c:	029b0391 	.word	0x029b0391
 8006290:	02ba0391 	.word	0x02ba0391
 8006294:	03910391 	.word	0x03910391
 8006298:	0353      	.short	0x0353
 800629a:	f10a 0a08 	add.w	sl, sl, #8
 800629e:	9b02      	ldr	r3, [sp, #8]
 80062a0:	442b      	add	r3, r5
 80062a2:	9302      	str	r3, [sp, #8]
 80062a4:	e785      	b.n	80061b2 <_vfiprintf_r+0xaa>
 80062a6:	9900      	ldr	r1, [sp, #0]
 80062a8:	9805      	ldr	r0, [sp, #20]
 80062aa:	f7fc fc53 	bl	8002b54 <__swsetup_r>
 80062ae:	2800      	cmp	r0, #0
 80062b0:	f040 8558 	bne.w	8006d64 <_vfiprintf_r+0xc5c>
 80062b4:	9b00      	ldr	r3, [sp, #0]
 80062b6:	899a      	ldrh	r2, [r3, #12]
 80062b8:	f002 021a 	and.w	r2, r2, #26
 80062bc:	2a0a      	cmp	r2, #10
 80062be:	f47f af4b 	bne.w	8006158 <_vfiprintf_r+0x50>
 80062c2:	9900      	ldr	r1, [sp, #0]
 80062c4:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	f6ff af45 	blt.w	8006158 <_vfiprintf_r+0x50>
 80062ce:	4623      	mov	r3, r4
 80062d0:	4642      	mov	r2, r8
 80062d2:	9805      	ldr	r0, [sp, #20]
 80062d4:	f000 fe22 	bl	8006f1c <__sbprintf>
 80062d8:	b02b      	add	sp, #172	; 0xac
 80062da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062de:	f7fd fe51 	bl	8003f84 <__sinit>
 80062e2:	e71e      	b.n	8006122 <_vfiprintf_r+0x1a>
 80062e4:	4264      	negs	r4, r4
 80062e6:	9304      	str	r3, [sp, #16]
 80062e8:	f046 0604 	orr.w	r6, r6, #4
 80062ec:	f898 3000 	ldrb.w	r3, [r8]
 80062f0:	e771      	b.n	80061d6 <_vfiprintf_r+0xce>
 80062f2:	2130      	movs	r1, #48	; 0x30
 80062f4:	9804      	ldr	r0, [sp, #16]
 80062f6:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
 80062fa:	9901      	ldr	r1, [sp, #4]
 80062fc:	9406      	str	r4, [sp, #24]
 80062fe:	f04f 0300 	mov.w	r3, #0
 8006302:	2278      	movs	r2, #120	; 0x78
 8006304:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 8006308:	2900      	cmp	r1, #0
 800630a:	4603      	mov	r3, r0
 800630c:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
 8006310:	6804      	ldr	r4, [r0, #0]
 8006312:	f103 0304 	add.w	r3, r3, #4
 8006316:	f04f 0500 	mov.w	r5, #0
 800631a:	f046 0202 	orr.w	r2, r6, #2
 800631e:	f2c0 8525 	blt.w	8006d6c <_vfiprintf_r+0xc64>
 8006322:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 8006326:	ea54 0205 	orrs.w	r2, r4, r5
 800632a:	f046 0602 	orr.w	r6, r6, #2
 800632e:	9304      	str	r3, [sp, #16]
 8006330:	f040 84bf 	bne.w	8006cb2 <_vfiprintf_r+0xbaa>
 8006334:	48b3      	ldr	r0, [pc, #716]	; (8006604 <_vfiprintf_r+0x4fc>)
 8006336:	9b01      	ldr	r3, [sp, #4]
 8006338:	2b00      	cmp	r3, #0
 800633a:	f040 841c 	bne.w	8006b76 <_vfiprintf_r+0xa6e>
 800633e:	4699      	mov	r9, r3
 8006340:	2300      	movs	r3, #0
 8006342:	9301      	str	r3, [sp, #4]
 8006344:	9303      	str	r3, [sp, #12]
 8006346:	465f      	mov	r7, fp
 8006348:	9b01      	ldr	r3, [sp, #4]
 800634a:	9a03      	ldr	r2, [sp, #12]
 800634c:	4293      	cmp	r3, r2
 800634e:	bfb8      	it	lt
 8006350:	4613      	movlt	r3, r2
 8006352:	461d      	mov	r5, r3
 8006354:	f1b9 0f00 	cmp.w	r9, #0
 8006358:	d000      	beq.n	800635c <_vfiprintf_r+0x254>
 800635a:	3501      	adds	r5, #1
 800635c:	f016 0302 	ands.w	r3, r6, #2
 8006360:	9307      	str	r3, [sp, #28]
 8006362:	bf18      	it	ne
 8006364:	3502      	addne	r5, #2
 8006366:	f016 0384 	ands.w	r3, r6, #132	; 0x84
 800636a:	9308      	str	r3, [sp, #32]
 800636c:	f040 82f1 	bne.w	8006952 <_vfiprintf_r+0x84a>
 8006370:	9b06      	ldr	r3, [sp, #24]
 8006372:	1b5c      	subs	r4, r3, r5
 8006374:	2c00      	cmp	r4, #0
 8006376:	f340 82ec 	ble.w	8006952 <_vfiprintf_r+0x84a>
 800637a:	2c10      	cmp	r4, #16
 800637c:	f340 8556 	ble.w	8006e2c <_vfiprintf_r+0xd24>
 8006380:	f8df 9284 	ldr.w	r9, [pc, #644]	; 8006608 <_vfiprintf_r+0x500>
 8006384:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
 8006388:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800638a:	46d4      	mov	ip, sl
 800638c:	2310      	movs	r3, #16
 800638e:	46c2      	mov	sl, r8
 8006390:	4670      	mov	r0, lr
 8006392:	46a8      	mov	r8, r5
 8006394:	464d      	mov	r5, r9
 8006396:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800639a:	e007      	b.n	80063ac <_vfiprintf_r+0x2a4>
 800639c:	f100 0e02 	add.w	lr, r0, #2
 80063a0:	f10c 0c08 	add.w	ip, ip, #8
 80063a4:	4608      	mov	r0, r1
 80063a6:	3c10      	subs	r4, #16
 80063a8:	2c10      	cmp	r4, #16
 80063aa:	dd13      	ble.n	80063d4 <_vfiprintf_r+0x2cc>
 80063ac:	1c41      	adds	r1, r0, #1
 80063ae:	3210      	adds	r2, #16
 80063b0:	2907      	cmp	r1, #7
 80063b2:	920f      	str	r2, [sp, #60]	; 0x3c
 80063b4:	f8cc 5000 	str.w	r5, [ip]
 80063b8:	f8cc 3004 	str.w	r3, [ip, #4]
 80063bc:	910e      	str	r1, [sp, #56]	; 0x38
 80063be:	dded      	ble.n	800639c <_vfiprintf_r+0x294>
 80063c0:	2a00      	cmp	r2, #0
 80063c2:	f040 82b7 	bne.w	8006934 <_vfiprintf_r+0x82c>
 80063c6:	3c10      	subs	r4, #16
 80063c8:	2c10      	cmp	r4, #16
 80063ca:	4610      	mov	r0, r2
 80063cc:	f04f 0e01 	mov.w	lr, #1
 80063d0:	46dc      	mov	ip, fp
 80063d2:	dceb      	bgt.n	80063ac <_vfiprintf_r+0x2a4>
 80063d4:	46a9      	mov	r9, r5
 80063d6:	4670      	mov	r0, lr
 80063d8:	4645      	mov	r5, r8
 80063da:	46d0      	mov	r8, sl
 80063dc:	46e2      	mov	sl, ip
 80063de:	4422      	add	r2, r4
 80063e0:	2807      	cmp	r0, #7
 80063e2:	920f      	str	r2, [sp, #60]	; 0x3c
 80063e4:	f8ca 9000 	str.w	r9, [sl]
 80063e8:	f8ca 4004 	str.w	r4, [sl, #4]
 80063ec:	900e      	str	r0, [sp, #56]	; 0x38
 80063ee:	f300 8375 	bgt.w	8006adc <_vfiprintf_r+0x9d4>
 80063f2:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 80063f6:	f10a 0a08 	add.w	sl, sl, #8
 80063fa:	f100 0e01 	add.w	lr, r0, #1
 80063fe:	2b00      	cmp	r3, #0
 8006400:	f040 82b0 	bne.w	8006964 <_vfiprintf_r+0x85c>
 8006404:	9b07      	ldr	r3, [sp, #28]
 8006406:	2b00      	cmp	r3, #0
 8006408:	f000 82c3 	beq.w	8006992 <_vfiprintf_r+0x88a>
 800640c:	3202      	adds	r2, #2
 800640e:	a90c      	add	r1, sp, #48	; 0x30
 8006410:	2302      	movs	r3, #2
 8006412:	f1be 0f07 	cmp.w	lr, #7
 8006416:	920f      	str	r2, [sp, #60]	; 0x3c
 8006418:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 800641c:	e88a 000a 	stmia.w	sl, {r1, r3}
 8006420:	f340 8378 	ble.w	8006b14 <_vfiprintf_r+0xa0c>
 8006424:	2a00      	cmp	r2, #0
 8006426:	f040 840a 	bne.w	8006c3e <_vfiprintf_r+0xb36>
 800642a:	9b08      	ldr	r3, [sp, #32]
 800642c:	2b80      	cmp	r3, #128	; 0x80
 800642e:	f04f 0e01 	mov.w	lr, #1
 8006432:	4610      	mov	r0, r2
 8006434:	46da      	mov	sl, fp
 8006436:	f040 82b0 	bne.w	800699a <_vfiprintf_r+0x892>
 800643a:	9b06      	ldr	r3, [sp, #24]
 800643c:	1b5c      	subs	r4, r3, r5
 800643e:	2c00      	cmp	r4, #0
 8006440:	f340 82ab 	ble.w	800699a <_vfiprintf_r+0x892>
 8006444:	2c10      	cmp	r4, #16
 8006446:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 800660c <_vfiprintf_r+0x504>
 800644a:	f340 850b 	ble.w	8006e64 <_vfiprintf_r+0xd5c>
 800644e:	46d6      	mov	lr, sl
 8006450:	2310      	movs	r3, #16
 8006452:	46c2      	mov	sl, r8
 8006454:	46a8      	mov	r8, r5
 8006456:	464d      	mov	r5, r9
 8006458:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800645c:	e007      	b.n	800646e <_vfiprintf_r+0x366>
 800645e:	f100 0c02 	add.w	ip, r0, #2
 8006462:	f10e 0e08 	add.w	lr, lr, #8
 8006466:	4608      	mov	r0, r1
 8006468:	3c10      	subs	r4, #16
 800646a:	2c10      	cmp	r4, #16
 800646c:	dd13      	ble.n	8006496 <_vfiprintf_r+0x38e>
 800646e:	1c41      	adds	r1, r0, #1
 8006470:	3210      	adds	r2, #16
 8006472:	2907      	cmp	r1, #7
 8006474:	920f      	str	r2, [sp, #60]	; 0x3c
 8006476:	f8ce 5000 	str.w	r5, [lr]
 800647a:	f8ce 3004 	str.w	r3, [lr, #4]
 800647e:	910e      	str	r1, [sp, #56]	; 0x38
 8006480:	dded      	ble.n	800645e <_vfiprintf_r+0x356>
 8006482:	2a00      	cmp	r2, #0
 8006484:	f040 8315 	bne.w	8006ab2 <_vfiprintf_r+0x9aa>
 8006488:	3c10      	subs	r4, #16
 800648a:	2c10      	cmp	r4, #16
 800648c:	f04f 0c01 	mov.w	ip, #1
 8006490:	4610      	mov	r0, r2
 8006492:	46de      	mov	lr, fp
 8006494:	dceb      	bgt.n	800646e <_vfiprintf_r+0x366>
 8006496:	46a9      	mov	r9, r5
 8006498:	4645      	mov	r5, r8
 800649a:	46d0      	mov	r8, sl
 800649c:	46f2      	mov	sl, lr
 800649e:	4422      	add	r2, r4
 80064a0:	f1bc 0f07 	cmp.w	ip, #7
 80064a4:	920f      	str	r2, [sp, #60]	; 0x3c
 80064a6:	f8ca 9000 	str.w	r9, [sl]
 80064aa:	f8ca 4004 	str.w	r4, [sl, #4]
 80064ae:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
 80064b2:	f300 83d2 	bgt.w	8006c5a <_vfiprintf_r+0xb52>
 80064b6:	9b01      	ldr	r3, [sp, #4]
 80064b8:	9903      	ldr	r1, [sp, #12]
 80064ba:	1a5c      	subs	r4, r3, r1
 80064bc:	2c00      	cmp	r4, #0
 80064be:	f10a 0a08 	add.w	sl, sl, #8
 80064c2:	f10c 0e01 	add.w	lr, ip, #1
 80064c6:	4660      	mov	r0, ip
 80064c8:	f300 826d 	bgt.w	80069a6 <_vfiprintf_r+0x89e>
 80064cc:	9903      	ldr	r1, [sp, #12]
 80064ce:	f8ca 7000 	str.w	r7, [sl]
 80064d2:	440a      	add	r2, r1
 80064d4:	f1be 0f07 	cmp.w	lr, #7
 80064d8:	920f      	str	r2, [sp, #60]	; 0x3c
 80064da:	f8ca 1004 	str.w	r1, [sl, #4]
 80064de:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 80064e2:	f340 82ce 	ble.w	8006a82 <_vfiprintf_r+0x97a>
 80064e6:	2a00      	cmp	r2, #0
 80064e8:	f040 833a 	bne.w	8006b60 <_vfiprintf_r+0xa58>
 80064ec:	0770      	lsls	r0, r6, #29
 80064ee:	920e      	str	r2, [sp, #56]	; 0x38
 80064f0:	d538      	bpl.n	8006564 <_vfiprintf_r+0x45c>
 80064f2:	9b06      	ldr	r3, [sp, #24]
 80064f4:	1b5c      	subs	r4, r3, r5
 80064f6:	2c00      	cmp	r4, #0
 80064f8:	dd34      	ble.n	8006564 <_vfiprintf_r+0x45c>
 80064fa:	46da      	mov	sl, fp
 80064fc:	2c10      	cmp	r4, #16
 80064fe:	f340 84ab 	ble.w	8006e58 <_vfiprintf_r+0xd50>
 8006502:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8006608 <_vfiprintf_r+0x500>
 8006506:	990e      	ldr	r1, [sp, #56]	; 0x38
 8006508:	464f      	mov	r7, r9
 800650a:	2610      	movs	r6, #16
 800650c:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006510:	e006      	b.n	8006520 <_vfiprintf_r+0x418>
 8006512:	1c88      	adds	r0, r1, #2
 8006514:	f10a 0a08 	add.w	sl, sl, #8
 8006518:	4619      	mov	r1, r3
 800651a:	3c10      	subs	r4, #16
 800651c:	2c10      	cmp	r4, #16
 800651e:	dd13      	ble.n	8006548 <_vfiprintf_r+0x440>
 8006520:	1c4b      	adds	r3, r1, #1
 8006522:	3210      	adds	r2, #16
 8006524:	2b07      	cmp	r3, #7
 8006526:	920f      	str	r2, [sp, #60]	; 0x3c
 8006528:	f8ca 7000 	str.w	r7, [sl]
 800652c:	f8ca 6004 	str.w	r6, [sl, #4]
 8006530:	930e      	str	r3, [sp, #56]	; 0x38
 8006532:	ddee      	ble.n	8006512 <_vfiprintf_r+0x40a>
 8006534:	2a00      	cmp	r2, #0
 8006536:	f040 828e 	bne.w	8006a56 <_vfiprintf_r+0x94e>
 800653a:	3c10      	subs	r4, #16
 800653c:	2c10      	cmp	r4, #16
 800653e:	f04f 0001 	mov.w	r0, #1
 8006542:	4611      	mov	r1, r2
 8006544:	46da      	mov	sl, fp
 8006546:	dceb      	bgt.n	8006520 <_vfiprintf_r+0x418>
 8006548:	46b9      	mov	r9, r7
 800654a:	4422      	add	r2, r4
 800654c:	2807      	cmp	r0, #7
 800654e:	920f      	str	r2, [sp, #60]	; 0x3c
 8006550:	f8ca 9000 	str.w	r9, [sl]
 8006554:	f8ca 4004 	str.w	r4, [sl, #4]
 8006558:	900e      	str	r0, [sp, #56]	; 0x38
 800655a:	f340 829b 	ble.w	8006a94 <_vfiprintf_r+0x98c>
 800655e:	2a00      	cmp	r2, #0
 8006560:	f040 8425 	bne.w	8006dae <_vfiprintf_r+0xca6>
 8006564:	9b02      	ldr	r3, [sp, #8]
 8006566:	9a06      	ldr	r2, [sp, #24]
 8006568:	42aa      	cmp	r2, r5
 800656a:	bfac      	ite	ge
 800656c:	189b      	addge	r3, r3, r2
 800656e:	195b      	addlt	r3, r3, r5
 8006570:	9302      	str	r3, [sp, #8]
 8006572:	e299      	b.n	8006aa8 <_vfiprintf_r+0x9a0>
 8006574:	f046 0680 	orr.w	r6, r6, #128	; 0x80
 8006578:	f898 3000 	ldrb.w	r3, [r8]
 800657c:	e62b      	b.n	80061d6 <_vfiprintf_r+0xce>
 800657e:	9406      	str	r4, [sp, #24]
 8006580:	2900      	cmp	r1, #0
 8006582:	f040 84af 	bne.w	8006ee4 <_vfiprintf_r+0xddc>
 8006586:	f046 0610 	orr.w	r6, r6, #16
 800658a:	06b3      	lsls	r3, r6, #26
 800658c:	f140 8312 	bpl.w	8006bb4 <_vfiprintf_r+0xaac>
 8006590:	9904      	ldr	r1, [sp, #16]
 8006592:	3107      	adds	r1, #7
 8006594:	f021 0107 	bic.w	r1, r1, #7
 8006598:	e9d1 2300 	ldrd	r2, r3, [r1]
 800659c:	3108      	adds	r1, #8
 800659e:	9104      	str	r1, [sp, #16]
 80065a0:	4614      	mov	r4, r2
 80065a2:	461d      	mov	r5, r3
 80065a4:	2a00      	cmp	r2, #0
 80065a6:	f173 0300 	sbcs.w	r3, r3, #0
 80065aa:	f2c0 8386 	blt.w	8006cba <_vfiprintf_r+0xbb2>
 80065ae:	9b01      	ldr	r3, [sp, #4]
 80065b0:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	f2c0 831a 	blt.w	8006bee <_vfiprintf_r+0xae6>
 80065ba:	ea54 0305 	orrs.w	r3, r4, r5
 80065be:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 80065c2:	f000 80ed 	beq.w	80067a0 <_vfiprintf_r+0x698>
 80065c6:	2d00      	cmp	r5, #0
 80065c8:	bf08      	it	eq
 80065ca:	2c0a      	cmpeq	r4, #10
 80065cc:	f0c0 80ed 	bcc.w	80067aa <_vfiprintf_r+0x6a2>
 80065d0:	465f      	mov	r7, fp
 80065d2:	4620      	mov	r0, r4
 80065d4:	4629      	mov	r1, r5
 80065d6:	220a      	movs	r2, #10
 80065d8:	2300      	movs	r3, #0
 80065da:	f000 ff47 	bl	800746c <__aeabi_uldivmod>
 80065de:	3230      	adds	r2, #48	; 0x30
 80065e0:	f807 2d01 	strb.w	r2, [r7, #-1]!
 80065e4:	4620      	mov	r0, r4
 80065e6:	4629      	mov	r1, r5
 80065e8:	2300      	movs	r3, #0
 80065ea:	220a      	movs	r2, #10
 80065ec:	f000 ff3e 	bl	800746c <__aeabi_uldivmod>
 80065f0:	4604      	mov	r4, r0
 80065f2:	460d      	mov	r5, r1
 80065f4:	ea54 0305 	orrs.w	r3, r4, r5
 80065f8:	d1eb      	bne.n	80065d2 <_vfiprintf_r+0x4ca>
 80065fa:	ebc7 030b 	rsb	r3, r7, fp
 80065fe:	9303      	str	r3, [sp, #12]
 8006600:	e6a2      	b.n	8006348 <_vfiprintf_r+0x240>
 8006602:	bf00      	nop
 8006604:	0801c3bc 	.word	0x0801c3bc
 8006608:	0800d160 	.word	0x0800d160
 800660c:	0800d170 	.word	0x0800d170
 8006610:	9406      	str	r4, [sp, #24]
 8006612:	2900      	cmp	r1, #0
 8006614:	f040 8462 	bne.w	8006edc <_vfiprintf_r+0xdd4>
 8006618:	f046 0610 	orr.w	r6, r6, #16
 800661c:	f016 0320 	ands.w	r3, r6, #32
 8006620:	f000 82ae 	beq.w	8006b80 <_vfiprintf_r+0xa78>
 8006624:	9b04      	ldr	r3, [sp, #16]
 8006626:	3307      	adds	r3, #7
 8006628:	f023 0307 	bic.w	r3, r3, #7
 800662c:	f04f 0200 	mov.w	r2, #0
 8006630:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
 8006634:	e9d3 4500 	ldrd	r4, r5, [r3]
 8006638:	f103 0208 	add.w	r2, r3, #8
 800663c:	9b01      	ldr	r3, [sp, #4]
 800663e:	9204      	str	r2, [sp, #16]
 8006640:	2b00      	cmp	r3, #0
 8006642:	f2c0 8174 	blt.w	800692e <_vfiprintf_r+0x826>
 8006646:	ea54 0305 	orrs.w	r3, r4, r5
 800664a:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 800664e:	f040 816e 	bne.w	800692e <_vfiprintf_r+0x826>
 8006652:	9b01      	ldr	r3, [sp, #4]
 8006654:	2b00      	cmp	r3, #0
 8006656:	f000 8430 	beq.w	8006eba <_vfiprintf_r+0xdb2>
 800665a:	f04f 0900 	mov.w	r9, #0
 800665e:	2400      	movs	r4, #0
 8006660:	2500      	movs	r5, #0
 8006662:	465f      	mov	r7, fp
 8006664:	08e2      	lsrs	r2, r4, #3
 8006666:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 800666a:	08e9      	lsrs	r1, r5, #3
 800666c:	f004 0307 	and.w	r3, r4, #7
 8006670:	460d      	mov	r5, r1
 8006672:	4614      	mov	r4, r2
 8006674:	3330      	adds	r3, #48	; 0x30
 8006676:	ea54 0205 	orrs.w	r2, r4, r5
 800667a:	f807 3d01 	strb.w	r3, [r7, #-1]!
 800667e:	d1f1      	bne.n	8006664 <_vfiprintf_r+0x55c>
 8006680:	07f4      	lsls	r4, r6, #31
 8006682:	d5ba      	bpl.n	80065fa <_vfiprintf_r+0x4f2>
 8006684:	2b30      	cmp	r3, #48	; 0x30
 8006686:	d0b8      	beq.n	80065fa <_vfiprintf_r+0x4f2>
 8006688:	2230      	movs	r2, #48	; 0x30
 800668a:	1e7b      	subs	r3, r7, #1
 800668c:	f807 2c01 	strb.w	r2, [r7, #-1]
 8006690:	ebc3 020b 	rsb	r2, r3, fp
 8006694:	9203      	str	r2, [sp, #12]
 8006696:	461f      	mov	r7, r3
 8006698:	e656      	b.n	8006348 <_vfiprintf_r+0x240>
 800669a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800669e:	2400      	movs	r4, #0
 80066a0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80066a4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80066a8:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80066ac:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80066b0:	2a09      	cmp	r2, #9
 80066b2:	d9f5      	bls.n	80066a0 <_vfiprintf_r+0x598>
 80066b4:	e591      	b.n	80061da <_vfiprintf_r+0xd2>
 80066b6:	f898 3000 	ldrb.w	r3, [r8]
 80066ba:	2101      	movs	r1, #1
 80066bc:	202b      	movs	r0, #43	; 0x2b
 80066be:	e58a      	b.n	80061d6 <_vfiprintf_r+0xce>
 80066c0:	f898 3000 	ldrb.w	r3, [r8]
 80066c4:	2b2a      	cmp	r3, #42	; 0x2a
 80066c6:	f108 0501 	add.w	r5, r8, #1
 80066ca:	f000 83dd 	beq.w	8006e88 <_vfiprintf_r+0xd80>
 80066ce:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80066d2:	2a09      	cmp	r2, #9
 80066d4:	46a8      	mov	r8, r5
 80066d6:	bf98      	it	ls
 80066d8:	2500      	movls	r5, #0
 80066da:	f200 83ce 	bhi.w	8006e7a <_vfiprintf_r+0xd72>
 80066de:	f818 3b01 	ldrb.w	r3, [r8], #1
 80066e2:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80066e6:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 80066ea:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80066ee:	2a09      	cmp	r2, #9
 80066f0:	d9f5      	bls.n	80066de <_vfiprintf_r+0x5d6>
 80066f2:	ea45 72e5 	orr.w	r2, r5, r5, asr #31
 80066f6:	9201      	str	r2, [sp, #4]
 80066f8:	e56f      	b.n	80061da <_vfiprintf_r+0xd2>
 80066fa:	9a04      	ldr	r2, [sp, #16]
 80066fc:	6814      	ldr	r4, [r2, #0]
 80066fe:	4613      	mov	r3, r2
 8006700:	2c00      	cmp	r4, #0
 8006702:	f103 0304 	add.w	r3, r3, #4
 8006706:	f6ff aded 	blt.w	80062e4 <_vfiprintf_r+0x1dc>
 800670a:	9304      	str	r3, [sp, #16]
 800670c:	f898 3000 	ldrb.w	r3, [r8]
 8006710:	e561      	b.n	80061d6 <_vfiprintf_r+0xce>
 8006712:	9406      	str	r4, [sp, #24]
 8006714:	2900      	cmp	r1, #0
 8006716:	d081      	beq.n	800661c <_vfiprintf_r+0x514>
 8006718:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
 800671c:	e77e      	b.n	800661c <_vfiprintf_r+0x514>
 800671e:	9a04      	ldr	r2, [sp, #16]
 8006720:	9406      	str	r4, [sp, #24]
 8006722:	6817      	ldr	r7, [r2, #0]
 8006724:	f04f 0300 	mov.w	r3, #0
 8006728:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 800672c:	1d14      	adds	r4, r2, #4
 800672e:	9b01      	ldr	r3, [sp, #4]
 8006730:	2f00      	cmp	r7, #0
 8006732:	f000 8386 	beq.w	8006e42 <_vfiprintf_r+0xd3a>
 8006736:	2b00      	cmp	r3, #0
 8006738:	f2c0 835f 	blt.w	8006dfa <_vfiprintf_r+0xcf2>
 800673c:	461a      	mov	r2, r3
 800673e:	2100      	movs	r1, #0
 8006740:	4638      	mov	r0, r7
 8006742:	f7fe fac5 	bl	8004cd0 <memchr>
 8006746:	2800      	cmp	r0, #0
 8006748:	f000 838f 	beq.w	8006e6a <_vfiprintf_r+0xd62>
 800674c:	1bc3      	subs	r3, r0, r7
 800674e:	9303      	str	r3, [sp, #12]
 8006750:	2300      	movs	r3, #0
 8006752:	9404      	str	r4, [sp, #16]
 8006754:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
 8006758:	9301      	str	r3, [sp, #4]
 800675a:	e5f5      	b.n	8006348 <_vfiprintf_r+0x240>
 800675c:	9406      	str	r4, [sp, #24]
 800675e:	2900      	cmp	r1, #0
 8006760:	f040 83b9 	bne.w	8006ed6 <_vfiprintf_r+0xdce>
 8006764:	f016 0920 	ands.w	r9, r6, #32
 8006768:	d135      	bne.n	80067d6 <_vfiprintf_r+0x6ce>
 800676a:	f016 0310 	ands.w	r3, r6, #16
 800676e:	d103      	bne.n	8006778 <_vfiprintf_r+0x670>
 8006770:	f016 0940 	ands.w	r9, r6, #64	; 0x40
 8006774:	f040 832a 	bne.w	8006dcc <_vfiprintf_r+0xcc4>
 8006778:	9a04      	ldr	r2, [sp, #16]
 800677a:	4613      	mov	r3, r2
 800677c:	6814      	ldr	r4, [r2, #0]
 800677e:	9a01      	ldr	r2, [sp, #4]
 8006780:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
 8006784:	2a00      	cmp	r2, #0
 8006786:	f103 0304 	add.w	r3, r3, #4
 800678a:	f04f 0500 	mov.w	r5, #0
 800678e:	f2c0 8332 	blt.w	8006df6 <_vfiprintf_r+0xcee>
 8006792:	ea54 0205 	orrs.w	r2, r4, r5
 8006796:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 800679a:	9304      	str	r3, [sp, #16]
 800679c:	f47f af13 	bne.w	80065c6 <_vfiprintf_r+0x4be>
 80067a0:	9b01      	ldr	r3, [sp, #4]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	f43f adcc 	beq.w	8006340 <_vfiprintf_r+0x238>
 80067a8:	2400      	movs	r4, #0
 80067aa:	af2a      	add	r7, sp, #168	; 0xa8
 80067ac:	3430      	adds	r4, #48	; 0x30
 80067ae:	f807 4d41 	strb.w	r4, [r7, #-65]!
 80067b2:	ebc7 030b 	rsb	r3, r7, fp
 80067b6:	9303      	str	r3, [sp, #12]
 80067b8:	e5c6      	b.n	8006348 <_vfiprintf_r+0x240>
 80067ba:	f046 0620 	orr.w	r6, r6, #32
 80067be:	f898 3000 	ldrb.w	r3, [r8]
 80067c2:	e508      	b.n	80061d6 <_vfiprintf_r+0xce>
 80067c4:	9406      	str	r4, [sp, #24]
 80067c6:	2900      	cmp	r1, #0
 80067c8:	f040 836e 	bne.w	8006ea8 <_vfiprintf_r+0xda0>
 80067cc:	f046 0610 	orr.w	r6, r6, #16
 80067d0:	f016 0920 	ands.w	r9, r6, #32
 80067d4:	d0c9      	beq.n	800676a <_vfiprintf_r+0x662>
 80067d6:	9b04      	ldr	r3, [sp, #16]
 80067d8:	3307      	adds	r3, #7
 80067da:	f023 0307 	bic.w	r3, r3, #7
 80067de:	f04f 0200 	mov.w	r2, #0
 80067e2:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
 80067e6:	e9d3 4500 	ldrd	r4, r5, [r3]
 80067ea:	f103 0208 	add.w	r2, r3, #8
 80067ee:	9b01      	ldr	r3, [sp, #4]
 80067f0:	9204      	str	r2, [sp, #16]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	f2c0 81f9 	blt.w	8006bea <_vfiprintf_r+0xae2>
 80067f8:	ea54 0305 	orrs.w	r3, r4, r5
 80067fc:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 8006800:	f04f 0900 	mov.w	r9, #0
 8006804:	f47f aedf 	bne.w	80065c6 <_vfiprintf_r+0x4be>
 8006808:	e7ca      	b.n	80067a0 <_vfiprintf_r+0x698>
 800680a:	9406      	str	r4, [sp, #24]
 800680c:	2900      	cmp	r1, #0
 800680e:	f040 8351 	bne.w	8006eb4 <_vfiprintf_r+0xdac>
 8006812:	06b2      	lsls	r2, r6, #26
 8006814:	48ae      	ldr	r0, [pc, #696]	; (8006ad0 <_vfiprintf_r+0x9c8>)
 8006816:	d541      	bpl.n	800689c <_vfiprintf_r+0x794>
 8006818:	9a04      	ldr	r2, [sp, #16]
 800681a:	3207      	adds	r2, #7
 800681c:	f022 0207 	bic.w	r2, r2, #7
 8006820:	e9d2 4500 	ldrd	r4, r5, [r2]
 8006824:	f102 0108 	add.w	r1, r2, #8
 8006828:	9104      	str	r1, [sp, #16]
 800682a:	f016 0901 	ands.w	r9, r6, #1
 800682e:	f000 8177 	beq.w	8006b20 <_vfiprintf_r+0xa18>
 8006832:	ea54 0205 	orrs.w	r2, r4, r5
 8006836:	f040 8226 	bne.w	8006c86 <_vfiprintf_r+0xb7e>
 800683a:	f04f 0300 	mov.w	r3, #0
 800683e:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 8006842:	9b01      	ldr	r3, [sp, #4]
 8006844:	2b00      	cmp	r3, #0
 8006846:	f2c0 8196 	blt.w	8006b76 <_vfiprintf_r+0xa6e>
 800684a:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 800684e:	e572      	b.n	8006336 <_vfiprintf_r+0x22e>
 8006850:	9a04      	ldr	r2, [sp, #16]
 8006852:	9406      	str	r4, [sp, #24]
 8006854:	6813      	ldr	r3, [r2, #0]
 8006856:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 800685a:	4613      	mov	r3, r2
 800685c:	f04f 0100 	mov.w	r1, #0
 8006860:	2501      	movs	r5, #1
 8006862:	3304      	adds	r3, #4
 8006864:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 8006868:	9304      	str	r3, [sp, #16]
 800686a:	9503      	str	r5, [sp, #12]
 800686c:	af10      	add	r7, sp, #64	; 0x40
 800686e:	2300      	movs	r3, #0
 8006870:	9301      	str	r3, [sp, #4]
 8006872:	e573      	b.n	800635c <_vfiprintf_r+0x254>
 8006874:	f898 3000 	ldrb.w	r3, [r8]
 8006878:	2800      	cmp	r0, #0
 800687a:	f47f acac 	bne.w	80061d6 <_vfiprintf_r+0xce>
 800687e:	2101      	movs	r1, #1
 8006880:	2020      	movs	r0, #32
 8006882:	e4a8      	b.n	80061d6 <_vfiprintf_r+0xce>
 8006884:	f046 0601 	orr.w	r6, r6, #1
 8006888:	f898 3000 	ldrb.w	r3, [r8]
 800688c:	e4a3      	b.n	80061d6 <_vfiprintf_r+0xce>
 800688e:	9406      	str	r4, [sp, #24]
 8006890:	2900      	cmp	r1, #0
 8006892:	f040 830c 	bne.w	8006eae <_vfiprintf_r+0xda6>
 8006896:	06b2      	lsls	r2, r6, #26
 8006898:	488e      	ldr	r0, [pc, #568]	; (8006ad4 <_vfiprintf_r+0x9cc>)
 800689a:	d4bd      	bmi.n	8006818 <_vfiprintf_r+0x710>
 800689c:	9904      	ldr	r1, [sp, #16]
 800689e:	06f7      	lsls	r7, r6, #27
 80068a0:	460a      	mov	r2, r1
 80068a2:	f100 819d 	bmi.w	8006be0 <_vfiprintf_r+0xad8>
 80068a6:	0675      	lsls	r5, r6, #25
 80068a8:	f140 819a 	bpl.w	8006be0 <_vfiprintf_r+0xad8>
 80068ac:	3204      	adds	r2, #4
 80068ae:	880c      	ldrh	r4, [r1, #0]
 80068b0:	9204      	str	r2, [sp, #16]
 80068b2:	2500      	movs	r5, #0
 80068b4:	e7b9      	b.n	800682a <_vfiprintf_r+0x722>
 80068b6:	f046 0640 	orr.w	r6, r6, #64	; 0x40
 80068ba:	f898 3000 	ldrb.w	r3, [r8]
 80068be:	e48a      	b.n	80061d6 <_vfiprintf_r+0xce>
 80068c0:	f898 3000 	ldrb.w	r3, [r8]
 80068c4:	2b6c      	cmp	r3, #108	; 0x6c
 80068c6:	bf03      	ittte	eq
 80068c8:	f898 3001 	ldrbeq.w	r3, [r8, #1]
 80068cc:	f046 0620 	orreq.w	r6, r6, #32
 80068d0:	f108 0801 	addeq.w	r8, r8, #1
 80068d4:	f046 0610 	orrne.w	r6, r6, #16
 80068d8:	e47d      	b.n	80061d6 <_vfiprintf_r+0xce>
 80068da:	2900      	cmp	r1, #0
 80068dc:	f040 8309 	bne.w	8006ef2 <_vfiprintf_r+0xdea>
 80068e0:	06b4      	lsls	r4, r6, #26
 80068e2:	f140 821c 	bpl.w	8006d1e <_vfiprintf_r+0xc16>
 80068e6:	9a04      	ldr	r2, [sp, #16]
 80068e8:	9902      	ldr	r1, [sp, #8]
 80068ea:	6813      	ldr	r3, [r2, #0]
 80068ec:	17cd      	asrs	r5, r1, #31
 80068ee:	4608      	mov	r0, r1
 80068f0:	3204      	adds	r2, #4
 80068f2:	4629      	mov	r1, r5
 80068f4:	9204      	str	r2, [sp, #16]
 80068f6:	e9c3 0100 	strd	r0, r1, [r3]
 80068fa:	e436      	b.n	800616a <_vfiprintf_r+0x62>
 80068fc:	9406      	str	r4, [sp, #24]
 80068fe:	2900      	cmp	r1, #0
 8006900:	f43f ae43 	beq.w	800658a <_vfiprintf_r+0x482>
 8006904:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
 8006908:	e63f      	b.n	800658a <_vfiprintf_r+0x482>
 800690a:	9406      	str	r4, [sp, #24]
 800690c:	2900      	cmp	r1, #0
 800690e:	f040 82ed 	bne.w	8006eec <_vfiprintf_r+0xde4>
 8006912:	2b00      	cmp	r3, #0
 8006914:	f000 808f 	beq.w	8006a36 <_vfiprintf_r+0x92e>
 8006918:	2501      	movs	r5, #1
 800691a:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 800691e:	f04f 0300 	mov.w	r3, #0
 8006922:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 8006926:	9503      	str	r5, [sp, #12]
 8006928:	af10      	add	r7, sp, #64	; 0x40
 800692a:	e7a0      	b.n	800686e <_vfiprintf_r+0x766>
 800692c:	9304      	str	r3, [sp, #16]
 800692e:	f04f 0900 	mov.w	r9, #0
 8006932:	e696      	b.n	8006662 <_vfiprintf_r+0x55a>
 8006934:	aa0d      	add	r2, sp, #52	; 0x34
 8006936:	9900      	ldr	r1, [sp, #0]
 8006938:	9309      	str	r3, [sp, #36]	; 0x24
 800693a:	4648      	mov	r0, r9
 800693c:	f7ff fb9e 	bl	800607c <__sprint_r.part.0>
 8006940:	2800      	cmp	r0, #0
 8006942:	d17f      	bne.n	8006a44 <_vfiprintf_r+0x93c>
 8006944:	980e      	ldr	r0, [sp, #56]	; 0x38
 8006946:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006948:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800694a:	f100 0e01 	add.w	lr, r0, #1
 800694e:	46dc      	mov	ip, fp
 8006950:	e529      	b.n	80063a6 <_vfiprintf_r+0x29e>
 8006952:	980e      	ldr	r0, [sp, #56]	; 0x38
 8006954:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006956:	f100 0e01 	add.w	lr, r0, #1
 800695a:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 800695e:	2b00      	cmp	r3, #0
 8006960:	f43f ad50 	beq.w	8006404 <_vfiprintf_r+0x2fc>
 8006964:	3201      	adds	r2, #1
 8006966:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
 800696a:	2301      	movs	r3, #1
 800696c:	f1be 0f07 	cmp.w	lr, #7
 8006970:	920f      	str	r2, [sp, #60]	; 0x3c
 8006972:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 8006976:	e88a 000a 	stmia.w	sl, {r1, r3}
 800697a:	f340 80bf 	ble.w	8006afc <_vfiprintf_r+0x9f4>
 800697e:	2a00      	cmp	r2, #0
 8006980:	f040 814e 	bne.w	8006c20 <_vfiprintf_r+0xb18>
 8006984:	9907      	ldr	r1, [sp, #28]
 8006986:	2900      	cmp	r1, #0
 8006988:	f040 80be 	bne.w	8006b08 <_vfiprintf_r+0xa00>
 800698c:	469e      	mov	lr, r3
 800698e:	4610      	mov	r0, r2
 8006990:	46da      	mov	sl, fp
 8006992:	9b08      	ldr	r3, [sp, #32]
 8006994:	2b80      	cmp	r3, #128	; 0x80
 8006996:	f43f ad50 	beq.w	800643a <_vfiprintf_r+0x332>
 800699a:	9b01      	ldr	r3, [sp, #4]
 800699c:	9903      	ldr	r1, [sp, #12]
 800699e:	1a5c      	subs	r4, r3, r1
 80069a0:	2c00      	cmp	r4, #0
 80069a2:	f77f ad93 	ble.w	80064cc <_vfiprintf_r+0x3c4>
 80069a6:	2c10      	cmp	r4, #16
 80069a8:	f8df 912c 	ldr.w	r9, [pc, #300]	; 8006ad8 <_vfiprintf_r+0x9d0>
 80069ac:	dd25      	ble.n	80069fa <_vfiprintf_r+0x8f2>
 80069ae:	46d4      	mov	ip, sl
 80069b0:	2310      	movs	r3, #16
 80069b2:	46c2      	mov	sl, r8
 80069b4:	46a8      	mov	r8, r5
 80069b6:	464d      	mov	r5, r9
 80069b8:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80069bc:	e007      	b.n	80069ce <_vfiprintf_r+0x8c6>
 80069be:	f100 0e02 	add.w	lr, r0, #2
 80069c2:	f10c 0c08 	add.w	ip, ip, #8
 80069c6:	4608      	mov	r0, r1
 80069c8:	3c10      	subs	r4, #16
 80069ca:	2c10      	cmp	r4, #16
 80069cc:	dd11      	ble.n	80069f2 <_vfiprintf_r+0x8ea>
 80069ce:	1c41      	adds	r1, r0, #1
 80069d0:	3210      	adds	r2, #16
 80069d2:	2907      	cmp	r1, #7
 80069d4:	920f      	str	r2, [sp, #60]	; 0x3c
 80069d6:	f8cc 5000 	str.w	r5, [ip]
 80069da:	f8cc 3004 	str.w	r3, [ip, #4]
 80069de:	910e      	str	r1, [sp, #56]	; 0x38
 80069e0:	dded      	ble.n	80069be <_vfiprintf_r+0x8b6>
 80069e2:	b9d2      	cbnz	r2, 8006a1a <_vfiprintf_r+0x912>
 80069e4:	3c10      	subs	r4, #16
 80069e6:	2c10      	cmp	r4, #16
 80069e8:	f04f 0e01 	mov.w	lr, #1
 80069ec:	4610      	mov	r0, r2
 80069ee:	46dc      	mov	ip, fp
 80069f0:	dced      	bgt.n	80069ce <_vfiprintf_r+0x8c6>
 80069f2:	46a9      	mov	r9, r5
 80069f4:	4645      	mov	r5, r8
 80069f6:	46d0      	mov	r8, sl
 80069f8:	46e2      	mov	sl, ip
 80069fa:	4422      	add	r2, r4
 80069fc:	f1be 0f07 	cmp.w	lr, #7
 8006a00:	920f      	str	r2, [sp, #60]	; 0x3c
 8006a02:	f8ca 9000 	str.w	r9, [sl]
 8006a06:	f8ca 4004 	str.w	r4, [sl, #4]
 8006a0a:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 8006a0e:	dc2e      	bgt.n	8006a6e <_vfiprintf_r+0x966>
 8006a10:	f10a 0a08 	add.w	sl, sl, #8
 8006a14:	f10e 0e01 	add.w	lr, lr, #1
 8006a18:	e558      	b.n	80064cc <_vfiprintf_r+0x3c4>
 8006a1a:	aa0d      	add	r2, sp, #52	; 0x34
 8006a1c:	9900      	ldr	r1, [sp, #0]
 8006a1e:	9301      	str	r3, [sp, #4]
 8006a20:	4648      	mov	r0, r9
 8006a22:	f7ff fb2b 	bl	800607c <__sprint_r.part.0>
 8006a26:	b968      	cbnz	r0, 8006a44 <_vfiprintf_r+0x93c>
 8006a28:	980e      	ldr	r0, [sp, #56]	; 0x38
 8006a2a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006a2c:	9b01      	ldr	r3, [sp, #4]
 8006a2e:	f100 0e01 	add.w	lr, r0, #1
 8006a32:	46dc      	mov	ip, fp
 8006a34:	e7c8      	b.n	80069c8 <_vfiprintf_r+0x8c0>
 8006a36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006a38:	b123      	cbz	r3, 8006a44 <_vfiprintf_r+0x93c>
 8006a3a:	9805      	ldr	r0, [sp, #20]
 8006a3c:	9900      	ldr	r1, [sp, #0]
 8006a3e:	aa0d      	add	r2, sp, #52	; 0x34
 8006a40:	f7ff fb1c 	bl	800607c <__sprint_r.part.0>
 8006a44:	9b00      	ldr	r3, [sp, #0]
 8006a46:	899b      	ldrh	r3, [r3, #12]
 8006a48:	065a      	lsls	r2, r3, #25
 8006a4a:	f100 818b 	bmi.w	8006d64 <_vfiprintf_r+0xc5c>
 8006a4e:	9802      	ldr	r0, [sp, #8]
 8006a50:	b02b      	add	sp, #172	; 0xac
 8006a52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a56:	aa0d      	add	r2, sp, #52	; 0x34
 8006a58:	9900      	ldr	r1, [sp, #0]
 8006a5a:	4648      	mov	r0, r9
 8006a5c:	f7ff fb0e 	bl	800607c <__sprint_r.part.0>
 8006a60:	2800      	cmp	r0, #0
 8006a62:	d1ef      	bne.n	8006a44 <_vfiprintf_r+0x93c>
 8006a64:	990e      	ldr	r1, [sp, #56]	; 0x38
 8006a66:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006a68:	1c48      	adds	r0, r1, #1
 8006a6a:	46da      	mov	sl, fp
 8006a6c:	e555      	b.n	800651a <_vfiprintf_r+0x412>
 8006a6e:	2a00      	cmp	r2, #0
 8006a70:	f040 80fb 	bne.w	8006c6a <_vfiprintf_r+0xb62>
 8006a74:	9a03      	ldr	r2, [sp, #12]
 8006a76:	921b      	str	r2, [sp, #108]	; 0x6c
 8006a78:	2301      	movs	r3, #1
 8006a7a:	920f      	str	r2, [sp, #60]	; 0x3c
 8006a7c:	971a      	str	r7, [sp, #104]	; 0x68
 8006a7e:	930e      	str	r3, [sp, #56]	; 0x38
 8006a80:	46da      	mov	sl, fp
 8006a82:	f10a 0a08 	add.w	sl, sl, #8
 8006a86:	0771      	lsls	r1, r6, #29
 8006a88:	d504      	bpl.n	8006a94 <_vfiprintf_r+0x98c>
 8006a8a:	9b06      	ldr	r3, [sp, #24]
 8006a8c:	1b5c      	subs	r4, r3, r5
 8006a8e:	2c00      	cmp	r4, #0
 8006a90:	f73f ad34 	bgt.w	80064fc <_vfiprintf_r+0x3f4>
 8006a94:	9b02      	ldr	r3, [sp, #8]
 8006a96:	9906      	ldr	r1, [sp, #24]
 8006a98:	42a9      	cmp	r1, r5
 8006a9a:	bfac      	ite	ge
 8006a9c:	185b      	addge	r3, r3, r1
 8006a9e:	195b      	addlt	r3, r3, r5
 8006aa0:	9302      	str	r3, [sp, #8]
 8006aa2:	2a00      	cmp	r2, #0
 8006aa4:	f040 80b3 	bne.w	8006c0e <_vfiprintf_r+0xb06>
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	930e      	str	r3, [sp, #56]	; 0x38
 8006aac:	46da      	mov	sl, fp
 8006aae:	f7ff bb5c 	b.w	800616a <_vfiprintf_r+0x62>
 8006ab2:	aa0d      	add	r2, sp, #52	; 0x34
 8006ab4:	9900      	ldr	r1, [sp, #0]
 8006ab6:	9307      	str	r3, [sp, #28]
 8006ab8:	4648      	mov	r0, r9
 8006aba:	f7ff fadf 	bl	800607c <__sprint_r.part.0>
 8006abe:	2800      	cmp	r0, #0
 8006ac0:	d1c0      	bne.n	8006a44 <_vfiprintf_r+0x93c>
 8006ac2:	980e      	ldr	r0, [sp, #56]	; 0x38
 8006ac4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006ac6:	9b07      	ldr	r3, [sp, #28]
 8006ac8:	f100 0c01 	add.w	ip, r0, #1
 8006acc:	46de      	mov	lr, fp
 8006ace:	e4cb      	b.n	8006468 <_vfiprintf_r+0x360>
 8006ad0:	0801c3a8 	.word	0x0801c3a8
 8006ad4:	0801c3bc 	.word	0x0801c3bc
 8006ad8:	0800d170 	.word	0x0800d170
 8006adc:	2a00      	cmp	r2, #0
 8006ade:	f040 8133 	bne.w	8006d48 <_vfiprintf_r+0xc40>
 8006ae2:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	f000 80f5 	beq.w	8006cd6 <_vfiprintf_r+0xbce>
 8006aec:	2301      	movs	r3, #1
 8006aee:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
 8006af2:	461a      	mov	r2, r3
 8006af4:	931b      	str	r3, [sp, #108]	; 0x6c
 8006af6:	469e      	mov	lr, r3
 8006af8:	911a      	str	r1, [sp, #104]	; 0x68
 8006afa:	46da      	mov	sl, fp
 8006afc:	4670      	mov	r0, lr
 8006afe:	f10a 0a08 	add.w	sl, sl, #8
 8006b02:	f10e 0e01 	add.w	lr, lr, #1
 8006b06:	e47d      	b.n	8006404 <_vfiprintf_r+0x2fc>
 8006b08:	a90c      	add	r1, sp, #48	; 0x30
 8006b0a:	2202      	movs	r2, #2
 8006b0c:	469e      	mov	lr, r3
 8006b0e:	911a      	str	r1, [sp, #104]	; 0x68
 8006b10:	921b      	str	r2, [sp, #108]	; 0x6c
 8006b12:	46da      	mov	sl, fp
 8006b14:	4670      	mov	r0, lr
 8006b16:	f10a 0a08 	add.w	sl, sl, #8
 8006b1a:	f10e 0e01 	add.w	lr, lr, #1
 8006b1e:	e738      	b.n	8006992 <_vfiprintf_r+0x88a>
 8006b20:	9b01      	ldr	r3, [sp, #4]
 8006b22:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	f2c0 812a 	blt.w	8006d80 <_vfiprintf_r+0xc78>
 8006b2c:	ea54 0305 	orrs.w	r3, r4, r5
 8006b30:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 8006b34:	f43f abff 	beq.w	8006336 <_vfiprintf_r+0x22e>
 8006b38:	465f      	mov	r7, fp
 8006b3a:	0923      	lsrs	r3, r4, #4
 8006b3c:	f004 010f 	and.w	r1, r4, #15
 8006b40:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 8006b44:	092a      	lsrs	r2, r5, #4
 8006b46:	461c      	mov	r4, r3
 8006b48:	4615      	mov	r5, r2
 8006b4a:	5c43      	ldrb	r3, [r0, r1]
 8006b4c:	f807 3d01 	strb.w	r3, [r7, #-1]!
 8006b50:	ea54 0305 	orrs.w	r3, r4, r5
 8006b54:	d1f1      	bne.n	8006b3a <_vfiprintf_r+0xa32>
 8006b56:	ebc7 030b 	rsb	r3, r7, fp
 8006b5a:	9303      	str	r3, [sp, #12]
 8006b5c:	f7ff bbf4 	b.w	8006348 <_vfiprintf_r+0x240>
 8006b60:	aa0d      	add	r2, sp, #52	; 0x34
 8006b62:	9900      	ldr	r1, [sp, #0]
 8006b64:	9805      	ldr	r0, [sp, #20]
 8006b66:	f7ff fa89 	bl	800607c <__sprint_r.part.0>
 8006b6a:	2800      	cmp	r0, #0
 8006b6c:	f47f af6a 	bne.w	8006a44 <_vfiprintf_r+0x93c>
 8006b70:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006b72:	46da      	mov	sl, fp
 8006b74:	e787      	b.n	8006a86 <_vfiprintf_r+0x97e>
 8006b76:	f04f 0900 	mov.w	r9, #0
 8006b7a:	2400      	movs	r4, #0
 8006b7c:	2500      	movs	r5, #0
 8006b7e:	e7db      	b.n	8006b38 <_vfiprintf_r+0xa30>
 8006b80:	f016 0210 	ands.w	r2, r6, #16
 8006b84:	f000 80b2 	beq.w	8006cec <_vfiprintf_r+0xbe4>
 8006b88:	9904      	ldr	r1, [sp, #16]
 8006b8a:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 8006b8e:	460a      	mov	r2, r1
 8006b90:	680c      	ldr	r4, [r1, #0]
 8006b92:	9901      	ldr	r1, [sp, #4]
 8006b94:	2900      	cmp	r1, #0
 8006b96:	f102 0204 	add.w	r2, r2, #4
 8006b9a:	f04f 0500 	mov.w	r5, #0
 8006b9e:	f2c0 8159 	blt.w	8006e54 <_vfiprintf_r+0xd4c>
 8006ba2:	ea54 0105 	orrs.w	r1, r4, r5
 8006ba6:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 8006baa:	9204      	str	r2, [sp, #16]
 8006bac:	f43f ad51 	beq.w	8006652 <_vfiprintf_r+0x54a>
 8006bb0:	4699      	mov	r9, r3
 8006bb2:	e556      	b.n	8006662 <_vfiprintf_r+0x55a>
 8006bb4:	06f7      	lsls	r7, r6, #27
 8006bb6:	d40a      	bmi.n	8006bce <_vfiprintf_r+0xac6>
 8006bb8:	0675      	lsls	r5, r6, #25
 8006bba:	d508      	bpl.n	8006bce <_vfiprintf_r+0xac6>
 8006bbc:	9904      	ldr	r1, [sp, #16]
 8006bbe:	f9b1 4000 	ldrsh.w	r4, [r1]
 8006bc2:	3104      	adds	r1, #4
 8006bc4:	17e5      	asrs	r5, r4, #31
 8006bc6:	4622      	mov	r2, r4
 8006bc8:	462b      	mov	r3, r5
 8006bca:	9104      	str	r1, [sp, #16]
 8006bcc:	e4ea      	b.n	80065a4 <_vfiprintf_r+0x49c>
 8006bce:	9a04      	ldr	r2, [sp, #16]
 8006bd0:	6814      	ldr	r4, [r2, #0]
 8006bd2:	4613      	mov	r3, r2
 8006bd4:	3304      	adds	r3, #4
 8006bd6:	17e5      	asrs	r5, r4, #31
 8006bd8:	9304      	str	r3, [sp, #16]
 8006bda:	4622      	mov	r2, r4
 8006bdc:	462b      	mov	r3, r5
 8006bde:	e4e1      	b.n	80065a4 <_vfiprintf_r+0x49c>
 8006be0:	6814      	ldr	r4, [r2, #0]
 8006be2:	3204      	adds	r2, #4
 8006be4:	9204      	str	r2, [sp, #16]
 8006be6:	2500      	movs	r5, #0
 8006be8:	e61f      	b.n	800682a <_vfiprintf_r+0x722>
 8006bea:	f04f 0900 	mov.w	r9, #0
 8006bee:	ea54 0305 	orrs.w	r3, r4, r5
 8006bf2:	f47f ace8 	bne.w	80065c6 <_vfiprintf_r+0x4be>
 8006bf6:	e5d8      	b.n	80067aa <_vfiprintf_r+0x6a2>
 8006bf8:	aa0d      	add	r2, sp, #52	; 0x34
 8006bfa:	9900      	ldr	r1, [sp, #0]
 8006bfc:	9805      	ldr	r0, [sp, #20]
 8006bfe:	f7ff fa3d 	bl	800607c <__sprint_r.part.0>
 8006c02:	2800      	cmp	r0, #0
 8006c04:	f47f af1e 	bne.w	8006a44 <_vfiprintf_r+0x93c>
 8006c08:	46da      	mov	sl, fp
 8006c0a:	f7ff bb48 	b.w	800629e <_vfiprintf_r+0x196>
 8006c0e:	aa0d      	add	r2, sp, #52	; 0x34
 8006c10:	9900      	ldr	r1, [sp, #0]
 8006c12:	9805      	ldr	r0, [sp, #20]
 8006c14:	f7ff fa32 	bl	800607c <__sprint_r.part.0>
 8006c18:	2800      	cmp	r0, #0
 8006c1a:	f43f af45 	beq.w	8006aa8 <_vfiprintf_r+0x9a0>
 8006c1e:	e711      	b.n	8006a44 <_vfiprintf_r+0x93c>
 8006c20:	aa0d      	add	r2, sp, #52	; 0x34
 8006c22:	9900      	ldr	r1, [sp, #0]
 8006c24:	9805      	ldr	r0, [sp, #20]
 8006c26:	f7ff fa29 	bl	800607c <__sprint_r.part.0>
 8006c2a:	2800      	cmp	r0, #0
 8006c2c:	f47f af0a 	bne.w	8006a44 <_vfiprintf_r+0x93c>
 8006c30:	980e      	ldr	r0, [sp, #56]	; 0x38
 8006c32:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006c34:	f100 0e01 	add.w	lr, r0, #1
 8006c38:	46da      	mov	sl, fp
 8006c3a:	f7ff bbe3 	b.w	8006404 <_vfiprintf_r+0x2fc>
 8006c3e:	aa0d      	add	r2, sp, #52	; 0x34
 8006c40:	9900      	ldr	r1, [sp, #0]
 8006c42:	9805      	ldr	r0, [sp, #20]
 8006c44:	f7ff fa1a 	bl	800607c <__sprint_r.part.0>
 8006c48:	2800      	cmp	r0, #0
 8006c4a:	f47f aefb 	bne.w	8006a44 <_vfiprintf_r+0x93c>
 8006c4e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8006c50:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006c52:	f100 0e01 	add.w	lr, r0, #1
 8006c56:	46da      	mov	sl, fp
 8006c58:	e69b      	b.n	8006992 <_vfiprintf_r+0x88a>
 8006c5a:	2a00      	cmp	r2, #0
 8006c5c:	f040 80d8 	bne.w	8006e10 <_vfiprintf_r+0xd08>
 8006c60:	f04f 0e01 	mov.w	lr, #1
 8006c64:	4610      	mov	r0, r2
 8006c66:	46da      	mov	sl, fp
 8006c68:	e697      	b.n	800699a <_vfiprintf_r+0x892>
 8006c6a:	aa0d      	add	r2, sp, #52	; 0x34
 8006c6c:	9900      	ldr	r1, [sp, #0]
 8006c6e:	9805      	ldr	r0, [sp, #20]
 8006c70:	f7ff fa04 	bl	800607c <__sprint_r.part.0>
 8006c74:	2800      	cmp	r0, #0
 8006c76:	f47f aee5 	bne.w	8006a44 <_vfiprintf_r+0x93c>
 8006c7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c7c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006c7e:	f103 0e01 	add.w	lr, r3, #1
 8006c82:	46da      	mov	sl, fp
 8006c84:	e422      	b.n	80064cc <_vfiprintf_r+0x3c4>
 8006c86:	2230      	movs	r2, #48	; 0x30
 8006c88:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
 8006c8c:	9a01      	ldr	r2, [sp, #4]
 8006c8e:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
 8006c92:	2a00      	cmp	r2, #0
 8006c94:	f04f 0300 	mov.w	r3, #0
 8006c98:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 8006c9c:	f046 0302 	orr.w	r3, r6, #2
 8006ca0:	f2c0 80cb 	blt.w	8006e3a <_vfiprintf_r+0xd32>
 8006ca4:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 8006ca8:	f046 0602 	orr.w	r6, r6, #2
 8006cac:	f04f 0900 	mov.w	r9, #0
 8006cb0:	e742      	b.n	8006b38 <_vfiprintf_r+0xa30>
 8006cb2:	f04f 0900 	mov.w	r9, #0
 8006cb6:	4890      	ldr	r0, [pc, #576]	; (8006ef8 <_vfiprintf_r+0xdf0>)
 8006cb8:	e73e      	b.n	8006b38 <_vfiprintf_r+0xa30>
 8006cba:	9b01      	ldr	r3, [sp, #4]
 8006cbc:	4264      	negs	r4, r4
 8006cbe:	f04f 092d 	mov.w	r9, #45	; 0x2d
 8006cc2:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
 8006ccc:	f6ff ac7b 	blt.w	80065c6 <_vfiprintf_r+0x4be>
 8006cd0:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 8006cd4:	e477      	b.n	80065c6 <_vfiprintf_r+0x4be>
 8006cd6:	9b07      	ldr	r3, [sp, #28]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d072      	beq.n	8006dc2 <_vfiprintf_r+0xcba>
 8006cdc:	ab0c      	add	r3, sp, #48	; 0x30
 8006cde:	2202      	movs	r2, #2
 8006ce0:	931a      	str	r3, [sp, #104]	; 0x68
 8006ce2:	921b      	str	r2, [sp, #108]	; 0x6c
 8006ce4:	f04f 0e01 	mov.w	lr, #1
 8006ce8:	46da      	mov	sl, fp
 8006cea:	e713      	b.n	8006b14 <_vfiprintf_r+0xa0c>
 8006cec:	f016 0940 	ands.w	r9, r6, #64	; 0x40
 8006cf0:	d048      	beq.n	8006d84 <_vfiprintf_r+0xc7c>
 8006cf2:	9904      	ldr	r1, [sp, #16]
 8006cf4:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
 8006cf8:	460b      	mov	r3, r1
 8006cfa:	880c      	ldrh	r4, [r1, #0]
 8006cfc:	9901      	ldr	r1, [sp, #4]
 8006cfe:	2900      	cmp	r1, #0
 8006d00:	f103 0304 	add.w	r3, r3, #4
 8006d04:	f04f 0500 	mov.w	r5, #0
 8006d08:	f6ff ae10 	blt.w	800692c <_vfiprintf_r+0x824>
 8006d0c:	ea54 0105 	orrs.w	r1, r4, r5
 8006d10:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 8006d14:	9304      	str	r3, [sp, #16]
 8006d16:	f43f ac9c 	beq.w	8006652 <_vfiprintf_r+0x54a>
 8006d1a:	4691      	mov	r9, r2
 8006d1c:	e4a1      	b.n	8006662 <_vfiprintf_r+0x55a>
 8006d1e:	06f0      	lsls	r0, r6, #27
 8006d20:	d40a      	bmi.n	8006d38 <_vfiprintf_r+0xc30>
 8006d22:	0671      	lsls	r1, r6, #25
 8006d24:	d508      	bpl.n	8006d38 <_vfiprintf_r+0xc30>
 8006d26:	9a04      	ldr	r2, [sp, #16]
 8006d28:	6813      	ldr	r3, [r2, #0]
 8006d2a:	3204      	adds	r2, #4
 8006d2c:	9204      	str	r2, [sp, #16]
 8006d2e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8006d32:	801a      	strh	r2, [r3, #0]
 8006d34:	f7ff ba19 	b.w	800616a <_vfiprintf_r+0x62>
 8006d38:	9a04      	ldr	r2, [sp, #16]
 8006d3a:	6813      	ldr	r3, [r2, #0]
 8006d3c:	3204      	adds	r2, #4
 8006d3e:	9204      	str	r2, [sp, #16]
 8006d40:	9a02      	ldr	r2, [sp, #8]
 8006d42:	601a      	str	r2, [r3, #0]
 8006d44:	f7ff ba11 	b.w	800616a <_vfiprintf_r+0x62>
 8006d48:	aa0d      	add	r2, sp, #52	; 0x34
 8006d4a:	9900      	ldr	r1, [sp, #0]
 8006d4c:	9805      	ldr	r0, [sp, #20]
 8006d4e:	f7ff f995 	bl	800607c <__sprint_r.part.0>
 8006d52:	2800      	cmp	r0, #0
 8006d54:	f47f ae76 	bne.w	8006a44 <_vfiprintf_r+0x93c>
 8006d58:	980e      	ldr	r0, [sp, #56]	; 0x38
 8006d5a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006d5c:	f100 0e01 	add.w	lr, r0, #1
 8006d60:	46da      	mov	sl, fp
 8006d62:	e5fa      	b.n	800695a <_vfiprintf_r+0x852>
 8006d64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d68:	f7ff bab6 	b.w	80062d8 <_vfiprintf_r+0x1d0>
 8006d6c:	4862      	ldr	r0, [pc, #392]	; (8006ef8 <_vfiprintf_r+0xdf0>)
 8006d6e:	4616      	mov	r6, r2
 8006d70:	ea54 0205 	orrs.w	r2, r4, r5
 8006d74:	9304      	str	r3, [sp, #16]
 8006d76:	f04f 0900 	mov.w	r9, #0
 8006d7a:	f47f aedd 	bne.w	8006b38 <_vfiprintf_r+0xa30>
 8006d7e:	e6fc      	b.n	8006b7a <_vfiprintf_r+0xa72>
 8006d80:	9b04      	ldr	r3, [sp, #16]
 8006d82:	e7f5      	b.n	8006d70 <_vfiprintf_r+0xc68>
 8006d84:	9a04      	ldr	r2, [sp, #16]
 8006d86:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
 8006d8a:	4613      	mov	r3, r2
 8006d8c:	6814      	ldr	r4, [r2, #0]
 8006d8e:	9a01      	ldr	r2, [sp, #4]
 8006d90:	2a00      	cmp	r2, #0
 8006d92:	f103 0304 	add.w	r3, r3, #4
 8006d96:	f04f 0500 	mov.w	r5, #0
 8006d9a:	f6ff adc7 	blt.w	800692c <_vfiprintf_r+0x824>
 8006d9e:	ea54 0205 	orrs.w	r2, r4, r5
 8006da2:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 8006da6:	9304      	str	r3, [sp, #16]
 8006da8:	f47f ac5b 	bne.w	8006662 <_vfiprintf_r+0x55a>
 8006dac:	e451      	b.n	8006652 <_vfiprintf_r+0x54a>
 8006dae:	aa0d      	add	r2, sp, #52	; 0x34
 8006db0:	9900      	ldr	r1, [sp, #0]
 8006db2:	9805      	ldr	r0, [sp, #20]
 8006db4:	f7ff f962 	bl	800607c <__sprint_r.part.0>
 8006db8:	2800      	cmp	r0, #0
 8006dba:	f47f ae43 	bne.w	8006a44 <_vfiprintf_r+0x93c>
 8006dbe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006dc0:	e668      	b.n	8006a94 <_vfiprintf_r+0x98c>
 8006dc2:	4610      	mov	r0, r2
 8006dc4:	f04f 0e01 	mov.w	lr, #1
 8006dc8:	46da      	mov	sl, fp
 8006dca:	e5e6      	b.n	800699a <_vfiprintf_r+0x892>
 8006dcc:	9904      	ldr	r1, [sp, #16]
 8006dce:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 8006dd2:	460a      	mov	r2, r1
 8006dd4:	880c      	ldrh	r4, [r1, #0]
 8006dd6:	9901      	ldr	r1, [sp, #4]
 8006dd8:	2900      	cmp	r1, #0
 8006dda:	f102 0204 	add.w	r2, r2, #4
 8006dde:	f04f 0500 	mov.w	r5, #0
 8006de2:	db4e      	blt.n	8006e82 <_vfiprintf_r+0xd7a>
 8006de4:	ea54 0105 	orrs.w	r1, r4, r5
 8006de8:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 8006dec:	9204      	str	r2, [sp, #16]
 8006dee:	4699      	mov	r9, r3
 8006df0:	f47f abe9 	bne.w	80065c6 <_vfiprintf_r+0x4be>
 8006df4:	e4d4      	b.n	80067a0 <_vfiprintf_r+0x698>
 8006df6:	9304      	str	r3, [sp, #16]
 8006df8:	e6f9      	b.n	8006bee <_vfiprintf_r+0xae6>
 8006dfa:	4638      	mov	r0, r7
 8006dfc:	9404      	str	r4, [sp, #16]
 8006dfe:	f7fa f8df 	bl	8000fc0 <strlen>
 8006e02:	2300      	movs	r3, #0
 8006e04:	9003      	str	r0, [sp, #12]
 8006e06:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
 8006e0a:	9301      	str	r3, [sp, #4]
 8006e0c:	f7ff ba9c 	b.w	8006348 <_vfiprintf_r+0x240>
 8006e10:	aa0d      	add	r2, sp, #52	; 0x34
 8006e12:	9900      	ldr	r1, [sp, #0]
 8006e14:	9805      	ldr	r0, [sp, #20]
 8006e16:	f7ff f931 	bl	800607c <__sprint_r.part.0>
 8006e1a:	2800      	cmp	r0, #0
 8006e1c:	f47f ae12 	bne.w	8006a44 <_vfiprintf_r+0x93c>
 8006e20:	980e      	ldr	r0, [sp, #56]	; 0x38
 8006e22:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006e24:	f100 0e01 	add.w	lr, r0, #1
 8006e28:	46da      	mov	sl, fp
 8006e2a:	e5b6      	b.n	800699a <_vfiprintf_r+0x892>
 8006e2c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8006e2e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006e30:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 8006f00 <_vfiprintf_r+0xdf8>
 8006e34:	3001      	adds	r0, #1
 8006e36:	f7ff bad2 	b.w	80063de <_vfiprintf_r+0x2d6>
 8006e3a:	461e      	mov	r6, r3
 8006e3c:	f04f 0900 	mov.w	r9, #0
 8006e40:	e67a      	b.n	8006b38 <_vfiprintf_r+0xa30>
 8006e42:	2b06      	cmp	r3, #6
 8006e44:	bf28      	it	cs
 8006e46:	2306      	movcs	r3, #6
 8006e48:	9303      	str	r3, [sp, #12]
 8006e4a:	9404      	str	r4, [sp, #16]
 8006e4c:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8006e50:	4f2a      	ldr	r7, [pc, #168]	; (8006efc <_vfiprintf_r+0xdf4>)
 8006e52:	e50c      	b.n	800686e <_vfiprintf_r+0x766>
 8006e54:	9204      	str	r2, [sp, #16]
 8006e56:	e56a      	b.n	800692e <_vfiprintf_r+0x826>
 8006e58:	980e      	ldr	r0, [sp, #56]	; 0x38
 8006e5a:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8006f00 <_vfiprintf_r+0xdf8>
 8006e5e:	3001      	adds	r0, #1
 8006e60:	f7ff bb73 	b.w	800654a <_vfiprintf_r+0x442>
 8006e64:	46f4      	mov	ip, lr
 8006e66:	f7ff bb1a 	b.w	800649e <_vfiprintf_r+0x396>
 8006e6a:	9b01      	ldr	r3, [sp, #4]
 8006e6c:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
 8006e70:	9303      	str	r3, [sp, #12]
 8006e72:	9404      	str	r4, [sp, #16]
 8006e74:	9001      	str	r0, [sp, #4]
 8006e76:	f7ff ba67 	b.w	8006348 <_vfiprintf_r+0x240>
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	9201      	str	r2, [sp, #4]
 8006e7e:	f7ff b9ac 	b.w	80061da <_vfiprintf_r+0xd2>
 8006e82:	9204      	str	r2, [sp, #16]
 8006e84:	4699      	mov	r9, r3
 8006e86:	e6b2      	b.n	8006bee <_vfiprintf_r+0xae6>
 8006e88:	9a04      	ldr	r2, [sp, #16]
 8006e8a:	6813      	ldr	r3, [r2, #0]
 8006e8c:	9301      	str	r3, [sp, #4]
 8006e8e:	3204      	adds	r2, #4
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	9204      	str	r2, [sp, #16]
 8006e94:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006e98:	46a8      	mov	r8, r5
 8006e9a:	f6bf a99c 	bge.w	80061d6 <_vfiprintf_r+0xce>
 8006e9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006ea2:	9201      	str	r2, [sp, #4]
 8006ea4:	f7ff b997 	b.w	80061d6 <_vfiprintf_r+0xce>
 8006ea8:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
 8006eac:	e48e      	b.n	80067cc <_vfiprintf_r+0x6c4>
 8006eae:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
 8006eb2:	e4f0      	b.n	8006896 <_vfiprintf_r+0x78e>
 8006eb4:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
 8006eb8:	e4ab      	b.n	8006812 <_vfiprintf_r+0x70a>
 8006eba:	4699      	mov	r9, r3
 8006ebc:	07f3      	lsls	r3, r6, #31
 8006ebe:	d505      	bpl.n	8006ecc <_vfiprintf_r+0xdc4>
 8006ec0:	af2a      	add	r7, sp, #168	; 0xa8
 8006ec2:	2330      	movs	r3, #48	; 0x30
 8006ec4:	f807 3d41 	strb.w	r3, [r7, #-65]!
 8006ec8:	f7ff bb97 	b.w	80065fa <_vfiprintf_r+0x4f2>
 8006ecc:	9b01      	ldr	r3, [sp, #4]
 8006ece:	9303      	str	r3, [sp, #12]
 8006ed0:	465f      	mov	r7, fp
 8006ed2:	f7ff ba39 	b.w	8006348 <_vfiprintf_r+0x240>
 8006ed6:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
 8006eda:	e443      	b.n	8006764 <_vfiprintf_r+0x65c>
 8006edc:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
 8006ee0:	f7ff bb9a 	b.w	8006618 <_vfiprintf_r+0x510>
 8006ee4:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
 8006ee8:	f7ff bb4d 	b.w	8006586 <_vfiprintf_r+0x47e>
 8006eec:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
 8006ef0:	e50f      	b.n	8006912 <_vfiprintf_r+0x80a>
 8006ef2:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
 8006ef6:	e4f3      	b.n	80068e0 <_vfiprintf_r+0x7d8>
 8006ef8:	0801c3bc 	.word	0x0801c3bc
 8006efc:	0801c3d0 	.word	0x0801c3d0
 8006f00:	0800d160 	.word	0x0800d160

08006f04 <vfiprintf>:
 8006f04:	b410      	push	{r4}
 8006f06:	4c04      	ldr	r4, [pc, #16]	; (8006f18 <vfiprintf+0x14>)
 8006f08:	4613      	mov	r3, r2
 8006f0a:	460a      	mov	r2, r1
 8006f0c:	4601      	mov	r1, r0
 8006f0e:	6820      	ldr	r0, [r4, #0]
 8006f10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f14:	f7ff b8f8 	b.w	8006108 <_vfiprintf_r>
 8006f18:	20000008 	.word	0x20000008

08006f1c <__sbprintf>:
 8006f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f1e:	460c      	mov	r4, r1
 8006f20:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 8006f24:	8989      	ldrh	r1, [r1, #12]
 8006f26:	6e66      	ldr	r6, [r4, #100]	; 0x64
 8006f28:	89e5      	ldrh	r5, [r4, #14]
 8006f2a:	9619      	str	r6, [sp, #100]	; 0x64
 8006f2c:	f021 0102 	bic.w	r1, r1, #2
 8006f30:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006f32:	f8ad 500e 	strh.w	r5, [sp, #14]
 8006f36:	2500      	movs	r5, #0
 8006f38:	69e7      	ldr	r7, [r4, #28]
 8006f3a:	f8ad 100c 	strh.w	r1, [sp, #12]
 8006f3e:	9609      	str	r6, [sp, #36]	; 0x24
 8006f40:	9506      	str	r5, [sp, #24]
 8006f42:	ae1a      	add	r6, sp, #104	; 0x68
 8006f44:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8006f48:	4669      	mov	r1, sp
 8006f4a:	9600      	str	r6, [sp, #0]
 8006f4c:	9604      	str	r6, [sp, #16]
 8006f4e:	9502      	str	r5, [sp, #8]
 8006f50:	9505      	str	r5, [sp, #20]
 8006f52:	9707      	str	r7, [sp, #28]
 8006f54:	4606      	mov	r6, r0
 8006f56:	f7ff f8d7 	bl	8006108 <_vfiprintf_r>
 8006f5a:	1e05      	subs	r5, r0, #0
 8006f5c:	db07      	blt.n	8006f6e <__sbprintf+0x52>
 8006f5e:	4630      	mov	r0, r6
 8006f60:	4669      	mov	r1, sp
 8006f62:	f7fc feff 	bl	8003d64 <_fflush_r>
 8006f66:	2800      	cmp	r0, #0
 8006f68:	bf18      	it	ne
 8006f6a:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 8006f6e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8006f72:	065b      	lsls	r3, r3, #25
 8006f74:	d503      	bpl.n	8006f7e <__sbprintf+0x62>
 8006f76:	89a3      	ldrh	r3, [r4, #12]
 8006f78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f7c:	81a3      	strh	r3, [r4, #12]
 8006f7e:	4628      	mov	r0, r5
 8006f80:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 8006f84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f86:	bf00      	nop

08006f88 <__swbuf_r>:
 8006f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f8a:	460d      	mov	r5, r1
 8006f8c:	4614      	mov	r4, r2
 8006f8e:	4606      	mov	r6, r0
 8006f90:	b110      	cbz	r0, 8006f98 <__swbuf_r+0x10>
 8006f92:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d04a      	beq.n	800702e <__swbuf_r+0xa6>
 8006f98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006f9c:	69a3      	ldr	r3, [r4, #24]
 8006f9e:	60a3      	str	r3, [r4, #8]
 8006fa0:	b291      	uxth	r1, r2
 8006fa2:	0708      	lsls	r0, r1, #28
 8006fa4:	d538      	bpl.n	8007018 <__swbuf_r+0x90>
 8006fa6:	6923      	ldr	r3, [r4, #16]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d035      	beq.n	8007018 <__swbuf_r+0x90>
 8006fac:	0489      	lsls	r1, r1, #18
 8006fae:	b2ef      	uxtb	r7, r5
 8006fb0:	d515      	bpl.n	8006fde <__swbuf_r+0x56>
 8006fb2:	6822      	ldr	r2, [r4, #0]
 8006fb4:	6961      	ldr	r1, [r4, #20]
 8006fb6:	1ad3      	subs	r3, r2, r3
 8006fb8:	428b      	cmp	r3, r1
 8006fba:	da1c      	bge.n	8006ff6 <__swbuf_r+0x6e>
 8006fbc:	3301      	adds	r3, #1
 8006fbe:	68a1      	ldr	r1, [r4, #8]
 8006fc0:	1c50      	adds	r0, r2, #1
 8006fc2:	3901      	subs	r1, #1
 8006fc4:	60a1      	str	r1, [r4, #8]
 8006fc6:	6020      	str	r0, [r4, #0]
 8006fc8:	7015      	strb	r5, [r2, #0]
 8006fca:	6962      	ldr	r2, [r4, #20]
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d01a      	beq.n	8007006 <__swbuf_r+0x7e>
 8006fd0:	89a3      	ldrh	r3, [r4, #12]
 8006fd2:	07db      	lsls	r3, r3, #31
 8006fd4:	d501      	bpl.n	8006fda <__swbuf_r+0x52>
 8006fd6:	2f0a      	cmp	r7, #10
 8006fd8:	d015      	beq.n	8007006 <__swbuf_r+0x7e>
 8006fda:	4638      	mov	r0, r7
 8006fdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fde:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8006fe0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006fe4:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8006fe8:	81a2      	strh	r2, [r4, #12]
 8006fea:	6822      	ldr	r2, [r4, #0]
 8006fec:	6661      	str	r1, [r4, #100]	; 0x64
 8006fee:	6961      	ldr	r1, [r4, #20]
 8006ff0:	1ad3      	subs	r3, r2, r3
 8006ff2:	428b      	cmp	r3, r1
 8006ff4:	dbe2      	blt.n	8006fbc <__swbuf_r+0x34>
 8006ff6:	4621      	mov	r1, r4
 8006ff8:	4630      	mov	r0, r6
 8006ffa:	f7fc feb3 	bl	8003d64 <_fflush_r>
 8006ffe:	b940      	cbnz	r0, 8007012 <__swbuf_r+0x8a>
 8007000:	6822      	ldr	r2, [r4, #0]
 8007002:	2301      	movs	r3, #1
 8007004:	e7db      	b.n	8006fbe <__swbuf_r+0x36>
 8007006:	4621      	mov	r1, r4
 8007008:	4630      	mov	r0, r6
 800700a:	f7fc feab 	bl	8003d64 <_fflush_r>
 800700e:	2800      	cmp	r0, #0
 8007010:	d0e3      	beq.n	8006fda <__swbuf_r+0x52>
 8007012:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007016:	e7e0      	b.n	8006fda <__swbuf_r+0x52>
 8007018:	4621      	mov	r1, r4
 800701a:	4630      	mov	r0, r6
 800701c:	f7fb fd9a 	bl	8002b54 <__swsetup_r>
 8007020:	2800      	cmp	r0, #0
 8007022:	d1f6      	bne.n	8007012 <__swbuf_r+0x8a>
 8007024:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007028:	6923      	ldr	r3, [r4, #16]
 800702a:	b291      	uxth	r1, r2
 800702c:	e7be      	b.n	8006fac <__swbuf_r+0x24>
 800702e:	f7fc ffa9 	bl	8003f84 <__sinit>
 8007032:	e7b1      	b.n	8006f98 <__swbuf_r+0x10>

08007034 <__swbuf>:
 8007034:	4b02      	ldr	r3, [pc, #8]	; (8007040 <__swbuf+0xc>)
 8007036:	460a      	mov	r2, r1
 8007038:	4601      	mov	r1, r0
 800703a:	6818      	ldr	r0, [r3, #0]
 800703c:	f7ff bfa4 	b.w	8006f88 <__swbuf_r>
 8007040:	20000008 	.word	0x20000008

08007044 <_calloc_r>:
 8007044:	b510      	push	{r4, lr}
 8007046:	fb02 f101 	mul.w	r1, r2, r1
 800704a:	f7fd fb87 	bl	800475c <_malloc_r>
 800704e:	4604      	mov	r4, r0
 8007050:	b1d8      	cbz	r0, 800708a <_calloc_r+0x46>
 8007052:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8007056:	f022 0203 	bic.w	r2, r2, #3
 800705a:	3a04      	subs	r2, #4
 800705c:	2a24      	cmp	r2, #36	; 0x24
 800705e:	d818      	bhi.n	8007092 <_calloc_r+0x4e>
 8007060:	2a13      	cmp	r2, #19
 8007062:	d914      	bls.n	800708e <_calloc_r+0x4a>
 8007064:	2300      	movs	r3, #0
 8007066:	2a1b      	cmp	r2, #27
 8007068:	6003      	str	r3, [r0, #0]
 800706a:	6043      	str	r3, [r0, #4]
 800706c:	d916      	bls.n	800709c <_calloc_r+0x58>
 800706e:	2a24      	cmp	r2, #36	; 0x24
 8007070:	6083      	str	r3, [r0, #8]
 8007072:	60c3      	str	r3, [r0, #12]
 8007074:	bf11      	iteee	ne
 8007076:	f100 0210 	addne.w	r2, r0, #16
 800707a:	6103      	streq	r3, [r0, #16]
 800707c:	6143      	streq	r3, [r0, #20]
 800707e:	f100 0218 	addeq.w	r2, r0, #24
 8007082:	2300      	movs	r3, #0
 8007084:	6013      	str	r3, [r2, #0]
 8007086:	6053      	str	r3, [r2, #4]
 8007088:	6093      	str	r3, [r2, #8]
 800708a:	4620      	mov	r0, r4
 800708c:	bd10      	pop	{r4, pc}
 800708e:	4602      	mov	r2, r0
 8007090:	e7f7      	b.n	8007082 <_calloc_r+0x3e>
 8007092:	2100      	movs	r1, #0
 8007094:	f7f9 fd9a 	bl	8000bcc <memset>
 8007098:	4620      	mov	r0, r4
 800709a:	bd10      	pop	{r4, pc}
 800709c:	f100 0208 	add.w	r2, r0, #8
 80070a0:	e7ef      	b.n	8007082 <_calloc_r+0x3e>
 80070a2:	bf00      	nop

080070a4 <_fclose_r>:
 80070a4:	2900      	cmp	r1, #0
 80070a6:	d03d      	beq.n	8007124 <_fclose_r+0x80>
 80070a8:	b570      	push	{r4, r5, r6, lr}
 80070aa:	4605      	mov	r5, r0
 80070ac:	460c      	mov	r4, r1
 80070ae:	b108      	cbz	r0, 80070b4 <_fclose_r+0x10>
 80070b0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80070b2:	b37b      	cbz	r3, 8007114 <_fclose_r+0x70>
 80070b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070b8:	b90b      	cbnz	r3, 80070be <_fclose_r+0x1a>
 80070ba:	2000      	movs	r0, #0
 80070bc:	bd70      	pop	{r4, r5, r6, pc}
 80070be:	4621      	mov	r1, r4
 80070c0:	4628      	mov	r0, r5
 80070c2:	f7fc fdab 	bl	8003c1c <__sflush_r>
 80070c6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80070c8:	4606      	mov	r6, r0
 80070ca:	b133      	cbz	r3, 80070da <_fclose_r+0x36>
 80070cc:	69e1      	ldr	r1, [r4, #28]
 80070ce:	4628      	mov	r0, r5
 80070d0:	4798      	blx	r3
 80070d2:	2800      	cmp	r0, #0
 80070d4:	bfb8      	it	lt
 80070d6:	f04f 36ff 	movlt.w	r6, #4294967295	; 0xffffffff
 80070da:	89a3      	ldrh	r3, [r4, #12]
 80070dc:	061b      	lsls	r3, r3, #24
 80070de:	d41c      	bmi.n	800711a <_fclose_r+0x76>
 80070e0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80070e2:	b141      	cbz	r1, 80070f6 <_fclose_r+0x52>
 80070e4:	f104 0340 	add.w	r3, r4, #64	; 0x40
 80070e8:	4299      	cmp	r1, r3
 80070ea:	d002      	beq.n	80070f2 <_fclose_r+0x4e>
 80070ec:	4628      	mov	r0, r5
 80070ee:	f7fc ffb7 	bl	8004060 <_free_r>
 80070f2:	2300      	movs	r3, #0
 80070f4:	6323      	str	r3, [r4, #48]	; 0x30
 80070f6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80070f8:	b121      	cbz	r1, 8007104 <_fclose_r+0x60>
 80070fa:	4628      	mov	r0, r5
 80070fc:	f7fc ffb0 	bl	8004060 <_free_r>
 8007100:	2300      	movs	r3, #0
 8007102:	6463      	str	r3, [r4, #68]	; 0x44
 8007104:	f7fc ff42 	bl	8003f8c <__sfp_lock_acquire>
 8007108:	2300      	movs	r3, #0
 800710a:	81a3      	strh	r3, [r4, #12]
 800710c:	f7fc ff40 	bl	8003f90 <__sfp_lock_release>
 8007110:	4630      	mov	r0, r6
 8007112:	bd70      	pop	{r4, r5, r6, pc}
 8007114:	f7fc ff36 	bl	8003f84 <__sinit>
 8007118:	e7cc      	b.n	80070b4 <_fclose_r+0x10>
 800711a:	6921      	ldr	r1, [r4, #16]
 800711c:	4628      	mov	r0, r5
 800711e:	f7fc ff9f 	bl	8004060 <_free_r>
 8007122:	e7dd      	b.n	80070e0 <_fclose_r+0x3c>
 8007124:	2000      	movs	r0, #0
 8007126:	4770      	bx	lr

08007128 <fclose>:
 8007128:	4b02      	ldr	r3, [pc, #8]	; (8007134 <fclose+0xc>)
 800712a:	4601      	mov	r1, r0
 800712c:	6818      	ldr	r0, [r3, #0]
 800712e:	f7ff bfb9 	b.w	80070a4 <_fclose_r>
 8007132:	bf00      	nop
 8007134:	20000008 	.word	0x20000008

08007138 <__fputwc>:
 8007138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800713c:	b082      	sub	sp, #8
 800713e:	4680      	mov	r8, r0
 8007140:	4689      	mov	r9, r1
 8007142:	4614      	mov	r4, r2
 8007144:	f7fd fa6a 	bl	800461c <__locale_mb_cur_max>
 8007148:	2801      	cmp	r0, #1
 800714a:	d033      	beq.n	80071b4 <__fputwc+0x7c>
 800714c:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 8007150:	464a      	mov	r2, r9
 8007152:	a901      	add	r1, sp, #4
 8007154:	4640      	mov	r0, r8
 8007156:	f000 f86f 	bl	8007238 <_wcrtomb_r>
 800715a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800715e:	4682      	mov	sl, r0
 8007160:	d021      	beq.n	80071a6 <__fputwc+0x6e>
 8007162:	b388      	cbz	r0, 80071c8 <__fputwc+0x90>
 8007164:	f89d 6004 	ldrb.w	r6, [sp, #4]
 8007168:	2500      	movs	r5, #0
 800716a:	e008      	b.n	800717e <__fputwc+0x46>
 800716c:	6823      	ldr	r3, [r4, #0]
 800716e:	1c5a      	adds	r2, r3, #1
 8007170:	6022      	str	r2, [r4, #0]
 8007172:	701e      	strb	r6, [r3, #0]
 8007174:	3501      	adds	r5, #1
 8007176:	4555      	cmp	r5, sl
 8007178:	d226      	bcs.n	80071c8 <__fputwc+0x90>
 800717a:	ab01      	add	r3, sp, #4
 800717c:	5d5e      	ldrb	r6, [r3, r5]
 800717e:	68a3      	ldr	r3, [r4, #8]
 8007180:	3b01      	subs	r3, #1
 8007182:	2b00      	cmp	r3, #0
 8007184:	60a3      	str	r3, [r4, #8]
 8007186:	daf1      	bge.n	800716c <__fputwc+0x34>
 8007188:	69a7      	ldr	r7, [r4, #24]
 800718a:	42bb      	cmp	r3, r7
 800718c:	4631      	mov	r1, r6
 800718e:	4622      	mov	r2, r4
 8007190:	4640      	mov	r0, r8
 8007192:	db01      	blt.n	8007198 <__fputwc+0x60>
 8007194:	2e0a      	cmp	r6, #10
 8007196:	d1e9      	bne.n	800716c <__fputwc+0x34>
 8007198:	f7ff fef6 	bl	8006f88 <__swbuf_r>
 800719c:	1c43      	adds	r3, r0, #1
 800719e:	d1e9      	bne.n	8007174 <__fputwc+0x3c>
 80071a0:	b002      	add	sp, #8
 80071a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071a6:	89a3      	ldrh	r3, [r4, #12]
 80071a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071ac:	81a3      	strh	r3, [r4, #12]
 80071ae:	b002      	add	sp, #8
 80071b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071b4:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 80071b8:	2bfe      	cmp	r3, #254	; 0xfe
 80071ba:	d8c7      	bhi.n	800714c <__fputwc+0x14>
 80071bc:	fa5f f689 	uxtb.w	r6, r9
 80071c0:	4682      	mov	sl, r0
 80071c2:	f88d 6004 	strb.w	r6, [sp, #4]
 80071c6:	e7cf      	b.n	8007168 <__fputwc+0x30>
 80071c8:	4648      	mov	r0, r9
 80071ca:	b002      	add	sp, #8
 80071cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080071d0 <_fputwc_r>:
 80071d0:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 80071d4:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80071d8:	d10b      	bne.n	80071f2 <_fputwc_r+0x22>
 80071da:	b410      	push	{r4}
 80071dc:	6e54      	ldr	r4, [r2, #100]	; 0x64
 80071de:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80071e2:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 80071e6:	6654      	str	r4, [r2, #100]	; 0x64
 80071e8:	8193      	strh	r3, [r2, #12]
 80071ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80071ee:	f7ff bfa3 	b.w	8007138 <__fputwc>
 80071f2:	f7ff bfa1 	b.w	8007138 <__fputwc>
 80071f6:	bf00      	nop

080071f8 <fputwc>:
 80071f8:	4b0e      	ldr	r3, [pc, #56]	; (8007234 <fputwc+0x3c>)
 80071fa:	b570      	push	{r4, r5, r6, lr}
 80071fc:	681d      	ldr	r5, [r3, #0]
 80071fe:	4606      	mov	r6, r0
 8007200:	460c      	mov	r4, r1
 8007202:	b10d      	cbz	r5, 8007208 <fputwc+0x10>
 8007204:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8007206:	b18b      	cbz	r3, 800722c <fputwc+0x34>
 8007208:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800720c:	049a      	lsls	r2, r3, #18
 800720e:	d406      	bmi.n	800721e <fputwc+0x26>
 8007210:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007212:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007216:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800721a:	81a3      	strh	r3, [r4, #12]
 800721c:	6662      	str	r2, [r4, #100]	; 0x64
 800721e:	4622      	mov	r2, r4
 8007220:	4631      	mov	r1, r6
 8007222:	4628      	mov	r0, r5
 8007224:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007228:	f7ff bf86 	b.w	8007138 <__fputwc>
 800722c:	4628      	mov	r0, r5
 800722e:	f7fc fea9 	bl	8003f84 <__sinit>
 8007232:	e7e9      	b.n	8007208 <fputwc+0x10>
 8007234:	20000008 	.word	0x20000008

08007238 <_wcrtomb_r>:
 8007238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800723c:	4605      	mov	r5, r0
 800723e:	b086      	sub	sp, #24
 8007240:	461e      	mov	r6, r3
 8007242:	460c      	mov	r4, r1
 8007244:	b1a1      	cbz	r1, 8007270 <_wcrtomb_r+0x38>
 8007246:	4b10      	ldr	r3, [pc, #64]	; (8007288 <_wcrtomb_r+0x50>)
 8007248:	4617      	mov	r7, r2
 800724a:	f8d3 8000 	ldr.w	r8, [r3]
 800724e:	f7fd f9e1 	bl	8004614 <__locale_charset>
 8007252:	9600      	str	r6, [sp, #0]
 8007254:	4603      	mov	r3, r0
 8007256:	463a      	mov	r2, r7
 8007258:	4621      	mov	r1, r4
 800725a:	4628      	mov	r0, r5
 800725c:	47c0      	blx	r8
 800725e:	1c43      	adds	r3, r0, #1
 8007260:	d103      	bne.n	800726a <_wcrtomb_r+0x32>
 8007262:	2200      	movs	r2, #0
 8007264:	238a      	movs	r3, #138	; 0x8a
 8007266:	6032      	str	r2, [r6, #0]
 8007268:	602b      	str	r3, [r5, #0]
 800726a:	b006      	add	sp, #24
 800726c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007270:	4b05      	ldr	r3, [pc, #20]	; (8007288 <_wcrtomb_r+0x50>)
 8007272:	681f      	ldr	r7, [r3, #0]
 8007274:	f7fd f9ce 	bl	8004614 <__locale_charset>
 8007278:	9600      	str	r6, [sp, #0]
 800727a:	4603      	mov	r3, r0
 800727c:	4622      	mov	r2, r4
 800727e:	a903      	add	r1, sp, #12
 8007280:	4628      	mov	r0, r5
 8007282:	47b8      	blx	r7
 8007284:	e7eb      	b.n	800725e <_wcrtomb_r+0x26>
 8007286:	bf00      	nop
 8007288:	200008c4 	.word	0x200008c4

0800728c <wcrtomb>:
 800728c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007290:	4b12      	ldr	r3, [pc, #72]	; (80072dc <wcrtomb+0x50>)
 8007292:	b086      	sub	sp, #24
 8007294:	4616      	mov	r6, r2
 8007296:	681d      	ldr	r5, [r3, #0]
 8007298:	4604      	mov	r4, r0
 800729a:	b1a0      	cbz	r0, 80072c6 <wcrtomb+0x3a>
 800729c:	4b10      	ldr	r3, [pc, #64]	; (80072e0 <wcrtomb+0x54>)
 800729e:	460f      	mov	r7, r1
 80072a0:	f8d3 8000 	ldr.w	r8, [r3]
 80072a4:	f7fd f9b6 	bl	8004614 <__locale_charset>
 80072a8:	9600      	str	r6, [sp, #0]
 80072aa:	4603      	mov	r3, r0
 80072ac:	463a      	mov	r2, r7
 80072ae:	4621      	mov	r1, r4
 80072b0:	4628      	mov	r0, r5
 80072b2:	47c0      	blx	r8
 80072b4:	1c43      	adds	r3, r0, #1
 80072b6:	d103      	bne.n	80072c0 <wcrtomb+0x34>
 80072b8:	2200      	movs	r2, #0
 80072ba:	238a      	movs	r3, #138	; 0x8a
 80072bc:	6032      	str	r2, [r6, #0]
 80072be:	602b      	str	r3, [r5, #0]
 80072c0:	b006      	add	sp, #24
 80072c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072c6:	4b06      	ldr	r3, [pc, #24]	; (80072e0 <wcrtomb+0x54>)
 80072c8:	681f      	ldr	r7, [r3, #0]
 80072ca:	f7fd f9a3 	bl	8004614 <__locale_charset>
 80072ce:	9600      	str	r6, [sp, #0]
 80072d0:	4603      	mov	r3, r0
 80072d2:	4622      	mov	r2, r4
 80072d4:	a903      	add	r1, sp, #12
 80072d6:	4628      	mov	r0, r5
 80072d8:	47b8      	blx	r7
 80072da:	e7eb      	b.n	80072b4 <wcrtomb+0x28>
 80072dc:	20000008 	.word	0x20000008
 80072e0:	200008c4 	.word	0x200008c4

080072e4 <__ascii_wctomb>:
 80072e4:	b121      	cbz	r1, 80072f0 <__ascii_wctomb+0xc>
 80072e6:	2aff      	cmp	r2, #255	; 0xff
 80072e8:	d804      	bhi.n	80072f4 <__ascii_wctomb+0x10>
 80072ea:	700a      	strb	r2, [r1, #0]
 80072ec:	2001      	movs	r0, #1
 80072ee:	4770      	bx	lr
 80072f0:	4608      	mov	r0, r1
 80072f2:	4770      	bx	lr
 80072f4:	238a      	movs	r3, #138	; 0x8a
 80072f6:	6003      	str	r3, [r0, #0]
 80072f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80072fc:	4770      	bx	lr
 80072fe:	bf00      	nop

08007300 <_wctomb_r>:
 8007300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007304:	4c09      	ldr	r4, [pc, #36]	; (800732c <_wctomb_r+0x2c>)
 8007306:	b082      	sub	sp, #8
 8007308:	4698      	mov	r8, r3
 800730a:	4605      	mov	r5, r0
 800730c:	460e      	mov	r6, r1
 800730e:	4617      	mov	r7, r2
 8007310:	6824      	ldr	r4, [r4, #0]
 8007312:	f7fd f97f 	bl	8004614 <__locale_charset>
 8007316:	f8cd 8000 	str.w	r8, [sp]
 800731a:	4603      	mov	r3, r0
 800731c:	463a      	mov	r2, r7
 800731e:	4631      	mov	r1, r6
 8007320:	4628      	mov	r0, r5
 8007322:	47a0      	blx	r4
 8007324:	b002      	add	sp, #8
 8007326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800732a:	bf00      	nop
 800732c:	200008c4 	.word	0x200008c4

08007330 <__gedf2>:
 8007330:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8007334:	e006      	b.n	8007344 <__cmpdf2+0x4>
 8007336:	bf00      	nop

08007338 <__ledf2>:
 8007338:	f04f 0c01 	mov.w	ip, #1
 800733c:	e002      	b.n	8007344 <__cmpdf2+0x4>
 800733e:	bf00      	nop

08007340 <__cmpdf2>:
 8007340:	f04f 0c01 	mov.w	ip, #1
 8007344:	f84d cd04 	str.w	ip, [sp, #-4]!
 8007348:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800734c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8007350:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8007354:	bf18      	it	ne
 8007356:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800735a:	d01b      	beq.n	8007394 <__cmpdf2+0x54>
 800735c:	b001      	add	sp, #4
 800735e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8007362:	bf0c      	ite	eq
 8007364:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8007368:	ea91 0f03 	teqne	r1, r3
 800736c:	bf02      	ittt	eq
 800736e:	ea90 0f02 	teqeq	r0, r2
 8007372:	2000      	moveq	r0, #0
 8007374:	4770      	bxeq	lr
 8007376:	f110 0f00 	cmn.w	r0, #0
 800737a:	ea91 0f03 	teq	r1, r3
 800737e:	bf58      	it	pl
 8007380:	4299      	cmppl	r1, r3
 8007382:	bf08      	it	eq
 8007384:	4290      	cmpeq	r0, r2
 8007386:	bf2c      	ite	cs
 8007388:	17d8      	asrcs	r0, r3, #31
 800738a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800738e:	f040 0001 	orr.w	r0, r0, #1
 8007392:	4770      	bx	lr
 8007394:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8007398:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800739c:	d102      	bne.n	80073a4 <__cmpdf2+0x64>
 800739e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80073a2:	d107      	bne.n	80073b4 <__cmpdf2+0x74>
 80073a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80073a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80073ac:	d1d6      	bne.n	800735c <__cmpdf2+0x1c>
 80073ae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80073b2:	d0d3      	beq.n	800735c <__cmpdf2+0x1c>
 80073b4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80073b8:	4770      	bx	lr
 80073ba:	bf00      	nop

080073bc <__aeabi_cdrcmple>:
 80073bc:	4684      	mov	ip, r0
 80073be:	4610      	mov	r0, r2
 80073c0:	4662      	mov	r2, ip
 80073c2:	468c      	mov	ip, r1
 80073c4:	4619      	mov	r1, r3
 80073c6:	4663      	mov	r3, ip
 80073c8:	e000      	b.n	80073cc <__aeabi_cdcmpeq>
 80073ca:	bf00      	nop

080073cc <__aeabi_cdcmpeq>:
 80073cc:	b501      	push	{r0, lr}
 80073ce:	f7ff ffb7 	bl	8007340 <__cmpdf2>
 80073d2:	2800      	cmp	r0, #0
 80073d4:	bf48      	it	mi
 80073d6:	f110 0f00 	cmnmi.w	r0, #0
 80073da:	bd01      	pop	{r0, pc}

080073dc <__aeabi_dcmpeq>:
 80073dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80073e0:	f7ff fff4 	bl	80073cc <__aeabi_cdcmpeq>
 80073e4:	bf0c      	ite	eq
 80073e6:	2001      	moveq	r0, #1
 80073e8:	2000      	movne	r0, #0
 80073ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80073ee:	bf00      	nop

080073f0 <__aeabi_dcmplt>:
 80073f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80073f4:	f7ff ffea 	bl	80073cc <__aeabi_cdcmpeq>
 80073f8:	bf34      	ite	cc
 80073fa:	2001      	movcc	r0, #1
 80073fc:	2000      	movcs	r0, #0
 80073fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8007402:	bf00      	nop

08007404 <__aeabi_dcmple>:
 8007404:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007408:	f7ff ffe0 	bl	80073cc <__aeabi_cdcmpeq>
 800740c:	bf94      	ite	ls
 800740e:	2001      	movls	r0, #1
 8007410:	2000      	movhi	r0, #0
 8007412:	f85d fb08 	ldr.w	pc, [sp], #8
 8007416:	bf00      	nop

08007418 <__aeabi_dcmpge>:
 8007418:	f84d ed08 	str.w	lr, [sp, #-8]!
 800741c:	f7ff ffce 	bl	80073bc <__aeabi_cdrcmple>
 8007420:	bf94      	ite	ls
 8007422:	2001      	movls	r0, #1
 8007424:	2000      	movhi	r0, #0
 8007426:	f85d fb08 	ldr.w	pc, [sp], #8
 800742a:	bf00      	nop

0800742c <__aeabi_dcmpgt>:
 800742c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007430:	f7ff ffc4 	bl	80073bc <__aeabi_cdrcmple>
 8007434:	bf34      	ite	cc
 8007436:	2001      	movcc	r0, #1
 8007438:	2000      	movcs	r0, #0
 800743a:	f85d fb08 	ldr.w	pc, [sp], #8
 800743e:	bf00      	nop

08007440 <__aeabi_dcmpun>:
 8007440:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8007444:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8007448:	d102      	bne.n	8007450 <__aeabi_dcmpun+0x10>
 800744a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800744e:	d10a      	bne.n	8007466 <__aeabi_dcmpun+0x26>
 8007450:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8007454:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8007458:	d102      	bne.n	8007460 <__aeabi_dcmpun+0x20>
 800745a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800745e:	d102      	bne.n	8007466 <__aeabi_dcmpun+0x26>
 8007460:	f04f 0000 	mov.w	r0, #0
 8007464:	4770      	bx	lr
 8007466:	f04f 0001 	mov.w	r0, #1
 800746a:	4770      	bx	lr

0800746c <__aeabi_uldivmod>:
 800746c:	b953      	cbnz	r3, 8007484 <__aeabi_uldivmod+0x18>
 800746e:	b94a      	cbnz	r2, 8007484 <__aeabi_uldivmod+0x18>
 8007470:	2900      	cmp	r1, #0
 8007472:	bf08      	it	eq
 8007474:	2800      	cmpeq	r0, #0
 8007476:	bf1c      	itt	ne
 8007478:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800747c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8007480:	f000 b97e 	b.w	8007780 <__aeabi_idiv0>
 8007484:	f1ad 0c08 	sub.w	ip, sp, #8
 8007488:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800748c:	f000 f806 	bl	800749c <__udivmoddi4>
 8007490:	f8dd e004 	ldr.w	lr, [sp, #4]
 8007494:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007498:	b004      	add	sp, #16
 800749a:	4770      	bx	lr

0800749c <__udivmoddi4>:
 800749c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074a0:	468c      	mov	ip, r1
 80074a2:	460e      	mov	r6, r1
 80074a4:	4604      	mov	r4, r0
 80074a6:	9d08      	ldr	r5, [sp, #32]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d150      	bne.n	800754e <__udivmoddi4+0xb2>
 80074ac:	428a      	cmp	r2, r1
 80074ae:	4617      	mov	r7, r2
 80074b0:	d96c      	bls.n	800758c <__udivmoddi4+0xf0>
 80074b2:	fab2 fe82 	clz	lr, r2
 80074b6:	f1be 0f00 	cmp.w	lr, #0
 80074ba:	d00b      	beq.n	80074d4 <__udivmoddi4+0x38>
 80074bc:	f1ce 0420 	rsb	r4, lr, #32
 80074c0:	fa20 f404 	lsr.w	r4, r0, r4
 80074c4:	fa01 f60e 	lsl.w	r6, r1, lr
 80074c8:	ea44 0c06 	orr.w	ip, r4, r6
 80074cc:	fa02 f70e 	lsl.w	r7, r2, lr
 80074d0:	fa00 f40e 	lsl.w	r4, r0, lr
 80074d4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80074d8:	0c22      	lsrs	r2, r4, #16
 80074da:	fbbc f0f9 	udiv	r0, ip, r9
 80074de:	fa1f f887 	uxth.w	r8, r7
 80074e2:	fb09 c610 	mls	r6, r9, r0, ip
 80074e6:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 80074ea:	fb00 f308 	mul.w	r3, r0, r8
 80074ee:	42b3      	cmp	r3, r6
 80074f0:	d909      	bls.n	8007506 <__udivmoddi4+0x6a>
 80074f2:	19f6      	adds	r6, r6, r7
 80074f4:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80074f8:	f080 8122 	bcs.w	8007740 <__udivmoddi4+0x2a4>
 80074fc:	42b3      	cmp	r3, r6
 80074fe:	f240 811f 	bls.w	8007740 <__udivmoddi4+0x2a4>
 8007502:	3802      	subs	r0, #2
 8007504:	443e      	add	r6, r7
 8007506:	1af6      	subs	r6, r6, r3
 8007508:	b2a2      	uxth	r2, r4
 800750a:	fbb6 f3f9 	udiv	r3, r6, r9
 800750e:	fb09 6613 	mls	r6, r9, r3, r6
 8007512:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8007516:	fb03 f808 	mul.w	r8, r3, r8
 800751a:	45a0      	cmp	r8, r4
 800751c:	d909      	bls.n	8007532 <__udivmoddi4+0x96>
 800751e:	19e4      	adds	r4, r4, r7
 8007520:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8007524:	f080 810a 	bcs.w	800773c <__udivmoddi4+0x2a0>
 8007528:	45a0      	cmp	r8, r4
 800752a:	f240 8107 	bls.w	800773c <__udivmoddi4+0x2a0>
 800752e:	3b02      	subs	r3, #2
 8007530:	443c      	add	r4, r7
 8007532:	ebc8 0404 	rsb	r4, r8, r4
 8007536:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800753a:	2100      	movs	r1, #0
 800753c:	2d00      	cmp	r5, #0
 800753e:	d062      	beq.n	8007606 <__udivmoddi4+0x16a>
 8007540:	fa24 f40e 	lsr.w	r4, r4, lr
 8007544:	2300      	movs	r3, #0
 8007546:	602c      	str	r4, [r5, #0]
 8007548:	606b      	str	r3, [r5, #4]
 800754a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800754e:	428b      	cmp	r3, r1
 8007550:	d907      	bls.n	8007562 <__udivmoddi4+0xc6>
 8007552:	2d00      	cmp	r5, #0
 8007554:	d055      	beq.n	8007602 <__udivmoddi4+0x166>
 8007556:	2100      	movs	r1, #0
 8007558:	e885 0041 	stmia.w	r5, {r0, r6}
 800755c:	4608      	mov	r0, r1
 800755e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007562:	fab3 f183 	clz	r1, r3
 8007566:	2900      	cmp	r1, #0
 8007568:	f040 8090 	bne.w	800768c <__udivmoddi4+0x1f0>
 800756c:	42b3      	cmp	r3, r6
 800756e:	d302      	bcc.n	8007576 <__udivmoddi4+0xda>
 8007570:	4282      	cmp	r2, r0
 8007572:	f200 80f8 	bhi.w	8007766 <__udivmoddi4+0x2ca>
 8007576:	1a84      	subs	r4, r0, r2
 8007578:	eb66 0603 	sbc.w	r6, r6, r3
 800757c:	2001      	movs	r0, #1
 800757e:	46b4      	mov	ip, r6
 8007580:	2d00      	cmp	r5, #0
 8007582:	d040      	beq.n	8007606 <__udivmoddi4+0x16a>
 8007584:	e885 1010 	stmia.w	r5, {r4, ip}
 8007588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800758c:	b912      	cbnz	r2, 8007594 <__udivmoddi4+0xf8>
 800758e:	2701      	movs	r7, #1
 8007590:	fbb7 f7f2 	udiv	r7, r7, r2
 8007594:	fab7 fe87 	clz	lr, r7
 8007598:	f1be 0f00 	cmp.w	lr, #0
 800759c:	d135      	bne.n	800760a <__udivmoddi4+0x16e>
 800759e:	1bf3      	subs	r3, r6, r7
 80075a0:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80075a4:	fa1f fc87 	uxth.w	ip, r7
 80075a8:	2101      	movs	r1, #1
 80075aa:	fbb3 f0f8 	udiv	r0, r3, r8
 80075ae:	0c22      	lsrs	r2, r4, #16
 80075b0:	fb08 3610 	mls	r6, r8, r0, r3
 80075b4:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 80075b8:	fb0c f300 	mul.w	r3, ip, r0
 80075bc:	42b3      	cmp	r3, r6
 80075be:	d907      	bls.n	80075d0 <__udivmoddi4+0x134>
 80075c0:	19f6      	adds	r6, r6, r7
 80075c2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80075c6:	d202      	bcs.n	80075ce <__udivmoddi4+0x132>
 80075c8:	42b3      	cmp	r3, r6
 80075ca:	f200 80ce 	bhi.w	800776a <__udivmoddi4+0x2ce>
 80075ce:	4610      	mov	r0, r2
 80075d0:	1af6      	subs	r6, r6, r3
 80075d2:	b2a2      	uxth	r2, r4
 80075d4:	fbb6 f3f8 	udiv	r3, r6, r8
 80075d8:	fb08 6613 	mls	r6, r8, r3, r6
 80075dc:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 80075e0:	fb0c fc03 	mul.w	ip, ip, r3
 80075e4:	45a4      	cmp	ip, r4
 80075e6:	d907      	bls.n	80075f8 <__udivmoddi4+0x15c>
 80075e8:	19e4      	adds	r4, r4, r7
 80075ea:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 80075ee:	d202      	bcs.n	80075f6 <__udivmoddi4+0x15a>
 80075f0:	45a4      	cmp	ip, r4
 80075f2:	f200 80b5 	bhi.w	8007760 <__udivmoddi4+0x2c4>
 80075f6:	4613      	mov	r3, r2
 80075f8:	ebcc 0404 	rsb	r4, ip, r4
 80075fc:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8007600:	e79c      	b.n	800753c <__udivmoddi4+0xa0>
 8007602:	4629      	mov	r1, r5
 8007604:	4628      	mov	r0, r5
 8007606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800760a:	f1ce 0120 	rsb	r1, lr, #32
 800760e:	fa06 f30e 	lsl.w	r3, r6, lr
 8007612:	fa07 f70e 	lsl.w	r7, r7, lr
 8007616:	fa20 f901 	lsr.w	r9, r0, r1
 800761a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800761e:	40ce      	lsrs	r6, r1
 8007620:	ea49 0903 	orr.w	r9, r9, r3
 8007624:	fbb6 faf8 	udiv	sl, r6, r8
 8007628:	ea4f 4419 	mov.w	r4, r9, lsr #16
 800762c:	fb08 661a 	mls	r6, r8, sl, r6
 8007630:	fa1f fc87 	uxth.w	ip, r7
 8007634:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
 8007638:	fb0a f20c 	mul.w	r2, sl, ip
 800763c:	429a      	cmp	r2, r3
 800763e:	fa00 f40e 	lsl.w	r4, r0, lr
 8007642:	d90a      	bls.n	800765a <__udivmoddi4+0x1be>
 8007644:	19db      	adds	r3, r3, r7
 8007646:	f10a 31ff 	add.w	r1, sl, #4294967295	; 0xffffffff
 800764a:	f080 8087 	bcs.w	800775c <__udivmoddi4+0x2c0>
 800764e:	429a      	cmp	r2, r3
 8007650:	f240 8084 	bls.w	800775c <__udivmoddi4+0x2c0>
 8007654:	f1aa 0a02 	sub.w	sl, sl, #2
 8007658:	443b      	add	r3, r7
 800765a:	1a9b      	subs	r3, r3, r2
 800765c:	fa1f f989 	uxth.w	r9, r9
 8007660:	fbb3 f1f8 	udiv	r1, r3, r8
 8007664:	fb08 3311 	mls	r3, r8, r1, r3
 8007668:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
 800766c:	fb01 f60c 	mul.w	r6, r1, ip
 8007670:	429e      	cmp	r6, r3
 8007672:	d907      	bls.n	8007684 <__udivmoddi4+0x1e8>
 8007674:	19db      	adds	r3, r3, r7
 8007676:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
 800767a:	d26b      	bcs.n	8007754 <__udivmoddi4+0x2b8>
 800767c:	429e      	cmp	r6, r3
 800767e:	d969      	bls.n	8007754 <__udivmoddi4+0x2b8>
 8007680:	3902      	subs	r1, #2
 8007682:	443b      	add	r3, r7
 8007684:	1b9b      	subs	r3, r3, r6
 8007686:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800768a:	e78e      	b.n	80075aa <__udivmoddi4+0x10e>
 800768c:	f1c1 0e20 	rsb	lr, r1, #32
 8007690:	fa22 f40e 	lsr.w	r4, r2, lr
 8007694:	408b      	lsls	r3, r1
 8007696:	4323      	orrs	r3, r4
 8007698:	fa20 f70e 	lsr.w	r7, r0, lr
 800769c:	fa06 f401 	lsl.w	r4, r6, r1
 80076a0:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80076a4:	fa26 f60e 	lsr.w	r6, r6, lr
 80076a8:	433c      	orrs	r4, r7
 80076aa:	fbb6 f9fc 	udiv	r9, r6, ip
 80076ae:	0c27      	lsrs	r7, r4, #16
 80076b0:	fb0c 6619 	mls	r6, ip, r9, r6
 80076b4:	fa1f f883 	uxth.w	r8, r3
 80076b8:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
 80076bc:	fb09 f708 	mul.w	r7, r9, r8
 80076c0:	42b7      	cmp	r7, r6
 80076c2:	fa02 f201 	lsl.w	r2, r2, r1
 80076c6:	fa00 fa01 	lsl.w	sl, r0, r1
 80076ca:	d908      	bls.n	80076de <__udivmoddi4+0x242>
 80076cc:	18f6      	adds	r6, r6, r3
 80076ce:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80076d2:	d241      	bcs.n	8007758 <__udivmoddi4+0x2bc>
 80076d4:	42b7      	cmp	r7, r6
 80076d6:	d93f      	bls.n	8007758 <__udivmoddi4+0x2bc>
 80076d8:	f1a9 0902 	sub.w	r9, r9, #2
 80076dc:	441e      	add	r6, r3
 80076de:	1bf6      	subs	r6, r6, r7
 80076e0:	b2a0      	uxth	r0, r4
 80076e2:	fbb6 f4fc 	udiv	r4, r6, ip
 80076e6:	fb0c 6614 	mls	r6, ip, r4, r6
 80076ea:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
 80076ee:	fb04 f808 	mul.w	r8, r4, r8
 80076f2:	45b8      	cmp	r8, r7
 80076f4:	d907      	bls.n	8007706 <__udivmoddi4+0x26a>
 80076f6:	18ff      	adds	r7, r7, r3
 80076f8:	f104 30ff 	add.w	r0, r4, #4294967295	; 0xffffffff
 80076fc:	d228      	bcs.n	8007750 <__udivmoddi4+0x2b4>
 80076fe:	45b8      	cmp	r8, r7
 8007700:	d926      	bls.n	8007750 <__udivmoddi4+0x2b4>
 8007702:	3c02      	subs	r4, #2
 8007704:	441f      	add	r7, r3
 8007706:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
 800770a:	ebc8 0707 	rsb	r7, r8, r7
 800770e:	fba0 8902 	umull	r8, r9, r0, r2
 8007712:	454f      	cmp	r7, r9
 8007714:	4644      	mov	r4, r8
 8007716:	464e      	mov	r6, r9
 8007718:	d314      	bcc.n	8007744 <__udivmoddi4+0x2a8>
 800771a:	d029      	beq.n	8007770 <__udivmoddi4+0x2d4>
 800771c:	b365      	cbz	r5, 8007778 <__udivmoddi4+0x2dc>
 800771e:	ebba 0304 	subs.w	r3, sl, r4
 8007722:	eb67 0706 	sbc.w	r7, r7, r6
 8007726:	fa07 fe0e 	lsl.w	lr, r7, lr
 800772a:	40cb      	lsrs	r3, r1
 800772c:	40cf      	lsrs	r7, r1
 800772e:	ea4e 0303 	orr.w	r3, lr, r3
 8007732:	e885 0088 	stmia.w	r5, {r3, r7}
 8007736:	2100      	movs	r1, #0
 8007738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800773c:	4613      	mov	r3, r2
 800773e:	e6f8      	b.n	8007532 <__udivmoddi4+0x96>
 8007740:	4610      	mov	r0, r2
 8007742:	e6e0      	b.n	8007506 <__udivmoddi4+0x6a>
 8007744:	ebb8 0402 	subs.w	r4, r8, r2
 8007748:	eb69 0603 	sbc.w	r6, r9, r3
 800774c:	3801      	subs	r0, #1
 800774e:	e7e5      	b.n	800771c <__udivmoddi4+0x280>
 8007750:	4604      	mov	r4, r0
 8007752:	e7d8      	b.n	8007706 <__udivmoddi4+0x26a>
 8007754:	4611      	mov	r1, r2
 8007756:	e795      	b.n	8007684 <__udivmoddi4+0x1e8>
 8007758:	4681      	mov	r9, r0
 800775a:	e7c0      	b.n	80076de <__udivmoddi4+0x242>
 800775c:	468a      	mov	sl, r1
 800775e:	e77c      	b.n	800765a <__udivmoddi4+0x1be>
 8007760:	3b02      	subs	r3, #2
 8007762:	443c      	add	r4, r7
 8007764:	e748      	b.n	80075f8 <__udivmoddi4+0x15c>
 8007766:	4608      	mov	r0, r1
 8007768:	e70a      	b.n	8007580 <__udivmoddi4+0xe4>
 800776a:	3802      	subs	r0, #2
 800776c:	443e      	add	r6, r7
 800776e:	e72f      	b.n	80075d0 <__udivmoddi4+0x134>
 8007770:	45c2      	cmp	sl, r8
 8007772:	d3e7      	bcc.n	8007744 <__udivmoddi4+0x2a8>
 8007774:	463e      	mov	r6, r7
 8007776:	e7d1      	b.n	800771c <__udivmoddi4+0x280>
 8007778:	4629      	mov	r1, r5
 800777a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800777e:	bf00      	nop

08007780 <__aeabi_idiv0>:
 8007780:	4770      	bx	lr
 8007782:	bf00      	nop
 8007784:	0000      	movs	r0, r0
	...

08007788 <atan>:
 8007788:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800778c:	ec55 4b10 	vmov	r4, r5, d0
 8007790:	4bcf      	ldr	r3, [pc, #828]	; (8007ad0 <atan+0x348>)
 8007792:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007796:	429e      	cmp	r6, r3
 8007798:	46aa      	mov	sl, r5
 800779a:	dd10      	ble.n	80077be <atan+0x36>
 800779c:	4bcd      	ldr	r3, [pc, #820]	; (8007ad4 <atan+0x34c>)
 800779e:	429e      	cmp	r6, r3
 80077a0:	f300 80af 	bgt.w	8007902 <atan+0x17a>
 80077a4:	f000 80aa 	beq.w	80078fc <atan+0x174>
 80077a8:	f1ba 0f00 	cmp.w	sl, #0
 80077ac:	f340 80fa 	ble.w	80079a4 <atan+0x21c>
 80077b0:	a5ab      	add	r5, pc, #684	; (adr r5, 8007a60 <atan+0x2d8>)
 80077b2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80077b6:	ec45 4b10 	vmov	d0, r4, r5
 80077ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077be:	4bc6      	ldr	r3, [pc, #792]	; (8007ad8 <atan+0x350>)
 80077c0:	429e      	cmp	r6, r3
 80077c2:	f300 80bd 	bgt.w	8007940 <atan+0x1b8>
 80077c6:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80077ca:	429e      	cmp	r6, r3
 80077cc:	f340 80a5 	ble.w	800791a <atan+0x192>
 80077d0:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 80077d4:	4622      	mov	r2, r4
 80077d6:	462b      	mov	r3, r5
 80077d8:	4620      	mov	r0, r4
 80077da:	4629      	mov	r1, r5
 80077dc:	f7f8 ff24 	bl	8000628 <__aeabi_dmul>
 80077e0:	4602      	mov	r2, r0
 80077e2:	460b      	mov	r3, r1
 80077e4:	4680      	mov	r8, r0
 80077e6:	4689      	mov	r9, r1
 80077e8:	f7f8 ff1e 	bl	8000628 <__aeabi_dmul>
 80077ec:	a39e      	add	r3, pc, #632	; (adr r3, 8007a68 <atan+0x2e0>)
 80077ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f2:	4606      	mov	r6, r0
 80077f4:	460f      	mov	r7, r1
 80077f6:	f7f8 ff17 	bl	8000628 <__aeabi_dmul>
 80077fa:	a39d      	add	r3, pc, #628	; (adr r3, 8007a70 <atan+0x2e8>)
 80077fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007800:	f7f8 fd60 	bl	80002c4 <__adddf3>
 8007804:	4632      	mov	r2, r6
 8007806:	463b      	mov	r3, r7
 8007808:	f7f8 ff0e 	bl	8000628 <__aeabi_dmul>
 800780c:	a39a      	add	r3, pc, #616	; (adr r3, 8007a78 <atan+0x2f0>)
 800780e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007812:	f7f8 fd57 	bl	80002c4 <__adddf3>
 8007816:	4632      	mov	r2, r6
 8007818:	463b      	mov	r3, r7
 800781a:	f7f8 ff05 	bl	8000628 <__aeabi_dmul>
 800781e:	a398      	add	r3, pc, #608	; (adr r3, 8007a80 <atan+0x2f8>)
 8007820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007824:	f7f8 fd4e 	bl	80002c4 <__adddf3>
 8007828:	4632      	mov	r2, r6
 800782a:	463b      	mov	r3, r7
 800782c:	f7f8 fefc 	bl	8000628 <__aeabi_dmul>
 8007830:	a395      	add	r3, pc, #596	; (adr r3, 8007a88 <atan+0x300>)
 8007832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007836:	f7f8 fd45 	bl	80002c4 <__adddf3>
 800783a:	4632      	mov	r2, r6
 800783c:	463b      	mov	r3, r7
 800783e:	f7f8 fef3 	bl	8000628 <__aeabi_dmul>
 8007842:	a393      	add	r3, pc, #588	; (adr r3, 8007a90 <atan+0x308>)
 8007844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007848:	f7f8 fd3c 	bl	80002c4 <__adddf3>
 800784c:	4642      	mov	r2, r8
 800784e:	464b      	mov	r3, r9
 8007850:	f7f8 feea 	bl	8000628 <__aeabi_dmul>
 8007854:	a390      	add	r3, pc, #576	; (adr r3, 8007a98 <atan+0x310>)
 8007856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800785a:	4680      	mov	r8, r0
 800785c:	4689      	mov	r9, r1
 800785e:	4630      	mov	r0, r6
 8007860:	4639      	mov	r1, r7
 8007862:	f7f8 fee1 	bl	8000628 <__aeabi_dmul>
 8007866:	a38e      	add	r3, pc, #568	; (adr r3, 8007aa0 <atan+0x318>)
 8007868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800786c:	f7f8 fd28 	bl	80002c0 <__aeabi_dsub>
 8007870:	4632      	mov	r2, r6
 8007872:	463b      	mov	r3, r7
 8007874:	f7f8 fed8 	bl	8000628 <__aeabi_dmul>
 8007878:	a38b      	add	r3, pc, #556	; (adr r3, 8007aa8 <atan+0x320>)
 800787a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800787e:	f7f8 fd1f 	bl	80002c0 <__aeabi_dsub>
 8007882:	4632      	mov	r2, r6
 8007884:	463b      	mov	r3, r7
 8007886:	f7f8 fecf 	bl	8000628 <__aeabi_dmul>
 800788a:	a389      	add	r3, pc, #548	; (adr r3, 8007ab0 <atan+0x328>)
 800788c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007890:	f7f8 fd16 	bl	80002c0 <__aeabi_dsub>
 8007894:	4632      	mov	r2, r6
 8007896:	463b      	mov	r3, r7
 8007898:	f7f8 fec6 	bl	8000628 <__aeabi_dmul>
 800789c:	a386      	add	r3, pc, #536	; (adr r3, 8007ab8 <atan+0x330>)
 800789e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a2:	f7f8 fd0d 	bl	80002c0 <__aeabi_dsub>
 80078a6:	4632      	mov	r2, r6
 80078a8:	463b      	mov	r3, r7
 80078aa:	f7f8 febd 	bl	8000628 <__aeabi_dmul>
 80078ae:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 80078b2:	4602      	mov	r2, r0
 80078b4:	460b      	mov	r3, r1
 80078b6:	d079      	beq.n	80079ac <atan+0x224>
 80078b8:	4e88      	ldr	r6, [pc, #544]	; (8007adc <atan+0x354>)
 80078ba:	4640      	mov	r0, r8
 80078bc:	4649      	mov	r1, r9
 80078be:	f7f8 fd01 	bl	80002c4 <__adddf3>
 80078c2:	eb06 0bcb 	add.w	fp, r6, fp, lsl #3
 80078c6:	4622      	mov	r2, r4
 80078c8:	462b      	mov	r3, r5
 80078ca:	f7f8 fead 	bl	8000628 <__aeabi_dmul>
 80078ce:	e9db 2308 	ldrd	r2, r3, [fp, #32]
 80078d2:	f7f8 fcf5 	bl	80002c0 <__aeabi_dsub>
 80078d6:	4622      	mov	r2, r4
 80078d8:	462b      	mov	r3, r5
 80078da:	f7f8 fcf1 	bl	80002c0 <__aeabi_dsub>
 80078de:	4602      	mov	r2, r0
 80078e0:	460b      	mov	r3, r1
 80078e2:	e9db 0100 	ldrd	r0, r1, [fp]
 80078e6:	f7f8 fceb 	bl	80002c0 <__aeabi_dsub>
 80078ea:	f1ba 0f00 	cmp.w	sl, #0
 80078ee:	db52      	blt.n	8007996 <atan+0x20e>
 80078f0:	4604      	mov	r4, r0
 80078f2:	460d      	mov	r5, r1
 80078f4:	ec45 4b10 	vmov	d0, r4, r5
 80078f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078fc:	2c00      	cmp	r4, #0
 80078fe:	f43f af53 	beq.w	80077a8 <atan+0x20>
 8007902:	4622      	mov	r2, r4
 8007904:	462b      	mov	r3, r5
 8007906:	4620      	mov	r0, r4
 8007908:	4629      	mov	r1, r5
 800790a:	f7f8 fcdb 	bl	80002c4 <__adddf3>
 800790e:	4604      	mov	r4, r0
 8007910:	460d      	mov	r5, r1
 8007912:	ec45 4b10 	vmov	d0, r4, r5
 8007916:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800791a:	a369      	add	r3, pc, #420	; (adr r3, 8007ac0 <atan+0x338>)
 800791c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007920:	ee10 0a10 	vmov	r0, s0
 8007924:	4629      	mov	r1, r5
 8007926:	f7f8 fccd 	bl	80002c4 <__adddf3>
 800792a:	2200      	movs	r2, #0
 800792c:	4b6c      	ldr	r3, [pc, #432]	; (8007ae0 <atan+0x358>)
 800792e:	f7ff fd7d 	bl	800742c <__aeabi_dcmpgt>
 8007932:	2800      	cmp	r0, #0
 8007934:	f43f af4c 	beq.w	80077d0 <atan+0x48>
 8007938:	ec45 4b10 	vmov	d0, r4, r5
 800793c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007940:	f000 f8d8 	bl	8007af4 <fabs>
 8007944:	4b67      	ldr	r3, [pc, #412]	; (8007ae4 <atan+0x35c>)
 8007946:	429e      	cmp	r6, r3
 8007948:	ec55 4b10 	vmov	r4, r5, d0
 800794c:	dc3f      	bgt.n	80079ce <atan+0x246>
 800794e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8007952:	429e      	cmp	r6, r3
 8007954:	dc68      	bgt.n	8007a28 <atan+0x2a0>
 8007956:	ee10 2a10 	vmov	r2, s0
 800795a:	ee10 0a10 	vmov	r0, s0
 800795e:	462b      	mov	r3, r5
 8007960:	4629      	mov	r1, r5
 8007962:	f7f8 fcaf 	bl	80002c4 <__adddf3>
 8007966:	2200      	movs	r2, #0
 8007968:	4b5d      	ldr	r3, [pc, #372]	; (8007ae0 <atan+0x358>)
 800796a:	f7f8 fca9 	bl	80002c0 <__aeabi_dsub>
 800796e:	2200      	movs	r2, #0
 8007970:	4606      	mov	r6, r0
 8007972:	460f      	mov	r7, r1
 8007974:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007978:	4620      	mov	r0, r4
 800797a:	4629      	mov	r1, r5
 800797c:	f7f8 fca2 	bl	80002c4 <__adddf3>
 8007980:	4602      	mov	r2, r0
 8007982:	460b      	mov	r3, r1
 8007984:	4630      	mov	r0, r6
 8007986:	4639      	mov	r1, r7
 8007988:	f7f8 ff78 	bl	800087c <__aeabi_ddiv>
 800798c:	f04f 0b00 	mov.w	fp, #0
 8007990:	4604      	mov	r4, r0
 8007992:	460d      	mov	r5, r1
 8007994:	e71e      	b.n	80077d4 <atan+0x4c>
 8007996:	4604      	mov	r4, r0
 8007998:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 800799c:	ec45 4b10 	vmov	d0, r4, r5
 80079a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079a4:	a548      	add	r5, pc, #288	; (adr r5, 8007ac8 <atan+0x340>)
 80079a6:	e9d5 4500 	ldrd	r4, r5, [r5]
 80079aa:	e7b2      	b.n	8007912 <atan+0x18a>
 80079ac:	4640      	mov	r0, r8
 80079ae:	4649      	mov	r1, r9
 80079b0:	f7f8 fc88 	bl	80002c4 <__adddf3>
 80079b4:	4622      	mov	r2, r4
 80079b6:	462b      	mov	r3, r5
 80079b8:	f7f8 fe36 	bl	8000628 <__aeabi_dmul>
 80079bc:	4602      	mov	r2, r0
 80079be:	460b      	mov	r3, r1
 80079c0:	4620      	mov	r0, r4
 80079c2:	4629      	mov	r1, r5
 80079c4:	f7f8 fc7c 	bl	80002c0 <__aeabi_dsub>
 80079c8:	4604      	mov	r4, r0
 80079ca:	460d      	mov	r5, r1
 80079cc:	e7a1      	b.n	8007912 <atan+0x18a>
 80079ce:	4b46      	ldr	r3, [pc, #280]	; (8007ae8 <atan+0x360>)
 80079d0:	429e      	cmp	r6, r3
 80079d2:	dc1d      	bgt.n	8007a10 <atan+0x288>
 80079d4:	ee10 0a10 	vmov	r0, s0
 80079d8:	2200      	movs	r2, #0
 80079da:	4b44      	ldr	r3, [pc, #272]	; (8007aec <atan+0x364>)
 80079dc:	4629      	mov	r1, r5
 80079de:	f7f8 fc6f 	bl	80002c0 <__aeabi_dsub>
 80079e2:	2200      	movs	r2, #0
 80079e4:	4606      	mov	r6, r0
 80079e6:	460f      	mov	r7, r1
 80079e8:	4b40      	ldr	r3, [pc, #256]	; (8007aec <atan+0x364>)
 80079ea:	4620      	mov	r0, r4
 80079ec:	4629      	mov	r1, r5
 80079ee:	f7f8 fe1b 	bl	8000628 <__aeabi_dmul>
 80079f2:	2200      	movs	r2, #0
 80079f4:	4b3a      	ldr	r3, [pc, #232]	; (8007ae0 <atan+0x358>)
 80079f6:	f7f8 fc65 	bl	80002c4 <__adddf3>
 80079fa:	4602      	mov	r2, r0
 80079fc:	460b      	mov	r3, r1
 80079fe:	4630      	mov	r0, r6
 8007a00:	4639      	mov	r1, r7
 8007a02:	f7f8 ff3b 	bl	800087c <__aeabi_ddiv>
 8007a06:	f04f 0b02 	mov.w	fp, #2
 8007a0a:	4604      	mov	r4, r0
 8007a0c:	460d      	mov	r5, r1
 8007a0e:	e6e1      	b.n	80077d4 <atan+0x4c>
 8007a10:	462b      	mov	r3, r5
 8007a12:	ee10 2a10 	vmov	r2, s0
 8007a16:	2000      	movs	r0, #0
 8007a18:	4935      	ldr	r1, [pc, #212]	; (8007af0 <atan+0x368>)
 8007a1a:	f7f8 ff2f 	bl	800087c <__aeabi_ddiv>
 8007a1e:	f04f 0b03 	mov.w	fp, #3
 8007a22:	4604      	mov	r4, r0
 8007a24:	460d      	mov	r5, r1
 8007a26:	e6d5      	b.n	80077d4 <atan+0x4c>
 8007a28:	ee10 0a10 	vmov	r0, s0
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	4b2c      	ldr	r3, [pc, #176]	; (8007ae0 <atan+0x358>)
 8007a30:	4629      	mov	r1, r5
 8007a32:	f7f8 fc45 	bl	80002c0 <__aeabi_dsub>
 8007a36:	2200      	movs	r2, #0
 8007a38:	4606      	mov	r6, r0
 8007a3a:	460f      	mov	r7, r1
 8007a3c:	4b28      	ldr	r3, [pc, #160]	; (8007ae0 <atan+0x358>)
 8007a3e:	4620      	mov	r0, r4
 8007a40:	4629      	mov	r1, r5
 8007a42:	f7f8 fc3f 	bl	80002c4 <__adddf3>
 8007a46:	4602      	mov	r2, r0
 8007a48:	460b      	mov	r3, r1
 8007a4a:	4630      	mov	r0, r6
 8007a4c:	4639      	mov	r1, r7
 8007a4e:	f7f8 ff15 	bl	800087c <__aeabi_ddiv>
 8007a52:	f04f 0b01 	mov.w	fp, #1
 8007a56:	4604      	mov	r4, r0
 8007a58:	460d      	mov	r5, r1
 8007a5a:	e6bb      	b.n	80077d4 <atan+0x4c>
 8007a5c:	f3af 8000 	nop.w
 8007a60:	54442d18 	.word	0x54442d18
 8007a64:	3ff921fb 	.word	0x3ff921fb
 8007a68:	e322da11 	.word	0xe322da11
 8007a6c:	3f90ad3a 	.word	0x3f90ad3a
 8007a70:	24760deb 	.word	0x24760deb
 8007a74:	3fa97b4b 	.word	0x3fa97b4b
 8007a78:	a0d03d51 	.word	0xa0d03d51
 8007a7c:	3fb10d66 	.word	0x3fb10d66
 8007a80:	c54c206e 	.word	0xc54c206e
 8007a84:	3fb745cd 	.word	0x3fb745cd
 8007a88:	920083ff 	.word	0x920083ff
 8007a8c:	3fc24924 	.word	0x3fc24924
 8007a90:	5555550d 	.word	0x5555550d
 8007a94:	3fd55555 	.word	0x3fd55555
 8007a98:	2c6a6c2f 	.word	0x2c6a6c2f
 8007a9c:	bfa2b444 	.word	0xbfa2b444
 8007aa0:	52defd9a 	.word	0x52defd9a
 8007aa4:	3fadde2d 	.word	0x3fadde2d
 8007aa8:	af749a6d 	.word	0xaf749a6d
 8007aac:	3fb3b0f2 	.word	0x3fb3b0f2
 8007ab0:	fe231671 	.word	0xfe231671
 8007ab4:	3fbc71c6 	.word	0x3fbc71c6
 8007ab8:	9998ebc4 	.word	0x9998ebc4
 8007abc:	3fc99999 	.word	0x3fc99999
 8007ac0:	8800759c 	.word	0x8800759c
 8007ac4:	7e37e43c 	.word	0x7e37e43c
 8007ac8:	54442d18 	.word	0x54442d18
 8007acc:	bff921fb 	.word	0xbff921fb
 8007ad0:	440fffff 	.word	0x440fffff
 8007ad4:	7ff00000 	.word	0x7ff00000
 8007ad8:	3fdbffff 	.word	0x3fdbffff
 8007adc:	0800d180 	.word	0x0800d180
 8007ae0:	3ff00000 	.word	0x3ff00000
 8007ae4:	3ff2ffff 	.word	0x3ff2ffff
 8007ae8:	40037fff 	.word	0x40037fff
 8007aec:	3ff80000 	.word	0x3ff80000
 8007af0:	bff00000 	.word	0xbff00000

08007af4 <fabs>:
 8007af4:	ec53 2b10 	vmov	r2, r3, d0
 8007af8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007afc:	ec43 2b10 	vmov	d0, r2, r3
 8007b00:	4770      	bx	lr
 8007b02:	bf00      	nop

08007b04 <sqrt>:
 8007b04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007b08:	ed2d 8b02 	vpush	{d8}
 8007b0c:	b08b      	sub	sp, #44	; 0x2c
 8007b0e:	ec55 4b10 	vmov	r4, r5, d0
 8007b12:	f000 f857 	bl	8007bc4 <__ieee754_sqrt>
 8007b16:	4b29      	ldr	r3, [pc, #164]	; (8007bbc <sqrt+0xb8>)
 8007b18:	eeb0 8a40 	vmov.f32	s16, s0
 8007b1c:	eef0 8a60 	vmov.f32	s17, s1
 8007b20:	f993 6000 	ldrsb.w	r6, [r3]
 8007b24:	1c73      	adds	r3, r6, #1
 8007b26:	d012      	beq.n	8007b4e <sqrt+0x4a>
 8007b28:	4622      	mov	r2, r4
 8007b2a:	462b      	mov	r3, r5
 8007b2c:	4620      	mov	r0, r4
 8007b2e:	4629      	mov	r1, r5
 8007b30:	f7ff fc86 	bl	8007440 <__aeabi_dcmpun>
 8007b34:	4607      	mov	r7, r0
 8007b36:	b950      	cbnz	r0, 8007b4e <sqrt+0x4a>
 8007b38:	f04f 0800 	mov.w	r8, #0
 8007b3c:	f04f 0900 	mov.w	r9, #0
 8007b40:	4620      	mov	r0, r4
 8007b42:	4629      	mov	r1, r5
 8007b44:	4642      	mov	r2, r8
 8007b46:	464b      	mov	r3, r9
 8007b48:	f7ff fc52 	bl	80073f0 <__aeabi_dcmplt>
 8007b4c:	b940      	cbnz	r0, 8007b60 <sqrt+0x5c>
 8007b4e:	eeb0 0a48 	vmov.f32	s0, s16
 8007b52:	eef0 0a68 	vmov.f32	s1, s17
 8007b56:	b00b      	add	sp, #44	; 0x2c
 8007b58:	ecbd 8b02 	vpop	{d8}
 8007b5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007b60:	4b17      	ldr	r3, [pc, #92]	; (8007bc0 <sqrt+0xbc>)
 8007b62:	9708      	str	r7, [sp, #32]
 8007b64:	2201      	movs	r2, #1
 8007b66:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8007b6a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007b6e:	e88d 000c 	stmia.w	sp, {r2, r3}
 8007b72:	b1b6      	cbz	r6, 8007ba2 <sqrt+0x9e>
 8007b74:	4642      	mov	r2, r8
 8007b76:	464b      	mov	r3, r9
 8007b78:	4640      	mov	r0, r8
 8007b7a:	4649      	mov	r1, r9
 8007b7c:	f7f8 fe7e 	bl	800087c <__aeabi_ddiv>
 8007b80:	2e02      	cmp	r6, #2
 8007b82:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007b86:	d10e      	bne.n	8007ba6 <sqrt+0xa2>
 8007b88:	f7f8 ffde 	bl	8000b48 <__errno>
 8007b8c:	2321      	movs	r3, #33	; 0x21
 8007b8e:	6003      	str	r3, [r0, #0]
 8007b90:	9b08      	ldr	r3, [sp, #32]
 8007b92:	b973      	cbnz	r3, 8007bb2 <sqrt+0xae>
 8007b94:	ed9d 0b06 	vldr	d0, [sp, #24]
 8007b98:	b00b      	add	sp, #44	; 0x2c
 8007b9a:	ecbd 8b02 	vpop	{d8}
 8007b9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007ba2:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8007ba6:	4668      	mov	r0, sp
 8007ba8:	f000 f8dc 	bl	8007d64 <matherr>
 8007bac:	2800      	cmp	r0, #0
 8007bae:	d1ef      	bne.n	8007b90 <sqrt+0x8c>
 8007bb0:	e7ea      	b.n	8007b88 <sqrt+0x84>
 8007bb2:	f7f8 ffc9 	bl	8000b48 <__errno>
 8007bb6:	9b08      	ldr	r3, [sp, #32]
 8007bb8:	6003      	str	r3, [r0, #0]
 8007bba:	e7eb      	b.n	8007b94 <sqrt+0x90>
 8007bbc:	200008c8 	.word	0x200008c8
 8007bc0:	0801c3f8 	.word	0x0801c3f8

08007bc4 <__ieee754_sqrt>:
 8007bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bc8:	4965      	ldr	r1, [pc, #404]	; (8007d60 <__ieee754_sqrt+0x19c>)
 8007bca:	ec55 4b10 	vmov	r4, r5, d0
 8007bce:	460e      	mov	r6, r1
 8007bd0:	4029      	ands	r1, r5
 8007bd2:	42b1      	cmp	r1, r6
 8007bd4:	f000 8097 	beq.w	8007d06 <__ieee754_sqrt+0x142>
 8007bd8:	2d00      	cmp	r5, #0
 8007bda:	462b      	mov	r3, r5
 8007bdc:	ee10 2a10 	vmov	r2, s0
 8007be0:	dd74      	ble.n	8007ccc <__ieee754_sqrt+0x108>
 8007be2:	152f      	asrs	r7, r5, #20
 8007be4:	d07f      	beq.n	8007ce6 <__ieee754_sqrt+0x122>
 8007be6:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
 8007bea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007bee:	07f9      	lsls	r1, r7, #31
 8007bf0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007bf4:	d465      	bmi.n	8007cc2 <__ieee754_sqrt+0xfe>
 8007bf6:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
 8007bfa:	2600      	movs	r6, #0
 8007bfc:	440b      	add	r3, r1
 8007bfe:	107f      	asrs	r7, r7, #1
 8007c00:	0052      	lsls	r2, r2, #1
 8007c02:	46b6      	mov	lr, r6
 8007c04:	2016      	movs	r0, #22
 8007c06:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007c0a:	eb0e 0401 	add.w	r4, lr, r1
 8007c0e:	429c      	cmp	r4, r3
 8007c10:	ea4f 75d2 	mov.w	r5, r2, lsr #31
 8007c14:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8007c18:	dc03      	bgt.n	8007c22 <__ieee754_sqrt+0x5e>
 8007c1a:	1b1b      	subs	r3, r3, r4
 8007c1c:	eb04 0e01 	add.w	lr, r4, r1
 8007c20:	440e      	add	r6, r1
 8007c22:	3801      	subs	r0, #1
 8007c24:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8007c28:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007c2c:	d1ed      	bne.n	8007c0a <__ieee754_sqrt+0x46>
 8007c2e:	4684      	mov	ip, r0
 8007c30:	2420      	movs	r4, #32
 8007c32:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8007c36:	e009      	b.n	8007c4c <__ieee754_sqrt+0x88>
 8007c38:	d020      	beq.n	8007c7c <__ieee754_sqrt+0xb8>
 8007c3a:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
 8007c3e:	3c01      	subs	r4, #1
 8007c40:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007c44:	442b      	add	r3, r5
 8007c46:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8007c4a:	d020      	beq.n	8007c8e <__ieee754_sqrt+0xca>
 8007c4c:	459e      	cmp	lr, r3
 8007c4e:	eb01 050c 	add.w	r5, r1, ip
 8007c52:	daf1      	bge.n	8007c38 <__ieee754_sqrt+0x74>
 8007c54:	2d00      	cmp	r5, #0
 8007c56:	eb05 0c01 	add.w	ip, r5, r1
 8007c5a:	db09      	blt.n	8007c70 <__ieee754_sqrt+0xac>
 8007c5c:	46f0      	mov	r8, lr
 8007c5e:	4295      	cmp	r5, r2
 8007c60:	ebce 0303 	rsb	r3, lr, r3
 8007c64:	d900      	bls.n	8007c68 <__ieee754_sqrt+0xa4>
 8007c66:	3b01      	subs	r3, #1
 8007c68:	1b52      	subs	r2, r2, r5
 8007c6a:	4408      	add	r0, r1
 8007c6c:	46c6      	mov	lr, r8
 8007c6e:	e7e4      	b.n	8007c3a <__ieee754_sqrt+0x76>
 8007c70:	f1bc 0f00 	cmp.w	ip, #0
 8007c74:	dbf2      	blt.n	8007c5c <__ieee754_sqrt+0x98>
 8007c76:	f10e 0801 	add.w	r8, lr, #1
 8007c7a:	e7f0      	b.n	8007c5e <__ieee754_sqrt+0x9a>
 8007c7c:	4295      	cmp	r5, r2
 8007c7e:	d81e      	bhi.n	8007cbe <__ieee754_sqrt+0xfa>
 8007c80:	2d00      	cmp	r5, #0
 8007c82:	eb05 0c01 	add.w	ip, r5, r1
 8007c86:	db50      	blt.n	8007d2a <__ieee754_sqrt+0x166>
 8007c88:	4698      	mov	r8, r3
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	e7ec      	b.n	8007c68 <__ieee754_sqrt+0xa4>
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	d004      	beq.n	8007c9c <__ieee754_sqrt+0xd8>
 8007c92:	1c42      	adds	r2, r0, #1
 8007c94:	d04d      	beq.n	8007d32 <__ieee754_sqrt+0x16e>
 8007c96:	f000 0301 	and.w	r3, r0, #1
 8007c9a:	4418      	add	r0, r3
 8007c9c:	0840      	lsrs	r0, r0, #1
 8007c9e:	1071      	asrs	r1, r6, #1
 8007ca0:	07f3      	lsls	r3, r6, #31
 8007ca2:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
 8007ca6:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 8007caa:	bf48      	it	mi
 8007cac:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
 8007cb0:	eb01 5307 	add.w	r3, r1, r7, lsl #20
 8007cb4:	4602      	mov	r2, r0
 8007cb6:	ec43 2b10 	vmov	d0, r2, r3
 8007cba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cbe:	4673      	mov	r3, lr
 8007cc0:	e7bb      	b.n	8007c3a <__ieee754_sqrt+0x76>
 8007cc2:	005b      	lsls	r3, r3, #1
 8007cc4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8007cc8:	0052      	lsls	r2, r2, #1
 8007cca:	e794      	b.n	8007bf6 <__ieee754_sqrt+0x32>
 8007ccc:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
 8007cd0:	4321      	orrs	r1, r4
 8007cd2:	d028      	beq.n	8007d26 <__ieee754_sqrt+0x162>
 8007cd4:	bbad      	cbnz	r5, 8007d42 <__ieee754_sqrt+0x17e>
 8007cd6:	462f      	mov	r7, r5
 8007cd8:	0ad3      	lsrs	r3, r2, #11
 8007cda:	3f15      	subs	r7, #21
 8007cdc:	0552      	lsls	r2, r2, #21
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d0fa      	beq.n	8007cd8 <__ieee754_sqrt+0x114>
 8007ce2:	02dd      	lsls	r5, r3, #11
 8007ce4:	d428      	bmi.n	8007d38 <__ieee754_sqrt+0x174>
 8007ce6:	2100      	movs	r1, #0
 8007ce8:	e000      	b.n	8007cec <__ieee754_sqrt+0x128>
 8007cea:	4601      	mov	r1, r0
 8007cec:	005b      	lsls	r3, r3, #1
 8007cee:	02dc      	lsls	r4, r3, #11
 8007cf0:	f101 0001 	add.w	r0, r1, #1
 8007cf4:	d5f9      	bpl.n	8007cea <__ieee754_sqrt+0x126>
 8007cf6:	f1c0 0420 	rsb	r4, r0, #32
 8007cfa:	fa22 f404 	lsr.w	r4, r2, r4
 8007cfe:	4323      	orrs	r3, r4
 8007d00:	1a7f      	subs	r7, r7, r1
 8007d02:	4082      	lsls	r2, r0
 8007d04:	e76f      	b.n	8007be6 <__ieee754_sqrt+0x22>
 8007d06:	ee10 2a10 	vmov	r2, s0
 8007d0a:	462b      	mov	r3, r5
 8007d0c:	ee10 0a10 	vmov	r0, s0
 8007d10:	4629      	mov	r1, r5
 8007d12:	f7f8 fc89 	bl	8000628 <__aeabi_dmul>
 8007d16:	4622      	mov	r2, r4
 8007d18:	462b      	mov	r3, r5
 8007d1a:	f7f8 fad3 	bl	80002c4 <__adddf3>
 8007d1e:	ec41 0b10 	vmov	d0, r0, r1
 8007d22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d2a:	f1bc 0f00 	cmp.w	ip, #0
 8007d2e:	daa2      	bge.n	8007c76 <__ieee754_sqrt+0xb2>
 8007d30:	e7aa      	b.n	8007c88 <__ieee754_sqrt+0xc4>
 8007d32:	3601      	adds	r6, #1
 8007d34:	4620      	mov	r0, r4
 8007d36:	e7b2      	b.n	8007c9e <__ieee754_sqrt+0xda>
 8007d38:	2420      	movs	r4, #32
 8007d3a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007d3e:	2000      	movs	r0, #0
 8007d40:	e7db      	b.n	8007cfa <__ieee754_sqrt+0x136>
 8007d42:	ee10 2a10 	vmov	r2, s0
 8007d46:	462b      	mov	r3, r5
 8007d48:	4620      	mov	r0, r4
 8007d4a:	4629      	mov	r1, r5
 8007d4c:	f7f8 fab8 	bl	80002c0 <__aeabi_dsub>
 8007d50:	4602      	mov	r2, r0
 8007d52:	460b      	mov	r3, r1
 8007d54:	f7f8 fd92 	bl	800087c <__aeabi_ddiv>
 8007d58:	ec41 0b10 	vmov	d0, r0, r1
 8007d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d60:	7ff00000 	.word	0x7ff00000

08007d64 <matherr>:
 8007d64:	2000      	movs	r0, #0
 8007d66:	4770      	bx	lr

08007d68 <CmdLED>:
void SysTick_Handler(void) {
    HAL_IncTick();
    my_Tick();
}

void CmdLED(int mode) {
 8007d68:	b507      	push	{r0, r1, r2, lr}
    uint32_t led, val;
    int rc;
    if (mode != CMD_INTERACTIVE) {
 8007d6a:	b9f8      	cbnz	r0, 8007dac <CmdLED+0x44>
        return;
    }

    rc = fetch_uint32_arg(&led);
 8007d6c:	4668      	mov	r0, sp
 8007d6e:	f000 fccd 	bl	800870c <fetch_uint32_arg>
    if (rc) {
 8007d72:	b108      	cbz	r0, 8007d78 <CmdLED+0x10>
        printf("Missing LED index\n");
 8007d74:	480f      	ldr	r0, [pc, #60]	; (8007db4 <CmdLED+0x4c>)
 8007d76:	e004      	b.n	8007d82 <CmdLED+0x1a>
        return;
    }

    rc = fetch_uint32_arg(&val);
 8007d78:	a801      	add	r0, sp, #4
 8007d7a:	f000 fcc7 	bl	800870c <fetch_uint32_arg>
    if (rc) {
 8007d7e:	b118      	cbz	r0, 8007d88 <CmdLED+0x20>
        printf("Missing state value, 0 for Off, 1 for On\n");
 8007d80:	480d      	ldr	r0, [pc, #52]	; (8007db8 <CmdLED+0x50>)
 8007d82:	f7f8 ffd7 	bl	8000d34 <puts>
        return;
 8007d86:	e011      	b.n	8007dac <CmdLED+0x44>
    }

    if ((led < 3) || (led > 10)) {
 8007d88:	9900      	ldr	r1, [sp, #0]
 8007d8a:	1ecb      	subs	r3, r1, #3
 8007d8c:	2b07      	cmp	r3, #7
 8007d8e:	d903      	bls.n	8007d98 <CmdLED+0x30>
        printf("Led index of %u is out of the range (3..10)\n",
 8007d90:	480a      	ldr	r0, [pc, #40]	; (8007dbc <CmdLED+0x54>)
 8007d92:	f7f8 ff79 	bl	8000c88 <printf>
                (unsigned int) led);
        return;
 8007d96:	e009      	b.n	8007dac <CmdLED+0x44>
 8007d98:	4a09      	ldr	r2, [pc, #36]	; (8007dc0 <CmdLED+0x58>)
    }

    led -= 3;
    if (val) {
 8007d9a:	9901      	ldr	r1, [sp, #4]
    led -= 3;
 8007d9c:	9300      	str	r3, [sp, #0]
        BSP_LED_On(LEDs[led]);
 8007d9e:	5cd0      	ldrb	r0, [r2, r3]
    if (val) {
 8007da0:	b111      	cbz	r1, 8007da8 <CmdLED+0x40>
        BSP_LED_On(LEDs[led]);
 8007da2:	f004 fb23 	bl	800c3ec <BSP_LED_On>
 8007da6:	e001      	b.n	8007dac <CmdLED+0x44>
    } else {
        BSP_LED_Off(LEDs[led]);
 8007da8:	f004 fb2e 	bl	800c408 <BSP_LED_Off>
    }

}
 8007dac:	b003      	add	sp, #12
 8007dae:	f85d fb04 	ldr.w	pc, [sp], #4
 8007db2:	bf00      	nop
 8007db4:	0800d1c0 	.word	0x0800d1c0
 8007db8:	0800d1d2 	.word	0x0800d1d2
 8007dbc:	0800d1fb 	.word	0x0800d1fb
 8007dc0:	0800d3d8 	.word	0x0800d3d8

08007dc4 <turnOnMagnetometer>:
                BSP_LED_On(LED6);
        }
    }
}

void turnOnMagnetometer(int mode){
 8007dc4:	b507      	push	{r0, r1, r2, lr}
    if (mode != CMD_INTERACTIVE) {
 8007dc6:	b988      	cbnz	r0, 8007dec <turnOnMagnetometer+0x28>
        return;
    }
    
    int32_t state;
    if (fetch_int32_arg(&state)) {
 8007dc8:	a801      	add	r0, sp, #4
 8007dca:	f000 fc8b 	bl	80086e4 <fetch_int32_arg>
 8007dce:	b118      	cbz	r0, 8007dd8 <turnOnMagnetometer+0x14>
        printf("Wrong state\n");
 8007dd0:	4808      	ldr	r0, [pc, #32]	; (8007df4 <turnOnMagnetometer+0x30>)
 8007dd2:	f7f8 ffaf 	bl	8000d34 <puts>
        return;
 8007dd6:	e009      	b.n	8007dec <turnOnMagnetometer+0x28>
    }
    cdata.state = (state>0)? 1 : 0;
 8007dd8:	9b01      	ldr	r3, [sp, #4]
 8007dda:	4a07      	ldr	r2, [pc, #28]	; (8007df8 <turnOnMagnetometer+0x34>)
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	bfd4      	ite	le
 8007de0:	2300      	movle	r3, #0
 8007de2:	2301      	movgt	r3, #1
 8007de4:	f882 3020 	strb.w	r3, [r2, #32]
    clearAllLeds();
 8007de8:	f7f8 fa58 	bl	800029c <clearAllLeds>
};
 8007dec:	b003      	add	sp, #12
 8007dee:	f85d fb04 	ldr.w	pc, [sp], #4
 8007df2:	bf00      	nop
 8007df4:	0800d228 	.word	0x0800d228
 8007df8:	20000f34 	.word	0x20000f34

08007dfc <CmdAccel>:
void CmdAccel(int mode) {
 8007dfc:	b507      	push	{r0, r1, r2, lr}
    if (mode != CMD_INTERACTIVE) {
 8007dfe:	b958      	cbnz	r0, 8007e18 <CmdAccel+0x1c>
    BSP_ACCELERO_GetXYZ(xyz);
 8007e00:	4668      	mov	r0, sp
 8007e02:	f004 fc83 	bl	800c70c <BSP_ACCELERO_GetXYZ>
    printf("Accelerometer returns:\n"
 8007e06:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8007e0a:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
 8007e0e:	f9bd 1000 	ldrsh.w	r1, [sp]
 8007e12:	4803      	ldr	r0, [pc, #12]	; (8007e20 <CmdAccel+0x24>)
 8007e14:	f7f8 ff38 	bl	8000c88 <printf>
}
 8007e18:	b003      	add	sp, #12
 8007e1a:	f85d fb04 	ldr.w	pc, [sp], #4
 8007e1e:	bf00      	nop
 8007e20:	0800d234 	.word	0x0800d234

08007e24 <CmdGyro>:
void CmdGyro(int mode) {
 8007e24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (mode != CMD_INTERACTIVE) {
 8007e26:	b9f8      	cbnz	r0, 8007e68 <CmdGyro+0x44>
    BSP_GYRO_GetXYZ(xyz);
 8007e28:	a801      	add	r0, sp, #4
 8007e2a:	f004 fc99 	bl	800c760 <BSP_GYRO_GetXYZ>
    printf("Gyroscope returns:\n"
 8007e2e:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8007e70 <CmdGyro+0x4c>
 8007e32:	eddd 6a03 	vldr	s13, [sp, #12]
 8007e36:	ed9d 7a02 	vldr	s14, [sp, #8]
 8007e3a:	eddd 7a01 	vldr	s15, [sp, #4]
 8007e3e:	480d      	ldr	r0, [pc, #52]	; (8007e74 <CmdGyro+0x50>)
 8007e40:	ee66 6a86 	vmul.f32	s13, s13, s12
 8007e44:	ee27 7a06 	vmul.f32	s14, s14, s12
 8007e48:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007e4c:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8007e50:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8007e54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007e58:	ee16 3a90 	vmov	r3, s13
 8007e5c:	ee17 2a10 	vmov	r2, s14
 8007e60:	ee17 1a90 	vmov	r1, s15
 8007e64:	f7f8 ff10 	bl	8000c88 <printf>
}
 8007e68:	b005      	add	sp, #20
 8007e6a:	f85d fb04 	ldr.w	pc, [sp], #4
 8007e6e:	bf00      	nop
 8007e70:	43800000 	.word	0x43800000
 8007e74:	0800d267 	.word	0x0800d267

08007e78 <CmdButton>:
void CmdButton(int mode) {
 8007e78:	b508      	push	{r3, lr}
    if (mode != CMD_INTERACTIVE) {
 8007e7a:	b958      	cbnz	r0, 8007e94 <CmdButton+0x1c>
    button = BSP_PB_GetState(BUTTON_USER);
 8007e7c:	f004 fb18 	bl	800c4b0 <BSP_PB_GetState>
    printf("Button is currently: %s\n",
 8007e80:	4b05      	ldr	r3, [pc, #20]	; (8007e98 <CmdButton+0x20>)
 8007e82:	4906      	ldr	r1, [pc, #24]	; (8007e9c <CmdButton+0x24>)
 8007e84:	2800      	cmp	r0, #0
 8007e86:	bf08      	it	eq
 8007e88:	4619      	moveq	r1, r3
 8007e8a:	4805      	ldr	r0, [pc, #20]	; (8007ea0 <CmdButton+0x28>)
}
 8007e8c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    printf("Button is currently: %s\n",
 8007e90:	f7f8 befa 	b.w	8000c88 <printf>
 8007e94:	bd08      	pop	{r3, pc}
 8007e96:	bf00      	nop
 8007e98:	0800d29e 	.word	0x0800d29e
 8007e9c:	0800d296 	.word	0x0800d296
 8007ea0:	0800d2a7 	.word	0x0800d2a7

08007ea4 <magnetInit>:
ADD_CMD("compass", turnOnMagnetometer, "<state>         Activate LED compass");

void magnetInit(int mode) {
 8007ea4:	b510      	push	{r4, lr}
    if (mode != CMD_INTERACTIVE) {
 8007ea6:	4604      	mov	r4, r0
 8007ea8:	b9e8      	cbnz	r0, 8007ee6 <magnetInit+0x42>
    //    LSM303DLHC_InitStruct.MagFull_Scale = 1;

    //LSM303DLHC_MagInit(&LSM303DLHC_InitStruct);

    /* Write value to Mag MEMS CRA_REG regsister */
    COMPASSACCELERO_IO_Write(MAG_I2C_ADDRESS, LSM303DLHC_CRA_REG_M, LSM303DLHC_ODR_30_HZ);
 8007eaa:	4601      	mov	r1, r0
 8007eac:	2214      	movs	r2, #20
 8007eae:	203c      	movs	r0, #60	; 0x3c
 8007eb0:	f004 fbd8 	bl	800c664 <COMPASSACCELERO_IO_Write>
    /* Write value to Mag MEMS CRB_REG regsister */
    COMPASSACCELERO_IO_Write(MAG_I2C_ADDRESS, LSM303DLHC_CRB_REG_M, LSM303DLHC_FS_2_5_GA);
 8007eb4:	2260      	movs	r2, #96	; 0x60
 8007eb6:	2101      	movs	r1, #1
 8007eb8:	203c      	movs	r0, #60	; 0x3c
 8007eba:	f004 fbd3 	bl	800c664 <COMPASSACCELERO_IO_Write>
    /* Write value to Mag MEMS MR_REG regsister */
    COMPASSACCELERO_IO_Write(MAG_I2C_ADDRESS, LSM303DLHC_MR_REG_M, LSM303DLHC_CONTINUOS_CONVERSION);
 8007ebe:	4622      	mov	r2, r4
 8007ec0:	2102      	movs	r1, #2
 8007ec2:	203c      	movs	r0, #60	; 0x3c
 8007ec4:	f004 fbce 	bl	800c664 <COMPASSACCELERO_IO_Write>

    cdata.full_scale = 2.5;
 8007ec8:	4b07      	ldr	r3, [pc, #28]	; (8007ee8 <magnetInit+0x44>)
 8007eca:	4a08      	ldr	r2, [pc, #32]	; (8007eec <magnetInit+0x48>)
 8007ecc:	609a      	str	r2, [r3, #8]
    cdata.sensitivity_xy = LSM303DLHC_M_SENSITIVITY_XY_2_5Ga;
 8007ece:	4a08      	ldr	r2, [pc, #32]	; (8007ef0 <magnetInit+0x4c>)
 8007ed0:	60da      	str	r2, [r3, #12]
    cdata.sensitivity_z = LSM303DLHC_M_SENSITIVITY_Z_2_5Ga;
 8007ed2:	4a08      	ldr	r2, [pc, #32]	; (8007ef4 <magnetInit+0x50>)
 8007ed4:	611a      	str	r2, [r3, #16]

    printf("Status is: %d\n", LSM303DLHC_MagGetDataStatus());
 8007ed6:	f000 faac 	bl	8008432 <LSM303DLHC_MagGetDataStatus>
}
 8007eda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    printf("Status is: %d\n", LSM303DLHC_MagGetDataStatus());
 8007ede:	4601      	mov	r1, r0
 8007ee0:	4805      	ldr	r0, [pc, #20]	; (8007ef8 <magnetInit+0x54>)
 8007ee2:	f7f8 bed1 	b.w	8000c88 <printf>
 8007ee6:	bd10      	pop	{r4, pc}
 8007ee8:	20000f34 	.word	0x20000f34
 8007eec:	40200000 	.word	0x40200000
 8007ef0:	44278000 	.word	0x44278000
 8007ef4:	44160000 	.word	0x44160000
 8007ef8:	0800d2c0 	.word	0x0800d2c0

08007efc <Error_Handler>:
void Error_Handler(void) {
 8007efc:	b508      	push	{r3, lr}
    BSP_LED_On(LED6);
 8007efe:	2003      	movs	r0, #3
 8007f00:	f004 fa74 	bl	800c3ec <BSP_LED_On>
 8007f04:	e7fe      	b.n	8007f04 <Error_Handler+0x8>

08007f06 <SysTick_Handler>:
void SysTick_Handler(void) {
 8007f06:	b508      	push	{r3, lr}
    HAL_IncTick();
 8007f08:	f001 fe0a 	bl	8009b20 <HAL_IncTick>
}
 8007f0c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    my_Tick();
 8007f10:	f7f8 b9b4 	b.w	800027c <my_Tick>
 8007f14:	0000      	movs	r0, r0
	...

08007f18 <ledCompass>:
void ledCompass(){
 8007f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    xmagnet = COMPASSACCELERO_IO_Read(MAG_I2C_ADDRESS, OUT_X_H_M);
 8007f1c:	2103      	movs	r1, #3
void ledCompass(){
 8007f1e:	ed2d 8b06 	vpush	{d8-d10}
    xmagnet = COMPASSACCELERO_IO_Read(MAG_I2C_ADDRESS, OUT_X_H_M);
 8007f22:	203c      	movs	r0, #60	; 0x3c
 8007f24:	f004 fbba 	bl	800c69c <COMPASSACCELERO_IO_Read>
    xmagnet = (xmagnet << 8) + COMPASSACCELERO_IO_Read(MAG_I2C_ADDRESS, OUT_X_L_M);
 8007f28:	2104      	movs	r1, #4
    xmagnet = COMPASSACCELERO_IO_Read(MAG_I2C_ADDRESS, OUT_X_H_M);
 8007f2a:	4680      	mov	r8, r0
    xmagnet = (xmagnet << 8) + COMPASSACCELERO_IO_Read(MAG_I2C_ADDRESS, OUT_X_L_M);
 8007f2c:	203c      	movs	r0, #60	; 0x3c
 8007f2e:	f004 fbb5 	bl	800c69c <COMPASSACCELERO_IO_Read>
    ymagnet = COMPASSACCELERO_IO_Read(MAG_I2C_ADDRESS, OUT_Y_H_M);
 8007f32:	2107      	movs	r1, #7
    xmagnet = (xmagnet << 8) + COMPASSACCELERO_IO_Read(MAG_I2C_ADDRESS, OUT_X_L_M);
 8007f34:	4606      	mov	r6, r0
    ymagnet = COMPASSACCELERO_IO_Read(MAG_I2C_ADDRESS, OUT_Y_H_M);
 8007f36:	203c      	movs	r0, #60	; 0x3c
 8007f38:	f004 fbb0 	bl	800c69c <COMPASSACCELERO_IO_Read>
    ymagnet = (ymagnet << 8) + COMPASSACCELERO_IO_Read(MAG_I2C_ADDRESS, OUT_Y_L_M);
 8007f3c:	2108      	movs	r1, #8
    ymagnet = COMPASSACCELERO_IO_Read(MAG_I2C_ADDRESS, OUT_Y_H_M);
 8007f3e:	4607      	mov	r7, r0
    ymagnet = (ymagnet << 8) + COMPASSACCELERO_IO_Read(MAG_I2C_ADDRESS, OUT_Y_L_M);
 8007f40:	203c      	movs	r0, #60	; 0x3c
 8007f42:	f004 fbab 	bl	800c69c <COMPASSACCELERO_IO_Read>
    int16_t zmagnet = COMPASSACCELERO_IO_Read(MAG_I2C_ADDRESS, OUT_Z_H_M);
 8007f46:	2105      	movs	r1, #5
    ymagnet = (ymagnet << 8) + COMPASSACCELERO_IO_Read(MAG_I2C_ADDRESS, OUT_Y_L_M);
 8007f48:	4605      	mov	r5, r0
    int16_t zmagnet = COMPASSACCELERO_IO_Read(MAG_I2C_ADDRESS, OUT_Z_H_M);
 8007f4a:	203c      	movs	r0, #60	; 0x3c
 8007f4c:	f004 fba6 	bl	800c69c <COMPASSACCELERO_IO_Read>
    zmagnet = (zmagnet << 8) + COMPASSACCELERO_IO_Read(MAG_I2C_ADDRESS, OUT_Z_L_M);
 8007f50:	2106      	movs	r1, #6
    int16_t zmagnet = COMPASSACCELERO_IO_Read(MAG_I2C_ADDRESS, OUT_Z_H_M);
 8007f52:	4604      	mov	r4, r0
    zmagnet = (zmagnet << 8) + COMPASSACCELERO_IO_Read(MAG_I2C_ADDRESS, OUT_Z_L_M);
 8007f54:	203c      	movs	r0, #60	; 0x3c
 8007f56:	f004 fba1 	bl	800c69c <COMPASSACCELERO_IO_Read>
 8007f5a:	eb00 2004 	add.w	r0, r0, r4, lsl #8
    cdata.raw[0] = xmagnet;
 8007f5e:	4c88      	ldr	r4, [pc, #544]	; (8008180 <ledCompass+0x268>)
    cdata.raw[1] = ymagnet;
 8007f60:	eb05 2507 	add.w	r5, r5, r7, lsl #8
    zmagnet = (zmagnet << 8) + COMPASSACCELERO_IO_Read(MAG_I2C_ADDRESS, OUT_Z_L_M);
 8007f64:	b203      	sxth	r3, r0
    cdata.raw[0] = xmagnet;
 8007f66:	eb06 2608 	add.w	r6, r6, r8, lsl #8
            cdata.scaled[ii] = ((float) cdata.raw[ii]) / cdata.sensitivity_xy;
 8007f6a:	ed94 7a03 	vldr	s14, [r4, #12]
            cdata.scaled[ii] = ((float) cdata.raw[ii]) / cdata.sensitivity_z;
 8007f6e:	edd4 6a04 	vldr	s13, [r4, #16]
    cdata.raw[1] = ymagnet;
 8007f72:	8065      	strh	r5, [r4, #2]
    cdata.raw[0] = xmagnet;
 8007f74:	8026      	strh	r6, [r4, #0]
    cdata.raw[2] = zmagnet;
 8007f76:	80a3      	strh	r3, [r4, #4]
 8007f78:	f104 0214 	add.w	r2, r4, #20
    for (int ii = 0; ii < COMP_AXES; ii++) {
 8007f7c:	2500      	movs	r5, #0
        if (ii < COMP_AXES - 1)
 8007f7e:	2d02      	cmp	r5, #2
 8007f80:	d00a      	beq.n	8007f98 <ledCompass+0x80>
            cdata.scaled[ii] = ((float) cdata.raw[ii]) / cdata.sensitivity_xy;
 8007f82:	f934 1015 	ldrsh.w	r1, [r4, r5, lsl #1]
 8007f86:	ee07 1a90 	vmov	s15, r1
 8007f8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007f8e:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8007f92:	ed82 6a00 	vstr	s12, [r2]
 8007f96:	e007      	b.n	8007fa8 <ledCompass+0x90>
            cdata.scaled[ii] = ((float) cdata.raw[ii]) / cdata.sensitivity_z;
 8007f98:	ee07 3a90 	vmov	s15, r3
 8007f9c:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8007fa0:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8007fa4:	edc4 7a07 	vstr	s15, [r4, #28]
    for (int ii = 0; ii < COMP_AXES; ii++) {
 8007fa8:	3501      	adds	r5, #1
 8007faa:	2d03      	cmp	r5, #3
 8007fac:	f102 0204 	add.w	r2, r2, #4
 8007fb0:	d1e5      	bne.n	8007f7e <ledCompass+0x66>
            (cdata.scaled[1] * cdata.scaled[1]));
 8007fb2:	edd4 7a06 	vldr	s15, [r4, #24]
    float ro = sqrt((cdata.scaled[0] * cdata.scaled[0]) +
 8007fb6:	ed94 7a05 	vldr	s14, [r4, #20]
 8007fba:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007fbe:	eee7 7a07 	vfma.f32	s15, s14, s14
 8007fc2:	ee17 0a90 	vmov	r0, s15
 8007fc6:	f7f8 fadb 	bl	8000580 <__aeabi_f2d>
 8007fca:	ec41 0b10 	vmov	d0, r0, r1
 8007fce:	f7ff fd99 	bl	8007b04 <sqrt>
    float theta = atan(cdata.scaled[1] / cdata.scaled[0]) * 180 / PI;
 8007fd2:	ed94 7a06 	vldr	s14, [r4, #24]
 8007fd6:	edd4 7a05 	vldr	s15, [r4, #20]
 8007fda:	eec7 6a27 	vdiv.f32	s13, s14, s15
    float ro = sqrt((cdata.scaled[0] * cdata.scaled[0]) +
 8007fde:	ec57 6b10 	vmov	r6, r7, d0
    float theta = atan(cdata.scaled[1] / cdata.scaled[0]) * 180 / PI;
 8007fe2:	ee16 0a90 	vmov	r0, s13
 8007fe6:	f7f8 facb 	bl	8000580 <__aeabi_f2d>
 8007fea:	ec41 0b10 	vmov	d0, r0, r1
 8007fee:	f7ff fbcb 	bl	8007788 <atan>
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	ec51 0b10 	vmov	r0, r1, d0
 8007ff8:	4b62      	ldr	r3, [pc, #392]	; (8008184 <ledCompass+0x26c>)
 8007ffa:	f7f8 fb15 	bl	8000628 <__aeabi_dmul>
 8007ffe:	a35c      	add	r3, pc, #368	; (adr r3, 8008170 <ledCompass+0x258>)
 8008000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008004:	f7f8 fc3a 	bl	800087c <__aeabi_ddiv>
 8008008:	f7f8 fd48 	bl	8000a9c <__aeabi_d2f>
 800800c:	ee08 0a10 	vmov	s16, r0
    clearAllLeds();
 8008010:	f7f8 f944 	bl	800029c <clearAllLeds>
    if (abs(ro) > abs(NOISY * cdata.scaled[2])) {
 8008014:	4630      	mov	r0, r6
 8008016:	4639      	mov	r1, r7
 8008018:	f7f8 fd40 	bl	8000a9c <__aeabi_d2f>
 800801c:	ee07 0a90 	vmov	s15, r0
 8008020:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008024:	ee17 0a90 	vmov	r0, s15
 8008028:	ea80 76e0 	eor.w	r6, r0, r0, asr #31
 800802c:	eba6 76e0 	sub.w	r6, r6, r0, asr #31
 8008030:	69e0      	ldr	r0, [r4, #28]
 8008032:	f7f8 faa5 	bl	8000580 <__aeabi_f2d>
 8008036:	a350      	add	r3, pc, #320	; (adr r3, 8008178 <ledCompass+0x260>)
 8008038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800803c:	f7f8 faf4 	bl	8000628 <__aeabi_dmul>
 8008040:	f7f8 fd04 	bl	8000a4c <__aeabi_d2iz>
 8008044:	2800      	cmp	r0, #0
 8008046:	bfb8      	it	lt
 8008048:	4240      	neglt	r0, r0
 800804a:	4286      	cmp	r6, r0
 800804c:	dd0a      	ble.n	8008064 <ledCompass+0x14c>
        BSP_LED_On(LED7);
 800804e:	2004      	movs	r0, #4
 8008050:	f004 f9cc 	bl	800c3ec <BSP_LED_On>
        BSP_LED_On(LED6);
 8008054:	4628      	mov	r0, r5
 8008056:	f004 f9c9 	bl	800c3ec <BSP_LED_On>
        BSP_LED_On(LED3);
 800805a:	2000      	movs	r0, #0
 800805c:	f004 f9c6 	bl	800c3ec <BSP_LED_On>
        BSP_LED_On(LED10);
 8008060:	2007      	movs	r0, #7
 8008062:	e078      	b.n	8008156 <ledCompass+0x23e>
        if (cdata.scaled[0] > 0) {
 8008064:	4b46      	ldr	r3, [pc, #280]	; (8008180 <ledCompass+0x268>)
 8008066:	ed9f aa48 	vldr	s20, [pc, #288]	; 8008188 <ledCompass+0x270>
 800806a:	edd3 7a05 	vldr	s15, [r3, #20]
 800806e:	eddf 9a47 	vldr	s19, [pc, #284]	; 800818c <ledCompass+0x274>
 8008072:	ed9f 9a47 	vldr	s18, [pc, #284]	; 8008190 <ledCompass+0x278>
 8008076:	eddf 8a47 	vldr	s17, [pc, #284]	; 8008194 <ledCompass+0x27c>
 800807a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800807e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            if (theta < -67.5)
 8008082:	eeb4 8aca 	vcmpe.f32	s16, s20
        if (cdata.scaled[0] > 0) {
 8008086:	dd33      	ble.n	80080f0 <ledCompass+0x1d8>
            if (theta < -67.5)
 8008088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800808c:	d502      	bpl.n	8008094 <ledCompass+0x17c>
                BSP_LED_On(LED6);
 800808e:	4628      	mov	r0, r5
 8008090:	f004 f9ac 	bl	800c3ec <BSP_LED_On>
            if ((theta > -67.5) && (theta < -22.5))
 8008094:	eeb4 8aca 	vcmpe.f32	s16, s20
 8008098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800809c:	dd07      	ble.n	80080ae <ledCompass+0x196>
 800809e:	eeb4 8ae9 	vcmpe.f32	s16, s19
 80080a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080a6:	d502      	bpl.n	80080ae <ledCompass+0x196>
                BSP_LED_On(LED8);
 80080a8:	2005      	movs	r0, #5
 80080aa:	f004 f99f 	bl	800c3ec <BSP_LED_On>
            if ((theta > -22.5) && (theta < 22.5))
 80080ae:	eeb4 8ae9 	vcmpe.f32	s16, s19
 80080b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080b6:	dd07      	ble.n	80080c8 <ledCompass+0x1b0>
 80080b8:	eeb4 8ac9 	vcmpe.f32	s16, s18
 80080bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080c0:	d502      	bpl.n	80080c8 <ledCompass+0x1b0>
                BSP_LED_On(LED10);
 80080c2:	2007      	movs	r0, #7
 80080c4:	f004 f992 	bl	800c3ec <BSP_LED_On>
            if ((theta > 22.5) && (theta < 67.5))
 80080c8:	eeb4 8ac9 	vcmpe.f32	s16, s18
 80080cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080d0:	dd07      	ble.n	80080e2 <ledCompass+0x1ca>
 80080d2:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80080d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080da:	d502      	bpl.n	80080e2 <ledCompass+0x1ca>
                BSP_LED_On(LED9);
 80080dc:	2006      	movs	r0, #6
 80080de:	f004 f985 	bl	800c3ec <BSP_LED_On>
            if (theta > 67.5)
 80080e2:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80080e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080ea:	dd3a      	ble.n	8008162 <ledCompass+0x24a>
                BSP_LED_On(LED7);
 80080ec:	2004      	movs	r0, #4
 80080ee:	e032      	b.n	8008156 <ledCompass+0x23e>
            if (theta < -67.5)
 80080f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080f4:	d502      	bpl.n	80080fc <ledCompass+0x1e4>
                BSP_LED_On(LED7);
 80080f6:	2004      	movs	r0, #4
 80080f8:	f004 f978 	bl	800c3ec <BSP_LED_On>
            if ((theta > -67.5) && (theta < -22.5))
 80080fc:	eeb4 8aca 	vcmpe.f32	s16, s20
 8008100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008104:	dd07      	ble.n	8008116 <ledCompass+0x1fe>
 8008106:	eeb4 8ae9 	vcmpe.f32	s16, s19
 800810a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800810e:	d502      	bpl.n	8008116 <ledCompass+0x1fe>
                BSP_LED_On(LED5);
 8008110:	2002      	movs	r0, #2
 8008112:	f004 f96b 	bl	800c3ec <BSP_LED_On>
            if ((theta > -22.5) && (theta < 22.5))
 8008116:	eeb4 8ae9 	vcmpe.f32	s16, s19
 800811a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800811e:	dd07      	ble.n	8008130 <ledCompass+0x218>
 8008120:	eeb4 8ac9 	vcmpe.f32	s16, s18
 8008124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008128:	d502      	bpl.n	8008130 <ledCompass+0x218>
                BSP_LED_On(LED3);
 800812a:	2000      	movs	r0, #0
 800812c:	f004 f95e 	bl	800c3ec <BSP_LED_On>
            if ((theta > 22.5) && (theta < 67.5))
 8008130:	eeb4 8ac9 	vcmpe.f32	s16, s18
 8008134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008138:	dd07      	ble.n	800814a <ledCompass+0x232>
 800813a:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800813e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008142:	d502      	bpl.n	800814a <ledCompass+0x232>
                BSP_LED_On(LED4);
 8008144:	2001      	movs	r0, #1
 8008146:	f004 f951 	bl	800c3ec <BSP_LED_On>
            if (theta > 67.5)
 800814a:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800814e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008152:	dd06      	ble.n	8008162 <ledCompass+0x24a>
                BSP_LED_On(LED6);
 8008154:	2003      	movs	r0, #3
}
 8008156:	ecbd 8b06 	vpop	{d8-d10}
 800815a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                BSP_LED_On(LED6);
 800815e:	f004 b945 	b.w	800c3ec <BSP_LED_On>
}
 8008162:	ecbd 8b06 	vpop	{d8-d10}
 8008166:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800816a:	bf00      	nop
 800816c:	f3af 8000 	nop.w
 8008170:	53c8d4f1 	.word	0x53c8d4f1
 8008174:	400921fb 	.word	0x400921fb
 8008178:	9999999a 	.word	0x9999999a
 800817c:	3ff99999 	.word	0x3ff99999
 8008180:	20000f34 	.word	0x20000f34
 8008184:	40668000 	.word	0x40668000
 8008188:	c2870000 	.word	0xc2870000
 800818c:	c1b40000 	.word	0xc1b40000
 8008190:	41b40000 	.word	0x41b40000
 8008194:	42870000 	.word	0x42870000

08008198 <main>:
int main(int argc, char **argv) {
 8008198:	b530      	push	{r4, r5, lr}
 800819a:	b091      	sub	sp, #68	; 0x44
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800819c:	2301      	movs	r3, #1
 800819e:	9306      	str	r3, [sp, #24]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80081a0:	9307      	str	r3, [sp, #28]
    RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80081a2:	2300      	movs	r3, #0
 80081a4:	9308      	str	r3, [sp, #32]
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80081a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80081aa:	2402      	movs	r4, #2
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80081ac:	930e      	str	r3, [sp, #56]	; 0x38
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80081ae:	a806      	add	r0, sp, #24
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80081b0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80081b4:	940d      	str	r4, [sp, #52]	; 0x34
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80081b6:	930f      	str	r3, [sp, #60]	; 0x3c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80081b8:	f000 ffec 	bl	8009194 <HAL_RCC_OscConfig>
 80081bc:	bb10      	cbnz	r0, 8008204 <main+0x6c>
    RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80081be:	230f      	movs	r3, #15
 80081c0:	9301      	str	r3, [sp, #4]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80081c2:	9003      	str	r0, [sp, #12]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80081c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80081c8:	9005      	str	r0, [sp, #20]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80081ca:	4621      	mov	r1, r4
 80081cc:	a801      	add	r0, sp, #4
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80081ce:	9402      	str	r4, [sp, #8]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80081d0:	9304      	str	r3, [sp, #16]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80081d2:	f001 facd 	bl	8009770 <HAL_RCC_ClockConfig>
 80081d6:	4604      	mov	r4, r0
 80081d8:	b9a0      	cbnz	r0, 8008204 <main+0x6c>
    HAL_Init();
 80081da:	f001 fc8f 	bl	8009afc <HAL_Init>
    TerminalInit(); /* Initialize UART and USB */
 80081de:	f000 fbc9 	bl	8008974 <TerminalInit>
        BSP_LED_Init(LEDs[i]);
 80081e2:	4d12      	ldr	r5, [pc, #72]	; (800822c <main+0x94>)
 80081e4:	5d28      	ldrb	r0, [r5, r4]
    for (i = 0; i < numLEDs; i++) {
 80081e6:	3401      	adds	r4, #1
        BSP_LED_Init(LEDs[i]);
 80081e8:	f004 f8cc 	bl	800c384 <BSP_LED_Init>
    for (i = 0; i < numLEDs; i++) {
 80081ec:	2c08      	cmp	r4, #8
 80081ee:	d1f9      	bne.n	80081e4 <main+0x4c>
    BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 80081f0:	2100      	movs	r1, #0
 80081f2:	4608      	mov	r0, r1
 80081f4:	f004 f922 	bl	800c43c <BSP_PB_Init>
    accelRc = BSP_ACCELERO_Init();
 80081f8:	f004 fa70 	bl	800c6dc <BSP_ACCELERO_Init>
    if (accelRc != ACCELERO_OK) {
 80081fc:	b120      	cbz	r0, 8008208 <main+0x70>
        printf("Failed to initialize acceleromter\n");
 80081fe:	480c      	ldr	r0, [pc, #48]	; (8008230 <main+0x98>)
 8008200:	f7f8 fd98 	bl	8000d34 <puts>
        Error_Handler();
 8008204:	f7ff fe7a 	bl	8007efc <Error_Handler>
    gyroRc = BSP_GYRO_Init();
 8008208:	f004 fa88 	bl	800c71c <BSP_GYRO_Init>
    if (gyroRc != GYRO_OK) {
 800820c:	b108      	cbz	r0, 8008212 <main+0x7a>
        printf("Failed to initialize Gyroscope\n");
 800820e:	4809      	ldr	r0, [pc, #36]	; (8008234 <main+0x9c>)
 8008210:	e7f6      	b.n	8008200 <main+0x68>
    my_Init();
 8008212:	f7f8 f83f 	bl	8000294 <my_Init>
        if(cdata.state)
 8008216:	4c08      	ldr	r4, [pc, #32]	; (8008238 <main+0xa0>)
 8008218:	f994 3020 	ldrsb.w	r3, [r4, #32]
 800821c:	b10b      	cbz	r3, 8008222 <main+0x8a>
            ledCompass();
 800821e:	f7ff fe7b 	bl	8007f18 <ledCompass>
        TaskInput();
 8008222:	f000 f9c7 	bl	80085b4 <TaskInput>
        my_Loop();
 8008226:	f7f8 f833 	bl	8000290 <my_Loop>
    }
 800822a:	e7f5      	b.n	8008218 <main+0x80>
 800822c:	0800d3d8 	.word	0x0800d3d8
 8008230:	0800d2cf 	.word	0x0800d2cf
 8008234:	0800d2f1 	.word	0x0800d2f1
 8008238:	20000f34 	.word	0x20000f34

0800823c <LSM303DLHC_AccInit>:
  * @brief    Set LSM303DLHC Initialization.
  * @param  InitStruct: init parameters
  * @retval   None
  */
void LSM303DLHC_AccInit(uint16_t InitStruct)
{  
 800823c:	b510      	push	{r4, lr}
 800823e:	4604      	mov	r4, r0
  uint8_t ctrl = 0x00;
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 8008240:	f004 f9ba 	bl	800c5b8 <COMPASSACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG1_A, ctrl);
 8008244:	b2e2      	uxtb	r2, r4
 8008246:	2120      	movs	r1, #32
 8008248:	2032      	movs	r0, #50	; 0x32
 800824a:	f004 fa0b 	bl	800c664 <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A, ctrl);
 800824e:	2200      	movs	r2, #0
 8008250:	2123      	movs	r1, #35	; 0x23
 8008252:	2032      	movs	r0, #50	; 0x32
}
 8008254:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A, ctrl);
 8008258:	f004 ba04 	b.w	800c664 <COMPASSACCELERO_IO_Write>

0800825c <LSM303DLHC_AccReadID>:
/**
  * @brief     Read LSM303DLHC ID.
  * @retval   ID 
  */
uint8_t LSM303DLHC_AccReadID(void)
{  
 800825c:	b508      	push	{r3, lr}
  uint8_t ctrl = 0x00;
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 800825e:	f004 f9ab 	bl	800c5b8 <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address*/
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_WHO_AM_I_ADDR);
 8008262:	210f      	movs	r1, #15
 8008264:	2032      	movs	r0, #50	; 0x32

  return ctrl;
}
 8008266:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_WHO_AM_I_ADDR);
 800826a:	f004 ba17 	b.w	800c69c <COMPASSACCELERO_IO_Read>

0800826e <LSM303DLHC_AccRebootCmd>:
/**
  * @brief     Reboot memory content of LSM303DLHC
  * @retval   None
  */
void LSM303DLHC_AccRebootCmd(void)
{
 800826e:	b508      	push	{r3, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 8008270:	2124      	movs	r1, #36	; 0x24
 8008272:	2032      	movs	r0, #50	; 0x32
 8008274:	f004 fa12 	bl	800c69c <COMPASSACCELERO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303DLHC_BOOT_REBOOTMEMORY;
  
  /* Write value to ACC MEMS CTRL_REG5 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A, tmpreg);
 8008278:	f060 027f 	orn	r2, r0, #127	; 0x7f
 800827c:	b2d2      	uxtb	r2, r2
 800827e:	2124      	movs	r1, #36	; 0x24
 8008280:	2032      	movs	r0, #50	; 0x32
}
 8008282:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A, tmpreg);
 8008286:	f004 b9ed 	b.w	800c664 <COMPASSACCELERO_IO_Write>

0800828a <LSM303DLHC_AccFilterConfig>:
  * @brief     Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval   None
  */
void LSM303DLHC_AccFilterConfig(uint8_t FilterStruct) 
{
 800828a:	b510      	push	{r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 800828c:	2121      	movs	r1, #33	; 0x21
{
 800828e:	4604      	mov	r4, r0
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8008290:	2032      	movs	r0, #50	; 0x32
 8008292:	f004 fa03 	bl	800c69c <COMPASSACCELERO_IO_Read>
  
  tmpreg &= 0x0C;
 8008296:	f000 020c 	and.w	r2, r0, #12
  tmpreg |= FilterStruct;
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 800829a:	4322      	orrs	r2, r4
 800829c:	2121      	movs	r1, #33	; 0x21
 800829e:	2032      	movs	r0, #50	; 0x32
}
 80082a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 80082a4:	f004 b9de 	b.w	800c664 <COMPASSACCELERO_IO_Write>

080082a8 <LSM303DLHC_AccFilterCmd>:
  *         @arg: LSM303DLHC_HighPassFilter_DISABLE 
  *         @arg: LSM303DLHC_HighPassFilter_ENABLE          
  * @retval None
  */
void LSM303DLHC_AccFilterCmd(uint8_t HighPassFilterState)
 {
 80082a8:	b510      	push	{r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 80082aa:	2121      	movs	r1, #33	; 0x21
 {
 80082ac:	4604      	mov	r4, r0
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 80082ae:	2032      	movs	r0, #50	; 0x32
 80082b0:	f004 f9f4 	bl	800c69c <COMPASSACCELERO_IO_Read>
                  
  tmpreg &= 0xF7;
 80082b4:	f000 02f7 	and.w	r2, r0, #247	; 0xf7

  tmpreg |= HighPassFilterState;

  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 80082b8:	4322      	orrs	r2, r4
 80082ba:	2121      	movs	r1, #33	; 0x21
 80082bc:	2032      	movs	r0, #50	; 0x32
}
 80082be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 80082c2:	f004 b9cf 	b.w	800c664 <COMPASSACCELERO_IO_Write>

080082c6 <LSM303DLHC_AccReadXYZ>:
  * @brief  Read X, Y & Z Accelration values 
* @param  pfData : Data out pointer
  * @retval None
  */
void LSM303DLHC_AccReadXYZ(int16_t* pData)
{
 80082c6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  int8_t buffer[6];
  uint8_t i = 0;
  uint8_t sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 80082ca:	2123      	movs	r1, #35	; 0x23
{
 80082cc:	4606      	mov	r6, r0
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 80082ce:	2032      	movs	r0, #50	; 0x32
 80082d0:	f004 f9e4 	bl	800c69c <COMPASSACCELERO_IO_Read>
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 80082d4:	2124      	movs	r1, #36	; 0x24
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 80082d6:	4604      	mov	r4, r0
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 80082d8:	2032      	movs	r0, #50	; 0x32
 80082da:	f004 f9df 	bl	800c69c <COMPASSACCELERO_IO_Read>

  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
 80082de:	2128      	movs	r1, #40	; 0x28
 80082e0:	2032      	movs	r0, #50	; 0x32
 80082e2:	f004 f9db 	bl	800c69c <COMPASSACCELERO_IO_Read>
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 80082e6:	2129      	movs	r1, #41	; 0x29
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
 80082e8:	fa4f fa80 	sxtb.w	sl, r0
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 80082ec:	2032      	movs	r0, #50	; 0x32
 80082ee:	f004 f9d5 	bl	800c69c <COMPASSACCELERO_IO_Read>
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 80082f2:	212a      	movs	r1, #42	; 0x2a
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 80082f4:	fa4f f880 	sxtb.w	r8, r0
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 80082f8:	2032      	movs	r0, #50	; 0x32
 80082fa:	f004 f9cf 	bl	800c69c <COMPASSACCELERO_IO_Read>
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 80082fe:	212b      	movs	r1, #43	; 0x2b
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 8008300:	b247      	sxtb	r7, r0
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 8008302:	2032      	movs	r0, #50	; 0x32
 8008304:	f004 f9ca 	bl	800c69c <COMPASSACCELERO_IO_Read>
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 8008308:	212c      	movs	r1, #44	; 0x2c
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 800830a:	b245      	sxtb	r5, r0
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 800830c:	2032      	movs	r0, #50	; 0x32
 800830e:	f004 f9c5 	bl	800c69c <COMPASSACCELERO_IO_Read>
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 8008312:	212d      	movs	r1, #45	; 0x2d
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 8008314:	fa4f f980 	sxtb.w	r9, r0
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 8008318:	2032      	movs	r0, #50	; 0x32
 800831a:	f004 f9bf 	bl	800c69c <COMPASSACCELERO_IO_Read>
  
  /* check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303DLHC_BLE_MSB)) 
 800831e:	0663      	lsls	r3, r4, #25
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 8008320:	b240      	sxtb	r0, r0
  if(!(ctrlx[0] & LSM303DLHC_BLE_MSB)) 
 8008322:	d416      	bmi.n	8008352 <LSM303DLHC_AccReadXYZ+0x8c>
  {
    for(i=0; i<3; i++)
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 8008324:	eb0a 2808 	add.w	r8, sl, r8, lsl #8
 8008328:	eb07 2505 	add.w	r5, r7, r5, lsl #8
 800832c:	f8ad 8000 	strh.w	r8, [sp]
 8008330:	f8ad 5002 	strh.w	r5, [sp, #2]
 8008334:	eb09 2000 	add.w	r0, r9, r0, lsl #8
    }
  }

  /* normal mode */
  /* switch the sensitivity value set in the CRTL4*/
  switch(ctrlx[0] & LSM303DLHC_FULLSCALE_16G)
 8008338:	f004 0430 	and.w	r4, r4, #48	; 0x30
 800833c:	2c20      	cmp	r4, #32
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 800833e:	f8ad 0004 	strh.w	r0, [sp, #4]
  switch(ctrlx[0] & LSM303DLHC_FULLSCALE_16G)
 8008342:	d011      	beq.n	8008368 <LSM303DLHC_AccReadXYZ+0xa2>
 8008344:	2c30      	cmp	r4, #48	; 0x30
 8008346:	d011      	beq.n	800836c <LSM303DLHC_AccReadXYZ+0xa6>
 8008348:	2c10      	cmp	r4, #16
  uint8_t sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 800834a:	bf0c      	ite	eq
 800834c:	2302      	moveq	r3, #2
 800834e:	2301      	movne	r3, #1
 8008350:	e00d      	b.n	800836e <LSM303DLHC_AccReadXYZ+0xa8>
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 8008352:	eb08 280a 	add.w	r8, r8, sl, lsl #8
 8008356:	eb05 2507 	add.w	r5, r5, r7, lsl #8
 800835a:	f8ad 8000 	strh.w	r8, [sp]
 800835e:	f8ad 5002 	strh.w	r5, [sp, #2]
 8008362:	eb00 2009 	add.w	r0, r0, r9, lsl #8
 8008366:	e7e7      	b.n	8008338 <LSM303DLHC_AccReadXYZ+0x72>
    break;
  case LSM303DLHC_FULLSCALE_4G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_4G;
    break;
  case LSM303DLHC_FULLSCALE_8G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_8G;
 8008368:	2304      	movs	r3, #4
    break;
 800836a:	e000      	b.n	800836e <LSM303DLHC_AccReadXYZ+0xa8>
  case LSM303DLHC_FULLSCALE_16G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_16G;
 800836c:	230c      	movs	r3, #12
  }

  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
  {
    pData[i]=(pnRawData[i] * sensitivity);
 800836e:	f8bd 2000 	ldrh.w	r2, [sp]
 8008372:	b29b      	uxth	r3, r3
 8008374:	fb12 f203 	smulbb	r2, r2, r3
 8008378:	8032      	strh	r2, [r6, #0]
 800837a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800837e:	fb12 f203 	smulbb	r2, r2, r3
 8008382:	8072      	strh	r2, [r6, #2]
 8008384:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8008388:	fb12 f303 	smulbb	r3, r2, r3
 800838c:	80b3      	strh	r3, [r6, #4]
  }

}
 800838e:	b002      	add	sp, #8
 8008390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008394 <LSM303DLHC_AccFilterClickCmd>:
  *         @arg: LSM303DLHC_HPF_CLICK_DISABLE 
  *         @arg: LSM303DLHC_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterClickCmd(uint8_t HighPassFilterClickState)
 {
 8008394:	b510      	push	{r4, lr}
  uint8_t tmpreg = 0x00;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8008396:	2121      	movs	r1, #33	; 0x21
 {
 8008398:	4604      	mov	r4, r0
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 800839a:	2032      	movs	r0, #50	; 0x32
 800839c:	f004 f97e 	bl	800c69c <COMPASSACCELERO_IO_Read>

  tmpreg &= ~(LSM303DLHC_HPF_CLICK_ENABLE);
 80083a0:	f000 02fb 	and.w	r2, r0, #251	; 0xfb

  tmpreg |= HighPassFilterClickState;

  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 80083a4:	4322      	orrs	r2, r4
 80083a6:	2121      	movs	r1, #33	; 0x21
 80083a8:	2032      	movs	r0, #50	; 0x32
}
 80083aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 80083ae:	f004 b959 	b.w	800c664 <COMPASSACCELERO_IO_Write>

080083b2 <LSM303DLHC_AccIT1Enable>:
  *         @arg   LSM303DLHC_IT1_WTM
  *         @arg   LSM303DLHC_IT1_OVERRUN              
  * @retval None
  */
void LSM303DLHC_AccIT1Enable(uint8_t LSM303DLHC_IT)
{
 80083b2:	b510      	push	{r4, lr}
  uint8_t tmpval = 0x00;
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A);
 80083b4:	2122      	movs	r1, #34	; 0x22
{
 80083b6:	4604      	mov	r4, r0
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A);
 80083b8:	2032      	movs	r0, #50	; 0x32
 80083ba:	f004 f96f 	bl	800c69c <COMPASSACCELERO_IO_Read>
  
  /* Enable IT1 */
  tmpval |= LSM303DLHC_IT;
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A, tmpval);
 80083be:	ea40 0204 	orr.w	r2, r0, r4
 80083c2:	b2d2      	uxtb	r2, r2
 80083c4:	2122      	movs	r1, #34	; 0x22
 80083c6:	2032      	movs	r0, #50	; 0x32
}
 80083c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A, tmpval);
 80083cc:	f004 b94a 	b.w	800c664 <COMPASSACCELERO_IO_Write>

080083d0 <LSM303DLHC_AccClickITEnable>:
  * @param  ITCombination: Or or And combination
  *         ITAxes: axes to be enabled 
  * @retval None
  */
void LSM303DLHC_AccClickITEnable(uint8_t ITClick)
{  
 80083d0:	b510      	push	{r4, lr}
  uint8_t tmpval = 0x00;
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A);
 80083d2:	2138      	movs	r1, #56	; 0x38
{  
 80083d4:	4604      	mov	r4, r0
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A);
 80083d6:	2032      	movs	r0, #50	; 0x32
 80083d8:	f004 f960 	bl	800c69c <COMPASSACCELERO_IO_Read>
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A, tmpval);
 80083dc:	ea40 0204 	orr.w	r2, r0, r4
 80083e0:	b2d2      	uxtb	r2, r2
 80083e2:	2138      	movs	r1, #56	; 0x38
 80083e4:	2032      	movs	r0, #50	; 0x32
 80083e6:	f004 f93d 	bl	800c664 <COMPASSACCELERO_IO_Write>

  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_THS_A, tmpval);
 80083ea:	220a      	movs	r2, #10
 80083ec:	213a      	movs	r1, #58	; 0x3a
 80083ee:	2032      	movs	r0, #50	; 0x32
 80083f0:	f004 f938 	bl	800c664 <COMPASSACCELERO_IO_Write>

  /* Configure Time Limit */
  tmpval = 0x05;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LIMIT_A, tmpval);
 80083f4:	2205      	movs	r2, #5
 80083f6:	213b      	movs	r1, #59	; 0x3b
 80083f8:	2032      	movs	r0, #50	; 0x32
 80083fa:	f004 f933 	bl	800c664 <COMPASSACCELERO_IO_Write>

  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LATENCY_A, tmpval);
 80083fe:	2205      	movs	r2, #5
 8008400:	213c      	movs	r1, #60	; 0x3c
 8008402:	2032      	movs	r0, #50	; 0x32
 8008404:	f004 f92e 	bl	800c664 <COMPASSACCELERO_IO_Write>

  /* Configure Click Window */
  tmpval = 0x32;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_WINDOW_A, tmpval);
 8008408:	2232      	movs	r2, #50	; 0x32
 800840a:	213d      	movs	r1, #61	; 0x3d
 800840c:	4610      	mov	r0, r2

}
 800840e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_WINDOW_A, tmpval);
 8008412:	f004 b927 	b.w	800c664 <COMPASSACCELERO_IO_Write>

08008416 <LSM303DLHC_AccZClickITConfig>:
  * @brief  click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccZClickITConfig(void)
{  
 8008416:	b508      	push	{r3, lr}
  /* configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 8008418:	f004 f900 	bl	800c61c <COMPASSACCELERO_IO_ITConfig>
  
  /* select click IT as INT1 interrupt */
  LSM303DLHC_AccIT1Enable(LSM303DLHC_IT1_CLICK);
 800841c:	2080      	movs	r0, #128	; 0x80
 800841e:	f7ff ffc8 	bl	80083b2 <LSM303DLHC_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303DLHC_AccFilterClickCmd(LSM303DLHC_HPF_CLICK_ENABLE);
 8008422:	2004      	movs	r0, #4
 8008424:	f7ff ffb6 	bl	8008394 <LSM303DLHC_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303DLHC_AccClickITEnable(LSM303DLHC_Z_SINGLE_CLICK);
 8008428:	2010      	movs	r0, #16
  
}
 800842a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  LSM303DLHC_AccClickITEnable(LSM303DLHC_Z_SINGLE_CLICK);
 800842e:	f7ff bfcf 	b.w	80083d0 <LSM303DLHC_AccClickITEnable>

08008432 <LSM303DLHC_MagGetDataStatus>:
  * @retval Data status in a LSM303DLHC Data register
  */
uint8_t LSM303DLHC_MagGetDataStatus(void)
{
  /* Read Mag STATUS register */              
  return COMPASSACCELERO_IO_Read(MAG_I2C_ADDRESS, LSM303DLHC_SR_REG_M);
 8008432:	2109      	movs	r1, #9
 8008434:	203c      	movs	r0, #60	; 0x3c
 8008436:	f004 b931 	b.w	800c69c <COMPASSACCELERO_IO_Read>
	...

0800843c <CmdTest>:
int mytest( int x );

void CmdTest(int action)
{

  if(action==CMD_SHORT_HELP) return;
 800843c:	2801      	cmp	r0, #1
{
 800843e:	b508      	push	{r3, lr}
  if(action==CMD_SHORT_HELP) return;
 8008440:	d00f      	beq.n	8008462 <CmdTest+0x26>
  if(action==CMD_LONG_HELP) {
 8008442:	2802      	cmp	r0, #2
 8008444:	d104      	bne.n	8008450 <CmdTest+0x14>
    printf("testasm\n\n"
 8008446:	4807      	ldr	r0, [pc, #28]	; (8008464 <CmdTest+0x28>)
	   );

    return;
  }
  printf("ret val = %d\n", mytest( 77  ) );
}
 8008448:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    printf("testasm\n\n"
 800844c:	f7f8 bc72 	b.w	8000d34 <puts>
  printf("ret val = %d\n", mytest( 77  ) );
 8008450:	204d      	movs	r0, #77	; 0x4d
 8008452:	f7f7 ff07 	bl	8000264 <mytest>
}
 8008456:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  printf("ret val = %d\n", mytest( 77  ) );
 800845a:	4601      	mov	r1, r0
 800845c:	4802      	ldr	r0, [pc, #8]	; (8008468 <CmdTest+0x2c>)
 800845e:	f7f8 bc13 	b.w	8000c88 <printf>
 8008462:	bd08      	pop	{r3, pc}
 8008464:	0800d3e0 	.word	0x0800d3e0
 8008468:	0800d419 	.word	0x0800d419

0800846c <CmdW>:
	 (unsigned int)(*((uint32_t *)addr)));
}


void CmdW(int mode)
{
 800846c:	b507      	push	{r0, r1, r2, lr}
  uint32_t addr,data;

  if(mode != CMD_INTERACTIVE) return;
 800846e:	b940      	cbnz	r0, 8008482 <CmdW+0x16>

  fetch_uint32_arg(&addr);
 8008470:	4668      	mov	r0, sp
 8008472:	f000 f94b 	bl	800870c <fetch_uint32_arg>
  fetch_uint32_arg(&data);
 8008476:	a801      	add	r0, sp, #4
 8008478:	f000 f948 	bl	800870c <fetch_uint32_arg>

  *((uint32_t *)addr) = data;
 800847c:	9b00      	ldr	r3, [sp, #0]
 800847e:	9a01      	ldr	r2, [sp, #4]
 8008480:	601a      	str	r2, [r3, #0]
}
 8008482:	b003      	add	sp, #12
 8008484:	f85d fb04 	ldr.w	pc, [sp], #4

08008488 <CmdR>:
{
 8008488:	b507      	push	{r0, r1, r2, lr}
  if(mode != CMD_INTERACTIVE) return;
 800848a:	b938      	cbnz	r0, 800849c <CmdR+0x14>
  fetch_uint32_arg(&addr);
 800848c:	a801      	add	r0, sp, #4
 800848e:	f000 f93d 	bl	800870c <fetch_uint32_arg>
	 (unsigned int)(*((uint32_t *)addr)));
 8008492:	9901      	ldr	r1, [sp, #4]
  printf("0x%08X: 0x%08X\n",(unsigned int)addr, 
 8008494:	4803      	ldr	r0, [pc, #12]	; (80084a4 <CmdR+0x1c>)
 8008496:	680a      	ldr	r2, [r1, #0]
 8008498:	f7f8 fbf6 	bl	8000c88 <printf>
}
 800849c:	b003      	add	sp, #12
 800849e:	f85d fb04 	ldr.w	pc, [sp], #4
 80084a2:	bf00      	nop
 80084a4:	0800d43d 	.word	0x0800d43d

080084a8 <parse>:

#define SEPS " \t\n\v\f\r"

/* Parse the buffer and call commands */ 
int parse(char *buf, int len, const parse_table *table)
{
 80084a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084ac:	4615      	mov	r5, r2
  char *p;
  int i,arg;
  const parse_table *t;
  
  /* Check for silly things */
  if(buf == NULL) {
 80084ae:	b910      	cbnz	r0, 80084b6 <parse+0xe>
    printf("NULL buf pointer passed to %s()\n",__FUNCTION__);
 80084b0:	4935      	ldr	r1, [pc, #212]	; (8008588 <parse+0xe0>)
 80084b2:	4836      	ldr	r0, [pc, #216]	; (800858c <parse+0xe4>)
 80084b4:	e05c      	b.n	8008570 <parse+0xc8>
    return -1;
  }

  if(len==0) {
 80084b6:	b911      	cbnz	r1, 80084be <parse+0x16>
    printf("len == 0 in %s\n",__FUNCTION__);
 80084b8:	4933      	ldr	r1, [pc, #204]	; (8008588 <parse+0xe0>)
 80084ba:	4835      	ldr	r0, [pc, #212]	; (8008590 <parse+0xe8>)
 80084bc:	e058      	b.n	8008570 <parse+0xc8>
    return -1;
  }

  if(table == NULL) {
 80084be:	b122      	cbz	r2, 80084ca <parse+0x22>
  }


  /* Find the first word, by skiping over whitespace */
  i = len;
  while((i--) && (*buf != 0) && (isspace((uint32_t)*buf))) buf++;
 80084c0:	4b34      	ldr	r3, [pc, #208]	; (8008594 <parse+0xec>)
 80084c2:	1e4c      	subs	r4, r1, #1
 80084c4:	681e      	ldr	r6, [r3, #0]
 80084c6:	4603      	mov	r3, r0
 80084c8:	e00c      	b.n	80084e4 <parse+0x3c>
    printf("NULL table pointer passed to %s()\n",__FUNCTION__);
 80084ca:	492f      	ldr	r1, [pc, #188]	; (8008588 <parse+0xe0>)
 80084cc:	4832      	ldr	r0, [pc, #200]	; (8008598 <parse+0xf0>)
 80084ce:	e04f      	b.n	8008570 <parse+0xc8>
  while((i--) && (*buf != 0) && (isspace((uint32_t)*buf))) buf++;
 80084d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80084d4:	2a00      	cmp	r2, #0
 80084d6:	d04d      	beq.n	8008574 <parse+0xcc>
 80084d8:	4432      	add	r2, r6
 80084da:	1e61      	subs	r1, r4, #1
 80084dc:	7852      	ldrb	r2, [r2, #1]
 80084de:	0712      	lsls	r2, r2, #28
 80084e0:	d54b      	bpl.n	800857a <parse+0xd2>
 80084e2:	460c      	mov	r4, r1
 80084e4:	1c61      	adds	r1, r4, #1
 80084e6:	4618      	mov	r0, r3
 80084e8:	d1f2      	bne.n	80084d0 <parse+0x28>
  if((i==0) || (*buf==0)) {
 80084ea:	781b      	ldrb	r3, [r3, #0]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d047      	beq.n	8008580 <parse+0xd8>
       __FUNCTION__);
#endif
    return -1;
  }
	
  p = strtok(buf,SEPS);
 80084f0:	492a      	ldr	r1, [pc, #168]	; (800859c <parse+0xf4>)
 80084f2:	f7f8 fdd3 	bl	800109c <strtok>
  if(p==NULL) {
 80084f6:	4606      	mov	r6, r0
 80084f8:	b910      	cbnz	r0, 8008500 <parse+0x58>
    /* No token found */
    printf("Unable to find a command in the buffer in %s()\n",__FUNCTION__);
 80084fa:	4923      	ldr	r1, [pc, #140]	; (8008588 <parse+0xe0>)
 80084fc:	4828      	ldr	r0, [pc, #160]	; (80085a0 <parse+0xf8>)
 80084fe:	e037      	b.n	8008570 <parse+0xc8>
    return -1;
  }

  arg = CMD_INTERACTIVE;  /* Default to calling action part of function */
  /* Check to see if the user is asking for help */
  if(strcasecmp(p,"help") == 0) {
 8008500:	4928      	ldr	r1, [pc, #160]	; (80085a4 <parse+0xfc>)
 8008502:	f7f8 fcc7 	bl	8000e94 <strcasecmp>
 8008506:	4604      	mov	r4, r0
 8008508:	b9a0      	cbnz	r0, 8008534 <parse+0x8c>
    /* Check to see if the user is asking for more help */
    p = strtok(NULL,SEPS);
 800850a:	4924      	ldr	r1, [pc, #144]	; (800859c <parse+0xf4>)
 800850c:	f7f8 fdc6 	bl	800109c <strtok>
    if(p == NULL) {
 8008510:	4606      	mov	r6, r0
 8008512:	b990      	cbnz	r0, 800853a <parse+0x92>
 8008514:	350c      	adds	r5, #12
      /* If we don't get any more tokens the user is asking for short
       * help */
      /* Loop over the commands defined and print help for them */
      for(t=table; t->cmdname!=NULL; t++) {
 8008516:	f855 1c0c 	ldr.w	r1, [r5, #-12]
 800851a:	b389      	cbz	r1, 8008580 <parse+0xd8>
	if(t->help != NULL) {
 800851c:	f855 2c04 	ldr.w	r2, [r5, #-4]
 8008520:	b11a      	cbz	r2, 800852a <parse+0x82>
	  printf("%12s -- %s\n",t->cmdname,t->help);
 8008522:	4821      	ldr	r0, [pc, #132]	; (80085a8 <parse+0x100>)
 8008524:	f7f8 fbb0 	bl	8000c88 <printf>
 8008528:	e7f4      	b.n	8008514 <parse+0x6c>
	} else {
	  t->func(CMD_SHORT_HELP);  /* Call the function for short help */
 800852a:	f855 3c08 	ldr.w	r3, [r5, #-8]
 800852e:	2001      	movs	r0, #1
 8008530:	4798      	blx	r3
 8008532:	e7ef      	b.n	8008514 <parse+0x6c>
  arg = CMD_INTERACTIVE;  /* Default to calling action part of function */
 8008534:	f04f 0800 	mov.w	r8, #0
 8008538:	e009      	b.n	800854e <parse+0xa6>
      }
      return 0;
    } else {
      /* The user has asked for long help, call the function
       * for help */
      arg = CMD_LONG_HELP;
 800853a:	f04f 0802 	mov.w	r8, #2
    }
  }

  /* Now search for token in the table */
  for(t=table; t->cmdname!=NULL; t++) {
 800853e:	e006      	b.n	800854e <parse+0xa6>
    if(strcasecmp(p,t->cmdname) == 0) {
 8008540:	4639      	mov	r1, r7
 8008542:	4630      	mov	r0, r6
 8008544:	f7f8 fca6 	bl	8000e94 <strcasecmp>
 8008548:	4604      	mov	r4, r0
 800854a:	b120      	cbz	r0, 8008556 <parse+0xae>
  for(t=table; t->cmdname!=NULL; t++) {
 800854c:	350c      	adds	r5, #12
 800854e:	682f      	ldr	r7, [r5, #0]
 8008550:	2f00      	cmp	r7, #0
 8008552:	d1f5      	bne.n	8008540 <parse+0x98>
 8008554:	e00a      	b.n	800856c <parse+0xc4>
      /* Got a match, call the function */
      if(arg == CMD_LONG_HELP) {	
 8008556:	f1b8 0f00 	cmp.w	r8, #0
 800855a:	d003      	beq.n	8008564 <parse+0xbc>
	printf("%s:\n",t->cmdname);
 800855c:	4639      	mov	r1, r7
 800855e:	4813      	ldr	r0, [pc, #76]	; (80085ac <parse+0x104>)
 8008560:	f7f8 fb92 	bl	8000c88 <printf>
      }
      t->func(arg);
 8008564:	686b      	ldr	r3, [r5, #4]
 8008566:	4640      	mov	r0, r8
 8008568:	4798      	blx	r3
      return 0;
 800856a:	e009      	b.n	8008580 <parse+0xd8>
    }
  }

  printf("Command `%s' not found. Type `help' for online help\n",p);
 800856c:	4810      	ldr	r0, [pc, #64]	; (80085b0 <parse+0x108>)
 800856e:	4631      	mov	r1, r6
 8008570:	f7f8 fb8a 	bl	8000c88 <printf>
    return -1;
 8008574:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008578:	e002      	b.n	8008580 <parse+0xd8>
  if((i==0) || (*buf==0)) {
 800857a:	2c00      	cmp	r4, #0
 800857c:	d1b8      	bne.n	80084f0 <parse+0x48>
 800857e:	e7f9      	b.n	8008574 <parse+0xcc>
  return -1;
}
 8008580:	4620      	mov	r0, r4
 8008582:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008586:	bf00      	nop
 8008588:	0800d488 	.word	0x0800d488
 800858c:	0800d48e 	.word	0x0800d48e
 8008590:	0800d4af 	.word	0x0800d4af
 8008594:	20000004 	.word	0x20000004
 8008598:	0800d4bf 	.word	0x0800d4bf
 800859c:	0800d4e2 	.word	0x0800d4e2
 80085a0:	0800d4e9 	.word	0x0800d4e9
 80085a4:	0800d519 	.word	0x0800d519
 80085a8:	0800d51e 	.word	0x0800d51e
 80085ac:	0800d52a 	.word	0x0800d52a
 80085b0:	0800d52f 	.word	0x0800d52f

080085b4 <TaskInput>:
{
 80085b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(printPrompt) {
 80085b6:	4d40      	ldr	r5, [pc, #256]	; (80086b8 <TaskInput+0x104>)
 80085b8:	682b      	ldr	r3, [r5, #0]
 80085ba:	b123      	cbz	r3, 80085c6 <TaskInput+0x12>
    printf("ARMON>");
 80085bc:	483f      	ldr	r0, [pc, #252]	; (80086bc <TaskInput+0x108>)
 80085be:	f7f8 fb63 	bl	8000c88 <printf>
    printPrompt = 0;
 80085c2:	2300      	movs	r3, #0
 80085c4:	602b      	str	r3, [r5, #0]
  rc = TerminalReadAnyNonBlock(&c);
 80085c6:	f10d 0007 	add.w	r0, sp, #7
 80085ca:	f000 fa44 	bl	8008a56 <TerminalReadAnyNonBlock>
  if(rc) {
 80085ce:	2800      	cmp	r0, #0
 80085d0:	d16f      	bne.n	80086b2 <TaskInput+0xfe>
  if(((c == 010) || (c == 0x7f)) && count) {
 80085d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80085d6:	2b08      	cmp	r3, #8
 80085d8:	d001      	beq.n	80085de <TaskInput+0x2a>
 80085da:	2b7f      	cmp	r3, #127	; 0x7f
 80085dc:	d10d      	bne.n	80085fa <TaskInput+0x46>
 80085de:	4c38      	ldr	r4, [pc, #224]	; (80086c0 <TaskInput+0x10c>)
 80085e0:	6822      	ldr	r2, [r4, #0]
 80085e2:	b152      	cbz	r2, 80085fa <TaskInput+0x46>
    printf("\010 \010"); /* Obliterate character */
 80085e4:	4837      	ldr	r0, [pc, #220]	; (80086c4 <TaskInput+0x110>)
 80085e6:	f7f8 fb4f 	bl	8000c88 <printf>
    buf--;     /* Then remove it from the buffer */
 80085ea:	4a37      	ldr	r2, [pc, #220]	; (80086c8 <TaskInput+0x114>)
 80085ec:	6813      	ldr	r3, [r2, #0]
 80085ee:	3b01      	subs	r3, #1
 80085f0:	6013      	str	r3, [r2, #0]
    count--;   /* Then keep track of how many are left */
 80085f2:	6823      	ldr	r3, [r4, #0]
 80085f4:	3b01      	subs	r3, #1
 80085f6:	6023      	str	r3, [r4, #0]
 80085f8:	e05b      	b.n	80086b2 <TaskInput+0xfe>
  } else if(c == '!') { /* '!' repeats the last command */
 80085fa:	2b21      	cmp	r3, #33	; 0x21
 80085fc:	d115      	bne.n	800862a <TaskInput+0x76>
    if(saved) {  /* But only if we have something saved */
 80085fe:	4b33      	ldr	r3, [pc, #204]	; (80086cc <TaskInput+0x118>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d055      	beq.n	80086b2 <TaskInput+0xfe>
      strcpy(input,input_b);  /* Restore the command */
 8008606:	4c32      	ldr	r4, [pc, #200]	; (80086d0 <TaskInput+0x11c>)
 8008608:	4932      	ldr	r1, [pc, #200]	; (80086d4 <TaskInput+0x120>)
 800860a:	4620      	mov	r0, r4
 800860c:	f7f8 fc68 	bl	8000ee0 <strcpy>
      printf("%s",input);
 8008610:	4621      	mov	r1, r4
 8008612:	4831      	ldr	r0, [pc, #196]	; (80086d8 <TaskInput+0x124>)
 8008614:	f7f8 fb38 	bl	8000c88 <printf>
      count = strlen(input);
 8008618:	4620      	mov	r0, r4
 800861a:	f7f8 fcd1 	bl	8000fc0 <strlen>
 800861e:	4b28      	ldr	r3, [pc, #160]	; (80086c0 <TaskInput+0x10c>)
 8008620:	6018      	str	r0, [r3, #0]
      buf = input+count;
 8008622:	4b29      	ldr	r3, [pc, #164]	; (80086c8 <TaskInput+0x114>)
 8008624:	4404      	add	r4, r0
 8008626:	601c      	str	r4, [r3, #0]
      goto parseme;
 8008628:	e024      	b.n	8008674 <TaskInput+0xc0>
  } else if(isprint((unsigned int)c)) {
 800862a:	4a2c      	ldr	r2, [pc, #176]	; (80086dc <TaskInput+0x128>)
 800862c:	6812      	ldr	r2, [r2, #0]
 800862e:	441a      	add	r2, r3
 8008630:	7852      	ldrb	r2, [r2, #1]
 8008632:	f012 0297 	ands.w	r2, r2, #151	; 0x97
 8008636:	d011      	beq.n	800865c <TaskInput+0xa8>
    if(count >= sizeof(input)) {
 8008638:	4921      	ldr	r1, [pc, #132]	; (80086c0 <TaskInput+0x10c>)
 800863a:	680a      	ldr	r2, [r1, #0]
 800863c:	2a4f      	cmp	r2, #79	; 0x4f
 800863e:	d901      	bls.n	8008644 <TaskInput+0x90>
      printf("\x07"); /* Beep */
 8008640:	2007      	movs	r0, #7
 8008642:	e008      	b.n	8008656 <TaskInput+0xa2>
      *buf++ = c;
 8008644:	4c20      	ldr	r4, [pc, #128]	; (80086c8 <TaskInput+0x114>)
 8008646:	6820      	ldr	r0, [r4, #0]
 8008648:	7003      	strb	r3, [r0, #0]
 800864a:	1c45      	adds	r5, r0, #1
      count++;
 800864c:	3201      	adds	r2, #1
      printf("%c",c);
 800864e:	f89d 0007 	ldrb.w	r0, [sp, #7]
      *buf++ = c;
 8008652:	6025      	str	r5, [r4, #0]
      count++;
 8008654:	600a      	str	r2, [r1, #0]
      printf("%c",c);
 8008656:	f7f8 fb2f 	bl	8000cb8 <putchar>
 800865a:	e02a      	b.n	80086b2 <TaskInput+0xfe>
  } else if(c == '\r') {
 800865c:	2b0d      	cmp	r3, #13
 800865e:	d128      	bne.n	80086b2 <TaskInput+0xfe>
    *buf = '\0';
 8008660:	4b19      	ldr	r3, [pc, #100]	; (80086c8 <TaskInput+0x114>)
    strcpy(input_b,input);
 8008662:	491b      	ldr	r1, [pc, #108]	; (80086d0 <TaskInput+0x11c>)
    *buf = '\0';
 8008664:	681b      	ldr	r3, [r3, #0]
    strcpy(input_b,input);
 8008666:	481b      	ldr	r0, [pc, #108]	; (80086d4 <TaskInput+0x120>)
    *buf = '\0';
 8008668:	701a      	strb	r2, [r3, #0]
    strcpy(input_b,input);
 800866a:	f7f8 fc39 	bl	8000ee0 <strcpy>
    saved = 1;
 800866e:	4b17      	ldr	r3, [pc, #92]	; (80086cc <TaskInput+0x118>)
 8008670:	2201      	movs	r2, #1
 8008672:	601a      	str	r2, [r3, #0]
    printf("\n");
 8008674:	200a      	movs	r0, #10
 8008676:	f7f8 fb1f 	bl	8000cb8 <putchar>
 800867a:	4c13      	ldr	r4, [pc, #76]	; (80086c8 <TaskInput+0x114>)
    for(i=count; i<BUFFER_LEN; i++) *buf++ = '\0';
 800867c:	4a10      	ldr	r2, [pc, #64]	; (80086c0 <TaskInput+0x10c>)
 800867e:	6823      	ldr	r3, [r4, #0]
 8008680:	6810      	ldr	r0, [r2, #0]
 8008682:	2100      	movs	r1, #0
 8008684:	1ac0      	subs	r0, r0, r3
 8008686:	460f      	mov	r7, r1
 8008688:	181e      	adds	r6, r3, r0
 800868a:	2e4f      	cmp	r6, #79	; 0x4f
 800868c:	d803      	bhi.n	8008696 <TaskInput+0xe2>
 800868e:	f803 7b01 	strb.w	r7, [r3], #1
 8008692:	2101      	movs	r1, #1
 8008694:	e7f8      	b.n	8008688 <TaskInput+0xd4>
 8008696:	b101      	cbz	r1, 800869a <TaskInput+0xe6>
 8008698:	6023      	str	r3, [r4, #0]
    count = 0;
 800869a:	2300      	movs	r3, #0
 800869c:	6013      	str	r3, [r2, #0]
    parse(input, sizeof(input), Commands);
 800869e:	4e0c      	ldr	r6, [pc, #48]	; (80086d0 <TaskInput+0x11c>)
 80086a0:	4b0f      	ldr	r3, [pc, #60]	; (80086e0 <TaskInput+0x12c>)
 80086a2:	2150      	movs	r1, #80	; 0x50
 80086a4:	681a      	ldr	r2, [r3, #0]
 80086a6:	4630      	mov	r0, r6
 80086a8:	f7ff fefe 	bl	80084a8 <parse>
    printPrompt = 1;
 80086ac:	2301      	movs	r3, #1
    buf = input;
 80086ae:	6026      	str	r6, [r4, #0]
    printPrompt = 1;
 80086b0:	602b      	str	r3, [r5, #0]
}
 80086b2:	b003      	add	sp, #12
 80086b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086b6:	bf00      	nop
 80086b8:	200008f8 	.word	0x200008f8
 80086bc:	0800d564 	.word	0x0800d564
 80086c0:	20000b14 	.word	0x20000b14
 80086c4:	0800d56b 	.word	0x0800d56b
 80086c8:	20000900 	.word	0x20000900
 80086cc:	20000b18 	.word	0x20000b18
 80086d0:	20000fa8 	.word	0x20000fa8
 80086d4:	20000f58 	.word	0x20000f58
 80086d8:	0800d85a 	.word	0x0800d85a
 80086dc:	20000004 	.word	0x20000004
 80086e0:	200008fc 	.word	0x200008fc

080086e4 <fetch_int32_arg>:

/* Fetch an integer argument */
int fetch_int32_arg(int32_t *dest)
{
 80086e4:	b510      	push	{r4, lr}
  char *p;
  p = strtok(NULL,SEPS);
 80086e6:	4908      	ldr	r1, [pc, #32]	; (8008708 <fetch_int32_arg+0x24>)
{
 80086e8:	4604      	mov	r4, r0
  p = strtok(NULL,SEPS);
 80086ea:	2000      	movs	r0, #0
 80086ec:	f7f8 fcd6 	bl	800109c <strtok>
  if(p == NULL) {
 80086f0:	b130      	cbz	r0, 8008700 <fetch_int32_arg+0x1c>
    /* If we don't get any more tokens it's not an error, just the EOL */
    return -1;
  }
  
  *dest = strtol(p,NULL,0);
 80086f2:	2200      	movs	r2, #0
 80086f4:	4611      	mov	r1, r2
 80086f6:	f7f8 fda3 	bl	8001240 <strtol>
 80086fa:	6020      	str	r0, [r4, #0]
  return 0;
 80086fc:	2000      	movs	r0, #0
 80086fe:	bd10      	pop	{r4, pc}
    return -1;
 8008700:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}     
 8008704:	bd10      	pop	{r4, pc}
 8008706:	bf00      	nop
 8008708:	0800d4e2 	.word	0x0800d4e2

0800870c <fetch_uint32_arg>:

/* Fetch an integer argument */
int fetch_uint32_arg(uint32_t *dest)
{
 800870c:	b510      	push	{r4, lr}
  char *p;
  p = strtok(NULL,SEPS);
 800870e:	4908      	ldr	r1, [pc, #32]	; (8008730 <fetch_uint32_arg+0x24>)
{
 8008710:	4604      	mov	r4, r0
  p = strtok(NULL,SEPS);
 8008712:	2000      	movs	r0, #0
 8008714:	f7f8 fcc2 	bl	800109c <strtok>
  if(p == NULL) {
 8008718:	b130      	cbz	r0, 8008728 <fetch_uint32_arg+0x1c>
    /* If we don't get any more tokens it's not an error, just the EOL */
    return -1;
  }
  
  *dest = (uint32_t)strtoul(p,NULL,0);
 800871a:	2200      	movs	r2, #0
 800871c:	4611      	mov	r1, r2
 800871e:	f7f8 fe35 	bl	800138c <strtoul>
 8008722:	6020      	str	r0, [r4, #0]
  return 0;
 8008724:	2000      	movs	r0, #0
 8008726:	bd10      	pop	{r4, pc}
    return -1;
 8008728:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}     
 800872c:	bd10      	pop	{r4, pc}
 800872e:	bf00      	nop
 8008730:	0800d4e2 	.word	0x0800d4e2

08008734 <fetch_string_arg>:

/* Fetch a string argument */
int fetch_string_arg(char **dest)
{
 8008734:	b510      	push	{r4, lr}
  char *p;
  p = strtok(NULL,SEPS);
 8008736:	4906      	ldr	r1, [pc, #24]	; (8008750 <fetch_string_arg+0x1c>)
{
 8008738:	4604      	mov	r4, r0
  p = strtok(NULL,SEPS);
 800873a:	2000      	movs	r0, #0
 800873c:	f7f8 fcae 	bl	800109c <strtok>
  if(p == NULL) {
 8008740:	b110      	cbz	r0, 8008748 <fetch_string_arg+0x14>
    /* If we don't get any more tokens it's not an error, just the EOL */
    return -1;
  }
  
  *dest = p;
 8008742:	6020      	str	r0, [r4, #0]
  return 0;
 8008744:	2000      	movs	r0, #0
 8008746:	bd10      	pop	{r4, pc}
    return -1;
 8008748:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800874c:	bd10      	pop	{r4, pc}
 800874e:	bf00      	nop
 8008750:	0800d4e2 	.word	0x0800d4e2

08008754 <DumpBuffer>:

#define BYTES_PER_LINE 16

/* Dump a buffer in HEX with the address as given */
void DumpBuffer(uint8_t *buffer, uint32_t count, uint32_t address)
{
 8008754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008758:	4680      	mov	r8, r0
 800875a:	b089      	sub	sp, #36	; 0x24
 800875c:	4692      	mov	sl, r2
  uint32_t i;
  uint8_t buf[BYTES_PER_LINE+1],*bufp;   /* Buffer to assemble printed chars */
  uint8_t *p,c;

  if(count == 0) return;
 800875e:	460c      	mov	r4, r1
 8008760:	2900      	cmp	r1, #0
 8008762:	d046      	beq.n	80087f2 <DumpBuffer+0x9e>
 8008764:	1843      	adds	r3, r0, r1
 8008766:	ad03      	add	r5, sp, #12
    /* Read the value to print */
    c = *p++;
    address++;

    /* Stash the appropriate chacter to print at EOL */
    if(isprint(c)) {
 8008768:	f8df b09c 	ldr.w	fp, [pc, #156]	; 8008808 <DumpBuffer+0xb4>
 800876c:	9300      	str	r3, [sp, #0]
  if(count == 0) return;
 800876e:	4681      	mov	r9, r0
 8008770:	462f      	mov	r7, r5
  for(i=0; i<count; i++) {
 8008772:	9b00      	ldr	r3, [sp, #0]
 8008774:	ebc8 010a 	rsb	r1, r8, sl
 8008778:	4599      	cmp	r9, r3
 800877a:	4449      	add	r1, r9
 800877c:	ebc8 0609 	rsb	r6, r8, r9
 8008780:	d024      	beq.n	80087cc <DumpBuffer+0x78>
    if((i% BYTES_PER_LINE) == 0) {
 8008782:	f016 060f 	ands.w	r6, r6, #15
 8008786:	d103      	bne.n	8008790 <DumpBuffer+0x3c>
      printf("%08x:",(unsigned int)address);
 8008788:	481b      	ldr	r0, [pc, #108]	; (80087f8 <DumpBuffer+0xa4>)
 800878a:	f7f8 fa7d 	bl	8000c88 <printf>
      bufp = buf;
 800878e:	463d      	mov	r5, r7
    c = *p++;
 8008790:	f819 1b01 	ldrb.w	r1, [r9], #1
    if(isprint(c)) {
 8008794:	f8db 2000 	ldr.w	r2, [fp]
 8008798:	440a      	add	r2, r1
 800879a:	7852      	ldrb	r2, [r2, #1]
 800879c:	f012 0f97 	tst.w	r2, #151	; 0x97
      *bufp++ = c; /* Stick in the character */
    } else {
      *bufp++ = '.';
 80087a0:	bf08      	it	eq
 80087a2:	202e      	moveq	r0, #46	; 0x2e
 80087a4:	f105 0201 	add.w	r2, r5, #1
 80087a8:	bf0c      	ite	eq
 80087aa:	7028      	strbeq	r0, [r5, #0]
      *bufp++ = c; /* Stick in the character */
 80087ac:	7029      	strbne	r1, [r5, #0]
    }

    printf(" %02x",((unsigned int)c) & 0xff);
 80087ae:	4813      	ldr	r0, [pc, #76]	; (80087fc <DumpBuffer+0xa8>)
 80087b0:	9201      	str	r2, [sp, #4]
      *bufp++ = '.';
 80087b2:	4615      	mov	r5, r2
    printf(" %02x",((unsigned int)c) & 0xff);
 80087b4:	f7f8 fa68 	bl	8000c88 <printf>
    
    /* At end of line ? */
    if((i % BYTES_PER_LINE) == (BYTES_PER_LINE-1)) {
 80087b8:	2e0f      	cmp	r6, #15
 80087ba:	9a01      	ldr	r2, [sp, #4]
 80087bc:	d1d9      	bne.n	8008772 <DumpBuffer+0x1e>
      *bufp = '\0';  /* NULL terminate buffer */
 80087be:	2100      	movs	r1, #0
 80087c0:	7011      	strb	r1, [r2, #0]

      /* Yes, print buffer */
      printf("  %s\n",buf);
 80087c2:	480f      	ldr	r0, [pc, #60]	; (8008800 <DumpBuffer+0xac>)
 80087c4:	4639      	mov	r1, r7
 80087c6:	f7f8 fa5f 	bl	8000c88 <printf>
 80087ca:	e7d2      	b.n	8008772 <DumpBuffer+0x1e>
    }

  }

  /* dump out to EOL */
  *bufp='\0';
 80087cc:	2300      	movs	r3, #0
  if(count % BYTES_PER_LINE) {
 80087ce:	f014 040f 	ands.w	r4, r4, #15
  *bufp='\0';
 80087d2:	702b      	strb	r3, [r5, #0]
  if(count % BYTES_PER_LINE) {
 80087d4:	d00d      	beq.n	80087f2 <DumpBuffer+0x9e>
 80087d6:	461d      	mov	r5, r3
    for(i=0; i<(BYTES_PER_LINE - (count % BYTES_PER_LINE)); i++) {
 80087d8:	f1c4 0410 	rsb	r4, r4, #16
 80087dc:	42a5      	cmp	r5, r4
 80087de:	d204      	bcs.n	80087ea <DumpBuffer+0x96>
      printf("   ");
 80087e0:	4808      	ldr	r0, [pc, #32]	; (8008804 <DumpBuffer+0xb0>)
 80087e2:	f7f8 fa51 	bl	8000c88 <printf>
    for(i=0; i<(BYTES_PER_LINE - (count % BYTES_PER_LINE)); i++) {
 80087e6:	3501      	adds	r5, #1
 80087e8:	e7f8      	b.n	80087dc <DumpBuffer+0x88>
    }
    /* Yes, print buffer */
    printf("  %s\n",buf);
 80087ea:	4639      	mov	r1, r7
 80087ec:	4804      	ldr	r0, [pc, #16]	; (8008800 <DumpBuffer+0xac>)
 80087ee:	f7f8 fa4b 	bl	8000c88 <printf>
  }



}
 80087f2:	b009      	add	sp, #36	; 0x24
 80087f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087f8:	0800d56f 	.word	0x0800d56f
 80087fc:	0800d575 	.word	0x0800d575
 8008800:	0800d57b 	.word	0x0800d57b
 8008804:	0800d581 	.word	0x0800d581
 8008808:	20000004 	.word	0x20000004

0800880c <CmdDump>:
void CmdDump(int action)
{
  int rc;
  static uint32_t address=0, count=0x100;

  if(action==CMD_SHORT_HELP) return;
 800880c:	2801      	cmp	r0, #1
{
 800880e:	b538      	push	{r3, r4, r5, lr}
  if(action==CMD_SHORT_HELP) return;
 8008810:	d01d      	beq.n	800884e <CmdDump+0x42>
  if(action==CMD_LONG_HELP) {
 8008812:	2802      	cmp	r0, #2
 8008814:	4d0e      	ldr	r5, [pc, #56]	; (8008850 <CmdDump+0x44>)
 8008816:	4c0f      	ldr	r4, [pc, #60]	; (8008854 <CmdDump+0x48>)
 8008818:	d109      	bne.n	800882e <CmdDump+0x22>
    printf("dump {<address> {<count>}}\n\n"
 800881a:	480f      	ldr	r0, [pc, #60]	; (8008858 <CmdDump+0x4c>)
 800881c:	f7f8 fa8a 	bl	8000d34 <puts>
	   "\n"
	   "<count> is the number of bytes to dump to the terminal.\n"
	   "If the count is unspecified uses last count. The default\n"
	   "count is 0x100 bytes.\n\n");

    printf("Current address is 0x%08x, current count is 0x%x\n",
 8008820:	682a      	ldr	r2, [r5, #0]
 8008822:	6821      	ldr	r1, [r4, #0]
 8008824:	480d      	ldr	r0, [pc, #52]	; (800885c <CmdDump+0x50>)
  }

  DumpBuffer((uint8_t *)address, count, address);
  /* Update parameters for next time */
  address = address+count;
}
 8008826:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    printf("Current address is 0x%08x, current count is 0x%x\n",
 800882a:	f7f8 ba2d 	b.w	8000c88 <printf>
  rc = fetch_uint32_arg(&address);
 800882e:	4620      	mov	r0, r4
 8008830:	f7ff ff6c 	bl	800870c <fetch_uint32_arg>
  if(rc == 0) {
 8008834:	b910      	cbnz	r0, 800883c <CmdDump+0x30>
    fetch_uint32_arg(&count);
 8008836:	4628      	mov	r0, r5
 8008838:	f7ff ff68 	bl	800870c <fetch_uint32_arg>
  DumpBuffer((uint8_t *)address, count, address);
 800883c:	6822      	ldr	r2, [r4, #0]
 800883e:	6829      	ldr	r1, [r5, #0]
 8008840:	4610      	mov	r0, r2
 8008842:	f7ff ff87 	bl	8008754 <DumpBuffer>
  address = address+count;
 8008846:	6822      	ldr	r2, [r4, #0]
 8008848:	682b      	ldr	r3, [r5, #0]
 800884a:	4413      	add	r3, r2
 800884c:	6023      	str	r3, [r4, #0]
 800884e:	bd38      	pop	{r3, r4, r5, pc}
 8008850:	20000904 	.word	0x20000904
 8008854:	20000b1c 	.word	0x20000b1c
 8008858:	0800d585 	.word	0x0800d585
 800885c:	0800d71d 	.word	0x0800d71d

08008860 <_sbrk_r>:
#include <reent.h>

register char *stack_ptr asm("sp");

void *_sbrk_r(struct _reent *ptr, int incr)
{
 8008860:	b508      	push	{r3, lr}
        extern char end asm("end");
        static char *heap_end;
        char *prev_heap_end;

        if (heap_end == 0)
 8008862:	4b0a      	ldr	r3, [pc, #40]	; (800888c <_sbrk_r+0x2c>)
 8008864:	681a      	ldr	r2, [r3, #0]
 8008866:	b90a      	cbnz	r2, 800886c <_sbrk_r+0xc>
                heap_end = &end;
 8008868:	4a09      	ldr	r2, [pc, #36]	; (8008890 <_sbrk_r+0x30>)
 800886a:	601a      	str	r2, [r3, #0]

        prev_heap_end = heap_end;
 800886c:	6818      	ldr	r0, [r3, #0]
        if (heap_end + incr > stack_ptr)
 800886e:	466b      	mov	r3, sp
 8008870:	4401      	add	r1, r0
 8008872:	4299      	cmp	r1, r3
 8008874:	d906      	bls.n	8008884 <_sbrk_r+0x24>
        {
//              write(1, "Heap and stack collision\n", 25);
//              abort();
                errno = ENOMEM;
 8008876:	f7f8 f967 	bl	8000b48 <__errno>
 800887a:	230c      	movs	r3, #12
 800887c:	6003      	str	r3, [r0, #0]
                return (caddr_t) -1;
 800887e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008882:	bd08      	pop	{r3, pc}
        }

        heap_end += incr;
 8008884:	4b01      	ldr	r3, [pc, #4]	; (800888c <_sbrk_r+0x2c>)
 8008886:	6019      	str	r1, [r3, #0]

        return (caddr_t) prev_heap_end;
}
 8008888:	bd08      	pop	{r3, pc}
 800888a:	bf00      	nop
 800888c:	20000b20 	.word	0x20000b20
 8008890:	20001d44 	.word	0x20001d44

08008894 <_close_r>:

int _close_r(struct _reent *ptr, int file)
{
        return -1;
}
 8008894:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008898:	4770      	bx	lr

0800889a <_fstat_r>:

int _fstat_r(struct _reent *ptr, int file, struct stat *st)
{
        st->st_mode = S_IFCHR;
 800889a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800889e:	6053      	str	r3, [r2, #4]
        return 0;
}
 80088a0:	2000      	movs	r0, #0
 80088a2:	4770      	bx	lr

080088a4 <_isatty_r>:
int _isatty_r(struct _reent *ptr, int file)
{
        return 1;
}
 80088a4:	2001      	movs	r0, #1
 80088a6:	4770      	bx	lr

080088a8 <_lseek_r>:
_off_t _lseek_r(struct _reent *ptr, int i, off_t j, int p)
{
        return 0;
}
 80088a8:	2000      	movs	r0, #0
 80088aa:	4770      	bx	lr

080088ac <USBD_CDC_DataIn>:
{
  uint8_t rc;
  uint32_t index=INDEX_USB, tail, count;

  /* Call the original function */
  rc = (*USBDDataIn)(pdev,epnum);
 80088ac:	4b1c      	ldr	r3, [pc, #112]	; (8008920 <USBD_CDC_DataIn+0x74>)
{
 80088ae:	b570      	push	{r4, r5, r6, lr}
  rc = (*USBDDataIn)(pdev,epnum);
 80088b0:	681b      	ldr	r3, [r3, #0]
{
 80088b2:	4604      	mov	r4, r0
  rc = (*USBDDataIn)(pdev,epnum);
 80088b4:	4798      	blx	r3

  if(pdev == &hUSBDDevice) {
 80088b6:	4b1b      	ldr	r3, [pc, #108]	; (8008924 <USBD_CDC_DataIn+0x78>)
 80088b8:	429c      	cmp	r4, r3
  rc = (*USBDDataIn)(pdev,epnum);
 80088ba:	4606      	mov	r6, r0
  if(pdev == &hUSBDDevice) {
 80088bc:	d12d      	bne.n	800891a <USBD_CDC_DataIn+0x6e>
    /* Update head and tail pointers, we just sent outSending bytes */
    tail = TerminalState[index].outTail;
 80088be:	4b1a      	ldr	r3, [pc, #104]	; (8008928 <USBD_CDC_DataIn+0x7c>)
 80088c0:	f8b3 1108 	ldrh.w	r1, [r3, #264]	; 0x108
    count = TerminalState[index].outSending;
 80088c4:	f8b3 210c 	ldrh.w	r2, [r3, #268]	; 0x10c
 80088c8:	b292      	uxth	r2, r2
    TerminalState[index].outTail = TERMINALINCRBY(tail,count);
 80088ca:	fa12 f181 	uxtah	r1, r2, r1
 80088ce:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80088d2:	f8a3 1108 	strh.w	r1, [r3, #264]	; 0x108
    TerminalState[index].outCount -= count;
 80088d6:	f8b3 110a 	ldrh.w	r1, [r3, #266]	; 0x10a
 80088da:	1a8a      	subs	r2, r1, r2
 80088dc:	b292      	uxth	r2, r2
 80088de:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
    TerminalState[index].outSending = 0;
 80088e2:	2200      	movs	r2, #0
 80088e4:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c

    /* Re - Trigger output from this buffer */
    tail = TerminalState[index].outTail;
 80088e8:	f8b3 1108 	ldrh.w	r1, [r3, #264]	; 0x108
    count = TerminalState[index].outCount;
 80088ec:	f8b3 210a 	ldrh.w	r2, [r3, #266]	; 0x10a
 80088f0:	b292      	uxth	r2, r2
    tail = TerminalState[index].outTail;
 80088f2:	b289      	uxth	r1, r1
 80088f4:	461c      	mov	r4, r3
    if(count != 0) {
 80088f6:	b182      	cbz	r2, 800891a <USBD_CDC_DataIn+0x6e>
      /* Only allow a transfer to the end of the buffer */
      if((count + tail) >= TERMINALBUFFERSIZE) {
 80088f8:	188b      	adds	r3, r1, r2
 80088fa:	2b7f      	cmp	r3, #127	; 0x7f
	count = TERMINALBUFFERSIZE - tail;
 80088fc:	bf88      	it	hi
 80088fe:	f1c1 0280 	rsbhi	r2, r1, #128	; 0x80
      }
      USBD_CDC_SetTxBuffer(&hUSBDDevice,
 8008902:	b295      	uxth	r5, r2
			   (uint8_t*)&(TerminalState[index].outBuffer[tail]),
 8008904:	4421      	add	r1, r4
      USBD_CDC_SetTxBuffer(&hUSBDDevice,
 8008906:	462a      	mov	r2, r5
 8008908:	3186      	adds	r1, #134	; 0x86
 800890a:	4806      	ldr	r0, [pc, #24]	; (8008924 <USBD_CDC_DataIn+0x78>)
 800890c:	f003 faa4 	bl	800be58 <USBD_CDC_SetTxBuffer>
			   count);
      USBD_CDC_TransmitPacket(&hUSBDDevice);
 8008910:	4804      	ldr	r0, [pc, #16]	; (8008924 <USBD_CDC_DataIn+0x78>)
 8008912:	f003 faaf 	bl	800be74 <USBD_CDC_TransmitPacket>
      TerminalState[index].outSending = count;
 8008916:	f8a4 510c 	strh.w	r5, [r4, #268]	; 0x10c
    }
  }
    
  return rc;
}
 800891a:	4630      	mov	r0, r6
 800891c:	bd70      	pop	{r4, r5, r6, pc}
 800891e:	bf00      	nop
 8008920:	2000121c 	.word	0x2000121c
 8008924:	20000ff8 	.word	0x20000ff8
 8008928:	20000b24 	.word	0x20000b24

0800892c <CmdStats>:

#endif

/* Dump the terminal statistics */
void CmdStats(int mode)
{
 800892c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint32_t i;
  TerminalStats_t s[INDEX_MAX];

  if(mode != CMD_INTERACTIVE) return;
 8008930:	4604      	mov	r4, r0
{
 8008932:	b085      	sub	sp, #20
  if(mode != CMD_INTERACTIVE) return;
 8008934:	b9b0      	cbnz	r0, 8008964 <CmdStats+0x38>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8008936:	b672      	cpsid	i

  /* Copy terminal stats to local storage, and reset counters atomincally */
  __disable_irq();
  for(i=0; i<INDEX_MAX; i++) {
    s[i] = TerminalState[i].stats;
 8008938:	480c      	ldr	r0, [pc, #48]	; (800896c <CmdStats+0x40>)
    bzero(&TerminalState[i].stats, sizeof(TerminalState[i].stats));
 800893a:	2214      	movs	r2, #20
    s[i] = TerminalState[i].stats;
 800893c:	f8d0 9120 	ldr.w	r9, [r0, #288]	; 0x120
 8008940:	f500 7588 	add.w	r5, r0, #272	; 0x110
    bzero(&TerminalState[i].stats, sizeof(TerminalState[i].stats));
 8008944:	4621      	mov	r1, r4
 8008946:	f500 7088 	add.w	r0, r0, #272	; 0x110
    s[i] = TerminalState[i].stats;
 800894a:	e895 01e0 	ldmia.w	r5, {r5, r6, r7, r8}
    bzero(&TerminalState[i].stats, sizeof(TerminalState[i].stats));
 800894e:	f7f8 f93d 	bl	8000bcc <memset>
  __ASM volatile ("cpsie i" : : : "memory");
 8008952:	b662      	cpsie	i
  }
  __enable_irq();

  /* Display stats for the user */
  for(i=0; i<INDEX_MAX; i++) {
    printf("Terminal #%u:\n"
 8008954:	4806      	ldr	r0, [pc, #24]	; (8008970 <CmdStats+0x44>)
 8008956:	e88d 0380 	stmia.w	sp, {r7, r8, r9}
 800895a:	4633      	mov	r3, r6
 800895c:	462a      	mov	r2, r5
 800895e:	4621      	mov	r1, r4
 8008960:	f7f8 f992 	bl	8000c88 <printf>
	   (unsigned int)(s[i].written),
	   (unsigned int)(s[i].receiveTooBig),
	   (unsigned int)(s[i].received));
  }

}
 8008964:	b005      	add	sp, #20
 8008966:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800896a:	bf00      	nop
 800896c:	20000b24 	.word	0x20000b24
 8008970:	0800d76b 	.word	0x0800d76b

08008974 <TerminalInit>:
{
 8008974:	b510      	push	{r4, lr}
  setvbuf(stdin, NULL, _IONBF, 0);
 8008976:	4c17      	ldr	r4, [pc, #92]	; (80089d4 <TerminalInit+0x60>)
 8008978:	6820      	ldr	r0, [r4, #0]
 800897a:	2300      	movs	r3, #0
 800897c:	4619      	mov	r1, r3
 800897e:	2202      	movs	r2, #2
 8008980:	6840      	ldr	r0, [r0, #4]
 8008982:	f7f8 f9df 	bl	8000d44 <setvbuf>
  setvbuf(stdout, NULL, _IONBF, 0);
 8008986:	6820      	ldr	r0, [r4, #0]
 8008988:	2300      	movs	r3, #0
 800898a:	4619      	mov	r1, r3
 800898c:	2202      	movs	r2, #2
 800898e:	6880      	ldr	r0, [r0, #8]
 8008990:	f7f8 f9d8 	bl	8000d44 <setvbuf>
  setvbuf(stderr, NULL, _IONBF, 0);
 8008994:	6820      	ldr	r0, [r4, #0]
  USBD_Init(&hUSBDDevice, &VCP_Desc, 0);
 8008996:	4c10      	ldr	r4, [pc, #64]	; (80089d8 <TerminalInit+0x64>)
  setvbuf(stderr, NULL, _IONBF, 0);
 8008998:	68c0      	ldr	r0, [r0, #12]
 800899a:	2300      	movs	r3, #0
 800899c:	4619      	mov	r1, r3
 800899e:	2202      	movs	r2, #2
 80089a0:	f7f8 f9d0 	bl	8000d44 <setvbuf>
  USBD_Init(&hUSBDDevice, &VCP_Desc, 0);
 80089a4:	2200      	movs	r2, #0
 80089a6:	490d      	ldr	r1, [pc, #52]	; (80089dc <TerminalInit+0x68>)
 80089a8:	4620      	mov	r0, r4
 80089aa:	f002 fe76 	bl	800b69a <USBD_Init>
  USBDDataIn = USBD_CDC.DataIn;
 80089ae:	490c      	ldr	r1, [pc, #48]	; (80089e0 <TerminalInit+0x6c>)
 80089b0:	4b0c      	ldr	r3, [pc, #48]	; (80089e4 <TerminalInit+0x70>)
 80089b2:	694a      	ldr	r2, [r1, #20]
 80089b4:	601a      	str	r2, [r3, #0]
  USBD_RegisterClass(&hUSBDDevice, &USBD_CDC);
 80089b6:	4620      	mov	r0, r4
  USBD_CDC.DataIn = USBD_CDC_DataIn;
 80089b8:	4b0b      	ldr	r3, [pc, #44]	; (80089e8 <TerminalInit+0x74>)
 80089ba:	614b      	str	r3, [r1, #20]
  USBD_RegisterClass(&hUSBDDevice, &USBD_CDC);
 80089bc:	f002 fe82 	bl	800b6c4 <USBD_RegisterClass>
  USBD_CDC_RegisterInterface(&hUSBDDevice, &USBD_CDC_fops);
 80089c0:	4620      	mov	r0, r4
 80089c2:	490a      	ldr	r1, [pc, #40]	; (80089ec <TerminalInit+0x78>)
 80089c4:	f003 fa41 	bl	800be4a <USBD_CDC_RegisterInterface>
  USBD_Start(&hUSBDDevice);
 80089c8:	4620      	mov	r0, r4
}
 80089ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_Start(&hUSBDDevice);
 80089ce:	f002 be80 	b.w	800b6d2 <USBD_Start>
 80089d2:	bf00      	nop
 80089d4:	20000008 	.word	0x20000008
 80089d8:	20000ff8 	.word	0x20000ff8
 80089dc:	20000a1c 	.word	0x20000a1c
 80089e0:	20000950 	.word	0x20000950
 80089e4:	2000121c 	.word	0x2000121c
 80089e8:	080088ad 	.word	0x080088ad
 80089ec:	20000a5c 	.word	0x20000a5c

080089f0 <TerminalRead>:
{
 80089f0:	b530      	push	{r4, r5, lr}
  __ASM volatile ("cpsid i" : : : "memory");
 80089f2:	b672      	cpsid	i
  while(TerminalState[index].inCount && (count < len)) {
 80089f4:	4d10      	ldr	r5, [pc, #64]	; (8008a38 <TerminalRead+0x48>)
 80089f6:	f44f 7392 	mov.w	r3, #292	; 0x124
 80089fa:	440a      	add	r2, r1
 80089fc:	460c      	mov	r4, r1
 80089fe:	fb03 5300 	mla	r3, r3, r0, r5
 8008a02:	f8b3 5084 	ldrh.w	r5, [r3, #132]	; 0x84
 8008a06:	b2ad      	uxth	r5, r5
 8008a08:	1a60      	subs	r0, r4, r1
 8008a0a:	b19d      	cbz	r5, 8008a34 <TerminalRead+0x44>
 8008a0c:	4294      	cmp	r4, r2
 8008a0e:	d011      	beq.n	8008a34 <TerminalRead+0x44>
    tail   = TerminalState[index].inTail;
 8008a10:	f8b3 0082 	ldrh.w	r0, [r3, #130]	; 0x82
 8008a14:	b280      	uxth	r0, r0
    *ptr++ = TerminalState[index].inBuffer[tail];
 8008a16:	5c1d      	ldrb	r5, [r3, r0]
 8008a18:	f804 5b01 	strb.w	r5, [r4], #1
    TerminalState[index].inTail = TERMINALINCR(tail);
 8008a1c:	3001      	adds	r0, #1
 8008a1e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8008a22:	f8a3 0082 	strh.w	r0, [r3, #130]	; 0x82
    TerminalState[index].inCount--;
 8008a26:	f8b3 0084 	ldrh.w	r0, [r3, #132]	; 0x84
 8008a2a:	3801      	subs	r0, #1
 8008a2c:	b280      	uxth	r0, r0
 8008a2e:	f8a3 0084 	strh.w	r0, [r3, #132]	; 0x84
 8008a32:	e7e6      	b.n	8008a02 <TerminalRead+0x12>
  __ASM volatile ("cpsie i" : : : "memory");
 8008a34:	b662      	cpsie	i
}
 8008a36:	bd30      	pop	{r4, r5, pc}
 8008a38:	20000b24 	.word	0x20000b24

08008a3c <_read_r>:
{
 8008a3c:	4611      	mov	r1, r2
  count = TerminalRead(0, (uint8_t *)ptr, len);
 8008a3e:	2000      	movs	r0, #0
 8008a40:	461a      	mov	r2, r3
 8008a42:	f7ff bfd5 	b.w	80089f0 <TerminalRead>

08008a46 <TerminalReadNonBlock>:
{
 8008a46:	b508      	push	{r3, lr}
  if(TerminalRead(index,(uint8_t*)c,1) == 0) {
 8008a48:	2201      	movs	r2, #1
 8008a4a:	f7ff ffd1 	bl	80089f0 <TerminalRead>
}
 8008a4e:	fab0 f080 	clz	r0, r0
 8008a52:	0940      	lsrs	r0, r0, #5
 8008a54:	bd08      	pop	{r3, pc}

08008a56 <TerminalReadAnyNonBlock>:
    rc = TerminalReadNonBlock(i, c);
 8008a56:	4601      	mov	r1, r0
{
 8008a58:	b508      	push	{r3, lr}
    rc = TerminalReadNonBlock(i, c);
 8008a5a:	2000      	movs	r0, #0
 8008a5c:	f7ff fff3 	bl	8008a46 <TerminalReadNonBlock>
}
 8008a60:	3000      	adds	r0, #0
 8008a62:	bf18      	it	ne
 8008a64:	2001      	movne	r0, #1
 8008a66:	bd08      	pop	{r3, pc}

08008a68 <TerminalOutputBufferWrite>:
{
 8008a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a6a:	4e37      	ldr	r6, [pc, #220]	; (8008b48 <TerminalOutputBufferWrite+0xe0>)
 8008a6c:	f44f 7392 	mov.w	r3, #292	; 0x124
  if(len >= TERMINALBUFFERSIZE) {
 8008a70:	2a7f      	cmp	r2, #127	; 0x7f
    TerminalState[index].stats.writeTooBig++;
 8008a72:	fb03 6300 	mla	r3, r3, r0, r6
  if(len >= TERMINALBUFFERSIZE) {
 8008a76:	d906      	bls.n	8008a86 <TerminalOutputBufferWrite+0x1e>
    TerminalState[index].stats.writeTooBig++;
 8008a78:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8008a7c:	3201      	adds	r2, #1
 8008a7e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    return 1;
 8008a82:	2001      	movs	r0, #1
 8008a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if((TerminalState[index].outCount+len) >= TERMINALBUFFERSIZE) {
 8008a86:	f8b3 410a 	ldrh.w	r4, [r3, #266]	; 0x10a
 8008a8a:	fa12 f484 	uxtah	r4, r2, r4
 8008a8e:	2c7f      	cmp	r4, #127	; 0x7f
    TerminalState[index].stats.writeBlocked++;
 8008a90:	bf82      	ittt	hi
 8008a92:	f8d3 4114 	ldrhi.w	r4, [r3, #276]	; 0x114
 8008a96:	3401      	addhi	r4, #1
 8008a98:	f8c3 4114 	strhi.w	r4, [r3, #276]	; 0x114
  while((TerminalState[index].outCount+len) >= TERMINALBUFFERSIZE) {} 
 8008a9c:	f44f 7392 	mov.w	r3, #292	; 0x124
 8008aa0:	fb03 6300 	mla	r3, r3, r0, r6
 8008aa4:	f8b3 410a 	ldrh.w	r4, [r3, #266]	; 0x10a
 8008aa8:	fa12 f484 	uxtah	r4, r2, r4
 8008aac:	2c7f      	cmp	r4, #127	; 0x7f
 8008aae:	d8f9      	bhi.n	8008aa4 <TerminalOutputBufferWrite+0x3c>
  __ASM volatile ("cpsid i" : : : "memory");
 8008ab0:	b672      	cpsid	i
  TerminalState[index].stats.written += len;  /* gather statistics */
 8008ab2:	f8d3 4118 	ldr.w	r4, [r3, #280]	; 0x118
 8008ab6:	4414      	add	r4, r2
 8008ab8:	f8c3 4118 	str.w	r4, [r3, #280]	; 0x118
	&& (TerminalState[index].outCount<TERMINALBUFFERSIZE)) {
 8008abc:	f44f 7492 	mov.w	r4, #292	; 0x124
 8008ac0:	440a      	add	r2, r1
 8008ac2:	fb04 6400 	mla	r4, r4, r0, r6
  while((len != 0) 
 8008ac6:	4291      	cmp	r1, r2
 8008ac8:	d018      	beq.n	8008afc <TerminalOutputBufferWrite+0x94>
	&& (TerminalState[index].outCount<TERMINALBUFFERSIZE)) {
 8008aca:	f8b4 310a 	ldrh.w	r3, [r4, #266]	; 0x10a
 8008ace:	b29b      	uxth	r3, r3
 8008ad0:	2b7f      	cmp	r3, #127	; 0x7f
 8008ad2:	d813      	bhi.n	8008afc <TerminalOutputBufferWrite+0x94>
    head = TerminalState[index].outHead;
 8008ad4:	f8b4 5106 	ldrh.w	r5, [r4, #262]	; 0x106
    TerminalState[index].outBuffer[head] = *p++;
 8008ad8:	f811 7b01 	ldrb.w	r7, [r1], #1
    head = TerminalState[index].outHead;
 8008adc:	b2ad      	uxth	r5, r5
    TerminalState[index].outBuffer[head] = *p++;
 8008ade:	1963      	adds	r3, r4, r5
    TerminalState[index].outHead = TERMINALINCR(head);
 8008ae0:	3501      	adds	r5, #1
 8008ae2:	f005 057f 	and.w	r5, r5, #127	; 0x7f
 8008ae6:	f8a4 5106 	strh.w	r5, [r4, #262]	; 0x106
    TerminalState[index].outBuffer[head] = *p++;
 8008aea:	f883 7086 	strb.w	r7, [r3, #134]	; 0x86
    TerminalState[index].outCount++;
 8008aee:	f8b4 310a 	ldrh.w	r3, [r4, #266]	; 0x10a
 8008af2:	3301      	adds	r3, #1
 8008af4:	b29b      	uxth	r3, r3
 8008af6:	f8a4 310a 	strh.w	r3, [r4, #266]	; 0x10a
 8008afa:	e7e4      	b.n	8008ac6 <TerminalOutputBufferWrite+0x5e>
  tail = TerminalState[index].outTail;
 8008afc:	f44f 7392 	mov.w	r3, #292	; 0x124
 8008b00:	fb03 6300 	mla	r3, r3, r0, r6
 8008b04:	f8b3 2108 	ldrh.w	r2, [r3, #264]	; 0x108
 8008b08:	b295      	uxth	r5, r2
  count = TerminalState[index].outCount;
 8008b0a:	f8b3 210a 	ldrh.w	r2, [r3, #266]	; 0x10a
 8008b0e:	b292      	uxth	r2, r2
  if((count + tail) >= TERMINALBUFFERSIZE) {
 8008b10:	18ab      	adds	r3, r5, r2
 8008b12:	2b7f      	cmp	r3, #127	; 0x7f
    count = TERMINALBUFFERSIZE - tail;
 8008b14:	bf88      	it	hi
 8008b16:	f1c5 0280 	rsbhi	r2, r5, #128	; 0x80
  switch(index) {
 8008b1a:	b990      	cbnz	r0, 8008b42 <TerminalOutputBufferWrite+0xda>
    if(hUSBDDevice.dev_state == USBD_STATE_CONFIGURED) {
 8008b1c:	4f0b      	ldr	r7, [pc, #44]	; (8008b4c <TerminalOutputBufferWrite+0xe4>)
 8008b1e:	f897 31fc 	ldrb.w	r3, [r7, #508]	; 0x1fc
 8008b22:	2b03      	cmp	r3, #3
 8008b24:	d10d      	bne.n	8008b42 <TerminalOutputBufferWrite+0xda>
      USBD_CDC_SetTxBuffer(&hUSBDDevice,
 8008b26:	b294      	uxth	r4, r2
			   (uint8_t*)&(TerminalState[index].outBuffer[tail]),
 8008b28:	1971      	adds	r1, r6, r5
      USBD_CDC_SetTxBuffer(&hUSBDDevice,
 8008b2a:	4622      	mov	r2, r4
 8008b2c:	3186      	adds	r1, #134	; 0x86
 8008b2e:	4638      	mov	r0, r7
 8008b30:	f003 f992 	bl	800be58 <USBD_CDC_SetTxBuffer>
      cdcRc = USBD_CDC_TransmitPacket(&hUSBDDevice);
 8008b34:	4638      	mov	r0, r7
 8008b36:	f003 f99d 	bl	800be74 <USBD_CDC_TransmitPacket>
      if(cdcRc == USBD_OK) {
 8008b3a:	b910      	cbnz	r0, 8008b42 <TerminalOutputBufferWrite+0xda>
	TerminalState[index].outSending = count;
 8008b3c:	4b02      	ldr	r3, [pc, #8]	; (8008b48 <TerminalOutputBufferWrite+0xe0>)
 8008b3e:	f8a3 410c 	strh.w	r4, [r3, #268]	; 0x10c
  __ASM volatile ("cpsie i" : : : "memory");
 8008b42:	b662      	cpsie	i
 8008b44:	2000      	movs	r0, #0
}
 8008b46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b48:	20000b24 	.word	0x20000b24
 8008b4c:	20000ff8 	.word	0x20000ff8

08008b50 <_write_r>:
{
 8008b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b52:	461d      	mov	r5, r3
 8008b54:	4614      	mov	r4, r2
 8008b56:	18d7      	adds	r7, r2, r3
  while(count != 0) {
 8008b58:	42bc      	cmp	r4, r7
 8008b5a:	4626      	mov	r6, r4
 8008b5c:	d00f      	beq.n	8008b7e <_write_r+0x2e>
    if(*ptr == '\n') {
 8008b5e:	7833      	ldrb	r3, [r6, #0]
 8008b60:	2b0a      	cmp	r3, #10
 8008b62:	f104 0401 	add.w	r4, r4, #1
 8008b66:	d104      	bne.n	8008b72 <_write_r+0x22>
      TerminalOutputBufferWrite(INDEX_USB,"\r",1);
 8008b68:	2201      	movs	r2, #1
 8008b6a:	4906      	ldr	r1, [pc, #24]	; (8008b84 <_write_r+0x34>)
 8008b6c:	2000      	movs	r0, #0
 8008b6e:	f7ff ff7b 	bl	8008a68 <TerminalOutputBufferWrite>
    TerminalOutputBufferWrite(INDEX_USB,ptr,1);
 8008b72:	2201      	movs	r2, #1
 8008b74:	4631      	mov	r1, r6
 8008b76:	2000      	movs	r0, #0
 8008b78:	f7ff ff76 	bl	8008a68 <TerminalOutputBufferWrite>
 8008b7c:	e7ec      	b.n	8008b58 <_write_r+0x8>
}
 8008b7e:	4628      	mov	r0, r5
 8008b80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b82:	bf00      	nop
 8008b84:	0800d4e7 	.word	0x0800d4e7

08008b88 <TerminalInputBufferWrite>:
{
 8008b88:	b510      	push	{r4, lr}
  if((TerminalState[index].inCount + len) >= TERMINALBUFFERSIZE) {
 8008b8a:	4c17      	ldr	r4, [pc, #92]	; (8008be8 <TerminalInputBufferWrite+0x60>)
 8008b8c:	f44f 7392 	mov.w	r3, #292	; 0x124
 8008b90:	fb03 4000 	mla	r0, r3, r0, r4
 8008b94:	f8b0 3084 	ldrh.w	r3, [r0, #132]	; 0x84
 8008b98:	fa12 f383 	uxtah	r3, r2, r3
 8008b9c:	2b7f      	cmp	r3, #127	; 0x7f
 8008b9e:	d906      	bls.n	8008bae <TerminalInputBufferWrite+0x26>
    TerminalState[index].stats.receiveTooBig++;
 8008ba0:	f8d0 311c 	ldr.w	r3, [r0, #284]	; 0x11c
 8008ba4:	3301      	adds	r3, #1
 8008ba6:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
    return 1;
 8008baa:	2001      	movs	r0, #1
 8008bac:	bd10      	pop	{r4, pc}
  TerminalState[index].stats.received += len;
 8008bae:	f8d0 3120 	ldr.w	r3, [r0, #288]	; 0x120
 8008bb2:	4413      	add	r3, r2
 8008bb4:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
 8008bb8:	440a      	add	r2, r1
  while(len != 0) {
 8008bba:	4291      	cmp	r1, r2
 8008bbc:	d011      	beq.n	8008be2 <TerminalInputBufferWrite+0x5a>
    head = TerminalState[index].inHead;
 8008bbe:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
    TerminalState[index].inBuffer[head] = *p++;
 8008bc2:	f811 4b01 	ldrb.w	r4, [r1], #1
    head = TerminalState[index].inHead;
 8008bc6:	b29b      	uxth	r3, r3
    TerminalState[index].inBuffer[head] = *p++;
 8008bc8:	54c4      	strb	r4, [r0, r3]
    TerminalState[index].inHead = TERMINALINCR(head);
 8008bca:	3301      	adds	r3, #1
 8008bcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bd0:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
    TerminalState[index].inCount++;
 8008bd4:	f8b0 3084 	ldrh.w	r3, [r0, #132]	; 0x84
 8008bd8:	3301      	adds	r3, #1
 8008bda:	b29b      	uxth	r3, r3
 8008bdc:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 8008be0:	e7eb      	b.n	8008bba <TerminalInputBufferWrite+0x32>
  return 0;
 8008be2:	2000      	movs	r0, #0
}
 8008be4:	bd10      	pop	{r4, pc}
 8008be6:	bf00      	nop
 8008be8:	20000b24 	.word	0x20000b24

08008bec <USB_LP_CAN_RX0_IRQHandler>:
  HAL_PCD_IRQHandler(&hpcd);
 8008bec:	4801      	ldr	r0, [pc, #4]	; (8008bf4 <USB_LP_CAN_RX0_IRQHandler+0x8>)
 8008bee:	f001 bd0d 	b.w	800a60c <HAL_PCD_IRQHandler>
 8008bf2:	bf00      	nop
 8008bf4:	20001220 	.word	0x20001220

08008bf8 <Uncompress>:

/* Uncompress a name, and return a pointer to a static buffer
   containging the name.
*/
static const char *Uncompress(char *str)
{
 8008bf8:	b570      	push	{r4, r5, r6, lr}
  const char decoderRing[]="ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_";
 8008bfa:	4b1b      	ldr	r3, [pc, #108]	; (8008c68 <Uncompress+0x70>)
{
 8008bfc:	b08a      	sub	sp, #40	; 0x28
 8008bfe:	4605      	mov	r5, r0
  const char decoderRing[]="ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_";
 8008c00:	466a      	mov	r2, sp
 8008c02:	f103 0620 	add.w	r6, r3, #32
 8008c06:	6818      	ldr	r0, [r3, #0]
 8008c08:	6859      	ldr	r1, [r3, #4]
 8008c0a:	4614      	mov	r4, r2
 8008c0c:	c403      	stmia	r4!, {r0, r1}
 8008c0e:	3308      	adds	r3, #8
 8008c10:	42b3      	cmp	r3, r6
 8008c12:	4622      	mov	r2, r4
 8008c14:	d1f7      	bne.n	8008c06 <Uncompress+0xe>
 8008c16:	6818      	ldr	r0, [r3, #0]
 8008c18:	889b      	ldrh	r3, [r3, #4]
 8008c1a:	6020      	str	r0, [r4, #0]
  uint32_t i,bits;
  uint32_t data;
  char c;

  /* Prime the data pump */
  data = (uint8_t)(*str++);
 8008c1c:	4629      	mov	r1, r5
  const char decoderRing[]="ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_";
 8008c1e:	80a3      	strh	r3, [r4, #4]
  data = (uint8_t)(*str++);
 8008c20:	f811 2b02 	ldrb.w	r2, [r1], #2
  data <<= 8;
  data |= (uint8_t)(*str++);
 8008c24:	786b      	ldrb	r3, [r5, #1]
 8008c26:	4e11      	ldr	r6, [pc, #68]	; (8008c6c <Uncompress+0x74>)
 8008c28:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  bits = 0;
  i = 0;
  //printf("bits: %u, data: %06x\n",(unsigned)bits, (unsigned)data);
  while((data & (0x3f << 10)) != 0) {
 8008c2c:	2200      	movs	r2, #0
  bits = 0;
 8008c2e:	4614      	mov	r4, r2
  while((data & (0x3f << 10)) != 0) {
 8008c30:	f413 457c 	ands.w	r5, r3, #64512	; 0xfc00
 8008c34:	480d      	ldr	r0, [pc, #52]	; (8008c6c <Uncompress+0x74>)
 8008c36:	d013      	beq.n	8008c60 <Uncompress+0x68>
    data <<= 6;
 8008c38:	019b      	lsls	r3, r3, #6
    data &= 0x3fffff;
 8008c3a:	f3c3 0315 	ubfx	r3, r3, #0, #22
    c = decoderRing[(data>>16)-1];
 8008c3e:	a80a      	add	r0, sp, #40	; 0x28
 8008c40:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    buf[i++] = c;
 8008c44:	f810 0c29 	ldrb.w	r0, [r0, #-41]
 8008c48:	54b0      	strb	r0, [r6, r2]
    /* keep track of how many bits we have used */
    bits += 6;
 8008c4a:	1da0      	adds	r0, r4, #6
    //printf("bits: %u, data: %06x\n",(unsigned)bits, (unsigned)data);
    /* Once we have consumed at least 8 bits, fill in the bottom */
    if(bits >= 8) {
 8008c4c:	2807      	cmp	r0, #7
 8008c4e:	d904      	bls.n	8008c5a <Uncompress+0x62>
      bits -= 8;
 8008c50:	1ea0      	subs	r0, r4, #2
      data |= ((uint32_t)(*str++)) << bits; 
 8008c52:	780c      	ldrb	r4, [r1, #0]
 8008c54:	4084      	lsls	r4, r0
 8008c56:	4323      	orrs	r3, r4
 8008c58:	3101      	adds	r1, #1
 8008c5a:	3201      	adds	r2, #1
 8008c5c:	4604      	mov	r4, r0
 8008c5e:	e7e7      	b.n	8008c30 <Uncompress+0x38>
    }
  }
  buf[i]='\0';
 8008c60:	5485      	strb	r5, [r0, r2]
  return buf;
}
 8008c62:	b00a      	add	sp, #40	; 0x28
 8008c64:	bd70      	pop	{r4, r5, r6, pc}
 8008c66:	bf00      	nop
 8008c68:	0800d815 	.word	0x0800d815
 8008c6c:	20000c48 	.word	0x20000c48

08008c70 <DecodeReadRegister>:


/* Read a specific register from memory */
uint32_t DecodeReadRegister(const Peripheral_t *p, const Register_t *r)
{
 8008c70:	b538      	push	{r3, r4, r5, lr}
  uint32_t address, val;

  if(p == NULL) return 0;
 8008c72:	4604      	mov	r4, r0
 8008c74:	b300      	cbz	r0, 8008cb8 <DecodeReadRegister+0x48>
  if(r == NULL) return 0;
 8008c76:	b301      	cbz	r1, 8008cba <DecodeReadRegister+0x4a>
  
  /* Calculate effective address */
  address = p->base + r->offset;

  /* read register according to size */
  switch(r->size) {
 8008c78:	798d      	ldrb	r5, [r1, #6]
  address = p->base + r->offset;
 8008c7a:	888a      	ldrh	r2, [r1, #4]
 8008c7c:	6843      	ldr	r3, [r0, #4]
  switch(r->size) {
 8008c7e:	2d10      	cmp	r5, #16
 8008c80:	d005      	beq.n	8008c8e <DecodeReadRegister+0x1e>
 8008c82:	2d20      	cmp	r5, #32
 8008c84:	d005      	beq.n	8008c92 <DecodeReadRegister+0x22>
 8008c86:	2d08      	cmp	r5, #8
 8008c88:	d105      	bne.n	8008c96 <DecodeReadRegister+0x26>
  case 8:
    val = *(uint8_t *)address;
 8008c8a:	5cd0      	ldrb	r0, [r2, r3]
    break;
 8008c8c:	bd38      	pop	{r3, r4, r5, pc}
  case 16:
    val = *(uint16_t *)address;
 8008c8e:	5ad0      	ldrh	r0, [r2, r3]
    break;  
 8008c90:	bd38      	pop	{r3, r4, r5, pc}
  case 32:
    val = *(uint32_t *)address;
 8008c92:	58d0      	ldr	r0, [r2, r3]
    break;
 8008c94:	bd38      	pop	{r3, r4, r5, pc}
  default:
    printf("Invalid size 0x%x for register %s",
 8008c96:	6808      	ldr	r0, [r1, #0]
 8008c98:	f7ff ffae 	bl	8008bf8 <Uncompress>
 8008c9c:	4629      	mov	r1, r5
 8008c9e:	4602      	mov	r2, r0
 8008ca0:	4807      	ldr	r0, [pc, #28]	; (8008cc0 <DecodeReadRegister+0x50>)
 8008ca2:	f7f7 fff1 	bl	8000c88 <printf>
	   (unsigned int)r->size,
	   Uncompress(r->name));
    printf(" in periphral %s!\n",
 8008ca6:	6820      	ldr	r0, [r4, #0]
 8008ca8:	f7ff ffa6 	bl	8008bf8 <Uncompress>
 8008cac:	4601      	mov	r1, r0
 8008cae:	4805      	ldr	r0, [pc, #20]	; (8008cc4 <DecodeReadRegister+0x54>)
 8008cb0:	f7f7 ffea 	bl	8000c88 <printf>
	   Uncompress(p->name));
    return 0;
 8008cb4:	2000      	movs	r0, #0
 8008cb6:	bd38      	pop	{r3, r4, r5, pc}
 8008cb8:	bd38      	pop	{r3, r4, r5, pc}
  if(p == NULL) return 0;
 8008cba:	4608      	mov	r0, r1
  }
  return val;
}
 8008cbc:	bd38      	pop	{r3, r4, r5, pc}
 8008cbe:	bf00      	nop
 8008cc0:	0800d83b 	.word	0x0800d83b
 8008cc4:	0800d85d 	.word	0x0800d85d

08008cc8 <DecodeWriteRegister>:

/* Read a specific register from memory */
uint32_t DecodeWriteRegister(const Peripheral_t *p, const Register_t *r,
			     uint32_t val)
{
 8008cc8:	b538      	push	{r3, r4, r5, lr}
  uint32_t address;

  if(p == NULL) return 1;
 8008cca:	4605      	mov	r5, r0
 8008ccc:	b1f8      	cbz	r0, 8008d0e <DecodeWriteRegister+0x46>
  if(r == NULL) return 1;
 8008cce:	b1f1      	cbz	r1, 8008d0e <DecodeWriteRegister+0x46>
  
  /* Calculate effective address */
  address = p->base + r->offset;

  /* read register according to size */
  switch(r->size) {
 8008cd0:	798c      	ldrb	r4, [r1, #6]
  address = p->base + r->offset;
 8008cd2:	8888      	ldrh	r0, [r1, #4]
 8008cd4:	686b      	ldr	r3, [r5, #4]
  switch(r->size) {
 8008cd6:	2c10      	cmp	r4, #16
 8008cd8:	d005      	beq.n	8008ce6 <DecodeWriteRegister+0x1e>
 8008cda:	2c20      	cmp	r4, #32
 8008cdc:	d005      	beq.n	8008cea <DecodeWriteRegister+0x22>
 8008cde:	2c08      	cmp	r4, #8
 8008ce0:	d106      	bne.n	8008cf0 <DecodeWriteRegister+0x28>
  case 8:
    *(uint8_t *)address = val;
 8008ce2:	54c2      	strb	r2, [r0, r3]
 8008ce4:	e002      	b.n	8008cec <DecodeWriteRegister+0x24>
    break;
  case 16:
    *(uint16_t *)address = val;
 8008ce6:	52c2      	strh	r2, [r0, r3]
 8008ce8:	e000      	b.n	8008cec <DecodeWriteRegister+0x24>
    break;  
  case 32:
    *(uint32_t *)address = val;
 8008cea:	50c2      	str	r2, [r0, r3]
	   Uncompress(r->name));
    printf(" in periphral %s!\n",
	   Uncompress(p->name));
    return 1;
  }
  return 0;
 8008cec:	2000      	movs	r0, #0
    break;
 8008cee:	bd38      	pop	{r3, r4, r5, pc}
    printf("Invalid size 0x%x for register %s",
 8008cf0:	6808      	ldr	r0, [r1, #0]
 8008cf2:	f7ff ff81 	bl	8008bf8 <Uncompress>
 8008cf6:	4621      	mov	r1, r4
 8008cf8:	4602      	mov	r2, r0
 8008cfa:	4806      	ldr	r0, [pc, #24]	; (8008d14 <DecodeWriteRegister+0x4c>)
 8008cfc:	f7f7 ffc4 	bl	8000c88 <printf>
    printf(" in periphral %s!\n",
 8008d00:	6828      	ldr	r0, [r5, #0]
 8008d02:	f7ff ff79 	bl	8008bf8 <Uncompress>
 8008d06:	4601      	mov	r1, r0
 8008d08:	4803      	ldr	r0, [pc, #12]	; (8008d18 <DecodeWriteRegister+0x50>)
 8008d0a:	f7f7 ffbd 	bl	8000c88 <printf>
  if(p == NULL) return 1;
 8008d0e:	2001      	movs	r0, #1
}
 8008d10:	bd38      	pop	{r3, r4, r5, pc}
 8008d12:	bf00      	nop
 8008d14:	0800d83b 	.word	0x0800d83b
 8008d18:	0800d85d 	.word	0x0800d85d

08008d1c <DecodeField>:

/* Decode a field */
void DecodeField(const Field_t *f, uint32_t val)
{
 8008d1c:	b530      	push	{r4, r5, lr}
  uint32_t v;
  if(f == NULL) return;
 8008d1e:	4604      	mov	r4, r0
{
 8008d20:	b085      	sub	sp, #20
  if(f == NULL) return;
 8008d22:	b1d8      	cbz	r0, 8008d5c <DecodeField+0x40>

  v = (val >> (f->offset)) & ((1<<f->width)-1);
 8008d24:	7945      	ldrb	r5, [r0, #5]
 8008d26:	2301      	movs	r3, #1
 8008d28:	fa03 f505 	lsl.w	r5, r3, r5
 8008d2c:	1e6a      	subs	r2, r5, #1
 8008d2e:	7905      	ldrb	r5, [r0, #4]
  printf("  %21s : 0x%-2x (%6u) %2u %s offset: %u\n",
 8008d30:	6800      	ldr	r0, [r0, #0]
  v = (val >> (f->offset)) & ((1<<f->width)-1);
 8008d32:	40e9      	lsrs	r1, r5
 8008d34:	ea02 0501 	and.w	r5, r2, r1
  printf("  %21s : 0x%-2x (%6u) %2u %s offset: %u\n",
 8008d38:	f7ff ff5e 	bl	8008bf8 <Uncompress>
	 Uncompress(f->name),  
	 (unsigned int)v,
	 (unsigned int)v,
	 (unsigned int)(f->width),
 8008d3c:	7962      	ldrb	r2, [r4, #5]
  printf("  %21s : 0x%-2x (%6u) %2u %s offset: %u\n",
 8008d3e:	4908      	ldr	r1, [pc, #32]	; (8008d60 <DecodeField+0x44>)
 8008d40:	4b08      	ldr	r3, [pc, #32]	; (8008d64 <DecodeField+0x48>)
 8008d42:	2a01      	cmp	r2, #1
 8008d44:	bf98      	it	ls
 8008d46:	460b      	movls	r3, r1
 8008d48:	7921      	ldrb	r1, [r4, #4]
 8008d4a:	9102      	str	r1, [sp, #8]
 8008d4c:	e88d 000c 	stmia.w	sp, {r2, r3}
 8008d50:	4601      	mov	r1, r0
 8008d52:	462b      	mov	r3, r5
 8008d54:	462a      	mov	r2, r5
 8008d56:	4804      	ldr	r0, [pc, #16]	; (8008d68 <DecodeField+0x4c>)
 8008d58:	f7f7 ff96 	bl	8000c88 <printf>
	 (f->width > 1 ) ? "bits," : "bit, ",
	 (unsigned int)(f->offset));
}
 8008d5c:	b005      	add	sp, #20
 8008d5e:	bd30      	pop	{r4, r5, pc}
 8008d60:	0800d876 	.word	0x0800d876
 8008d64:	0800d870 	.word	0x0800d870
 8008d68:	0800d87c 	.word	0x0800d87c

08008d6c <DecodeRegister>:

/* Decode a register */
void DecodeRegister(const Register_t *r, uint32_t base, uint32_t val,
		    uint32_t decodeFields)
{
 8008d6c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008d70:	460d      	mov	r5, r1
 8008d72:	4616      	mov	r6, r2
 8008d74:	461f      	mov	r7, r3
  Field_t const *f;
  uint32_t i;
  
  if(r == NULL) return;
 8008d76:	4604      	mov	r4, r0
 8008d78:	b328      	cbz	r0, 8008dc6 <DecodeRegister+0x5a>

  //  printf("\tRegister :\n");
  printf(" Register %-13s : 0x%08x (%10u) Size: %2u Address: 0x%08x\n",
 8008d7a:	6800      	ldr	r0, [r0, #0]
 8008d7c:	f7ff ff3c 	bl	8008bf8 <Uncompress>
 8008d80:	88a1      	ldrh	r1, [r4, #4]
 8008d82:	440d      	add	r5, r1
 8008d84:	9501      	str	r5, [sp, #4]
 8008d86:	79a3      	ldrb	r3, [r4, #6]
 8008d88:	9300      	str	r3, [sp, #0]
 8008d8a:	4601      	mov	r1, r0
 8008d8c:	4633      	mov	r3, r6
 8008d8e:	4632      	mov	r2, r6
 8008d90:	480e      	ldr	r0, [pc, #56]	; (8008dcc <DecodeRegister+0x60>)
 8008d92:	f7f7 ff79 	bl	8000c88 <printf>
	 (unsigned int)r->size,
	 (unsigned int)(base + r->offset)
	 );

  /* Dump out fields */
  if(r->fields != NULL && decodeFields) {
 8008d96:	f8d4 8008 	ldr.w	r8, [r4, #8]
 8008d9a:	f1b8 0f00 	cmp.w	r8, #0
 8008d9e:	d00b      	beq.n	8008db8 <DecodeRegister+0x4c>
 8008da0:	b18f      	cbz	r7, 8008dc6 <DecodeRegister+0x5a>
 8008da2:	2500      	movs	r5, #0
    f = r->fields;
    for(i=0; i<r->numFields; i++) {
 8008da4:	89a3      	ldrh	r3, [r4, #12]
 8008da6:	429d      	cmp	r5, r3
 8008da8:	eb08 00c5 	add.w	r0, r8, r5, lsl #3
 8008dac:	d205      	bcs.n	8008dba <DecodeRegister+0x4e>
      DecodeField(f,val);
 8008dae:	4631      	mov	r1, r6
 8008db0:	f7ff ffb4 	bl	8008d1c <DecodeField>
    for(i=0; i<r->numFields; i++) {
 8008db4:	3501      	adds	r5, #1
 8008db6:	e7f5      	b.n	8008da4 <DecodeRegister+0x38>
      f++;
    }
  }
  if(decodeFields) {
 8008db8:	b12f      	cbz	r7, 8008dc6 <DecodeRegister+0x5a>
    printf("\n");
 8008dba:	200a      	movs	r0, #10
  }

}
 8008dbc:	b002      	add	sp, #8
 8008dbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    printf("\n");
 8008dc2:	f7f7 bf79 	b.w	8000cb8 <putchar>
}
 8008dc6:	b002      	add	sp, #8
 8008dc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008dcc:	0800d8a5 	.word	0x0800d8a5

08008dd0 <DecodePeripheral>:

/* Decode a peripheral */
void DecodePeripheral(const Peripheral_t *p, uint32_t decodeFields)
{
 8008dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dd4:	4688      	mov	r8, r1
  Register_t const *r;
  uint32_t val;
  uint32_t i;

  if(p == NULL) return;
 8008dd6:	4604      	mov	r4, r0
 8008dd8:	b1d8      	cbz	r0, 8008e12 <DecodePeripheral+0x42>
  
  printf("Peripheral %-13s: Base address: 0x%08x\n",
 8008dda:	6800      	ldr	r0, [r0, #0]
 8008ddc:	f7ff ff0c 	bl	8008bf8 <Uncompress>
 8008de0:	6862      	ldr	r2, [r4, #4]
 8008de2:	4601      	mov	r1, r0
 8008de4:	480c      	ldr	r0, [pc, #48]	; (8008e18 <DecodePeripheral+0x48>)
 8008de6:	f7f7 ff4f 	bl	8000c88 <printf>
	 Uncompress(p->name),  (unsigned int)p->base);

  /* Dump out registers */
  if(p->registers != NULL) {
 8008dea:	68a7      	ldr	r7, [r4, #8]
 8008dec:	b18f      	cbz	r7, 8008e12 <DecodePeripheral+0x42>
 8008dee:	2500      	movs	r5, #0
    r = p->registers;
    for(i=0; i<p->numRegisters; i++) {
 8008df0:	89a3      	ldrh	r3, [r4, #12]
 8008df2:	429d      	cmp	r5, r3
 8008df4:	eb07 1605 	add.w	r6, r7, r5, lsl #4
 8008df8:	d20b      	bcs.n	8008e12 <DecodePeripheral+0x42>
      /* Read value */
      val = DecodeReadRegister(p,r);
 8008dfa:	4631      	mov	r1, r6
 8008dfc:	4620      	mov	r0, r4
 8008dfe:	f7ff ff37 	bl	8008c70 <DecodeReadRegister>
      /* Decode Register, but don't dump fields */
      DecodeRegister(r, p->base, val, decodeFields);
 8008e02:	4643      	mov	r3, r8
 8008e04:	4602      	mov	r2, r0
 8008e06:	6861      	ldr	r1, [r4, #4]
 8008e08:	4630      	mov	r0, r6
 8008e0a:	f7ff ffaf 	bl	8008d6c <DecodeRegister>
    for(i=0; i<p->numRegisters; i++) {
 8008e0e:	3501      	adds	r5, #1
 8008e10:	e7ee      	b.n	8008df0 <DecodePeripheral+0x20>
 8008e12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e16:	bf00      	nop
 8008e18:	0800d8e0 	.word	0x0800d8e0

08008e1c <DecodePrintPeripherals>:
  }
}

/* Pretty print the names of all the peripherals */
void DecodePrintPeripherals(const Peripheral_t *p)
{
 8008e1c:	b538      	push	{r3, r4, r5, lr}
 8008e1e:	4605      	mov	r5, r0
  uint32_t col;
  col = 8;
  printf("\t");
 8008e20:	2009      	movs	r0, #9
 8008e22:	f7f7 ff49 	bl	8000cb8 <putchar>
  col = 8;
 8008e26:	2408      	movs	r4, #8
  for(; p->name != NULL; p++) {
 8008e28:	6828      	ldr	r0, [r5, #0]
 8008e2a:	b1a0      	cbz	r0, 8008e56 <DecodePrintPeripherals+0x3a>
    col += printf("%s",Uncompress(p->name));
 8008e2c:	f7ff fee4 	bl	8008bf8 <Uncompress>
 8008e30:	4601      	mov	r1, r0
 8008e32:	4809      	ldr	r0, [pc, #36]	; (8008e58 <DecodePrintPeripherals+0x3c>)
 8008e34:	f7f7 ff28 	bl	8000c88 <printf>
    if((p+1)->name != NULL) {
 8008e38:	692b      	ldr	r3, [r5, #16]
    col += printf("%s",Uncompress(p->name));
 8008e3a:	4404      	add	r4, r0
    if((p+1)->name != NULL) {
 8008e3c:	b14b      	cbz	r3, 8008e52 <DecodePrintPeripherals+0x36>
      col += printf(", ");
 8008e3e:	4807      	ldr	r0, [pc, #28]	; (8008e5c <DecodePrintPeripherals+0x40>)
 8008e40:	f7f7 ff22 	bl	8000c88 <printf>
 8008e44:	4404      	add	r4, r0
      if(col > 70) {
 8008e46:	2c46      	cmp	r4, #70	; 0x46
 8008e48:	d903      	bls.n	8008e52 <DecodePrintPeripherals+0x36>
	col = 8;
	printf("\n\t");
 8008e4a:	4805      	ldr	r0, [pc, #20]	; (8008e60 <DecodePrintPeripherals+0x44>)
 8008e4c:	f7f7 ff1c 	bl	8000c88 <printf>
	col = 8;
 8008e50:	2408      	movs	r4, #8
  for(; p->name != NULL; p++) {
 8008e52:	3510      	adds	r5, #16
 8008e54:	e7e8      	b.n	8008e28 <DecodePrintPeripherals+0xc>
      }
    }
  }
}
 8008e56:	bd38      	pop	{r3, r4, r5, pc}
 8008e58:	0800d85a 	.word	0x0800d85a
 8008e5c:	0800d879 	.word	0x0800d879
 8008e60:	0800d908 	.word	0x0800d908

08008e64 <DecodePrintRegisters>:

void DecodePrintRegisters(const Register_t *r,uint32_t count) {
 8008e64:	b570      	push	{r4, r5, r6, lr}
 8008e66:	4606      	mov	r6, r0
  uint8_t col;
  col = 8;
  printf("\t");
 8008e68:	2009      	movs	r0, #9
void DecodePrintRegisters(const Register_t *r,uint32_t count) {
 8008e6a:	460d      	mov	r5, r1
  printf("\t");
 8008e6c:	f7f7 ff24 	bl	8000cb8 <putchar>
 8008e70:	3d01      	subs	r5, #1
 8008e72:	3610      	adds	r6, #16
  col = 8;
 8008e74:	2408      	movs	r4, #8
  while(count--) {
 8008e76:	1c6b      	adds	r3, r5, #1
 8008e78:	d018      	beq.n	8008eac <DecodePrintRegisters+0x48>
    col += printf("%s",Uncompress(r->name));
 8008e7a:	f856 0c10 	ldr.w	r0, [r6, #-16]
 8008e7e:	f7ff febb 	bl	8008bf8 <Uncompress>
 8008e82:	4601      	mov	r1, r0
 8008e84:	480a      	ldr	r0, [pc, #40]	; (8008eb0 <DecodePrintRegisters+0x4c>)
 8008e86:	f7f7 feff 	bl	8000c88 <printf>
 8008e8a:	4420      	add	r0, r4
 8008e8c:	b2c4      	uxtb	r4, r0
    if(count) {
 8008e8e:	b155      	cbz	r5, 8008ea6 <DecodePrintRegisters+0x42>
      col += printf(", ");
 8008e90:	4808      	ldr	r0, [pc, #32]	; (8008eb4 <DecodePrintRegisters+0x50>)
 8008e92:	f7f7 fef9 	bl	8000c88 <printf>
 8008e96:	4420      	add	r0, r4
 8008e98:	b2c4      	uxtb	r4, r0
      if(col > 70) {
 8008e9a:	2c46      	cmp	r4, #70	; 0x46
 8008e9c:	d903      	bls.n	8008ea6 <DecodePrintRegisters+0x42>
	col = 8;
	printf("\n\t");
 8008e9e:	4806      	ldr	r0, [pc, #24]	; (8008eb8 <DecodePrintRegisters+0x54>)
 8008ea0:	f7f7 fef2 	bl	8000c88 <printf>
	col = 8;
 8008ea4:	2408      	movs	r4, #8
 8008ea6:	3d01      	subs	r5, #1
 8008ea8:	3610      	adds	r6, #16
 8008eaa:	e7e4      	b.n	8008e76 <DecodePrintRegisters+0x12>
      }
    }
    r++;
  }
}
 8008eac:	bd70      	pop	{r4, r5, r6, pc}
 8008eae:	bf00      	nop
 8008eb0:	0800d85a 	.word	0x0800d85a
 8008eb4:	0800d879 	.word	0x0800d879
 8008eb8:	0800d908 	.word	0x0800d908

08008ebc <CmdDecode>:

void CmdDecode(int mode)
{
 8008ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t val,oval,t,m,i;
  Peripheral_t const *p;
  Register_t const *r;
  Field_t const *f;

  if(mode == CMD_LONG_HELP) {
 8008ebe:	2802      	cmp	r0, #2
{
 8008ec0:	b085      	sub	sp, #20
  if(mode == CMD_LONG_HELP) {
 8008ec2:	d131      	bne.n	8008f28 <CmdDecode+0x6c>
    /* Try to fetch a peripheral name, then just give general help */
    rc = fetch_string_arg(&n);
 8008ec4:	a803      	add	r0, sp, #12
 8008ec6:	f7ff fc35 	bl	8008734 <fetch_string_arg>
    if(rc) {
 8008eca:	b908      	cbnz	r0, 8008ed0 <CmdDecode+0x14>
 8008ecc:	4c86      	ldr	r4, [pc, #536]	; (80090e8 <CmdDecode+0x22c>)
 8008ece:	e010      	b.n	8008ef2 <CmdDecode+0x36>
      /* nothing to fetch, general help */
      printf("decode {<periph> {<reg>}|full}\n"
 8008ed0:	4886      	ldr	r0, [pc, #536]	; (80090ec <CmdDecode+0x230>)
 8008ed2:	f7f7 ff2f 	bl	8000d34 <puts>
	     "The forms with <val> on the end allow you to set the\n"
	     "selected register/field value\n"
	     "\n"
	     "Valid peripherals are:\n"
	     "\n");
      DecodePrintPeripherals(Peripherals);
 8008ed6:	4884      	ldr	r0, [pc, #528]	; (80090e8 <CmdDecode+0x22c>)
 8008ed8:	f7ff ffa0 	bl	8008e1c <DecodePrintPeripherals>
      printf("\n\n"
 8008edc:	4884      	ldr	r0, [pc, #528]	; (80090f0 <CmdDecode+0x234>)
 8008ede:	e020      	b.n	8008f22 <CmdDecode+0x66>
    } else {
      /* User is requesting a list of registers for a peripheral */
      
      /* Locate the peripheral name */
      p = Peripherals;
      while((p->name != NULL) && strcasecmp(n,Uncompress(p->name))) {
 8008ee0:	9d03      	ldr	r5, [sp, #12]
 8008ee2:	f7ff fe89 	bl	8008bf8 <Uncompress>
 8008ee6:	4601      	mov	r1, r0
 8008ee8:	4628      	mov	r0, r5
 8008eea:	f7f7 ffd3 	bl	8000e94 <strcasecmp>
 8008eee:	b118      	cbz	r0, 8008ef8 <CmdDecode+0x3c>
	p++;
 8008ef0:	3410      	adds	r4, #16
      while((p->name != NULL) && strcasecmp(n,Uncompress(p->name))) {
 8008ef2:	6820      	ldr	r0, [r4, #0]
 8008ef4:	2800      	cmp	r0, #0
 8008ef6:	d1f3      	bne.n	8008ee0 <CmdDecode+0x24>
      }

      if(p->name == NULL) {
 8008ef8:	6820      	ldr	r0, [r4, #0]
 8008efa:	b938      	cbnz	r0, 8008f0c <CmdDecode+0x50>
	/* No valid peripheral name found */
	printf("%s is not a valid peripheral name\n"
 8008efc:	9903      	ldr	r1, [sp, #12]
 8008efe:	487d      	ldr	r0, [pc, #500]	; (80090f4 <CmdDecode+0x238>)
 8008f00:	f7f7 fec2 	bl	8000c88 <printf>
	       "Valid peripherals are:\n"
	       "\n",
	       n);
	DecodePrintPeripherals(Peripherals);
 8008f04:	4878      	ldr	r0, [pc, #480]	; (80090e8 <CmdDecode+0x22c>)
 8008f06:	f7ff ff89 	bl	8008e1c <DecodePrintPeripherals>
	return;
 8008f0a:	e0eb      	b.n	80090e4 <CmdDecode+0x228>
      }
      printf("Valid registers for peripheral %s:\n"
 8008f0c:	f7ff fe74 	bl	8008bf8 <Uncompress>
 8008f10:	4601      	mov	r1, r0
 8008f12:	4879      	ldr	r0, [pc, #484]	; (80090f8 <CmdDecode+0x23c>)
 8008f14:	f7f7 feb8 	bl	8000c88 <printf>
	     "\n",
	     Uncompress(p->name));
      DecodePrintRegisters(p->registers,p->numRegisters);
 8008f18:	89a1      	ldrh	r1, [r4, #12]
 8008f1a:	68a0      	ldr	r0, [r4, #8]
 8008f1c:	f7ff ffa2 	bl	8008e64 <DecodePrintRegisters>
      printf("\n\n");
 8008f20:	4876      	ldr	r0, [pc, #472]	; (80090fc <CmdDecode+0x240>)
 8008f22:	f7f7 ff07 	bl	8000d34 <puts>
 8008f26:	e0dd      	b.n	80090e4 <CmdDecode+0x228>
    }
    
    return;
  }
  /* User is requesting to decode something */
  rc = fetch_string_arg(&pname);
 8008f28:	4668      	mov	r0, sp
 8008f2a:	f7ff fc03 	bl	8008734 <fetch_string_arg>
  if(rc) {
 8008f2e:	b908      	cbnz	r0, 8008f34 <CmdDecode+0x78>
 8008f30:	4c6d      	ldr	r4, [pc, #436]	; (80090e8 <CmdDecode+0x22c>)
 8008f32:	e00c      	b.n	8008f4e <CmdDecode+0x92>
    /* User did not specify a peripheral name */
    printf("Missing peripheral name, please chose one of:\n\n");
 8008f34:	4872      	ldr	r0, [pc, #456]	; (8009100 <CmdDecode+0x244>)
 8008f36:	f7f7 fefd 	bl	8000d34 <puts>
 8008f3a:	e011      	b.n	8008f60 <CmdDecode+0xa4>
    return;
  }

  /* Attempt to locate the periperhal */
  p = Peripherals;
  while((p->name != NULL) && strcasecmp(pname,Uncompress(p->name))) {
 8008f3c:	9d00      	ldr	r5, [sp, #0]
 8008f3e:	f7ff fe5b 	bl	8008bf8 <Uncompress>
 8008f42:	4601      	mov	r1, r0
 8008f44:	4628      	mov	r0, r5
 8008f46:	f7f7 ffa5 	bl	8000e94 <strcasecmp>
 8008f4a:	b118      	cbz	r0, 8008f54 <CmdDecode+0x98>
    p++;
 8008f4c:	3410      	adds	r4, #16
  while((p->name != NULL) && strcasecmp(pname,Uncompress(p->name))) {
 8008f4e:	6820      	ldr	r0, [r4, #0]
 8008f50:	2800      	cmp	r0, #0
 8008f52:	d1f3      	bne.n	8008f3c <CmdDecode+0x80>
  }

  if(p->name == NULL) {
 8008f54:	6823      	ldr	r3, [r4, #0]
 8008f56:	b93b      	cbnz	r3, 8008f68 <CmdDecode+0xac>
    /* No valid peripheral name found */
    printf("'%s' is not a valid peripheral name, valid names for are:\n\n",
 8008f58:	9900      	ldr	r1, [sp, #0]
 8008f5a:	486a      	ldr	r0, [pc, #424]	; (8009104 <CmdDecode+0x248>)
 8008f5c:	f7f7 fe94 	bl	8000c88 <printf>
	   pname);
    DecodePrintPeripherals(Peripherals);
 8008f60:	4861      	ldr	r0, [pc, #388]	; (80090e8 <CmdDecode+0x22c>)
 8008f62:	f7ff ff5b 	bl	8008e1c <DecodePrintPeripherals>
 8008f66:	e7db      	b.n	8008f20 <CmdDecode+0x64>
    printf("\n\n");
    return;
  }
  
  /* See if the user is specifying a register */
  rc = fetch_string_arg(&rname);
 8008f68:	a801      	add	r0, sp, #4
 8008f6a:	f7ff fbe3 	bl	8008734 <fetch_string_arg>
  if(rc) {
 8008f6e:	b108      	cbz	r0, 8008f74 <CmdDecode+0xb8>
    /* No register name specified, dump whole peripheral */
    DecodePeripheral(p,0);
 8008f70:	2100      	movs	r1, #0
 8008f72:	e016      	b.n	8008fa2 <CmdDecode+0xe6>
    return;
  }

  /* See if we can find the register in the list. */
  r = p->registers;
 8008f74:	68a5      	ldr	r5, [r4, #8]
  i = p->numRegisters;
 8008f76:	89a7      	ldrh	r7, [r4, #12]
 8008f78:	9e01      	ldr	r6, [sp, #4]
  while((i--) && strcasecmp(rname,Uncompress(r->name))) {
 8008f7a:	b157      	cbz	r7, 8008f92 <CmdDecode+0xd6>
 8008f7c:	6828      	ldr	r0, [r5, #0]
 8008f7e:	f7ff fe3b 	bl	8008bf8 <Uncompress>
 8008f82:	4601      	mov	r1, r0
 8008f84:	4630      	mov	r0, r6
 8008f86:	f7f7 ff85 	bl	8000e94 <strcasecmp>
 8008f8a:	3f01      	subs	r7, #1
 8008f8c:	b168      	cbz	r0, 8008faa <CmdDecode+0xee>
    r++;
 8008f8e:	3510      	adds	r5, #16
 8008f90:	e7f2      	b.n	8008f78 <CmdDecode+0xbc>
  }

  if(i == -1) {
    /* if the user says 'full' do a full decode */
    if(strcasecmp(rname,"full") == 0) {
 8008f92:	495d      	ldr	r1, [pc, #372]	; (8009108 <CmdDecode+0x24c>)
 8008f94:	4630      	mov	r0, r6
 8008f96:	f7f7 ff7d 	bl	8000e94 <strcasecmp>
 8008f9a:	2800      	cmp	r0, #0
 8008f9c:	f040 8099 	bne.w	80090d2 <CmdDecode+0x216>
      DecodePeripheral(p,1);
 8008fa0:	2101      	movs	r1, #1
 8008fa2:	4620      	mov	r0, r4
 8008fa4:	f7ff ff14 	bl	8008dd0 <DecodePeripheral>
      return;
 8008fa8:	e09c      	b.n	80090e4 <CmdDecode+0x228>
    printf("\n\n");
    return;
  }    

  /* Check to see if there is a field name, or integer value to program */
  rc = fetch_string_arg(&fname);
 8008faa:	a802      	add	r0, sp, #8
 8008fac:	f7ff fbc2 	bl	8008734 <fetch_string_arg>
  if(rc == 0) {
 8008fb0:	2800      	cmp	r0, #0
 8008fb2:	f040 8082 	bne.w	80090ba <CmdDecode+0x1fe>
    /* if the user says 'val', decode the value given, as if it came
     * from the named register.
     */
    if(strcasecmp(fname,"val") == 0) {
 8008fb6:	4955      	ldr	r1, [pc, #340]	; (800910c <CmdDecode+0x250>)
 8008fb8:	9802      	ldr	r0, [sp, #8]
 8008fba:	f7f7 ff6b 	bl	8000e94 <strcasecmp>
 8008fbe:	b940      	cbnz	r0, 8008fd2 <CmdDecode+0x116>
      rc = fetch_uint32_arg(&val);
 8008fc0:	a803      	add	r0, sp, #12
 8008fc2:	f7ff fba3 	bl	800870c <fetch_uint32_arg>
      if(rc) {
 8008fc6:	b108      	cbz	r0, 8008fcc <CmdDecode+0x110>
	printf("Missing value to use in decode\n");
 8008fc8:	4851      	ldr	r0, [pc, #324]	; (8009110 <CmdDecode+0x254>)
 8008fca:	e7aa      	b.n	8008f22 <CmdDecode+0x66>
	return;
      }
      DecodeRegister(r,p->base,val,1);
 8008fcc:	2301      	movs	r3, #1
 8008fce:	9a03      	ldr	r2, [sp, #12]
 8008fd0:	e07a      	b.n	80090c8 <CmdDecode+0x20c>
      return;
    }

    /* There was something... see if it matches a field name */
    f = r->fields;
 8008fd2:	68ae      	ldr	r6, [r5, #8]
    while((f->name != NULL) && strcasecmp(fname,Uncompress(f->name))) {
 8008fd4:	6830      	ldr	r0, [r6, #0]
 8008fd6:	b910      	cbnz	r0, 8008fde <CmdDecode+0x122>
      f++;
    }
    if(f->name != NULL) {
 8008fd8:	6837      	ldr	r7, [r6, #0]
 8008fda:	b95f      	cbnz	r7, 8008ff4 <CmdDecode+0x138>
 8008fdc:	e046      	b.n	800906c <CmdDecode+0x1b0>
    while((f->name != NULL) && strcasecmp(fname,Uncompress(f->name))) {
 8008fde:	9f02      	ldr	r7, [sp, #8]
 8008fe0:	f7ff fe0a 	bl	8008bf8 <Uncompress>
 8008fe4:	4601      	mov	r1, r0
 8008fe6:	4638      	mov	r0, r7
 8008fe8:	f7f7 ff54 	bl	8000e94 <strcasecmp>
 8008fec:	2800      	cmp	r0, #0
 8008fee:	d0f3      	beq.n	8008fd8 <CmdDecode+0x11c>
      f++;
 8008ff0:	3608      	adds	r6, #8
 8008ff2:	e7ef      	b.n	8008fd4 <CmdDecode+0x118>
      /* Matched a field name, look for the value */
      rc = fetch_uint32_arg(&val);
 8008ff4:	a803      	add	r0, sp, #12
 8008ff6:	f7ff fb89 	bl	800870c <fetch_uint32_arg>
      if(rc) {
 8008ffa:	b128      	cbz	r0, 8009008 <CmdDecode+0x14c>
	/* Unable to locate a value */
	printf("Missing Value to program into register %s\n",
 8008ffc:	6828      	ldr	r0, [r5, #0]
 8008ffe:	f7ff fdfb 	bl	8008bf8 <Uncompress>
 8009002:	4601      	mov	r1, r0
 8009004:	4843      	ldr	r0, [pc, #268]	; (8009114 <CmdDecode+0x258>)
 8009006:	e040      	b.n	800908a <CmdDecode+0x1ce>
	       Uncompress(r->name));
	return;
      }
    
      /* Update the register field */
      t = DecodeReadRegister(p,r);
 8009008:	4629      	mov	r1, r5
 800900a:	4620      	mov	r0, r4
 800900c:	f7ff fe30 	bl	8008c70 <DecodeReadRegister>
      /* Create mask */
      m = (1<<f->width)-1;
 8009010:	7972      	ldrb	r2, [r6, #5]

      oval = (t >> f->offset) & m; /* Save old value */
 8009012:	f896 e004 	ldrb.w	lr, [r6, #4]

      t &= ~(m << f->offset);
      t |= (val & m) << f->offset;
      DecodeWriteRegister(p,r,t);
 8009016:	9903      	ldr	r1, [sp, #12]
      m = (1<<f->width)-1;
 8009018:	2301      	movs	r3, #1
 800901a:	4093      	lsls	r3, r2
      oval = (t >> f->offset) & m; /* Save old value */
 800901c:	fa20 f70e 	lsr.w	r7, r0, lr
      m = (1<<f->width)-1;
 8009020:	3b01      	subs	r3, #1
      t &= ~(m << f->offset);
 8009022:	fa03 f20e 	lsl.w	r2, r3, lr
      oval = (t >> f->offset) & m; /* Save old value */
 8009026:	401f      	ands	r7, r3
      DecodeWriteRegister(p,r,t);
 8009028:	400b      	ands	r3, r1
 800902a:	fa03 f30e 	lsl.w	r3, r3, lr
      t &= ~(m << f->offset);
 800902e:	ea20 0202 	bic.w	r2, r0, r2
      DecodeWriteRegister(p,r,t);
 8009032:	431a      	orrs	r2, r3
 8009034:	4629      	mov	r1, r5
 8009036:	4620      	mov	r0, r4
 8009038:	f7ff fe46 	bl	8008cc8 <DecodeWriteRegister>
      printf("%s.",
 800903c:	6820      	ldr	r0, [r4, #0]
 800903e:	f7ff fddb 	bl	8008bf8 <Uncompress>
 8009042:	4601      	mov	r1, r0
 8009044:	4834      	ldr	r0, [pc, #208]	; (8009118 <CmdDecode+0x25c>)
 8009046:	f7f7 fe1f 	bl	8000c88 <printf>
	     Uncompress(p->name));
      printf("%s.",
 800904a:	6828      	ldr	r0, [r5, #0]
 800904c:	f7ff fdd4 	bl	8008bf8 <Uncompress>
 8009050:	4601      	mov	r1, r0
 8009052:	4831      	ldr	r0, [pc, #196]	; (8009118 <CmdDecode+0x25c>)
 8009054:	f7f7 fe18 	bl	8000c88 <printf>
	     Uncompress(r->name));
      printf("%s (%d) -> (%d)\n",
 8009058:	6830      	ldr	r0, [r6, #0]
 800905a:	f7ff fdcd 	bl	8008bf8 <Uncompress>
 800905e:	9b03      	ldr	r3, [sp, #12]
 8009060:	4601      	mov	r1, r0
 8009062:	463a      	mov	r2, r7
 8009064:	482d      	ldr	r0, [pc, #180]	; (800911c <CmdDecode+0x260>)
 8009066:	f7f7 fe0f 	bl	8000c88 <printf>
	     Uncompress(f->name),
	     (unsigned)oval, (unsigned)val);
      return;
 800906a:	e03b      	b.n	80090e4 <CmdDecode+0x228>

    }
    
    /* No matching register name, check if this is an integer */
    errno = 0;
 800906c:	f7f7 fd6c 	bl	8000b48 <__errno>
    val = strtoul(fname,NULL,0);
 8009070:	463a      	mov	r2, r7
    errno = 0;
 8009072:	6007      	str	r7, [r0, #0]
    val = strtoul(fname,NULL,0);
 8009074:	4639      	mov	r1, r7
 8009076:	9802      	ldr	r0, [sp, #8]
 8009078:	f7f8 f988 	bl	800138c <strtoul>
 800907c:	9003      	str	r0, [sp, #12]
    if(errno != 0) {
 800907e:	f7f7 fd63 	bl	8000b48 <__errno>
 8009082:	6803      	ldr	r3, [r0, #0]
 8009084:	b123      	cbz	r3, 8009090 <CmdDecode+0x1d4>
      /* Unable to do conversion */
      printf("Invalid number '%s' entered.\n",
 8009086:	9902      	ldr	r1, [sp, #8]
 8009088:	4825      	ldr	r0, [pc, #148]	; (8009120 <CmdDecode+0x264>)
 800908a:	f7f7 fdfd 	bl	8000c88 <printf>
	     fname);
      return;
 800908e:	e029      	b.n	80090e4 <CmdDecode+0x228>
    }
    /* Write to register */
    DecodeWriteRegister(p,r,val);
 8009090:	9a03      	ldr	r2, [sp, #12]
 8009092:	4629      	mov	r1, r5
 8009094:	4620      	mov	r0, r4
 8009096:	f7ff fe17 	bl	8008cc8 <DecodeWriteRegister>
    printf("%s.",
 800909a:	6820      	ldr	r0, [r4, #0]
 800909c:	f7ff fdac 	bl	8008bf8 <Uncompress>
 80090a0:	4601      	mov	r1, r0
 80090a2:	481d      	ldr	r0, [pc, #116]	; (8009118 <CmdDecode+0x25c>)
 80090a4:	f7f7 fdf0 	bl	8000c88 <printf>
	   Uncompress(p->name));
    printf("%s = 0x%08x\n",
 80090a8:	6828      	ldr	r0, [r5, #0]
 80090aa:	f7ff fda5 	bl	8008bf8 <Uncompress>
 80090ae:	9a03      	ldr	r2, [sp, #12]
 80090b0:	4601      	mov	r1, r0
 80090b2:	481c      	ldr	r0, [pc, #112]	; (8009124 <CmdDecode+0x268>)
 80090b4:	f7f7 fde8 	bl	8000c88 <printf>
	   Uncompress(r->name),
	   (unsigned)val);
    return;
 80090b8:	e014      	b.n	80090e4 <CmdDecode+0x228>

  }
  /* Read and dump the register, decode all fields */
  val = DecodeReadRegister(p,r);
 80090ba:	4629      	mov	r1, r5
 80090bc:	4620      	mov	r0, r4
 80090be:	f7ff fdd7 	bl	8008c70 <DecodeReadRegister>
  DecodeRegister(r,p->base, val,1);
 80090c2:	2301      	movs	r3, #1
  val = DecodeReadRegister(p,r);
 80090c4:	4602      	mov	r2, r0
 80090c6:	9003      	str	r0, [sp, #12]
  DecodeRegister(r,p->base, val,1);
 80090c8:	6861      	ldr	r1, [r4, #4]
 80090ca:	4628      	mov	r0, r5
 80090cc:	f7ff fe4e 	bl	8008d6c <DecodeRegister>

  return;
 80090d0:	e008      	b.n	80090e4 <CmdDecode+0x228>
    printf("'%s' is not a valid register name, valid names for %s are:\n\n",
 80090d2:	6820      	ldr	r0, [r4, #0]
 80090d4:	f7ff fd90 	bl	8008bf8 <Uncompress>
 80090d8:	4631      	mov	r1, r6
 80090da:	4602      	mov	r2, r0
 80090dc:	4812      	ldr	r0, [pc, #72]	; (8009128 <CmdDecode+0x26c>)
 80090de:	f7f7 fdd3 	bl	8000c88 <printf>
 80090e2:	e719      	b.n	8008f18 <CmdDecode+0x5c>
}
 80090e4:	b005      	add	sp, #20
 80090e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090e8:	080174a0 	.word	0x080174a0
 80090ec:	0800d90b 	.word	0x0800d90b
 80090f0:	0800db1e 	.word	0x0800db1e
 80090f4:	0800db73 	.word	0x0800db73
 80090f8:	0800dbae 	.word	0x0800dbae
 80090fc:	0800dc3c 	.word	0x0800dc3c
 8009100:	0800dbd3 	.word	0x0800dbd3
 8009104:	0800dc02 	.word	0x0800dc02
 8009108:	0800dd09 	.word	0x0800dd09
 800910c:	0800dc7b 	.word	0x0800dc7b
 8009110:	0800dc7f 	.word	0x0800dc7f
 8009114:	0800dc9e 	.word	0x0800dc9e
 8009118:	0800dcc9 	.word	0x0800dcc9
 800911c:	0800dccd 	.word	0x0800dccd
 8009120:	0800dcde 	.word	0x0800dcde
 8009124:	0800dcfc 	.word	0x0800dcfc
 8009128:	0800dc3e 	.word	0x0800dc3e

0800912c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800912c:	4915      	ldr	r1, [pc, #84]	; (8009184 <SystemInit+0x58>)
 800912e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8009132:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009136:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800913a:	4b13      	ldr	r3, [pc, #76]	; (8009188 <SystemInit+0x5c>)
 800913c:	681a      	ldr	r2, [r3, #0]
 800913e:	f042 0201 	orr.w	r2, r2, #1
 8009142:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 8009144:	6858      	ldr	r0, [r3, #4]
 8009146:	4a11      	ldr	r2, [pc, #68]	; (800918c <SystemInit+0x60>)
 8009148:	4002      	ands	r2, r0
 800914a:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800914c:	681a      	ldr	r2, [r3, #0]
 800914e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8009152:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009156:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8009158:	681a      	ldr	r2, [r3, #0]
 800915a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800915e:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8009160:	685a      	ldr	r2, [r3, #4]
 8009162:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8009166:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8009168:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800916a:	f022 020f 	bic.w	r2, r2, #15
 800916e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 8009170:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009172:	4a07      	ldr	r2, [pc, #28]	; (8009190 <SystemInit+0x64>)
 8009174:	4002      	ands	r2, r0
 8009176:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8009178:	2200      	movs	r2, #0
 800917a:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800917c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009180:	608b      	str	r3, [r1, #8]
 8009182:	4770      	bx	lr
 8009184:	e000ed00 	.word	0xe000ed00
 8009188:	40021000 	.word	0x40021000
 800918c:	f87fc00c 	.word	0xf87fc00c
 8009190:	ff00fccc 	.word	0xff00fccc

08009194 <HAL_RCC_OscConfig>:

  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009194:	6803      	ldr	r3, [r0, #0]
 8009196:	07db      	lsls	r3, r3, #31
{
 8009198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800919c:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800919e:	d404      	bmi.n	80091aa <HAL_RCC_OscConfig+0x16>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80091a0:	6823      	ldr	r3, [r4, #0]
 80091a2:	079f      	lsls	r7, r3, #30
 80091a4:	f100 80c5 	bmi.w	8009332 <HAL_RCC_OscConfig+0x19e>
 80091a8:	e155      	b.n	8009456 <HAL_RCC_OscConfig+0x2c2>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80091aa:	4dc1      	ldr	r5, [pc, #772]	; (80094b0 <HAL_RCC_OscConfig+0x31c>)
 80091ac:	686b      	ldr	r3, [r5, #4]
 80091ae:	f003 030c 	and.w	r3, r3, #12
 80091b2:	2b04      	cmp	r3, #4
 80091b4:	d007      	beq.n	80091c6 <HAL_RCC_OscConfig+0x32>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80091b6:	686b      	ldr	r3, [r5, #4]
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80091b8:	f003 030c 	and.w	r3, r3, #12
 80091bc:	2b08      	cmp	r3, #8
 80091be:	d128      	bne.n	8009212 <HAL_RCC_OscConfig+0x7e>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80091c0:	686b      	ldr	r3, [r5, #4]
 80091c2:	03de      	lsls	r6, r3, #15
 80091c4:	d525      	bpl.n	8009212 <HAL_RCC_OscConfig+0x7e>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80091c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80091ca:	fa92 f3a2 	rbit	r3, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80091ce:	fab3 f383 	clz	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_ON))
 80091d2:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80091d6:	f043 0301 	orr.w	r3, r3, #1
 80091da:	2b01      	cmp	r3, #1
 80091dc:	d101      	bne.n	80091e2 <HAL_RCC_OscConfig+0x4e>
 80091de:	6829      	ldr	r1, [r5, #0]
 80091e0:	e004      	b.n	80091ec <HAL_RCC_OscConfig+0x58>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80091e2:	fa92 f2a2 	rbit	r2, r2
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80091e6:	fab2 f282 	clz	r2, r2
 80091ea:	6a69      	ldr	r1, [r5, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80091ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80091f0:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80091f4:	fab3 f383 	clz	r3, r3
 80091f8:	2201      	movs	r2, #1
 80091fa:	f003 031f 	and.w	r3, r3, #31
 80091fe:	fa02 f303 	lsl.w	r3, r2, r3
 8009202:	420b      	tst	r3, r1
 8009204:	d0cc      	beq.n	80091a0 <HAL_RCC_OscConfig+0xc>
 8009206:	6863      	ldr	r3, [r4, #4]
 8009208:	4293      	cmp	r3, r2
 800920a:	d0c9      	beq.n	80091a0 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800920c:	2001      	movs	r0, #1
 800920e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 8009212:	4ea8      	ldr	r6, [pc, #672]	; (80094b4 <HAL_RCC_OscConfig+0x320>)
 8009214:	2300      	movs	r3, #0
 8009216:	7033      	strb	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8009218:	f000 fc8a 	bl	8009b30 <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800921c:	f44f 3700 	mov.w	r7, #131072	; 0x20000
 8009220:	4681      	mov	r9, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009222:	f04f 0801 	mov.w	r8, #1
        if((HAL_GetTick()-tickstart) > HSE_TIMEOUT_VALUE)
 8009226:	f241 3a88 	movw	sl, #5000	; 0x1388
 800922a:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800922e:	fab3 f383 	clz	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009232:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8009236:	f043 0301 	orr.w	r3, r3, #1
 800923a:	2b01      	cmp	r3, #1
 800923c:	d101      	bne.n	8009242 <HAL_RCC_OscConfig+0xae>
 800923e:	682a      	ldr	r2, [r5, #0]
 8009240:	e004      	b.n	800924c <HAL_RCC_OscConfig+0xb8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009242:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8009246:	fab3 f383 	clz	r3, r3
 800924a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800924c:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8009250:	fab3 f383 	clz	r3, r3
 8009254:	f003 031f 	and.w	r3, r3, #31
 8009258:	fa08 f303 	lsl.w	r3, r8, r3
 800925c:	4213      	tst	r3, r2
 800925e:	d008      	beq.n	8009272 <HAL_RCC_OscConfig+0xde>
        if((HAL_GetTick()-tickstart) > HSE_TIMEOUT_VALUE)
 8009260:	f000 fc66 	bl	8009b30 <HAL_GetTick>
 8009264:	ebc9 0000 	rsb	r0, r9, r0
 8009268:	4550      	cmp	r0, sl
 800926a:	d9de      	bls.n	800922a <HAL_RCC_OscConfig+0x96>
          return HAL_TIMEOUT;
 800926c:	2003      	movs	r0, #3
 800926e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009272:	7923      	ldrb	r3, [r4, #4]
 8009274:	7033      	strb	r3, [r6, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8009276:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8009278:	f023 020f 	bic.w	r2, r3, #15
 800927c:	68a3      	ldr	r3, [r4, #8]
 800927e:	4313      	orrs	r3, r2
 8009280:	62eb      	str	r3, [r5, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState == RCC_HSE_ON)
 8009282:	6866      	ldr	r6, [r4, #4]
 8009284:	2e01      	cmp	r6, #1
 8009286:	d129      	bne.n	80092dc <HAL_RCC_OscConfig+0x148>
        tickstart = HAL_GetTick();
 8009288:	f000 fc52 	bl	8009b30 <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800928c:	f44f 3700 	mov.w	r7, #131072	; 0x20000
 8009290:	4680      	mov	r8, r0
          if((HAL_GetTick()-tickstart) > HSE_TIMEOUT_VALUE)
 8009292:	f241 3988 	movw	r9, #5000	; 0x1388
 8009296:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800929a:	fab3 f383 	clz	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800929e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80092a2:	f043 0301 	orr.w	r3, r3, #1
 80092a6:	2b01      	cmp	r3, #1
 80092a8:	d101      	bne.n	80092ae <HAL_RCC_OscConfig+0x11a>
 80092aa:	682a      	ldr	r2, [r5, #0]
 80092ac:	e004      	b.n	80092b8 <HAL_RCC_OscConfig+0x124>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80092ae:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80092b2:	fab3 f383 	clz	r3, r3
 80092b6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80092b8:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80092bc:	fab3 f383 	clz	r3, r3
 80092c0:	f003 031f 	and.w	r3, r3, #31
 80092c4:	fa06 f303 	lsl.w	r3, r6, r3
 80092c8:	4213      	tst	r3, r2
 80092ca:	f47f af69 	bne.w	80091a0 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick()-tickstart) > HSE_TIMEOUT_VALUE)
 80092ce:	f000 fc2f 	bl	8009b30 <HAL_GetTick>
 80092d2:	ebc8 0000 	rsb	r0, r8, r0
 80092d6:	4548      	cmp	r0, r9
 80092d8:	d9dd      	bls.n	8009296 <HAL_RCC_OscConfig+0x102>
 80092da:	e7c7      	b.n	800926c <HAL_RCC_OscConfig+0xd8>
        tickstart = HAL_GetTick();
 80092dc:	f000 fc28 	bl	8009b30 <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80092e0:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 80092e4:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80092e6:	2701      	movs	r7, #1
          if((HAL_GetTick()-tickstart) > HSE_TIMEOUT_VALUE)
 80092e8:	f241 3988 	movw	r9, #5000	; 0x1388
 80092ec:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80092f0:	fab3 f383 	clz	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80092f4:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80092f8:	f043 0301 	orr.w	r3, r3, #1
 80092fc:	2b01      	cmp	r3, #1
 80092fe:	d101      	bne.n	8009304 <HAL_RCC_OscConfig+0x170>
 8009300:	682a      	ldr	r2, [r5, #0]
 8009302:	e004      	b.n	800930e <HAL_RCC_OscConfig+0x17a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009304:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8009308:	fab3 f383 	clz	r3, r3
 800930c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800930e:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8009312:	fab3 f383 	clz	r3, r3
 8009316:	f003 031f 	and.w	r3, r3, #31
 800931a:	fa07 f303 	lsl.w	r3, r7, r3
 800931e:	4213      	tst	r3, r2
 8009320:	f43f af3e 	beq.w	80091a0 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick()-tickstart) > HSE_TIMEOUT_VALUE)
 8009324:	f000 fc04 	bl	8009b30 <HAL_GetTick>
 8009328:	ebc8 0000 	rsb	r0, r8, r0
 800932c:	4548      	cmp	r0, r9
 800932e:	d9dd      	bls.n	80092ec <HAL_RCC_OscConfig+0x158>
 8009330:	e79c      	b.n	800926c <HAL_RCC_OscConfig+0xd8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */    
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8009332:	4d5f      	ldr	r5, [pc, #380]	; (80094b0 <HAL_RCC_OscConfig+0x31c>)
 8009334:	686b      	ldr	r3, [r5, #4]
 8009336:	f013 0f0c 	tst.w	r3, #12
 800933a:	d007      	beq.n	800934c <HAL_RCC_OscConfig+0x1b8>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800933c:	686b      	ldr	r3, [r5, #4]
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800933e:	f003 030c 	and.w	r3, r3, #12
 8009342:	2b08      	cmp	r3, #8
 8009344:	d125      	bne.n	8009392 <HAL_RCC_OscConfig+0x1fe>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8009346:	686b      	ldr	r3, [r5, #4]
 8009348:	03d8      	lsls	r0, r3, #15
 800934a:	d422      	bmi.n	8009392 <HAL_RCC_OscConfig+0x1fe>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800934c:	2202      	movs	r2, #2
 800934e:	fa92 f3a2 	rbit	r3, r2
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8009352:	fab3 f383 	clz	r3, r3
    {
      /* When the HSI is used as system clock it is not allowed to be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009356:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800935a:	f043 0301 	orr.w	r3, r3, #1
 800935e:	2b01      	cmp	r3, #1
 8009360:	d101      	bne.n	8009366 <HAL_RCC_OscConfig+0x1d2>
 8009362:	6829      	ldr	r1, [r5, #0]
 8009364:	e004      	b.n	8009370 <HAL_RCC_OscConfig+0x1dc>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009366:	fa92 f2a2 	rbit	r2, r2
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800936a:	fab2 f282 	clz	r2, r2
 800936e:	6a69      	ldr	r1, [r5, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009370:	2302      	movs	r3, #2
 8009372:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8009376:	fab3 f383 	clz	r3, r3
 800937a:	2201      	movs	r2, #1
 800937c:	f003 031f 	and.w	r3, r3, #31
 8009380:	fa02 f303 	lsl.w	r3, r2, r3
 8009384:	420b      	tst	r3, r1
 8009386:	d02f      	beq.n	80093e8 <HAL_RCC_OscConfig+0x254>
 8009388:	6923      	ldr	r3, [r4, #16]
 800938a:	4293      	cmp	r3, r2
 800938c:	f47f af3e 	bne.w	800920c <HAL_RCC_OscConfig+0x78>
 8009390:	e02a      	b.n	80093e8 <HAL_RCC_OscConfig+0x254>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009392:	6922      	ldr	r2, [r4, #16]
 8009394:	4b48      	ldr	r3, [pc, #288]	; (80094b8 <HAL_RCC_OscConfig+0x324>)
 8009396:	b3b2      	cbz	r2, 8009406 <HAL_RCC_OscConfig+0x272>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009398:	2601      	movs	r6, #1
 800939a:	601e      	str	r6, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800939c:	f000 fbc8 	bl	8009b30 <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80093a0:	2702      	movs	r7, #2
 80093a2:	4680      	mov	r8, r0
 80093a4:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80093a8:	fab3 f383 	clz	r3, r3

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80093ac:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80093b0:	f043 0301 	orr.w	r3, r3, #1
 80093b4:	2b01      	cmp	r3, #1
 80093b6:	d101      	bne.n	80093bc <HAL_RCC_OscConfig+0x228>
 80093b8:	682a      	ldr	r2, [r5, #0]
 80093ba:	e004      	b.n	80093c6 <HAL_RCC_OscConfig+0x232>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80093bc:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80093c0:	fab3 f383 	clz	r3, r3
 80093c4:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80093c6:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80093ca:	fab3 f383 	clz	r3, r3
 80093ce:	f003 031f 	and.w	r3, r3, #31
 80093d2:	fa06 f303 	lsl.w	r3, r6, r3
 80093d6:	4213      	tst	r3, r2
 80093d8:	d106      	bne.n	80093e8 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick()-tickstart) > HSI_TIMEOUT_VALUE)
 80093da:	f000 fba9 	bl	8009b30 <HAL_GetTick>
 80093de:	ebc8 0000 	rsb	r0, r8, r0
 80093e2:	2864      	cmp	r0, #100	; 0x64
 80093e4:	d9de      	bls.n	80093a4 <HAL_RCC_OscConfig+0x210>
 80093e6:	e741      	b.n	800926c <HAL_RCC_OscConfig+0xd8>
            return HAL_TIMEOUT;
          }      
        } 

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80093e8:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80093ea:	23f8      	movs	r3, #248	; 0xf8
 80093ec:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80093f0:	fab3 f383 	clz	r3, r3
 80093f4:	6961      	ldr	r1, [r4, #20]
 80093f6:	b2db      	uxtb	r3, r3
 80093f8:	fa01 f303 	lsl.w	r3, r1, r3
 80093fc:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8009400:	4313      	orrs	r3, r2
 8009402:	602b      	str	r3, [r5, #0]
 8009404:	e027      	b.n	8009456 <HAL_RCC_OscConfig+0x2c2>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009406:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8009408:	f000 fb92 	bl	8009b30 <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800940c:	2602      	movs	r6, #2
 800940e:	4680      	mov	r8, r0
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009410:	2701      	movs	r7, #1
 8009412:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8009416:	fab3 f383 	clz	r3, r3
 800941a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800941e:	f043 0301 	orr.w	r3, r3, #1
 8009422:	2b01      	cmp	r3, #1
 8009424:	d101      	bne.n	800942a <HAL_RCC_OscConfig+0x296>
 8009426:	682a      	ldr	r2, [r5, #0]
 8009428:	e004      	b.n	8009434 <HAL_RCC_OscConfig+0x2a0>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800942a:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800942e:	fab3 f383 	clz	r3, r3
 8009432:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009434:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8009438:	fab3 f383 	clz	r3, r3
 800943c:	f003 031f 	and.w	r3, r3, #31
 8009440:	fa07 f303 	lsl.w	r3, r7, r3
 8009444:	4213      	tst	r3, r2
 8009446:	d006      	beq.n	8009456 <HAL_RCC_OscConfig+0x2c2>
        {
          if((HAL_GetTick()-tickstart) > HSI_TIMEOUT_VALUE)
 8009448:	f000 fb72 	bl	8009b30 <HAL_GetTick>
 800944c:	ebc8 0000 	rsb	r0, r8, r0
 8009450:	2864      	cmp	r0, #100	; 0x64
 8009452:	d9de      	bls.n	8009412 <HAL_RCC_OscConfig+0x27e>
 8009454:	e70a      	b.n	800926c <HAL_RCC_OscConfig+0xd8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009456:	6823      	ldr	r3, [r4, #0]
 8009458:	0719      	lsls	r1, r3, #28
 800945a:	d404      	bmi.n	8009466 <HAL_RCC_OscConfig+0x2d2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800945c:	6823      	ldr	r3, [r4, #0]
 800945e:	075a      	lsls	r2, r3, #29
 8009460:	f140 80a9 	bpl.w	80095b6 <HAL_RCC_OscConfig+0x422>
 8009464:	e04c      	b.n	8009500 <HAL_RCC_OscConfig+0x36c>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009466:	69a2      	ldr	r2, [r4, #24]
 8009468:	4d11      	ldr	r5, [pc, #68]	; (80094b0 <HAL_RCC_OscConfig+0x31c>)
 800946a:	4b14      	ldr	r3, [pc, #80]	; (80094bc <HAL_RCC_OscConfig+0x328>)
 800946c:	b342      	cbz	r2, 80094c0 <HAL_RCC_OscConfig+0x32c>
      __HAL_RCC_LSI_ENABLE();
 800946e:	2601      	movs	r6, #1
 8009470:	601e      	str	r6, [r3, #0]
      tickstart = HAL_GetTick();
 8009472:	f000 fb5d 	bl	8009b30 <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009476:	2702      	movs	r7, #2
 8009478:	4680      	mov	r8, r0
 800947a:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800947e:	fab3 f383 	clz	r3, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009482:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8009486:	fab3 f383 	clz	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800948a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800948c:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8009490:	fab3 f383 	clz	r3, r3
 8009494:	f003 031f 	and.w	r3, r3, #31
 8009498:	fa06 f303 	lsl.w	r3, r6, r3
 800949c:	4213      	tst	r3, r2
 800949e:	d1dd      	bne.n	800945c <HAL_RCC_OscConfig+0x2c8>
        if((HAL_GetTick()-tickstart) > LSI_TIMEOUT_VALUE)
 80094a0:	f000 fb46 	bl	8009b30 <HAL_GetTick>
 80094a4:	ebc8 0000 	rsb	r0, r8, r0
 80094a8:	2864      	cmp	r0, #100	; 0x64
 80094aa:	d9e6      	bls.n	800947a <HAL_RCC_OscConfig+0x2e6>
 80094ac:	e6de      	b.n	800926c <HAL_RCC_OscConfig+0xd8>
 80094ae:	bf00      	nop
 80094b0:	40021000 	.word	0x40021000
 80094b4:	40021002 	.word	0x40021002
 80094b8:	42420000 	.word	0x42420000
 80094bc:	42420480 	.word	0x42420480
      __HAL_RCC_LSI_DISABLE();
 80094c0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80094c2:	f000 fb35 	bl	8009b30 <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80094c6:	2602      	movs	r6, #2
 80094c8:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80094ca:	2701      	movs	r7, #1
 80094cc:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80094d0:	fab3 f383 	clz	r3, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80094d4:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80094d8:	fab3 f383 	clz	r3, r3
 80094dc:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80094de:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80094e2:	fab3 f383 	clz	r3, r3
 80094e6:	f003 031f 	and.w	r3, r3, #31
 80094ea:	fa07 f303 	lsl.w	r3, r7, r3
 80094ee:	4213      	tst	r3, r2
 80094f0:	d0b4      	beq.n	800945c <HAL_RCC_OscConfig+0x2c8>
        if((HAL_GetTick()-tickstart) > LSI_TIMEOUT_VALUE)
 80094f2:	f000 fb1d 	bl	8009b30 <HAL_GetTick>
 80094f6:	ebc8 0000 	rsb	r0, r8, r0
 80094fa:	2864      	cmp	r0, #100	; 0x64
 80094fc:	d9e6      	bls.n	80094cc <HAL_RCC_OscConfig+0x338>
 80094fe:	e6b5      	b.n	800926c <HAL_RCC_OscConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock */
    __PWR_CLK_ENABLE();
 8009500:	4d98      	ldr	r5, [pc, #608]	; (8009764 <HAL_RCC_OscConfig+0x5d0>)

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8009502:	4e99      	ldr	r6, [pc, #612]	; (8009768 <HAL_RCC_OscConfig+0x5d4>)
    __PWR_CLK_ENABLE();
 8009504:	69eb      	ldr	r3, [r5, #28]
 8009506:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800950a:	61eb      	str	r3, [r5, #28]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 800950c:	6833      	ldr	r3, [r6, #0]
 800950e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009512:	6033      	str	r3, [r6, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009514:	f000 fb0c 	bl	8009b30 <HAL_GetTick>
 8009518:	4607      	mov	r7, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800951a:	6833      	ldr	r3, [r6, #0]
 800951c:	05db      	lsls	r3, r3, #23
 800951e:	d54e      	bpl.n	80095be <HAL_RCC_OscConfig+0x42a>
        return HAL_TIMEOUT;
      }      
    }

    /* Reset LSEON and LSEBYP bits before configuring the LSE ----------------*/
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 8009520:	6a2b      	ldr	r3, [r5, #32]
 8009522:	f023 0305 	bic.w	r3, r3, #5
 8009526:	622b      	str	r3, [r5, #32]
    
    /* Get timeout */
    tickstart = HAL_GetTick();
 8009528:	f000 fb02 	bl	8009b30 <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800952c:	2602      	movs	r6, #2
 800952e:	4681      	mov	r9, r0
 8009530:	46b0      	mov	r8, r6
      
    /* Wait till LSE is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009532:	2701      	movs	r7, #1
 8009534:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8009538:	fab3 f383 	clz	r3, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800953c:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8009540:	fab3 f383 	clz	r3, r3
 8009544:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8009548:	f043 0302 	orr.w	r3, r3, #2
 800954c:	2b02      	cmp	r3, #2
 800954e:	bf0c      	ite	eq
 8009550:	6a2a      	ldreq	r2, [r5, #32]
 8009552:	6a6a      	ldrne	r2, [r5, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009554:	fa98 f3a8 	rbit	r3, r8
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8009558:	fab3 f383 	clz	r3, r3
 800955c:	f003 031f 	and.w	r3, r3, #31
 8009560:	fa07 f303 	lsl.w	r3, r7, r3
 8009564:	4213      	tst	r3, r2
 8009566:	d130      	bne.n	80095ca <HAL_RCC_OscConfig+0x436>
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009568:	6a2b      	ldr	r3, [r5, #32]
 800956a:	68e6      	ldr	r6, [r4, #12]
 800956c:	f023 0305 	bic.w	r3, r3, #5
 8009570:	4333      	orrs	r3, r6
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8009572:	2e01      	cmp	r6, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009574:	622b      	str	r3, [r5, #32]
    if(RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8009576:	d13a      	bne.n	80095ee <HAL_RCC_OscConfig+0x45a>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 8009578:	f000 fada 	bl	8009b30 <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800957c:	2702      	movs	r7, #2
 800957e:	4681      	mov	r9, r0
 8009580:	46b8      	mov	r8, r7
 8009582:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8009586:	fab3 f383 	clz	r3, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800958a:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800958e:	fab3 f383 	clz	r3, r3
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009592:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8009596:	f043 0302 	orr.w	r3, r3, #2
 800959a:	2b02      	cmp	r3, #2
 800959c:	bf0c      	ite	eq
 800959e:	6a2a      	ldreq	r2, [r5, #32]
 80095a0:	6a6a      	ldrne	r2, [r5, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80095a2:	fa98 f3a8 	rbit	r3, r8
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80095a6:	fab3 f383 	clz	r3, r3
 80095aa:	f003 031f 	and.w	r3, r3, #31
 80095ae:	fa06 f303 	lsl.w	r3, r6, r3
 80095b2:	4213      	tst	r3, r2
 80095b4:	d012      	beq.n	80095dc <HAL_RCC_OscConfig+0x448>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80095b6:	69e2      	ldr	r2, [r4, #28]
 80095b8:	2a00      	cmp	r2, #0
 80095ba:	d141      	bne.n	8009640 <HAL_RCC_OscConfig+0x4ac>
 80095bc:	e08f      	b.n	80096de <HAL_RCC_OscConfig+0x54a>
      if((HAL_GetTick()-tickstart) > DBP_TIMEOUT_VALUE)
 80095be:	f000 fab7 	bl	8009b30 <HAL_GetTick>
 80095c2:	1bc0      	subs	r0, r0, r7
 80095c4:	2864      	cmp	r0, #100	; 0x64
 80095c6:	d9a8      	bls.n	800951a <HAL_RCC_OscConfig+0x386>
 80095c8:	e650      	b.n	800926c <HAL_RCC_OscConfig+0xd8>
      if((HAL_GetTick()-tickstart) > LSE_TIMEOUT_VALUE)
 80095ca:	f000 fab1 	bl	8009b30 <HAL_GetTick>
 80095ce:	f241 3388 	movw	r3, #5000	; 0x1388
 80095d2:	ebc9 0000 	rsb	r0, r9, r0
 80095d6:	4298      	cmp	r0, r3
 80095d8:	d9ac      	bls.n	8009534 <HAL_RCC_OscConfig+0x3a0>
 80095da:	e647      	b.n	800926c <HAL_RCC_OscConfig+0xd8>
        if((HAL_GetTick()-tickstart) > LSE_TIMEOUT_VALUE)
 80095dc:	f000 faa8 	bl	8009b30 <HAL_GetTick>
 80095e0:	f241 3388 	movw	r3, #5000	; 0x1388
 80095e4:	ebc9 0000 	rsb	r0, r9, r0
 80095e8:	4298      	cmp	r0, r3
 80095ea:	d9ca      	bls.n	8009582 <HAL_RCC_OscConfig+0x3ee>
 80095ec:	e63e      	b.n	800926c <HAL_RCC_OscConfig+0xd8>
      tickstart = HAL_GetTick();
 80095ee:	f000 fa9f 	bl	8009b30 <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80095f2:	2602      	movs	r6, #2
 80095f4:	4681      	mov	r9, r0
 80095f6:	46b0      	mov	r8, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80095f8:	2701      	movs	r7, #1
 80095fa:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80095fe:	fab3 f383 	clz	r3, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009602:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8009606:	fab3 f383 	clz	r3, r3
 800960a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800960e:	f043 0302 	orr.w	r3, r3, #2
 8009612:	2b02      	cmp	r3, #2
 8009614:	bf0c      	ite	eq
 8009616:	6a2a      	ldreq	r2, [r5, #32]
 8009618:	6a6a      	ldrne	r2, [r5, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800961a:	fa98 f3a8 	rbit	r3, r8
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800961e:	fab3 f383 	clz	r3, r3
 8009622:	f003 031f 	and.w	r3, r3, #31
 8009626:	fa07 f303 	lsl.w	r3, r7, r3
 800962a:	4213      	tst	r3, r2
 800962c:	d0c3      	beq.n	80095b6 <HAL_RCC_OscConfig+0x422>
        if((HAL_GetTick()-tickstart) > LSE_TIMEOUT_VALUE)
 800962e:	f000 fa7f 	bl	8009b30 <HAL_GetTick>
 8009632:	f241 3388 	movw	r3, #5000	; 0x1388
 8009636:	ebc9 0000 	rsb	r0, r9, r0
 800963a:	4298      	cmp	r0, r3
 800963c:	d9dd      	bls.n	80095fa <HAL_RCC_OscConfig+0x466>
 800963e:	e615      	b.n	800926c <HAL_RCC_OscConfig+0xd8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009640:	4d48      	ldr	r5, [pc, #288]	; (8009764 <HAL_RCC_OscConfig+0x5d0>)
 8009642:	686b      	ldr	r3, [r5, #4]
 8009644:	f003 030c 	and.w	r3, r3, #12
 8009648:	2b08      	cmp	r3, #8
 800964a:	f43f addf 	beq.w	800920c <HAL_RCC_OscConfig+0x78>
 800964e:	4e47      	ldr	r6, [pc, #284]	; (800976c <HAL_RCC_OscConfig+0x5d8>)
 8009650:	2300      	movs	r3, #0
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009652:	2a02      	cmp	r2, #2
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009654:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009656:	d15e      	bne.n	8009716 <HAL_RCC_OscConfig+0x582>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8009658:	f000 fa6a 	bl	8009b30 <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800965c:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 8009660:	4681      	mov	r9, r0
      
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009662:	f04f 0801 	mov.w	r8, #1
 8009666:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800966a:	fab3 f383 	clz	r3, r3
 800966e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8009672:	f043 0301 	orr.w	r3, r3, #1
 8009676:	2b01      	cmp	r3, #1
 8009678:	d134      	bne.n	80096e4 <HAL_RCC_OscConfig+0x550>
 800967a:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800967c:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8009680:	fab3 f383 	clz	r3, r3
 8009684:	f003 031f 	and.w	r3, r3, #31
 8009688:	fa08 f303 	lsl.w	r3, r8, r3
 800968c:	4213      	tst	r3, r2
 800968e:	f04f 0a01 	mov.w	sl, #1
 8009692:	d12d      	bne.n	80096f0 <HAL_RCC_OscConfig+0x55c>
            return HAL_TIMEOUT;
          }
        }

        /* Configure the main PLL clock source and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009694:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009696:	6a22      	ldr	r2, [r4, #32]
 8009698:	686b      	ldr	r3, [r5, #4]
 800969a:	430a      	orrs	r2, r1
 800969c:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 80096a0:	4313      	orrs	r3, r2
 80096a2:	606b      	str	r3, [r5, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80096a4:	f8c6 a000 	str.w	sl, [r6]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80096a8:	f000 fa42 	bl	8009b30 <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80096ac:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 80096b0:	4607      	mov	r7, r0
      
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80096b2:	4654      	mov	r4, sl
 80096b4:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80096b8:	fab3 f383 	clz	r3, r3
 80096bc:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80096c0:	f043 0301 	orr.w	r3, r3, #1
 80096c4:	2b01      	cmp	r3, #1
 80096c6:	d11a      	bne.n	80096fe <HAL_RCC_OscConfig+0x56a>
 80096c8:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80096ca:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80096ce:	fab3 f383 	clz	r3, r3
 80096d2:	f003 031f 	and.w	r3, r3, #31
 80096d6:	fa04 f303 	lsl.w	r3, r4, r3
 80096da:	4213      	tst	r3, r2
 80096dc:	d015      	beq.n	800970a <HAL_RCC_OscConfig+0x576>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80096de:	2000      	movs	r0, #0
 80096e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80096e4:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80096e8:	fab3 f383 	clz	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80096ec:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80096ee:	e7c5      	b.n	800967c <HAL_RCC_OscConfig+0x4e8>
          if((HAL_GetTick()-tickstart) > PLL_TIMEOUT_VALUE)
 80096f0:	f000 fa1e 	bl	8009b30 <HAL_GetTick>
 80096f4:	ebc9 0000 	rsb	r0, r9, r0
 80096f8:	2864      	cmp	r0, #100	; 0x64
 80096fa:	d9b4      	bls.n	8009666 <HAL_RCC_OscConfig+0x4d2>
 80096fc:	e5b6      	b.n	800926c <HAL_RCC_OscConfig+0xd8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80096fe:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8009702:	fab3 f383 	clz	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009706:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8009708:	e7df      	b.n	80096ca <HAL_RCC_OscConfig+0x536>
          if((HAL_GetTick()-tickstart) > PLL_TIMEOUT_VALUE)
 800970a:	f000 fa11 	bl	8009b30 <HAL_GetTick>
 800970e:	1bc0      	subs	r0, r0, r7
 8009710:	2864      	cmp	r0, #100	; 0x64
 8009712:	d9cf      	bls.n	80096b4 <HAL_RCC_OscConfig+0x520>
 8009714:	e5aa      	b.n	800926c <HAL_RCC_OscConfig+0xd8>
        tickstart = HAL_GetTick();
 8009716:	f000 fa0b 	bl	8009b30 <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800971a:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 800971e:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009720:	2601      	movs	r6, #1
 8009722:	fa94 f3a4 	rbit	r3, r4
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8009726:	fab3 f383 	clz	r3, r3
 800972a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800972e:	f043 0301 	orr.w	r3, r3, #1
 8009732:	2b01      	cmp	r3, #1
 8009734:	d101      	bne.n	800973a <HAL_RCC_OscConfig+0x5a6>
 8009736:	682a      	ldr	r2, [r5, #0]
 8009738:	e004      	b.n	8009744 <HAL_RCC_OscConfig+0x5b0>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800973a:	fa94 f3a4 	rbit	r3, r4
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800973e:	fab3 f383 	clz	r3, r3
 8009742:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009744:	fa94 f3a4 	rbit	r3, r4
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8009748:	fab3 f383 	clz	r3, r3
 800974c:	f003 031f 	and.w	r3, r3, #31
 8009750:	fa06 f303 	lsl.w	r3, r6, r3
 8009754:	4213      	tst	r3, r2
 8009756:	d0c2      	beq.n	80096de <HAL_RCC_OscConfig+0x54a>
          if((HAL_GetTick()-tickstart) > PLL_TIMEOUT_VALUE)
 8009758:	f000 f9ea 	bl	8009b30 <HAL_GetTick>
 800975c:	1bc0      	subs	r0, r0, r7
 800975e:	2864      	cmp	r0, #100	; 0x64
 8009760:	d9df      	bls.n	8009722 <HAL_RCC_OscConfig+0x58e>
 8009762:	e583      	b.n	800926c <HAL_RCC_OscConfig+0xd8>
 8009764:	40021000 	.word	0x40021000
 8009768:	40007000 	.word	0x40007000
 800976c:	42420060 	.word	0x42420060

08009770 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8009770:	4aad      	ldr	r2, [pc, #692]	; (8009a28 <HAL_RCC_ClockConfig+0x2b8>)
 8009772:	6813      	ldr	r3, [r2, #0]
 8009774:	f003 0307 	and.w	r3, r3, #7
 8009778:	428b      	cmp	r3, r1
{
 800977a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800977e:	4604      	mov	r4, r0
 8009780:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8009782:	f080 80a6 	bcs.w	80098d2 <HAL_RCC_ClockConfig+0x162>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009786:	6813      	ldr	r3, [r2, #0]
 8009788:	f023 0307 	bic.w	r3, r3, #7
 800978c:	430b      	orrs	r3, r1
 800978e:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8009790:	6813      	ldr	r3, [r2, #0]
 8009792:	f003 0307 	and.w	r3, r3, #7
 8009796:	4299      	cmp	r1, r3
 8009798:	d002      	beq.n	80097a0 <HAL_RCC_ClockConfig+0x30>
    {
      return HAL_ERROR;
 800979a:	2001      	movs	r0, #1
 800979c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }

    /*-------------------------- HCLK Configuration ----------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80097a0:	6801      	ldr	r1, [r0, #0]
 80097a2:	078f      	lsls	r7, r1, #30
 80097a4:	d506      	bpl.n	80097b4 <HAL_RCC_ClockConfig+0x44>
    {
      assert_param(IS_RCC_SYSCLK_DIV(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80097a6:	48a1      	ldr	r0, [pc, #644]	; (8009a2c <HAL_RCC_ClockConfig+0x2bc>)
 80097a8:	6843      	ldr	r3, [r0, #4]
 80097aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80097ae:	68a3      	ldr	r3, [r4, #8]
 80097b0:	4313      	orrs	r3, r2
 80097b2:	6043      	str	r3, [r0, #4]
    }

    /*------------------------- SYSCLK Configuration ---------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80097b4:	07ce      	lsls	r6, r1, #31
 80097b6:	d40b      	bmi.n	80097d0 <HAL_RCC_ClockConfig+0x60>
      return HAL_ERROR;
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80097b8:	6821      	ldr	r1, [r4, #0]
 80097ba:	074d      	lsls	r5, r1, #29
 80097bc:	f140 8123 	bpl.w	8009a06 <HAL_RCC_ClockConfig+0x296>
  {
    assert_param(IS_RCC_HCLK_DIV(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80097c0:	489a      	ldr	r0, [pc, #616]	; (8009a2c <HAL_RCC_ClockConfig+0x2bc>)
 80097c2:	6843      	ldr	r3, [r0, #4]
 80097c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80097c8:	68e3      	ldr	r3, [r4, #12]
 80097ca:	4313      	orrs	r3, r2
 80097cc:	6043      	str	r3, [r0, #4]
 80097ce:	e11a      	b.n	8009a06 <HAL_RCC_ClockConfig+0x296>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80097d0:	6862      	ldr	r2, [r4, #4]
 80097d2:	4d96      	ldr	r5, [pc, #600]	; (8009a2c <HAL_RCC_ClockConfig+0x2bc>)
 80097d4:	2a01      	cmp	r2, #1
 80097d6:	d115      	bne.n	8009804 <HAL_RCC_ClockConfig+0x94>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80097d8:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80097dc:	fa91 f3a1 	rbit	r3, r1
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80097e0:	fab3 f383 	clz	r3, r3
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80097e4:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80097e8:	f043 0301 	orr.w	r3, r3, #1
 80097ec:	2b01      	cmp	r3, #1
 80097ee:	d101      	bne.n	80097f4 <HAL_RCC_ClockConfig+0x84>
 80097f0:	6828      	ldr	r0, [r5, #0]
 80097f2:	e004      	b.n	80097fe <HAL_RCC_ClockConfig+0x8e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80097f4:	fa91 f1a1 	rbit	r1, r1
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80097f8:	fab1 f181 	clz	r1, r1
 80097fc:	6a68      	ldr	r0, [r5, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80097fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009802:	e02a      	b.n	800985a <HAL_RCC_ClockConfig+0xea>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009804:	2a02      	cmp	r2, #2
 8009806:	d115      	bne.n	8009834 <HAL_RCC_ClockConfig+0xc4>
 8009808:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800980c:	fa91 f3a1 	rbit	r3, r1
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8009810:	fab3 f383 	clz	r3, r3
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009814:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8009818:	f043 0301 	orr.w	r3, r3, #1
 800981c:	2b01      	cmp	r3, #1
 800981e:	d101      	bne.n	8009824 <HAL_RCC_ClockConfig+0xb4>
 8009820:	6828      	ldr	r0, [r5, #0]
 8009822:	e004      	b.n	800982e <HAL_RCC_ClockConfig+0xbe>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009824:	fa91 f1a1 	rbit	r1, r1
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8009828:	fab1 f181 	clz	r1, r1
 800982c:	6a68      	ldr	r0, [r5, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800982e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009832:	e012      	b.n	800985a <HAL_RCC_ClockConfig+0xea>
 8009834:	2102      	movs	r1, #2
 8009836:	fa91 f3a1 	rbit	r3, r1
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800983a:	fab3 f383 	clz	r3, r3
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800983e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8009842:	f043 0301 	orr.w	r3, r3, #1
 8009846:	2b01      	cmp	r3, #1
 8009848:	d101      	bne.n	800984e <HAL_RCC_ClockConfig+0xde>
 800984a:	6828      	ldr	r0, [r5, #0]
 800984c:	e004      	b.n	8009858 <HAL_RCC_ClockConfig+0xe8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800984e:	fa91 f1a1 	rbit	r1, r1
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8009852:	fab1 f181 	clz	r1, r1
 8009856:	6a68      	ldr	r0, [r5, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009858:	2302      	movs	r3, #2
 800985a:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800985e:	fab3 f383 	clz	r3, r3
 8009862:	2101      	movs	r1, #1
 8009864:	f003 031f 	and.w	r3, r3, #31
 8009868:	fa01 f303 	lsl.w	r3, r1, r3
 800986c:	4203      	tst	r3, r0
 800986e:	d094      	beq.n	800979a <HAL_RCC_ClockConfig+0x2a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009870:	686b      	ldr	r3, [r5, #4]
 8009872:	f023 0303 	bic.w	r3, r3, #3
 8009876:	431a      	orrs	r2, r3
 8009878:	606a      	str	r2, [r5, #4]
      tickstart = HAL_GetTick();
 800987a:	f000 f959 	bl	8009b30 <HAL_GetTick>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800987e:	6863      	ldr	r3, [r4, #4]
 8009880:	2b01      	cmp	r3, #1
      tickstart = HAL_GetTick();
 8009882:	4606      	mov	r6, r0
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009884:	f241 3788 	movw	r7, #5000	; 0x1388
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009888:	d10c      	bne.n	80098a4 <HAL_RCC_ClockConfig+0x134>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800988a:	686b      	ldr	r3, [r5, #4]
 800988c:	f003 030c 	and.w	r3, r3, #12
 8009890:	2b04      	cmp	r3, #4
 8009892:	d091      	beq.n	80097b8 <HAL_RCC_ClockConfig+0x48>
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009894:	f000 f94c 	bl	8009b30 <HAL_GetTick>
 8009898:	1b80      	subs	r0, r0, r6
 800989a:	42b8      	cmp	r0, r7
 800989c:	d9f5      	bls.n	800988a <HAL_RCC_ClockConfig+0x11a>
            return HAL_TIMEOUT;
 800989e:	2003      	movs	r0, #3
 80098a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80098a4:	2b02      	cmp	r3, #2
 80098a6:	d10f      	bne.n	80098c8 <HAL_RCC_ClockConfig+0x158>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80098a8:	686b      	ldr	r3, [r5, #4]
 80098aa:	f003 030c 	and.w	r3, r3, #12
 80098ae:	2b08      	cmp	r3, #8
 80098b0:	d082      	beq.n	80097b8 <HAL_RCC_ClockConfig+0x48>
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80098b2:	f000 f93d 	bl	8009b30 <HAL_GetTick>
 80098b6:	1b80      	subs	r0, r0, r6
 80098b8:	42b8      	cmp	r0, r7
 80098ba:	d9f5      	bls.n	80098a8 <HAL_RCC_ClockConfig+0x138>
 80098bc:	e7ef      	b.n	800989e <HAL_RCC_ClockConfig+0x12e>
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80098be:	f000 f937 	bl	8009b30 <HAL_GetTick>
 80098c2:	1b80      	subs	r0, r0, r6
 80098c4:	42b8      	cmp	r0, r7
 80098c6:	d8ea      	bhi.n	800989e <HAL_RCC_ClockConfig+0x12e>
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80098c8:	686b      	ldr	r3, [r5, #4]
 80098ca:	f013 0f0c 	tst.w	r3, #12
 80098ce:	d1f6      	bne.n	80098be <HAL_RCC_ClockConfig+0x14e>
 80098d0:	e772      	b.n	80097b8 <HAL_RCC_ClockConfig+0x48>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80098d2:	6801      	ldr	r1, [r0, #0]
 80098d4:	0788      	lsls	r0, r1, #30
 80098d6:	d506      	bpl.n	80098e6 <HAL_RCC_ClockConfig+0x176>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80098d8:	4854      	ldr	r0, [pc, #336]	; (8009a2c <HAL_RCC_ClockConfig+0x2bc>)
 80098da:	6843      	ldr	r3, [r0, #4]
 80098dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80098e0:	68a3      	ldr	r3, [r4, #8]
 80098e2:	4313      	orrs	r3, r2
 80098e4:	6043      	str	r3, [r0, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80098e6:	07ca      	lsls	r2, r1, #31
 80098e8:	d40c      	bmi.n	8009904 <HAL_RCC_ClockConfig+0x194>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80098ea:	4a4f      	ldr	r2, [pc, #316]	; (8009a28 <HAL_RCC_ClockConfig+0x2b8>)
 80098ec:	6813      	ldr	r3, [r2, #0]
 80098ee:	f023 0307 	bic.w	r3, r3, #7
 80098f2:	4333      	orrs	r3, r6
 80098f4:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80098f6:	6813      	ldr	r3, [r2, #0]
 80098f8:	f003 0307 	and.w	r3, r3, #7
 80098fc:	429e      	cmp	r6, r3
 80098fe:	f47f af4c 	bne.w	800979a <HAL_RCC_ClockConfig+0x2a>
 8009902:	e759      	b.n	80097b8 <HAL_RCC_ClockConfig+0x48>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009904:	6862      	ldr	r2, [r4, #4]
 8009906:	4d49      	ldr	r5, [pc, #292]	; (8009a2c <HAL_RCC_ClockConfig+0x2bc>)
 8009908:	2a01      	cmp	r2, #1
 800990a:	d115      	bne.n	8009938 <HAL_RCC_ClockConfig+0x1c8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800990c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8009910:	fa91 f3a1 	rbit	r3, r1
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8009914:	fab3 f383 	clz	r3, r3
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009918:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800991c:	f043 0301 	orr.w	r3, r3, #1
 8009920:	2b01      	cmp	r3, #1
 8009922:	d101      	bne.n	8009928 <HAL_RCC_ClockConfig+0x1b8>
 8009924:	6828      	ldr	r0, [r5, #0]
 8009926:	e004      	b.n	8009932 <HAL_RCC_ClockConfig+0x1c2>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009928:	fa91 f1a1 	rbit	r1, r1
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800992c:	fab1 f181 	clz	r1, r1
 8009930:	6a68      	ldr	r0, [r5, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009932:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009936:	e02a      	b.n	800998e <HAL_RCC_ClockConfig+0x21e>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009938:	2a02      	cmp	r2, #2
 800993a:	d115      	bne.n	8009968 <HAL_RCC_ClockConfig+0x1f8>
 800993c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8009940:	fa91 f3a1 	rbit	r3, r1
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8009944:	fab3 f383 	clz	r3, r3
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009948:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800994c:	f043 0301 	orr.w	r3, r3, #1
 8009950:	2b01      	cmp	r3, #1
 8009952:	d101      	bne.n	8009958 <HAL_RCC_ClockConfig+0x1e8>
 8009954:	6828      	ldr	r0, [r5, #0]
 8009956:	e004      	b.n	8009962 <HAL_RCC_ClockConfig+0x1f2>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009958:	fa91 f1a1 	rbit	r1, r1
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800995c:	fab1 f181 	clz	r1, r1
 8009960:	6a68      	ldr	r0, [r5, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009962:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009966:	e012      	b.n	800998e <HAL_RCC_ClockConfig+0x21e>
 8009968:	2102      	movs	r1, #2
 800996a:	fa91 f3a1 	rbit	r3, r1
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800996e:	fab3 f383 	clz	r3, r3
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009972:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8009976:	f043 0301 	orr.w	r3, r3, #1
 800997a:	2b01      	cmp	r3, #1
 800997c:	d101      	bne.n	8009982 <HAL_RCC_ClockConfig+0x212>
 800997e:	6828      	ldr	r0, [r5, #0]
 8009980:	e004      	b.n	800998c <HAL_RCC_ClockConfig+0x21c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009982:	fa91 f1a1 	rbit	r1, r1
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8009986:	fab1 f181 	clz	r1, r1
 800998a:	6a68      	ldr	r0, [r5, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800998c:	2302      	movs	r3, #2
 800998e:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8009992:	fab3 f383 	clz	r3, r3
 8009996:	2101      	movs	r1, #1
 8009998:	f003 031f 	and.w	r3, r3, #31
 800999c:	fa01 f303 	lsl.w	r3, r1, r3
 80099a0:	4203      	tst	r3, r0
 80099a2:	f43f aefa 	beq.w	800979a <HAL_RCC_ClockConfig+0x2a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80099a6:	686b      	ldr	r3, [r5, #4]
 80099a8:	f023 0303 	bic.w	r3, r3, #3
 80099ac:	431a      	orrs	r2, r3
 80099ae:	606a      	str	r2, [r5, #4]
      tickstart = HAL_GetTick();
 80099b0:	f000 f8be 	bl	8009b30 <HAL_GetTick>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80099b4:	6863      	ldr	r3, [r4, #4]
 80099b6:	2b01      	cmp	r3, #1
      tickstart = HAL_GetTick();
 80099b8:	4607      	mov	r7, r0
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80099ba:	f241 3888 	movw	r8, #5000	; 0x1388
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80099be:	d10a      	bne.n	80099d6 <HAL_RCC_ClockConfig+0x266>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80099c0:	686b      	ldr	r3, [r5, #4]
 80099c2:	f003 030c 	and.w	r3, r3, #12
 80099c6:	2b04      	cmp	r3, #4
 80099c8:	d08f      	beq.n	80098ea <HAL_RCC_ClockConfig+0x17a>
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80099ca:	f000 f8b1 	bl	8009b30 <HAL_GetTick>
 80099ce:	1bc0      	subs	r0, r0, r7
 80099d0:	4540      	cmp	r0, r8
 80099d2:	d9f5      	bls.n	80099c0 <HAL_RCC_ClockConfig+0x250>
 80099d4:	e763      	b.n	800989e <HAL_RCC_ClockConfig+0x12e>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80099d6:	2b02      	cmp	r3, #2
 80099d8:	d110      	bne.n	80099fc <HAL_RCC_ClockConfig+0x28c>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80099da:	686b      	ldr	r3, [r5, #4]
 80099dc:	f003 030c 	and.w	r3, r3, #12
 80099e0:	2b08      	cmp	r3, #8
 80099e2:	d082      	beq.n	80098ea <HAL_RCC_ClockConfig+0x17a>
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80099e4:	f000 f8a4 	bl	8009b30 <HAL_GetTick>
 80099e8:	1bc0      	subs	r0, r0, r7
 80099ea:	4540      	cmp	r0, r8
 80099ec:	d9f5      	bls.n	80099da <HAL_RCC_ClockConfig+0x26a>
 80099ee:	e756      	b.n	800989e <HAL_RCC_ClockConfig+0x12e>
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80099f0:	f000 f89e 	bl	8009b30 <HAL_GetTick>
 80099f4:	1bc0      	subs	r0, r0, r7
 80099f6:	4540      	cmp	r0, r8
 80099f8:	f63f af51 	bhi.w	800989e <HAL_RCC_ClockConfig+0x12e>
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80099fc:	686b      	ldr	r3, [r5, #4]
 80099fe:	f013 0f0c 	tst.w	r3, #12
 8009a02:	d1f5      	bne.n	80099f0 <HAL_RCC_ClockConfig+0x280>
 8009a04:	e771      	b.n	80098ea <HAL_RCC_ClockConfig+0x17a>
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009a06:	070b      	lsls	r3, r1, #28
 8009a08:	d507      	bpl.n	8009a1a <HAL_RCC_ClockConfig+0x2aa>
  {
    assert_param(IS_RCC_HCLK_DIV(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8009a0a:	4a08      	ldr	r2, [pc, #32]	; (8009a2c <HAL_RCC_ClockConfig+0x2bc>)
 8009a0c:	6921      	ldr	r1, [r4, #16]
 8009a0e:	6853      	ldr	r3, [r2, #4]
 8009a10:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8009a14:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8009a18:	6053      	str	r3, [r2, #4]
  }

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8009a1a:	200f      	movs	r0, #15
 8009a1c:	f000 f85b 	bl	8009ad6 <HAL_InitTick>

  return HAL_OK;
 8009a20:	2000      	movs	r0, #0
}
 8009a22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a26:	bf00      	nop
 8009a28:	40022000 	.word	0x40022000
 8009a2c:	40021000 	.word	0x40021000

08009a30 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0, prediv = 0, pllmul = 0, pllclk = 0;
  uint32_t sysclockfreq = 0;

  tmpreg = RCC->CFGR;
 8009a30:	4915      	ldr	r1, [pc, #84]	; (8009a88 <HAL_RCC_GetSysClockFreq+0x58>)
{
 8009a32:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 8009a34:	684c      	ldr	r4, [r1, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8009a36:	f004 030c 	and.w	r3, r4, #12
 8009a3a:	2b08      	cmp	r3, #8
 8009a3c:	d121      	bne.n	8009a82 <HAL_RCC_GetSysClockFreq+0x52>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009a3e:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8009a42:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8009a46:	fab3 f383 	clz	r3, r3
  case RCC_SYSCLKSOURCE_STATUS_HSE:    /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
    break;

  case RCC_SYSCLKSOURCE_STATUS_PLLCLK: /* PLL used as system clock  source */
    pllmul = PLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8009a4a:	f404 1270 	and.w	r2, r4, #3932160	; 0x3c0000
 8009a4e:	b2db      	uxtb	r3, r3
 8009a50:	fa22 f303 	lsr.w	r3, r2, r3
 8009a54:	4a0d      	ldr	r2, [pc, #52]	; (8009a8c <HAL_RCC_GetSysClockFreq+0x5c>)
    prediv = PredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8009a56:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    pllmul = PLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8009a58:	5cd2      	ldrb	r2, [r2, r3]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009a5a:	230f      	movs	r3, #15
 8009a5c:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8009a60:	fab3 f383 	clz	r3, r3
    prediv = PredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8009a64:	f001 010f 	and.w	r1, r1, #15
 8009a68:	b2db      	uxtb	r3, r3
 8009a6a:	fa21 f303 	lsr.w	r3, r1, r3
 8009a6e:	4908      	ldr	r1, [pc, #32]	; (8009a90 <HAL_RCC_GetSysClockFreq+0x60>)
 8009a70:	5cc8      	ldrb	r0, [r1, r3]
    if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8009a72:	03e3      	lsls	r3, r4, #15
      pllclk = (HSE_VALUE/prediv) * pllmul;
    }
    else
    {
      /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
      pllclk = (HSI_VALUE >> 1) * pllmul;
 8009a74:	bf52      	itee	pl
 8009a76:	4807      	ldrpl	r0, [pc, #28]	; (8009a94 <HAL_RCC_GetSysClockFreq+0x64>)
      pllclk = (HSE_VALUE/prediv) * pllmul;
 8009a78:	4b07      	ldrmi	r3, [pc, #28]	; (8009a98 <HAL_RCC_GetSysClockFreq+0x68>)
 8009a7a:	fbb3 f0f0 	udivmi	r0, r3, r0
      pllclk = (HSI_VALUE >> 1) * pllmul;
 8009a7e:	4350      	muls	r0, r2
 8009a80:	bd10      	pop	{r4, pc}
    sysclockfreq = HSE_VALUE;
 8009a82:	4805      	ldr	r0, [pc, #20]	; (8009a98 <HAL_RCC_GetSysClockFreq+0x68>)
  default:
    sysclockfreq = HSI_VALUE;
    break;
  }
  return sysclockfreq;
}
 8009a84:	bd10      	pop	{r4, pc}
 8009a86:	bf00      	nop
 8009a88:	40021000 	.word	0x40021000
 8009a8c:	0801c30c 	.word	0x0801c30c
 8009a90:	0801c2fc 	.word	0x0801c2fc
 8009a94:	003d0900 	.word	0x003d0900
 8009a98:	007a1200 	.word	0x007a1200

08009a9c <HAL_RCC_GetHCLKFreq>:
  *                       
  * @param  None
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009a9c:	b508      	push	{r3, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8009a9e:	f7ff ffc7 	bl	8009a30 <HAL_RCC_GetSysClockFreq>
 8009aa2:	4b09      	ldr	r3, [pc, #36]	; (8009ac8 <HAL_RCC_GetHCLKFreq+0x2c>)
 8009aa4:	685a      	ldr	r2, [r3, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009aa6:	23f0      	movs	r3, #240	; 0xf0
 8009aa8:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8009aac:	fab3 f383 	clz	r3, r3
 8009ab0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8009ab4:	b2db      	uxtb	r3, r3
 8009ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8009aba:	4a04      	ldr	r2, [pc, #16]	; (8009acc <HAL_RCC_GetHCLKFreq+0x30>)
 8009abc:	5cd3      	ldrb	r3, [r2, r3]
 8009abe:	40d8      	lsrs	r0, r3
 8009ac0:	4b03      	ldr	r3, [pc, #12]	; (8009ad0 <HAL_RCC_GetHCLKFreq+0x34>)
 8009ac2:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 8009ac4:	bd08      	pop	{r3, pc}
 8009ac6:	bf00      	nop
 8009ac8:	40021000 	.word	0x40021000
 8009acc:	0801c2ec 	.word	0x0801c2ec
 8009ad0:	20000908 	.word	0x20000908

08009ad4 <HAL_MspInit>:
 8009ad4:	4770      	bx	lr

08009ad6 <HAL_InitTick>:
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)

{
 8009ad6:	b510      	push	{r4, lr}
 8009ad8:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8009ada:	f7ff ffdf 	bl	8009a9c <HAL_RCC_GetHCLKFreq>
 8009ade:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009ae2:	fbb0 f0f3 	udiv	r0, r0, r3
 8009ae6:	f000 f889 	bl	8009bfc <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8009aea:	2200      	movs	r2, #0
 8009aec:	4621      	mov	r1, r4
 8009aee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009af2:	f000 f843 	bl	8009b7c <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8009af6:	2000      	movs	r0, #0
 8009af8:	bd10      	pop	{r4, pc}
	...

08009afc <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009afc:	4a07      	ldr	r2, [pc, #28]	; (8009b1c <HAL_Init+0x20>)
{
 8009afe:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009b00:	6813      	ldr	r3, [r2, #0]
 8009b02:	f043 0310 	orr.w	r3, r3, #16
 8009b06:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009b08:	2003      	movs	r0, #3
 8009b0a:	f000 f825 	bl	8009b58 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8009b0e:	200f      	movs	r0, #15
 8009b10:	f7ff ffe1 	bl	8009ad6 <HAL_InitTick>
  HAL_MspInit();
 8009b14:	f7ff ffde 	bl	8009ad4 <HAL_MspInit>
}
 8009b18:	2000      	movs	r0, #0
 8009b1a:	bd08      	pop	{r3, pc}
 8009b1c:	40022000 	.word	0x40022000

08009b20 <HAL_IncTick>:
  * @param  None
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8009b20:	4a02      	ldr	r2, [pc, #8]	; (8009b2c <HAL_IncTick+0xc>)
 8009b22:	6813      	ldr	r3, [r2, #0]
 8009b24:	3301      	adds	r3, #1
 8009b26:	6013      	str	r3, [r2, #0]
 8009b28:	4770      	bx	lr
 8009b2a:	bf00      	nop
 8009b2c:	20000c5c 	.word	0x20000c5c

08009b30 <HAL_GetTick>:
  * @param  None
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8009b30:	4b01      	ldr	r3, [pc, #4]	; (8009b38 <HAL_GetTick+0x8>)
 8009b32:	6818      	ldr	r0, [r3, #0]
}
 8009b34:	4770      	bx	lr
 8009b36:	bf00      	nop
 8009b38:	20000c5c 	.word	0x20000c5c

08009b3c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8009b3c:	b513      	push	{r0, r1, r4, lr}
 8009b3e:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8009b40:	f7ff fff6 	bl	8009b30 <HAL_GetTick>
 8009b44:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8009b46:	f7ff fff3 	bl	8009b30 <HAL_GetTick>
 8009b4a:	9b01      	ldr	r3, [sp, #4]
 8009b4c:	1b00      	subs	r0, r0, r4
 8009b4e:	4298      	cmp	r0, r3
 8009b50:	d3f9      	bcc.n	8009b46 <HAL_Delay+0xa>
  {
  }
}
 8009b52:	b002      	add	sp, #8
 8009b54:	bd10      	pop	{r4, pc}
	...

08009b58 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009b58:	4a07      	ldr	r2, [pc, #28]	; (8009b78 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8009b5a:	68d3      	ldr	r3, [r2, #12]
 8009b5c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8009b60:	041b      	lsls	r3, r3, #16
 8009b62:	0c1b      	lsrs	r3, r3, #16
 8009b64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
 8009b68:	0200      	lsls	r0, r0, #8
 8009b6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b6e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8009b72:	4303      	orrs	r3, r0
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8009b74:	60d3      	str	r3, [r2, #12]
 8009b76:	4770      	bx	lr
 8009b78:	e000ed00 	.word	0xe000ed00

08009b7c <HAL_NVIC_SetPriority>:

    \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grouping field */
 8009b7c:	4b17      	ldr	r3, [pc, #92]	; (8009bdc <HAL_NVIC_SetPriority+0x60>)
 8009b7e:	68db      	ldr	r3, [r3, #12]
    \param [in]       SubPriority  Subpriority value (starting from 0).
    \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used          */
 8009b80:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009b84:	b530      	push	{r4, r5, lr}
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
 8009b86:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
 8009b8a:	1d1d      	adds	r5, r3, #4
  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
 8009b8c:	2c04      	cmp	r4, #4
 8009b8e:	bf28      	it	cs
 8009b90:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
 8009b92:	2d06      	cmp	r5, #6

  return (
 8009b94:	f04f 0501 	mov.w	r5, #1
 8009b98:	fa05 f404 	lsl.w	r4, r5, r4
 8009b9c:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
 8009ba0:	bf8c      	ite	hi
 8009ba2:	3b03      	subhi	r3, #3
 8009ba4:	2300      	movls	r3, #0
  return (
 8009ba6:	400c      	ands	r4, r1
 8009ba8:	409c      	lsls	r4, r3
 8009baa:	fa05 f303 	lsl.w	r3, r5, r3
 8009bae:	3b01      	subs	r3, #1
 8009bb0:	401a      	ands	r2, r3
  if(IRQn < 0) {
 8009bb2:	2800      	cmp	r0, #0
  return (
 8009bb4:	ea42 0204 	orr.w	r2, r2, r4
 8009bb8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8009bbc:	bfaf      	iteee	ge
 8009bbe:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8009bc2:	f000 000f 	andlt.w	r0, r0, #15
 8009bc6:	4b06      	ldrlt	r3, [pc, #24]	; (8009be0 <HAL_NVIC_SetPriority+0x64>)
 8009bc8:	b2d2      	uxtblt	r2, r2
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8009bca:	bfa5      	ittet	ge
 8009bcc:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8009bd0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8009bd2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8009bd4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8009bd8:	bd30      	pop	{r4, r5, pc}
 8009bda:	bf00      	nop
 8009bdc:	e000ed00 	.word	0xe000ed00
 8009be0:	e000ed14 	.word	0xe000ed14

08009be4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8009be4:	0942      	lsrs	r2, r0, #5
 8009be6:	2301      	movs	r3, #1
 8009be8:	f000 001f 	and.w	r0, r0, #31
 8009bec:	fa03 f000 	lsl.w	r0, r3, r0
 8009bf0:	4b01      	ldr	r3, [pc, #4]	; (8009bf8 <HAL_NVIC_EnableIRQ+0x14>)
 8009bf2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8009bf6:	4770      	bx	lr
 8009bf8:	e000e100 	.word	0xe000e100

08009bfc <HAL_SYSTICK_Config>:
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 8009bfc:	3801      	subs	r0, #1
 8009bfe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8009c02:	d20a      	bcs.n	8009c1a <HAL_SYSTICK_Config+0x1e>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 8009c04:	4b06      	ldr	r3, [pc, #24]	; (8009c20 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8009c06:	4a07      	ldr	r2, [pc, #28]	; (8009c24 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 8009c08:	6058      	str	r0, [r3, #4]
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8009c0a:	21f0      	movs	r1, #240	; 0xf0
 8009c0c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8009c10:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009c12:	2207      	movs	r2, #7
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8009c14:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009c16:	601a      	str	r2, [r3, #0]
 8009c18:	4770      	bx	lr
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 8009c1a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8009c1c:	4770      	bx	lr
 8009c1e:	bf00      	nop
 8009c20:	e000e010 	.word	0xe000e010
 8009c24:	e000ed00 	.word	0xe000ed00

08009c28 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8009c28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GET_GPIO_SOURCE(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009c2c:	f8df c17c 	ldr.w	ip, [pc, #380]	; 8009dac <HAL_GPIO_Init+0x184>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009c30:	680b      	ldr	r3, [r1, #0]
        __SYSCFG_CLK_ENABLE();
 8009c32:	f8df e17c 	ldr.w	lr, [pc, #380]	; 8009db0 <HAL_GPIO_Init+0x188>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009c36:	9301      	str	r3, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 8009c38:	f04f 0801 	mov.w	r8, #1
  for (position = 0; position < GPIO_NUMBER; position++)
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	4664      	mov	r4, ip
    if (iocurrent == ioposition)
 8009c40:	9a01      	ldr	r2, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 8009c42:	fa08 f503 	lsl.w	r5, r8, r3
    if (iocurrent == ioposition)
 8009c46:	ea35 0202 	bics.w	r2, r5, r2
 8009c4a:	f040 80a6 	bne.w	8009d9a <HAL_GPIO_Init+0x172>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8009c4e:	684a      	ldr	r2, [r1, #4]
 8009c50:	f022 0910 	bic.w	r9, r2, #16
 8009c54:	f1b9 0f02 	cmp.w	r9, #2
 8009c58:	d114      	bne.n	8009c84 <HAL_GPIO_Init+0x5c>
 8009c5a:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8009c5e:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8009c62:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8009c66:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8009c6a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8009c6e:	260f      	movs	r6, #15
 8009c70:	fa06 f60b 	lsl.w	r6, r6, fp
 8009c74:	ea27 0606 	bic.w	r6, r7, r6
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8009c78:	690f      	ldr	r7, [r1, #16]
 8009c7a:	fa07 f70b 	lsl.w	r7, r7, fp
 8009c7e:	4337      	orrs	r7, r6
        GPIOx->AFR[position >> 3] = temp;
 8009c80:	f8ca 7020 	str.w	r7, [sl, #32]
 8009c84:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8009c88:	2603      	movs	r6, #3
      temp = GPIOx->MODER;
 8009c8a:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8009c8c:	fa06 f60a 	lsl.w	r6, r6, sl
 8009c90:	43f6      	mvns	r6, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8009c92:	f002 0b03 	and.w	fp, r2, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8009c96:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8009c98:	fa0b fb0a 	lsl.w	fp, fp, sl
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009c9c:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8009ca0:	ea4b 0707 	orr.w	r7, fp, r7
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009ca4:	f1b9 0f01 	cmp.w	r9, #1
      GPIOx->MODER = temp;
 8009ca8:	6007      	str	r7, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009caa:	d812      	bhi.n	8009cd2 <HAL_GPIO_Init+0xaa>
        temp = GPIOx->OSPEEDR; 
 8009cac:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8009cae:	ea07 0b06 	and.w	fp, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2));
 8009cb2:	68cf      	ldr	r7, [r1, #12]
 8009cb4:	fa07 f90a 	lsl.w	r9, r7, sl
 8009cb8:	ea49 070b 	orr.w	r7, r9, fp
        GPIOx->OSPEEDR = temp;
 8009cbc:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8009cbe:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8009cc0:	f3c2 1900 	ubfx	r9, r2, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009cc4:	ea27 0705 	bic.w	r7, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8009cc8:	fa09 f903 	lsl.w	r9, r9, r3
 8009ccc:	ea49 0707 	orr.w	r7, r9, r7
        GPIOx->OTYPER = temp;
 8009cd0:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8009cd2:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8009cd4:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8009cd6:	688f      	ldr	r7, [r1, #8]
 8009cd8:	fa07 f70a 	lsl.w	r7, r7, sl
 8009cdc:	433e      	orrs	r6, r7
      GPIOx->PUPDR = temp;
 8009cde:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8009ce0:	00d6      	lsls	r6, r2, #3
 8009ce2:	d55a      	bpl.n	8009d9a <HAL_GPIO_Init+0x172>
        __SYSCFG_CLK_ENABLE();
 8009ce4:	f8de 6018 	ldr.w	r6, [lr, #24]
 8009ce8:	f023 0903 	bic.w	r9, r3, #3
 8009cec:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
 8009cf0:	f046 0601 	orr.w	r6, r6, #1
 8009cf4:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8009cf8:	f8ce 6018 	str.w	r6, [lr, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8009cfc:	f003 0a03 	and.w	sl, r3, #3
        temp = SYSCFG->EXTICR[position >> 2];
 8009d00:	f8d9 7008 	ldr.w	r7, [r9, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8009d04:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8009d08:	260f      	movs	r6, #15
 8009d0a:	fa06 f60a 	lsl.w	r6, r6, sl
        temp |= ((uint32_t)(GET_GPIO_SOURCE(GPIOx)) << (4 * (position & 0x03)));
 8009d0e:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8009d12:	ea27 0706 	bic.w	r7, r7, r6
        temp |= ((uint32_t)(GET_GPIO_SOURCE(GPIOx)) << (4 * (position & 0x03)));
 8009d16:	d015      	beq.n	8009d44 <HAL_GPIO_Init+0x11c>
 8009d18:	4e23      	ldr	r6, [pc, #140]	; (8009da8 <HAL_GPIO_Init+0x180>)
 8009d1a:	42b0      	cmp	r0, r6
 8009d1c:	d014      	beq.n	8009d48 <HAL_GPIO_Init+0x120>
 8009d1e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8009d22:	42b0      	cmp	r0, r6
 8009d24:	d012      	beq.n	8009d4c <HAL_GPIO_Init+0x124>
 8009d26:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8009d2a:	42b0      	cmp	r0, r6
 8009d2c:	d010      	beq.n	8009d50 <HAL_GPIO_Init+0x128>
 8009d2e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8009d32:	42b0      	cmp	r0, r6
 8009d34:	d00e      	beq.n	8009d54 <HAL_GPIO_Init+0x12c>
 8009d36:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8009d3a:	42b0      	cmp	r0, r6
 8009d3c:	bf14      	ite	ne
 8009d3e:	2606      	movne	r6, #6
 8009d40:	2605      	moveq	r6, #5
 8009d42:	e008      	b.n	8009d56 <HAL_GPIO_Init+0x12e>
 8009d44:	2600      	movs	r6, #0
 8009d46:	e006      	b.n	8009d56 <HAL_GPIO_Init+0x12e>
 8009d48:	2601      	movs	r6, #1
 8009d4a:	e004      	b.n	8009d56 <HAL_GPIO_Init+0x12e>
 8009d4c:	2602      	movs	r6, #2
 8009d4e:	e002      	b.n	8009d56 <HAL_GPIO_Init+0x12e>
 8009d50:	2603      	movs	r6, #3
 8009d52:	e000      	b.n	8009d56 <HAL_GPIO_Init+0x12e>
 8009d54:	2604      	movs	r6, #4
 8009d56:	fa06 f60a 	lsl.w	r6, r6, sl
 8009d5a:	433e      	orrs	r6, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8009d5c:	f8c9 6008 	str.w	r6, [r9, #8]
        temp = EXTI->IMR;
 8009d60:	f8dc 6000 	ldr.w	r6, [ip]
        temp &= ~((uint32_t)iocurrent);
 8009d64:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009d66:	f412 3f80 	tst.w	r2, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8009d6a:	bf0c      	ite	eq
 8009d6c:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8009d6e:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 8009d70:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8009d72:	6866      	ldr	r6, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009d74:	f412 3f00 	tst.w	r2, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8009d78:	bf0c      	ite	eq
 8009d7a:	403e      	andeq	r6, r7
        { 
          temp |= iocurrent;
 8009d7c:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 8009d7e:	6066      	str	r6, [r4, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009d80:	68a6      	ldr	r6, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009d82:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8009d86:	bf0c      	ite	eq
 8009d88:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8009d8a:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 8009d8c:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8009d8e:	68e6      	ldr	r6, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009d90:	0292      	lsls	r2, r2, #10
        temp &= ~((uint32_t)iocurrent);
 8009d92:	bf54      	ite	pl
 8009d94:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8009d96:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 8009d98:	60e6      	str	r6, [r4, #12]
  for (position = 0; position < GPIO_NUMBER; position++)
 8009d9a:	3301      	adds	r3, #1
 8009d9c:	2b10      	cmp	r3, #16
 8009d9e:	f47f af4f 	bne.w	8009c40 <HAL_GPIO_Init+0x18>
      }
    }
  } 
}
 8009da2:	b003      	add	sp, #12
 8009da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009da8:	48000400 	.word	0x48000400
 8009dac:	40010400 	.word	0x40010400
 8009db0:	40021000 	.word	0x40021000

08009db4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009db4:	6903      	ldr	r3, [r0, #16]
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8009db6:	4219      	tst	r1, r3
  }
 8009db8:	bf14      	ite	ne
 8009dba:	2001      	movne	r0, #1
 8009dbc:	2000      	moveq	r0, #0
 8009dbe:	4770      	bx	lr

08009dc0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009dc0:	b10a      	cbz	r2, 8009dc6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRRL = GPIO_Pin;
 8009dc2:	8301      	strh	r1, [r0, #24]
 8009dc4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 8009dc6:	8341      	strh	r1, [r0, #26]
 8009dc8:	4770      	bx	lr

08009dca <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8009dca:	6943      	ldr	r3, [r0, #20]
 8009dcc:	4059      	eors	r1, r3
 8009dce:	6141      	str	r1, [r0, #20]
 8009dd0:	4770      	bx	lr

08009dd2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
 8009dd2:	b538      	push	{r3, r4, r5, lr}
  uint32_t i = 0;

  uint32_t wInterrupt_Mask = 0;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8009dd4:	4604      	mov	r4, r0
 8009dd6:	2800      	cmp	r0, #0
 8009dd8:	d047      	beq.n	8009e6a <HAL_PCD_Init+0x98>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  hpcd->State = PCD_BUSY;
 8009dda:	2302      	movs	r3, #2
 8009ddc:	f880 3141 	strb.w	r3, [r0, #321]	; 0x141
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_PCD_MspInit(hpcd);
 8009de0:	f002 f872 	bl	800bec8 <HAL_PCD_MspInit>

 /* Init endpoints structures */
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 8009de4:	2200      	movs	r2, #0
 8009de6:	6865      	ldr	r5, [r4, #4]
 8009de8:	f104 0329 	add.w	r3, r4, #41	; 0x29
 8009dec:	4611      	mov	r1, r2
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1;
 8009dee:	2001      	movs	r0, #1
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 8009df0:	42aa      	cmp	r2, r5
 8009df2:	f103 031c 	add.w	r3, r3, #28
 8009df6:	d00d      	beq.n	8009e14 <HAL_PCD_Init+0x42>
   hpcd->IN_ep[i].num = i;
 8009df8:	f803 2c1d 	strb.w	r2, [r3, #-29]
   hpcd->IN_ep[i].is_in = 1;
 8009dfc:	f803 0c1c 	strb.w	r0, [r3, #-28]
   /* Control until ep is actvated */
   hpcd->IN_ep[i].type = PCD_EP_TYPE_CTRL;
 8009e00:	f803 1c1a 	strb.w	r1, [r3, #-26]
   hpcd->IN_ep[i].maxpacket =  0;
 8009e04:	f843 1c11 	str.w	r1, [r3, #-17]
   hpcd->IN_ep[i].xfer_buff = 0;
 8009e08:	f843 1c0d 	str.w	r1, [r3, #-13]
   hpcd->IN_ep[i].xfer_len = 0;
 8009e0c:	f843 1c09 	str.w	r1, [r3, #-9]
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 8009e10:	3201      	adds	r2, #1
 8009e12:	e7ed      	b.n	8009df0 <HAL_PCD_Init+0x1e>
 8009e14:	2200      	movs	r2, #0
 8009e16:	f104 03b5 	add.w	r3, r4, #181	; 0xb5
 8009e1a:	4611      	mov	r1, r2
 }
 
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 8009e1c:	42aa      	cmp	r2, r5
 8009e1e:	f103 031c 	add.w	r3, r3, #28
 8009e22:	f04f 0000 	mov.w	r0, #0
 8009e26:	d00d      	beq.n	8009e44 <HAL_PCD_Init+0x72>
 {
   hpcd->OUT_ep[i].is_in = 0;
   hpcd->OUT_ep[i].num = i;
 8009e28:	f803 2c1d 	strb.w	r2, [r3, #-29]
   hpcd->OUT_ep[i].is_in = 0;
 8009e2c:	f803 1c1c 	strb.w	r1, [r3, #-28]
   /* Control until ep is activated */
   hpcd->OUT_ep[i].type = PCD_EP_TYPE_CTRL;
 8009e30:	f803 1c1a 	strb.w	r1, [r3, #-26]
   hpcd->OUT_ep[i].maxpacket = 0;
 8009e34:	f843 1c11 	str.w	r1, [r3, #-17]
   hpcd->OUT_ep[i].xfer_buff = 0;
 8009e38:	f843 1c0d 	str.w	r1, [r3, #-13]
   hpcd->OUT_ep[i].xfer_len = 0;
 8009e3c:	f843 1c09 	str.w	r1, [r3, #-9]
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 8009e40:	3201      	adds	r2, #1
 8009e42:	e7eb      	b.n	8009e1c <HAL_PCD_Init+0x4a>
 }
  
 /* Init Device */
 /*CNTR_FRES = 1*/
 hpcd->Instance->CNTR = USB_CNTR_FRES;
 8009e44:	6823      	ldr	r3, [r4, #0]
 8009e46:	2201      	movs	r2, #1
 8009e48:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  /*set wInterrupt_Mask global variable*/
  wInterrupt_Mask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /*Set interrupt mask*/
  hpcd->Instance->CNTR = wInterrupt_Mask;
 8009e4c:	f44f 423d 	mov.w	r2, #48384	; 0xbd00
 hpcd->Instance->CNTR = 0;
 8009e50:	f8a3 0040 	strh.w	r0, [r3, #64]	; 0x40
 hpcd->Instance->ISTR = 0;
 8009e54:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
 hpcd->Instance->BTABLE = BTABLE_ADDRESS;
 8009e58:	f8a3 0050 	strh.w	r0, [r3, #80]	; 0x50
  hpcd->Instance->CNTR = wInterrupt_Mask;
 8009e5c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  hpcd->USB_Address = 0;
 8009e60:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hpcd->State= PCD_READY;
 8009e64:	f884 0141 	strb.w	r0, [r4, #321]	; 0x141

 return HAL_OK;
 8009e68:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8009e6a:	2001      	movs	r0, #1
}
 8009e6c:	bd38      	pop	{r3, r4, r5, pc}

08009e6e <HAL_PCD_Start>:
  * @brief  Start The USB OTG Device.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
 8009e6e:	b508      	push	{r3, lr}
  /*  DP Pull-Down is external */
  HAL_PCDEx_SetConnectionState (hpcd, 1);
 8009e70:	2101      	movs	r1, #1
 8009e72:	f000 fefa 	bl	800ac6a <HAL_PCDEx_SetConnectionState>
  
  return HAL_OK;
}
 8009e76:	2000      	movs	r0, #0
 8009e78:	bd08      	pop	{r3, pc}

08009e7a <HAL_PCD_SetAddress>:
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
   __HAL_LOCK(hpcd); 
 8009e7a:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
 8009e7e:	2b01      	cmp	r3, #1
 8009e80:	d00f      	beq.n	8009ea2 <HAL_PCD_SetAddress+0x28>
 8009e82:	2301      	movs	r3, #1
 8009e84:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140

   if(address == 0) 
 8009e88:	b921      	cbnz	r1, 8009e94 <HAL_PCD_SetAddress+0x1a>
   {
     /* set device address and enable function */
     hpcd->Instance->DADDR = USB_DADDR_EF;
 8009e8a:	6803      	ldr	r3, [r0, #0]
 8009e8c:	2280      	movs	r2, #128	; 0x80
 8009e8e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 8009e92:	e001      	b.n	8009e98 <HAL_PCD_SetAddress+0x1e>
   }
   else /* USB Address will be applied later */
   {
     hpcd->USB_Address = address;
 8009e94:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
   }

  __HAL_UNLOCK(hpcd);   
 8009e98:	2300      	movs	r3, #0
 8009e9a:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	4770      	bx	lr
   __HAL_LOCK(hpcd); 
 8009ea2:	2002      	movs	r0, #2
  return HAL_OK;
}
 8009ea4:	4770      	bx	lr

08009ea6 <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packert size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8009ea6:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 8009ea8:	b24c      	sxtb	r4, r1
 8009eaa:	2c00      	cmp	r4, #0
 8009eac:	f001 067f 	and.w	r6, r1, #127	; 0x7f
 8009eb0:	f04f 051c 	mov.w	r5, #28
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8009eb4:	bfb5      	itete	lt
 8009eb6:	fb05 0106 	mlalt	r1, r5, r6, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8009eba:	fb05 0101 	mlage	r1, r5, r1, r0
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8009ebe:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8009ec0:	31b4      	addge	r1, #180	; 0xb4
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8009ec2:	0fe4      	lsrs	r4, r4, #31
  ep->num   = ep_addr & 0x7F;
 8009ec4:	700e      	strb	r6, [r1, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 8009ec6:	704c      	strb	r4, [r1, #1]
  ep->maxpacket = ep_mps;
  ep->type = ep_type;
 8009ec8:	70cb      	strb	r3, [r1, #3]
  
  __HAL_LOCK(hpcd); 
 8009eca:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
  ep->maxpacket = ep_mps;
 8009ece:	60ca      	str	r2, [r1, #12]
  __HAL_LOCK(hpcd); 
 8009ed0:	2b01      	cmp	r3, #1
 8009ed2:	f000 8181 	beq.w	800a1d8 <HAL_PCD_EP_Open+0x332>
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140

/* initialize Endpoint */
  switch (ep->type)
 8009edc:	78cc      	ldrb	r4, [r1, #3]
 8009ede:	780a      	ldrb	r2, [r1, #0]
 8009ee0:	6803      	ldr	r3, [r0, #0]
 8009ee2:	2c03      	cmp	r4, #3
 8009ee4:	d82f      	bhi.n	8009f46 <HAL_PCD_EP_Open+0xa0>
 8009ee6:	e8df f004 	tbb	[pc, r4]
 8009eea:	2202      	.short	0x2202
 8009eec:	170d      	.short	0x170d
  {
  case PCD_EP_TYPE_CTRL:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_CONTROL);
 8009eee:	b212      	sxth	r2, r2
 8009ef0:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8009ef4:	b2a4      	uxth	r4, r4
 8009ef6:	f424 44ec 	bic.w	r4, r4, #30208	; 0x7600
 8009efa:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 8009efe:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 8009f02:	e01e      	b.n	8009f42 <HAL_PCD_EP_Open+0x9c>
    break;
  case PCD_EP_TYPE_BULK:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_BULK);
 8009f04:	b212      	sxth	r2, r2
 8009f06:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8009f0a:	f424 44ec 	bic.w	r4, r4, #30208	; 0x7600
 8009f0e:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 8009f12:	0424      	lsls	r4, r4, #16
 8009f14:	0c24      	lsrs	r4, r4, #16
 8009f16:	e014      	b.n	8009f42 <HAL_PCD_EP_Open+0x9c>
    break;
  case PCD_EP_TYPE_INTR:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_INTERRUPT);
 8009f18:	b212      	sxth	r2, r2
 8009f1a:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8009f1e:	b2a4      	uxth	r4, r4
 8009f20:	f424 44ec 	bic.w	r4, r4, #30208	; 0x7600
 8009f24:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 8009f28:	f444 64c0 	orr.w	r4, r4, #1536	; 0x600
 8009f2c:	e009      	b.n	8009f42 <HAL_PCD_EP_Open+0x9c>
    break;
  case PCD_EP_TYPE_ISOC:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_ISOCHRONOUS);
 8009f2e:	b212      	sxth	r2, r2
 8009f30:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8009f34:	b2a4      	uxth	r4, r4
 8009f36:	f424 44ec 	bic.w	r4, r4, #30208	; 0x7600
 8009f3a:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 8009f3e:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 8009f42:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
    break;
  } 
  
  PCD_SET_EP_ADDRESS(hpcd->Instance, ep->num, ep->num);
 8009f46:	780a      	ldrb	r2, [r1, #0]
 8009f48:	b215      	sxth	r5, r2
 8009f4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009f4e:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 8009f52:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
 8009f56:	0524      	lsls	r4, r4, #20
 8009f58:	0d24      	lsrs	r4, r4, #20
 8009f5a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009f5e:	4322      	orrs	r2, r4
 8009f60:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
  
  if (ep->doublebuffer == 0) 
 8009f64:	7a8c      	ldrb	r4, [r1, #10]
 8009f66:	780a      	ldrb	r2, [r1, #0]
 8009f68:	2c00      	cmp	r4, #0
 8009f6a:	d175      	bne.n	800a058 <HAL_PCD_EP_Open+0x1b2>
  {
    if (ep->is_in)
 8009f6c:	784d      	ldrb	r5, [r1, #1]
 8009f6e:	888c      	ldrh	r4, [r1, #4]
 8009f70:	2608      	movs	r6, #8
 8009f72:	b33d      	cbz	r5, 8009fc4 <HAL_PCD_EP_Open+0x11e>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 8009f74:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 8009f78:	b2ad      	uxth	r5, r5
 8009f7a:	fb16 5202 	smlabb	r2, r6, r2, r5
 8009f7e:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8009f82:	0864      	lsrs	r4, r4, #1
 8009f84:	0064      	lsls	r4, r4, #1
 8009f86:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8009f8a:	780c      	ldrb	r4, [r1, #0]
 8009f8c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8009f90:	0652      	lsls	r2, r2, #25
 8009f92:	d50b      	bpl.n	8009fac <HAL_PCD_EP_Open+0x106>
 8009f94:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8009f98:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8009f9c:	0512      	lsls	r2, r2, #20
 8009f9e:	0d12      	lsrs	r2, r2, #20
 8009fa0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009fa4:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8009fa8:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK); 
 8009fac:	7809      	ldrb	r1, [r1, #0]
 8009fae:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8009fb2:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8009fb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009fba:	0412      	lsls	r2, r2, #16
 8009fbc:	0c12      	lsrs	r2, r2, #16
 8009fbe:	f082 0220 	eor.w	r2, r2, #32
 8009fc2:	e0fe      	b.n	800a1c2 <HAL_PCD_EP_Open+0x31c>
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 8009fc4:	f8b3 7050 	ldrh.w	r7, [r3, #80]	; 0x50
 8009fc8:	b2bf      	uxth	r7, r7
 8009fca:	fb16 7202 	smlabb	r2, r6, r2, r7
 8009fce:	3204      	adds	r2, #4
 8009fd0:	f503 6580 	add.w	r5, r3, #1024	; 0x400
 8009fd4:	0864      	lsrs	r4, r4, #1
 8009fd6:	0064      	lsls	r4, r4, #1
 8009fd8:	f845 4012 	str.w	r4, [r5, r2, lsl #1]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, ep->maxpacket);
 8009fdc:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8009fe0:	780c      	ldrb	r4, [r1, #0]
 8009fe2:	b292      	uxth	r2, r2
 8009fe4:	fb16 2204 	smlabb	r2, r6, r4, r2
 8009fe8:	68ce      	ldr	r6, [r1, #12]
 8009fea:	2e3e      	cmp	r6, #62	; 0x3e
 8009fec:	f102 0206 	add.w	r2, r2, #6
 8009ff0:	d90b      	bls.n	800a00a <HAL_PCD_EP_Open+0x164>
 8009ff2:	f3c6 144f 	ubfx	r4, r6, #5, #16
 8009ff6:	06f7      	lsls	r7, r6, #27
 8009ff8:	bf04      	itt	eq
 8009ffa:	f104 34ff 	addeq.w	r4, r4, #4294967295	; 0xffffffff
 8009ffe:	b2a4      	uxtheq	r4, r4
 800a000:	ea6f 64c4 	mvn.w	r4, r4, lsl #27
 800a004:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 800a008:	e006      	b.n	800a018 <HAL_PCD_EP_Open+0x172>
 800a00a:	f3c6 044f 	ubfx	r4, r6, #1, #16
 800a00e:	07f6      	lsls	r6, r6, #31
 800a010:	bf44      	itt	mi
 800a012:	3401      	addmi	r4, #1
 800a014:	b2a4      	uxthmi	r4, r4
 800a016:	02a4      	lsls	r4, r4, #10
 800a018:	b2a4      	uxth	r4, r4
 800a01a:	f845 4012 	str.w	r4, [r5, r2, lsl #1]
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 800a01e:	780c      	ldrb	r4, [r1, #0]
 800a020:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800a024:	0452      	lsls	r2, r2, #17
 800a026:	d50b      	bpl.n	800a040 <HAL_PCD_EP_Open+0x19a>
 800a028:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800a02c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800a030:	0512      	lsls	r2, r2, #20
 800a032:	0d12      	lsrs	r2, r2, #20
 800a034:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800a038:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a03c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 800a040:	7809      	ldrb	r1, [r1, #0]
 800a042:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800a046:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a04a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800a04e:	0412      	lsls	r2, r2, #16
 800a050:	0c12      	lsrs	r2, r2, #16
 800a052:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 800a056:	e0b4      	b.n	800a1c2 <HAL_PCD_EP_Open+0x31c>
  }
  /*Double Buffer*/
  else
  {
    /*Set the endpoint as double buffered*/
    PCD_SET_EP_DBUF(hpcd->Instance, ep->num);
 800a058:	b212      	sxth	r2, r2
 800a05a:	f503 6580 	add.w	r5, r3, #1024	; 0x400
 800a05e:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 800a062:	f424 74f8 	bic.w	r4, r4, #496	; 0x1f0
 800a066:	0524      	lsls	r4, r4, #20
 800a068:	0d24      	lsrs	r4, r4, #20
 800a06a:	f444 4401 	orr.w	r4, r4, #33024	; 0x8100
 800a06e:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 800a072:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
    /*Set buffer address for double buffered mode*/
    PCD_SET_EP_DBUF_ADDR(hpcd->Instance, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 800a076:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 800a07a:	780c      	ldrb	r4, [r1, #0]
 800a07c:	2208      	movs	r2, #8
 800a07e:	b2b6      	uxth	r6, r6
 800a080:	fb12 6604 	smlabb	r6, r2, r4, r6
 800a084:	88cc      	ldrh	r4, [r1, #6]
 800a086:	0864      	lsrs	r4, r4, #1
 800a088:	0064      	lsls	r4, r4, #1
 800a08a:	f845 4016 	str.w	r4, [r5, r6, lsl #1]
 800a08e:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 800a092:	780e      	ldrb	r6, [r1, #0]
 800a094:	b2a4      	uxth	r4, r4
 800a096:	fb12 4206 	smlabb	r2, r2, r6, r4
 800a09a:	890c      	ldrh	r4, [r1, #8]
 800a09c:	3204      	adds	r2, #4
 800a09e:	0864      	lsrs	r4, r4, #1
 800a0a0:	0064      	lsls	r4, r4, #1
 800a0a2:	f845 4012 	str.w	r4, [r5, r2, lsl #1]
 800a0a6:	780c      	ldrb	r4, [r1, #0]
    
    if (ep->is_in==0)
 800a0a8:	784a      	ldrb	r2, [r1, #1]
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 800a0aa:	b224      	sxth	r4, r4
    if (ep->is_in==0)
 800a0ac:	2a00      	cmp	r2, #0
 800a0ae:	d146      	bne.n	800a13e <HAL_PCD_EP_Open+0x298>
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 800a0b0:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800a0b4:	0457      	lsls	r7, r2, #17
 800a0b6:	d50b      	bpl.n	800a0d0 <HAL_PCD_EP_Open+0x22a>
 800a0b8:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800a0bc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800a0c0:	0512      	lsls	r2, r2, #20
 800a0c2:	0d12      	lsrs	r2, r2, #20
 800a0c4:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800a0c8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a0cc:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 800a0d0:	780c      	ldrb	r4, [r1, #0]
 800a0d2:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800a0d6:	0656      	lsls	r6, r2, #25
 800a0d8:	d50b      	bpl.n	800a0f2 <HAL_PCD_EP_Open+0x24c>
 800a0da:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800a0de:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800a0e2:	0512      	lsls	r2, r2, #20
 800a0e4:	0d12      	lsrs	r2, r2, #20
 800a0e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a0ea:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800a0ee:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(hpcd->Instance, ep->num);
 800a0f2:	780c      	ldrb	r4, [r1, #0]
 800a0f4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800a0f8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800a0fc:	0512      	lsls	r2, r2, #20
 800a0fe:	0d12      	lsrs	r2, r2, #20
 800a100:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a104:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800a108:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 800a10c:	780c      	ldrb	r4, [r1, #0]
 800a10e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800a112:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a116:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800a11a:	0412      	lsls	r2, r2, #16
 800a11c:	0c12      	lsrs	r2, r2, #16
 800a11e:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 800a122:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a126:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a12a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
 800a12e:	7809      	ldrb	r1, [r1, #0]
 800a130:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800a134:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800a138:	0512      	lsls	r2, r2, #20
 800a13a:	0d12      	lsrs	r2, r2, #20
 800a13c:	e041      	b.n	800a1c2 <HAL_PCD_EP_Open+0x31c>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 800a13e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800a142:	0455      	lsls	r5, r2, #17
 800a144:	d50b      	bpl.n	800a15e <HAL_PCD_EP_Open+0x2b8>
 800a146:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800a14a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800a14e:	0512      	lsls	r2, r2, #20
 800a150:	0d12      	lsrs	r2, r2, #20
 800a152:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800a156:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a15a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 800a15e:	780c      	ldrb	r4, [r1, #0]
 800a160:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800a164:	0652      	lsls	r2, r2, #25
 800a166:	d50b      	bpl.n	800a180 <HAL_PCD_EP_Open+0x2da>
 800a168:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800a16c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800a170:	0512      	lsls	r2, r2, #20
 800a172:	0d12      	lsrs	r2, r2, #20
 800a174:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a178:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800a17c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_RX_DTOG(hpcd->Instance, ep->num);
 800a180:	780c      	ldrb	r4, [r1, #0]
 800a182:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800a186:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800a18a:	0512      	lsls	r2, r2, #20
 800a18c:	0d12      	lsrs	r2, r2, #20
 800a18e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800a192:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a196:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
 800a19a:	780c      	ldrb	r4, [r1, #0]
 800a19c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800a1a0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800a1a4:	0512      	lsls	r2, r2, #20
 800a1a6:	0d12      	lsrs	r2, r2, #20
 800a1a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a1ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a1b0:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 800a1b4:	7809      	ldrb	r1, [r1, #0]
 800a1b6:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800a1ba:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800a1be:	0492      	lsls	r2, r2, #18
 800a1c0:	0c92      	lsrs	r2, r2, #18
 800a1c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a1c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a1ca:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  return ret;
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hpcd); 
 800a1d8:	2002      	movs	r0, #2
}
 800a1da:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a1dc <HAL_PCD_EP_Close>:
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 800a1dc:	b24b      	sxtb	r3, r1
 800a1de:	2b00      	cmp	r3, #0
{  
 800a1e0:	b530      	push	{r4, r5, lr}
 800a1e2:	f04f 021c 	mov.w	r2, #28
 800a1e6:	f001 047f 	and.w	r4, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800a1ea:	bfb5      	itete	lt
 800a1ec:	fb02 0104 	mlalt	r1, r2, r4, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 800a1f0:	fb02 0101 	mlage	r1, r2, r1, r0
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800a1f4:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 800a1f6:	31b4      	addge	r1, #180	; 0xb4
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
 800a1f8:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7F;
 800a1fa:	700c      	strb	r4, [r1, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 800a1fc:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd); 
 800a1fe:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
 800a202:	2b01      	cmp	r3, #1
 800a204:	f000 80bf 	beq.w	800a386 <HAL_PCD_EP_Close+0x1aa>
 800a208:	2301      	movs	r3, #1
 800a20a:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
 800a20e:	780a      	ldrb	r2, [r1, #0]

  if (ep->doublebuffer == 0) 
 800a210:	7a8d      	ldrb	r5, [r1, #10]
 800a212:	784c      	ldrb	r4, [r1, #1]
 800a214:	6803      	ldr	r3, [r0, #0]
  {
    if (ep->is_in)
    {
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 800a216:	b212      	sxth	r2, r2
  if (ep->doublebuffer == 0) 
 800a218:	bb1d      	cbnz	r5, 800a262 <HAL_PCD_EP_Close+0x86>
    if (ep->is_in)
 800a21a:	b184      	cbz	r4, 800a23e <HAL_PCD_EP_Close+0x62>
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 800a21c:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 800a220:	0664      	lsls	r4, r4, #25
 800a222:	d55b      	bpl.n	800a2dc <HAL_PCD_EP_Close+0x100>
 800a224:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 800a228:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
 800a22c:	0524      	lsls	r4, r4, #20
 800a22e:	0d24      	lsrs	r4, r4, #20
 800a230:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 800a234:	f044 04c0 	orr.w	r4, r4, #192	; 0xc0
 800a238:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
 800a23c:	e04e      	b.n	800a2dc <HAL_PCD_EP_Close+0x100>
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS); 
    }
    else
    {
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 800a23e:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 800a242:	0465      	lsls	r5, r4, #17
 800a244:	f140 808d 	bpl.w	800a362 <HAL_PCD_EP_Close+0x186>
 800a248:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 800a24c:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
 800a250:	0524      	lsls	r4, r4, #20
 800a252:	0d24      	lsrs	r4, r4, #20
 800a254:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 800a258:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 800a25c:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
 800a260:	e07f      	b.n	800a362 <HAL_PCD_EP_Close+0x186>
    }
  }
  /*Double Buffer*/
  else
  { 
    if (ep->is_in==0)
 800a262:	2c00      	cmp	r4, #0
 800a264:	d142      	bne.n	800a2ec <HAL_PCD_EP_Close+0x110>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 800a266:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 800a26a:	0464      	lsls	r4, r4, #17
 800a26c:	d50b      	bpl.n	800a286 <HAL_PCD_EP_Close+0xaa>
 800a26e:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 800a272:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
 800a276:	0524      	lsls	r4, r4, #20
 800a278:	0d24      	lsrs	r4, r4, #20
 800a27a:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 800a27e:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 800a282:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 800a286:	780c      	ldrb	r4, [r1, #0]
 800a288:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800a28c:	0655      	lsls	r5, r2, #25
 800a28e:	d50b      	bpl.n	800a2a8 <HAL_PCD_EP_Close+0xcc>
 800a290:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800a294:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800a298:	0512      	lsls	r2, r2, #20
 800a29a:	0d12      	lsrs	r2, r2, #20
 800a29c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a2a0:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800a2a4:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(hpcd->Instance, ep->num);
 800a2a8:	780c      	ldrb	r4, [r1, #0]
 800a2aa:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800a2ae:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800a2b2:	0512      	lsls	r2, r2, #20
 800a2b4:	0d12      	lsrs	r2, r2, #20
 800a2b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a2ba:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800a2be:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 800a2c2:	780c      	ldrb	r4, [r1, #0]
 800a2c4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800a2c8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800a2cc:	0492      	lsls	r2, r2, #18
 800a2ce:	0c92      	lsrs	r2, r2, #18
 800a2d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a2d4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a2d8:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
 800a2dc:	7809      	ldrb	r1, [r1, #0]
 800a2de:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800a2e2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800a2e6:	0512      	lsls	r2, r2, #20
 800a2e8:	0d12      	lsrs	r2, r2, #20
 800a2ea:	e041      	b.n	800a370 <HAL_PCD_EP_Close+0x194>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 800a2ec:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 800a2f0:	0464      	lsls	r4, r4, #17
 800a2f2:	d50b      	bpl.n	800a30c <HAL_PCD_EP_Close+0x130>
 800a2f4:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 800a2f8:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
 800a2fc:	0524      	lsls	r4, r4, #20
 800a2fe:	0d24      	lsrs	r4, r4, #20
 800a300:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 800a304:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 800a308:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 800a30c:	780c      	ldrb	r4, [r1, #0]
 800a30e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800a312:	0652      	lsls	r2, r2, #25
 800a314:	d50b      	bpl.n	800a32e <HAL_PCD_EP_Close+0x152>
 800a316:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800a31a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800a31e:	0512      	lsls	r2, r2, #20
 800a320:	0d12      	lsrs	r2, r2, #20
 800a322:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a326:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800a32a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_RX_DTOG(hpcd->Instance, ep->num);
 800a32e:	780c      	ldrb	r4, [r1, #0]
 800a330:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800a334:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800a338:	0512      	lsls	r2, r2, #20
 800a33a:	0d12      	lsrs	r2, r2, #20
 800a33c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800a340:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a344:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
 800a348:	780c      	ldrb	r4, [r1, #0]
 800a34a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800a34e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800a352:	0512      	lsls	r2, r2, #20
 800a354:	0d12      	lsrs	r2, r2, #20
 800a356:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a35a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a35e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 800a362:	7809      	ldrb	r1, [r1, #0]
 800a364:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800a368:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800a36c:	0492      	lsls	r2, r2, #18
 800a36e:	0c92      	lsrs	r2, r2, #18
 800a370:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a374:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a378:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
 800a37c:	2300      	movs	r3, #0
 800a37e:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  return HAL_OK;
 800a382:	4618      	mov	r0, r3
 800a384:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hpcd); 
 800a386:	2002      	movs	r0, #2
}
 800a388:	bd30      	pop	{r4, r5, pc}

0800a38a <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer   
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a38a:	b570      	push	{r4, r5, r6, lr}
 800a38c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 PCD_EPTypeDef *ep;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 800a390:	241c      	movs	r4, #28
 800a392:	fb04 0401 	mla	r4, r4, r1, r0
 800a396:	f8c4 20c4 	str.w	r2, [r4, #196]	; 0xc4
  ep->xfer_len = len;
  ep->xfer_count = 0;
 800a39a:	2200      	movs	r2, #0
  ep->xfer_len = len;
 800a39c:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
  ep->xfer_count = 0;
 800a3a0:	f8c4 20cc 	str.w	r2, [r4, #204]	; 0xcc
  ep->is_in = 0;
 800a3a4:	f884 20b5 	strb.w	r2, [r4, #181]	; 0xb5
  ep->num = ep_addr & 0x7F;
 800a3a8:	f884 10b4 	strb.w	r1, [r4, #180]	; 0xb4
   
  __HAL_LOCK(hpcd); 
 800a3ac:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
 800a3b0:	2b01      	cmp	r3, #1
 800a3b2:	d065      	beq.n	800a480 <HAL_PCD_EP_Receive+0xf6>
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
   
  /* Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 800a3ba:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
 800a3be:	f8d4 50c0 	ldr.w	r5, [r4, #192]	; 0xc0
    len=ep->xfer_len;
    ep->xfer_len =0;
  }
  
  /* configure and validate Rx endpoint */
  if (ep->doublebuffer == 0) 
 800a3c2:	261c      	movs	r6, #28
  if (ep->xfer_len > ep->maxpacket)
 800a3c4:	42ab      	cmp	r3, r5
    ep->xfer_len-=len; 
 800a3c6:	bf88      	it	hi
 800a3c8:	1b5b      	subhi	r3, r3, r5
  if (ep->doublebuffer == 0) 
 800a3ca:	fb06 0601 	mla	r6, r6, r1, r0
    ep->xfer_len-=len; 
 800a3ce:	bf8c      	ite	hi
 800a3d0:	f8c4 30c8 	strhi.w	r3, [r4, #200]	; 0xc8
    ep->xfer_len =0;
 800a3d4:	f8c4 20c8 	strls.w	r2, [r4, #200]	; 0xc8
  if (ep->doublebuffer == 0) 
 800a3d8:	f896 20be 	ldrb.w	r2, [r6, #190]	; 0xbe
 800a3dc:	6804      	ldr	r4, [r0, #0]
 800a3de:	bf88      	it	hi
 800a3e0:	462b      	movhi	r3, r5
 800a3e2:	b112      	cbz	r2, 800a3ea <HAL_PCD_EP_Receive+0x60>
    PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, len);
  }
  else
  {
    /*Set the Double buffer counter*/
    PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800a3e4:	f896 20b5 	ldrb.w	r2, [r6, #181]	; 0xb5
 800a3e8:	bb1a      	cbnz	r2, 800a432 <HAL_PCD_EP_Receive+0xa8>
 800a3ea:	f8b4 5050 	ldrh.w	r5, [r4, #80]	; 0x50
 800a3ee:	f896 20b4 	ldrb.w	r2, [r6, #180]	; 0xb4
 800a3f2:	b2ad      	uxth	r5, r5
 800a3f4:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 800a3f8:	2b3e      	cmp	r3, #62	; 0x3e
 800a3fa:	f105 0506 	add.w	r5, r5, #6
 800a3fe:	f504 6680 	add.w	r6, r4, #1024	; 0x400
 800a402:	d90b      	bls.n	800a41c <HAL_PCD_EP_Receive+0x92>
 800a404:	f3c3 124f 	ubfx	r2, r3, #5, #16
 800a408:	06db      	lsls	r3, r3, #27
 800a40a:	bf04      	itt	eq
 800a40c:	f102 32ff 	addeq.w	r2, r2, #4294967295	; 0xffffffff
 800a410:	b292      	uxtheq	r2, r2
 800a412:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 800a416:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800a41a:	e006      	b.n	800a42a <HAL_PCD_EP_Receive+0xa0>
 800a41c:	f3c3 024f 	ubfx	r2, r3, #1, #16
 800a420:	07db      	lsls	r3, r3, #31
 800a422:	bf44      	itt	mi
 800a424:	3201      	addmi	r2, #1
 800a426:	b292      	uxthmi	r2, r2
 800a428:	0292      	lsls	r2, r2, #10
 800a42a:	b292      	uxth	r2, r2
 800a42c:	f846 2015 	str.w	r2, [r6, r5, lsl #1]
 800a430:	e00c      	b.n	800a44c <HAL_PCD_EP_Receive+0xc2>
 800a432:	2a01      	cmp	r2, #1
 800a434:	d10a      	bne.n	800a44c <HAL_PCD_EP_Receive+0xc2>
 800a436:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 800a43a:	f896 50b4 	ldrb.w	r5, [r6, #180]	; 0xb4
 800a43e:	b292      	uxth	r2, r2
 800a440:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 800a444:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 800a448:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
  } 
  
  PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 800a44c:	231c      	movs	r3, #28
 800a44e:	fb03 0101 	mla	r1, r3, r1, r0
 800a452:	f891 20b4 	ldrb.w	r2, [r1, #180]	; 0xb4
 800a456:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 800a45a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a45e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a462:	041b      	lsls	r3, r3, #16
 800a464:	0c1b      	lsrs	r3, r3, #16
 800a466:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800a46a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a46e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a472:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
  
  __HAL_UNLOCK(hpcd); 
 800a476:	2300      	movs	r3, #0
 800a478:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  
  return HAL_OK;
 800a47c:	4618      	mov	r0, r3
 800a47e:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd); 
 800a480:	2002      	movs	r0, #2
}
 800a482:	bd70      	pop	{r4, r5, r6, pc}

0800a484 <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr: endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & 0x7F].xfer_count;
 800a484:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800a488:	231c      	movs	r3, #28
 800a48a:	fb03 0001 	mla	r0, r3, r1, r0
}
 800a48e:	f8b0 00cc 	ldrh.w	r0, [r0, #204]	; 0xcc
 800a492:	4770      	bx	lr

0800a494 <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer   
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a496:	f001 067f 	and.w	r6, r1, #127	; 0x7f
  uint16_t pmabuffer = 0;
    
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 800a49a:	211c      	movs	r1, #28
 800a49c:	fb01 0106 	mla	r1, r1, r6, r0
{
 800a4a0:	4604      	mov	r4, r0
  ep->xfer_buff = pBuf;  
 800a4a2:	638a      	str	r2, [r1, #56]	; 0x38
  ep->xfer_len = len;
 800a4a4:	63cb      	str	r3, [r1, #60]	; 0x3c
  ep->xfer_count = 0;
 800a4a6:	2200      	movs	r2, #0
  ep->is_in = 1;
 800a4a8:	2301      	movs	r3, #1
  ep->xfer_count = 0;
 800a4aa:	640a      	str	r2, [r1, #64]	; 0x40
  ep->is_in = 1;
 800a4ac:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  ep->num = ep_addr & 0x7F;
 800a4b0:	f881 6028 	strb.w	r6, [r1, #40]	; 0x28
  
  __HAL_LOCK(hpcd); 
 800a4b4:	f890 0140 	ldrb.w	r0, [r0, #320]	; 0x140
 800a4b8:	4298      	cmp	r0, r3
 800a4ba:	f000 80a5 	beq.w	800a608 <HAL_PCD_EP_Transmit+0x174>
 800a4be:	f884 3140 	strb.w	r3, [r4, #320]	; 0x140
  
  /*Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 800a4c2:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 800a4c4:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    len=ep->xfer_len;
    ep->xfer_len =0;
  }
  
  /* configure and validate Tx endpoint */
  if (ep->doublebuffer == 0) 
 800a4c6:	271c      	movs	r7, #28
  if (ep->xfer_len > ep->maxpacket)
 800a4c8:	429d      	cmp	r5, r3
    ep->xfer_len-=len; 
 800a4ca:	bf88      	it	hi
 800a4cc:	1aed      	subhi	r5, r5, r3
  if (ep->doublebuffer == 0) 
 800a4ce:	fb07 4706 	mla	r7, r7, r6, r4
    ep->xfer_len-=len; 
 800a4d2:	bf8c      	ite	hi
 800a4d4:	63cd      	strhi	r5, [r1, #60]	; 0x3c
    ep->xfer_len =0;
 800a4d6:	63ca      	strls	r2, [r1, #60]	; 0x3c
  if (ep->doublebuffer == 0) 
 800a4d8:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 800a4dc:	bf88      	it	hi
 800a4de:	461d      	movhi	r5, r3
 800a4e0:	b2ab      	uxth	r3, r5
 800a4e2:	b98a      	cbnz	r2, 800a508 <HAL_PCD_EP_Transmit+0x74>
  {
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, len);
 800a4e4:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800a4e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a4e8:	6820      	ldr	r0, [r4, #0]
 800a4ea:	f000 fb9c 	bl	800ac26 <PCD_WritePMA>
    PCD_SET_EP_TX_CNT(hpcd->Instance, ep->num, len);
 800a4ee:	6821      	ldr	r1, [r4, #0]
 800a4f0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a4f4:	f8b1 2050 	ldrh.w	r2, [r1, #80]	; 0x50
 800a4f8:	b292      	uxth	r2, r2
 800a4fa:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a4fe:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800a502:	f8c3 5404 	str.w	r5, [r3, #1028]	; 0x404
 800a506:	e065      	b.n	800a5d4 <HAL_PCD_EP_Transmit+0x140>
  }
  else
  {
    /*Set the Double buffer counter*/
    PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800a508:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 800a50c:	6820      	ldr	r0, [r4, #0]
 800a50e:	bb1a      	cbnz	r2, 800a558 <HAL_PCD_EP_Transmit+0xc4>
 800a510:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 800a514:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800a518:	b289      	uxth	r1, r1
 800a51a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800a51e:	2d3e      	cmp	r5, #62	; 0x3e
 800a520:	f101 0106 	add.w	r1, r1, #6
 800a524:	f500 6780 	add.w	r7, r0, #1024	; 0x400
 800a528:	d90b      	bls.n	800a542 <HAL_PCD_EP_Transmit+0xae>
 800a52a:	f3c5 124f 	ubfx	r2, r5, #5, #16
 800a52e:	06ed      	lsls	r5, r5, #27
 800a530:	bf04      	itt	eq
 800a532:	f102 32ff 	addeq.w	r2, r2, #4294967295	; 0xffffffff
 800a536:	b292      	uxtheq	r2, r2
 800a538:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 800a53c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800a540:	e006      	b.n	800a550 <HAL_PCD_EP_Transmit+0xbc>
 800a542:	f3c5 024f 	ubfx	r2, r5, #1, #16
 800a546:	07ed      	lsls	r5, r5, #31
 800a548:	bf44      	itt	mi
 800a54a:	3201      	addmi	r2, #1
 800a54c:	b292      	uxthmi	r2, r2
 800a54e:	0292      	lsls	r2, r2, #10
 800a550:	b292      	uxth	r2, r2
 800a552:	f847 2011 	str.w	r2, [r7, r1, lsl #1]
 800a556:	e00c      	b.n	800a572 <HAL_PCD_EP_Transmit+0xde>
 800a558:	2a01      	cmp	r2, #1
 800a55a:	d10a      	bne.n	800a572 <HAL_PCD_EP_Transmit+0xde>
 800a55c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800a560:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 800a564:	b292      	uxth	r2, r2
 800a566:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800a56a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800a56e:	f8c2 540c 	str.w	r5, [r2, #1036]	; 0x40c
    
    /*Write the data to the USB endpoint*/
    if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX)
 800a572:	251c      	movs	r5, #28
 800a574:	fb05 4206 	mla	r2, r5, r6, r4
    }
    else
    {
      pmabuffer = ep->pmaaddr0;
    }
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, pmabuffer, len);
 800a578:	fb05 4506 	mla	r5, r5, r6, r4
    if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX)
 800a57c:	f892 1028 	ldrb.w	r1, [r2, #40]	; 0x28
 800a580:	f830 1021 	ldrh.w	r1, [r0, r1, lsl #2]
 800a584:	0649      	lsls	r1, r1, #25
      pmabuffer = ep->pmaaddr1;
 800a586:	bf4c      	ite	mi
 800a588:	8e12      	ldrhmi	r2, [r2, #48]	; 0x30
      pmabuffer = ep->pmaaddr0;
 800a58a:	8dd2      	ldrhpl	r2, [r2, #46]	; 0x2e
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, pmabuffer, len);
 800a58c:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 800a58e:	f000 fb4a 	bl	800ac26 <PCD_WritePMA>
    PCD_FreeUserBuffer(hpcd->Instance, ep->num, ep->is_in);
 800a592:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
 800a596:	6822      	ldr	r2, [r4, #0]
 800a598:	b963      	cbnz	r3, 800a5b4 <HAL_PCD_EP_Transmit+0x120>
 800a59a:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 800a59e:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800a5a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a5a6:	051b      	lsls	r3, r3, #20
 800a5a8:	0d1b      	lsrs	r3, r3, #20
 800a5aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a5ae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a5b2:	e00d      	b.n	800a5d0 <HAL_PCD_EP_Transmit+0x13c>
 800a5b4:	2b01      	cmp	r3, #1
 800a5b6:	d10d      	bne.n	800a5d4 <HAL_PCD_EP_Transmit+0x140>
 800a5b8:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 800a5bc:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800a5c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a5c4:	051b      	lsls	r3, r3, #20
 800a5c6:	0d1b      	lsrs	r3, r3, #20
 800a5c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a5cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5d0:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
  }

  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800a5d4:	231c      	movs	r3, #28
 800a5d6:	fb03 4606 	mla	r6, r3, r6, r4
 800a5da:	6822      	ldr	r2, [r4, #0]
 800a5dc:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 800a5e0:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800a5e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a5e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a5ec:	041b      	lsls	r3, r3, #16
 800a5ee:	0c1b      	lsrs	r3, r3, #16
 800a5f0:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 800a5f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a5f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  
  __HAL_UNLOCK(hpcd);
 800a5fc:	2000      	movs	r0, #0
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800a5fe:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
  __HAL_UNLOCK(hpcd);
 800a602:	f884 0140 	strb.w	r0, [r4, #320]	; 0x140
     
  return HAL_OK;
 800a606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hpcd); 
 800a608:	2002      	movs	r0, #2
}
 800a60a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a60c <HAL_PCD_IRQHandler>:
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 800a60c:	6803      	ldr	r3, [r0, #0]
 800a60e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
{
 800a612:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a616:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 800a618:	0418      	lsls	r0, r3, #16
 800a61a:	d411      	bmi.n	800a640 <HAL_PCD_IRQHandler+0x34>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 800a61c:	6823      	ldr	r3, [r4, #0]
 800a61e:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 800a622:	0551      	lsls	r1, r2, #21
 800a624:	f140 81d4 	bpl.w	800a9d0 <HAL_PCD_IRQHandler+0x3c4>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800a628:	f64f 32ff 	movw	r2, #64511	; 0xfbff
    HAL_PCD_ResetCallback(hpcd);
 800a62c:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800a62e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 800a632:	f001 fcb2 	bl	800bf9a <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0);
 800a636:	2100      	movs	r1, #0
 800a638:	4620      	mov	r0, r4
 800a63a:	f7ff fc1e 	bl	8009e7a <HAL_PCD_SetAddress>
 800a63e:	e1c7      	b.n	800a9d0 <HAL_PCD_IRQHandler+0x3c4>
  __IO uint16_t wEPVal = 0;
 800a640:	2300      	movs	r3, #0
 800a642:	f8ad 3006 	strh.w	r3, [sp, #6]
        if (ep->doublebuffer == 0)
 800a646:	f04f 081c 	mov.w	r8, #28
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800a64a:	2708      	movs	r7, #8
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 800a64c:	6820      	ldr	r0, [r4, #0]
 800a64e:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 800a652:	b29b      	uxth	r3, r3
 800a654:	0419      	lsls	r1, r3, #16
 800a656:	f8ad 3004 	strh.w	r3, [sp, #4]
 800a65a:	d5df      	bpl.n	800a61c <HAL_PCD_IRQHandler+0x10>
    EPindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800a65c:	f8bd 5004 	ldrh.w	r5, [sp, #4]
    if (EPindex == 0)
 800a660:	f015 050f 	ands.w	r5, r5, #15
 800a664:	f040 80b6 	bne.w	800a7d4 <HAL_PCD_IRQHandler+0x1c8>
      if ((wIstr & USB_ISTR_DIR) == 0)
 800a668:	f8bd 1004 	ldrh.w	r1, [sp, #4]
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800a66c:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0)
 800a66e:	f001 0110 	and.w	r1, r1, #16
 800a672:	b289      	uxth	r1, r1
 800a674:	bb59      	cbnz	r1, 800a6ce <HAL_PCD_IRQHandler+0xc2>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800a676:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800a67a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a67e:	041b      	lsls	r3, r3, #16
 800a680:	0c1b      	lsrs	r3, r3, #16
 800a682:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800a684:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800a688:	b29a      	uxth	r2, r3
 800a68a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800a68e:	fb17 2303 	smlabb	r3, r7, r3, r2
 800a692:	eb00 0043 	add.w	r0, r0, r3, lsl #1
        ep->xfer_buff += ep->xfer_count;
 800a696:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800a698:	f8d0 3404 	ldr.w	r3, [r0, #1028]	; 0x404
 800a69c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a6a0:	6423      	str	r3, [r4, #64]	; 0x40
        ep->xfer_buff += ep->xfer_count;
 800a6a2:	4413      	add	r3, r2
 800a6a4:	63a3      	str	r3, [r4, #56]	; 0x38
        HAL_PCD_DataInStageCallback(hpcd, 0);
 800a6a6:	4620      	mov	r0, r4
 800a6a8:	f001 fc6b 	bl	800bf82 <HAL_PCD_DataInStageCallback>
        if((hpcd->USB_Address > 0)&& ( ep->xfer_len == 0))
 800a6ac:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d0cb      	beq.n	800a64c <HAL_PCD_IRQHandler+0x40>
 800a6b4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800a6b6:	2a00      	cmp	r2, #0
 800a6b8:	d1c8      	bne.n	800a64c <HAL_PCD_IRQHandler+0x40>
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 800a6ba:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800a6be:	6821      	ldr	r1, [r4, #0]
 800a6c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6c4:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0;
 800a6c8:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 800a6cc:	e7be      	b.n	800a64c <HAL_PCD_IRQHandler+0x40>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800a6ce:	b29b      	uxth	r3, r3
 800a6d0:	f8ad 3006 	strh.w	r3, [sp, #6]
        if ((wEPVal & USB_EP_SETUP) != 0)
 800a6d4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800a6d8:	051a      	lsls	r2, r3, #20
 800a6da:	d51f      	bpl.n	800a71c <HAL_PCD_IRQHandler+0x110>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800a6dc:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800a6e0:	f894 20b4 	ldrb.w	r2, [r4, #180]	; 0xb4
 800a6e4:	b29b      	uxth	r3, r3
 800a6e6:	fb17 3302 	smlabb	r3, r7, r2, r3
 800a6ea:	eb00 0343 	add.w	r3, r0, r3, lsl #1
          PCD_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 800a6ee:	f8b4 20b8 	ldrh.w	r2, [r4, #184]	; 0xb8
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800a6f2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800a6f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a6fa:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
          PCD_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 800a6fe:	f504 71a2 	add.w	r1, r4, #324	; 0x144
 800a702:	f000 faa1 	bl	800ac48 <PCD_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 800a706:	6822      	ldr	r2, [r4, #0]
 800a708:	8813      	ldrh	r3, [r2, #0]
 800a70a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a70e:	051b      	lsls	r3, r3, #20
 800a710:	0d1b      	lsrs	r3, r3, #20
 800a712:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 800a714:	4620      	mov	r0, r4
 800a716:	f001 fc25 	bl	800bf64 <HAL_PCD_SetupStageCallback>
 800a71a:	e797      	b.n	800a64c <HAL_PCD_IRQHandler+0x40>
        else if ((wEPVal & USB_EP_CTR_RX) != 0)
 800a71c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800a720:	041b      	lsls	r3, r3, #16
 800a722:	d593      	bpl.n	800a64c <HAL_PCD_IRQHandler+0x40>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800a724:	8803      	ldrh	r3, [r0, #0]
 800a726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a72a:	051b      	lsls	r3, r3, #20
 800a72c:	0d1b      	lsrs	r3, r3, #20
 800a72e:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800a730:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800a734:	f894 20b4 	ldrb.w	r2, [r4, #180]	; 0xb4
 800a738:	b29b      	uxth	r3, r3
 800a73a:	fb17 3302 	smlabb	r3, r7, r2, r3
 800a73e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800a742:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800a746:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a74a:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
          if (ep->xfer_count != 0)
 800a74e:	b163      	cbz	r3, 800a76a <HAL_PCD_IRQHandler+0x15e>
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 800a750:	f8b4 20b8 	ldrh.w	r2, [r4, #184]	; 0xb8
 800a754:	f8d4 10c4 	ldr.w	r1, [r4, #196]	; 0xc4
 800a758:	f000 fa76 	bl	800ac48 <PCD_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 800a75c:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 800a760:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 800a764:	4413      	add	r3, r2
 800a766:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
           HAL_PCD_DataOutStageCallback(hpcd, 0);
 800a76a:	2100      	movs	r1, #0
 800a76c:	4620      	mov	r0, r4
 800a76e:	f001 fbff 	bl	800bf70 <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800a772:	6822      	ldr	r2, [r4, #0]
 800a774:	f8d4 50c0 	ldr.w	r5, [r4, #192]	; 0xc0
 800a778:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 800a77c:	2d3e      	cmp	r5, #62	; 0x3e
 800a77e:	b289      	uxth	r1, r1
 800a780:	f101 0106 	add.w	r1, r1, #6
 800a784:	f502 6080 	add.w	r0, r2, #1024	; 0x400
 800a788:	d90b      	bls.n	800a7a2 <HAL_PCD_IRQHandler+0x196>
 800a78a:	f3c5 134f 	ubfx	r3, r5, #5, #16
 800a78e:	06ee      	lsls	r6, r5, #27
 800a790:	bf04      	itt	eq
 800a792:	f103 33ff 	addeq.w	r3, r3, #4294967295	; 0xffffffff
 800a796:	b29b      	uxtheq	r3, r3
 800a798:	ea6f 63c3 	mvn.w	r3, r3, lsl #27
 800a79c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a7a0:	e006      	b.n	800a7b0 <HAL_PCD_IRQHandler+0x1a4>
 800a7a2:	f3c5 034f 	ubfx	r3, r5, #1, #16
 800a7a6:	07ed      	lsls	r5, r5, #31
 800a7a8:	bf44      	itt	mi
 800a7aa:	3301      	addmi	r3, #1
 800a7ac:	b29b      	uxthmi	r3, r3
 800a7ae:	029b      	lsls	r3, r3, #10
 800a7b0:	b29b      	uxth	r3, r3
 800a7b2:	f840 3011 	str.w	r3, [r0, r1, lsl #1]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800a7b6:	8813      	ldrh	r3, [r2, #0]
 800a7b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a7bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7c0:	041b      	lsls	r3, r3, #16
 800a7c2:	0c1b      	lsrs	r3, r3, #16
 800a7c4:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800a7c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a7cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7d0:	8013      	strh	r3, [r2, #0]
 800a7d2:	e73b      	b.n	800a64c <HAL_PCD_IRQHandler+0x40>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, EPindex);
 800a7d4:	fa0f f985 	sxth.w	r9, r5
 800a7d8:	f830 3029 	ldrh.w	r3, [r0, r9, lsl #2]
 800a7dc:	b29b      	uxth	r3, r3
 800a7de:	f8ad 3006 	strh.w	r3, [sp, #6]
      if ((wEPVal & USB_EP_CTR_RX) != 0)
 800a7e2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800a7e6:	041e      	lsls	r6, r3, #16
 800a7e8:	d577      	bpl.n	800a8da <HAL_PCD_IRQHandler+0x2ce>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, EPindex);
 800a7ea:	f830 3029 	ldrh.w	r3, [r0, r9, lsl #2]
 800a7ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7f2:	051b      	lsls	r3, r3, #20
 800a7f4:	0d1b      	lsrs	r3, r3, #20
 800a7f6:	f820 3029 	strh.w	r3, [r0, r9, lsl #2]
        if (ep->doublebuffer == 0)
 800a7fa:	fb08 4105 	mla	r1, r8, r5, r4
 800a7fe:	f891 30be 	ldrb.w	r3, [r1, #190]	; 0xbe
 800a802:	b9ab      	cbnz	r3, 800a830 <HAL_PCD_IRQHandler+0x224>
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800a804:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800a808:	f891 20b4 	ldrb.w	r2, [r1, #180]	; 0xb4
 800a80c:	b29b      	uxth	r3, r3
 800a80e:	fb17 3302 	smlabb	r3, r7, r2, r3
 800a812:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800a816:	f8d3 640c 	ldr.w	r6, [r3, #1036]	; 0x40c
 800a81a:	f3c6 0609 	ubfx	r6, r6, #0, #10
          if (count != 0)
 800a81e:	b3e6      	cbz	r6, 800a89a <HAL_PCD_IRQHandler+0x28e>
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800a820:	f8b1 20b8 	ldrh.w	r2, [r1, #184]	; 0xb8
 800a824:	f8d1 10c4 	ldr.w	r1, [r1, #196]	; 0xc4
 800a828:	4633      	mov	r3, r6
 800a82a:	f000 fa0d 	bl	800ac48 <PCD_ReadPMA>
 800a82e:	e034      	b.n	800a89a <HAL_PCD_IRQHandler+0x28e>
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 800a830:	f891 30b4 	ldrb.w	r3, [r1, #180]	; 0xb4
 800a834:	b21a      	sxth	r2, r3
 800a836:	f830 2022 	ldrh.w	r2, [r0, r2, lsl #2]
 800a83a:	f412 4f80 	tst.w	r2, #16384	; 0x4000
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800a83e:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800a842:	b292      	uxth	r2, r2
 800a844:	fb17 2303 	smlabb	r3, r7, r3, r2
 800a848:	eb00 0343 	add.w	r3, r0, r3, lsl #1
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 800a84c:	d008      	beq.n	800a860 <HAL_PCD_IRQHandler+0x254>
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800a84e:	f8d3 6404 	ldr.w	r6, [r3, #1028]	; 0x404
 800a852:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0)
 800a856:	b17e      	cbz	r6, 800a878 <HAL_PCD_IRQHandler+0x26c>
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800a858:	4633      	mov	r3, r6
 800a85a:	f8b1 20ba 	ldrh.w	r2, [r1, #186]	; 0xba
 800a85e:	e007      	b.n	800a870 <HAL_PCD_IRQHandler+0x264>
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800a860:	f8d3 640c 	ldr.w	r6, [r3, #1036]	; 0x40c
 800a864:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0)
 800a868:	b136      	cbz	r6, 800a878 <HAL_PCD_IRQHandler+0x26c>
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800a86a:	f8b1 20bc 	ldrh.w	r2, [r1, #188]	; 0xbc
 800a86e:	4633      	mov	r3, r6
 800a870:	f8d1 10c4 	ldr.w	r1, [r1, #196]	; 0xc4
 800a874:	f000 f9e8 	bl	800ac48 <PCD_ReadPMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
 800a878:	fb08 4305 	mla	r3, r8, r5, r4
 800a87c:	6822      	ldr	r2, [r4, #0]
 800a87e:	f893 10b4 	ldrb.w	r1, [r3, #180]	; 0xb4
 800a882:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800a886:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a88a:	051b      	lsls	r3, r3, #20
 800a88c:	0d1b      	lsrs	r3, r3, #20
 800a88e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a892:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a896:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
        ep->xfer_count+=count;
 800a89a:	fb08 4105 	mla	r1, r8, r5, r4
 800a89e:	f8d1 30cc 	ldr.w	r3, [r1, #204]	; 0xcc
        ep->xfer_buff+=count;
 800a8a2:	f8d1 20c4 	ldr.w	r2, [r1, #196]	; 0xc4
        ep->xfer_count+=count;
 800a8a6:	4433      	add	r3, r6
 800a8a8:	f8c1 30cc 	str.w	r3, [r1, #204]	; 0xcc
        if ((ep->xfer_len == 0) || (count < ep->maxpacket))
 800a8ac:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8
        ep->xfer_buff+=count;
 800a8b0:	4432      	add	r2, r6
 800a8b2:	f8c1 20c4 	str.w	r2, [r1, #196]	; 0xc4
        if ((ep->xfer_len == 0) || (count < ep->maxpacket))
 800a8b6:	b11b      	cbz	r3, 800a8c0 <HAL_PCD_IRQHandler+0x2b4>
 800a8b8:	f8d1 00c0 	ldr.w	r0, [r1, #192]	; 0xc0
 800a8bc:	4286      	cmp	r6, r0
 800a8be:	d207      	bcs.n	800a8d0 <HAL_PCD_IRQHandler+0x2c4>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800a8c0:	fb08 4305 	mla	r3, r8, r5, r4
 800a8c4:	4620      	mov	r0, r4
 800a8c6:	f893 10b4 	ldrb.w	r1, [r3, #180]	; 0xb4
 800a8ca:	f001 fb51 	bl	800bf70 <HAL_PCD_DataOutStageCallback>
 800a8ce:	e004      	b.n	800a8da <HAL_PCD_IRQHandler+0x2ce>
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800a8d0:	f891 10b4 	ldrb.w	r1, [r1, #180]	; 0xb4
 800a8d4:	4620      	mov	r0, r4
 800a8d6:	f7ff fd58 	bl	800a38a <HAL_PCD_EP_Receive>
      if ((wEPVal & USB_EP_CTR_TX) != 0)
 800a8da:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800a8de:	0618      	lsls	r0, r3, #24
 800a8e0:	f57f aeb4 	bpl.w	800a64c <HAL_PCD_IRQHandler+0x40>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, EPindex);
 800a8e4:	6820      	ldr	r0, [r4, #0]
 800a8e6:	f830 3029 	ldrh.w	r3, [r0, r9, lsl #2]
 800a8ea:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800a8ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8f2:	041b      	lsls	r3, r3, #16
 800a8f4:	0c1b      	lsrs	r3, r3, #16
 800a8f6:	f820 3029 	strh.w	r3, [r0, r9, lsl #2]
        if (ep->doublebuffer == 0)
 800a8fa:	fb08 4105 	mla	r1, r8, r5, r4
 800a8fe:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 800a902:	b9a3      	cbnz	r3, 800a92e <HAL_PCD_IRQHandler+0x322>
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800a904:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800a908:	f891 2028 	ldrb.w	r2, [r1, #40]	; 0x28
 800a90c:	b29b      	uxth	r3, r3
 800a90e:	fb17 3302 	smlabb	r3, r7, r2, r3
 800a912:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800a916:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a91a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a91e:	640b      	str	r3, [r1, #64]	; 0x40
          if (ep->xfer_count != 0)
 800a920:	2b00      	cmp	r3, #0
 800a922:	d036      	beq.n	800a992 <HAL_PCD_IRQHandler+0x386>
            PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 800a924:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
 800a926:	6b89      	ldr	r1, [r1, #56]	; 0x38
 800a928:	f000 f97d 	bl	800ac26 <PCD_WritePMA>
 800a92c:	e031      	b.n	800a992 <HAL_PCD_IRQHandler+0x386>
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 800a92e:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 800a932:	b21a      	sxth	r2, r3
 800a934:	f830 2022 	ldrh.w	r2, [r0, r2, lsl #2]
 800a938:	f012 0f40 	tst.w	r2, #64	; 0x40
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800a93c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800a940:	b292      	uxth	r2, r2
 800a942:	fb17 2303 	smlabb	r3, r7, r3, r2
 800a946:	eb00 0343 	add.w	r3, r0, r3, lsl #1
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 800a94a:	d007      	beq.n	800a95c <HAL_PCD_IRQHandler+0x350>
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800a94c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a950:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a954:	640b      	str	r3, [r1, #64]	; 0x40
            if (ep->xfer_count != 0)
 800a956:	b15b      	cbz	r3, 800a970 <HAL_PCD_IRQHandler+0x364>
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 800a958:	8dca      	ldrh	r2, [r1, #46]	; 0x2e
 800a95a:	e006      	b.n	800a96a <HAL_PCD_IRQHandler+0x35e>
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800a95c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800a960:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a964:	640b      	str	r3, [r1, #64]	; 0x40
            if (ep->xfer_count != 0)
 800a966:	b11b      	cbz	r3, 800a970 <HAL_PCD_IRQHandler+0x364>
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 800a968:	8e0a      	ldrh	r2, [r1, #48]	; 0x30
 800a96a:	6b89      	ldr	r1, [r1, #56]	; 0x38
 800a96c:	f000 f95b 	bl	800ac26 <PCD_WritePMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
 800a970:	fb08 4305 	mla	r3, r8, r5, r4
 800a974:	6822      	ldr	r2, [r4, #0]
 800a976:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 800a97a:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800a97e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a982:	051b      	lsls	r3, r3, #20
 800a984:	0d1b      	lsrs	r3, r3, #20
 800a986:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a98a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a98e:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800a992:	6823      	ldr	r3, [r4, #0]
 800a994:	fb08 4505 	mla	r5, r8, r5, r4
 800a998:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800a99c:	b291      	uxth	r1, r2
 800a99e:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
 800a9a2:	fb17 1202 	smlabb	r2, r7, r2, r1
 800a9a6:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800a9aa:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 800a9ae:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
        ep->xfer_buff+=ep->xfer_count;
 800a9b2:	6bab      	ldr	r3, [r5, #56]	; 0x38
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800a9b4:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800a9b8:	642a      	str	r2, [r5, #64]	; 0x40
        ep->xfer_buff+=ep->xfer_count;
 800a9ba:	441a      	add	r2, r3
        if (ep->xfer_len == 0)
 800a9bc:	6beb      	ldr	r3, [r5, #60]	; 0x3c
        ep->xfer_buff+=ep->xfer_count;
 800a9be:	63aa      	str	r2, [r5, #56]	; 0x38
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800a9c0:	4620      	mov	r0, r4
        if (ep->xfer_len == 0)
 800a9c2:	b913      	cbnz	r3, 800a9ca <HAL_PCD_IRQHandler+0x3be>
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800a9c4:	f001 fadd 	bl	800bf82 <HAL_PCD_DataInStageCallback>
 800a9c8:	e640      	b.n	800a64c <HAL_PCD_IRQHandler+0x40>
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800a9ca:	f7ff fd63 	bl	800a494 <HAL_PCD_EP_Transmit>
 800a9ce:	e63d      	b.n	800a64c <HAL_PCD_IRQHandler+0x40>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVRM))
 800a9d0:	6823      	ldr	r3, [r4, #0]
 800a9d2:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 800a9d6:	0452      	lsls	r2, r2, #17
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVRM);    
 800a9d8:	bf44      	itt	mi
 800a9da:	f64b 72ff 	movwmi	r2, #49151	; 0xbfff
 800a9de:	f8a3 2044 	strhmi.w	r2, [r3, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 800a9e2:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 800a9e6:	0497      	lsls	r7, r2, #18
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 800a9e8:	bf44      	itt	mi
 800a9ea:	f64d 72ff 	movwmi	r2, #57343	; 0xdfff
 800a9ee:	f8a3 2044 	strhmi.w	r2, [r3, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 800a9f2:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 800a9f6:	04d6      	lsls	r6, r2, #19
 800a9f8:	d513      	bpl.n	800aa22 <HAL_PCD_IRQHandler+0x416>
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 800a9fa:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800a9fe:	f022 0204 	bic.w	r2, r2, #4
 800aa02:	0412      	lsls	r2, r2, #16
 800aa04:	0c12      	lsrs	r2, r2, #16
 800aa06:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR = wInterrupt_Mask;
 800aa0a:	f44f 423d 	mov.w	r2, #48384	; 0xbd00
 800aa0e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 800aa12:	4620      	mov	r0, r4
 800aa14:	f001 facf 	bl	800bfb6 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 800aa18:	6823      	ldr	r3, [r4, #0]
 800aa1a:	f64e 72ff 	movw	r2, #61439	; 0xefff
 800aa1e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 800aa22:	6823      	ldr	r3, [r4, #0]
 800aa24:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 800aa28:	0515      	lsls	r5, r2, #20
 800aa2a:	d518      	bpl.n	800aa5e <HAL_PCD_IRQHandler+0x452>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 800aa2c:	f24f 72ff 	movw	r2, #63487	; 0xf7ff
 800aa30:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 800aa34:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800aa38:	b292      	uxth	r2, r2
 800aa3a:	f042 0208 	orr.w	r2, r2, #8
 800aa3e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 800aa42:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800aa46:	b292      	uxth	r2, r2
 800aa48:	f042 0204 	orr.w	r2, r2, #4
 800aa4c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0)
 800aa50:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800aa54:	04d8      	lsls	r0, r3, #19
 800aa56:	d402      	bmi.n	800aa5e <HAL_PCD_IRQHandler+0x452>
      HAL_PCD_SuspendCallback(hpcd);
 800aa58:	4620      	mov	r0, r4
 800aa5a:	f001 faab 	bl	800bfb4 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 800aa5e:	6823      	ldr	r3, [r4, #0]
 800aa60:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 800aa64:	0591      	lsls	r1, r2, #22
 800aa66:	d506      	bpl.n	800aa76 <HAL_PCD_IRQHandler+0x46a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 800aa68:	f64f 52ff 	movw	r2, #65023	; 0xfdff
 800aa6c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 800aa70:	4620      	mov	r0, r4
 800aa72:	f001 fa8e 	bl	800bf92 <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 800aa76:	6823      	ldr	r3, [r4, #0]
 800aa78:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 800aa7c:	05d2      	lsls	r2, r2, #23
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 800aa7e:	bf44      	itt	mi
 800aa80:	f64f 62ff 	movwmi	r2, #65279	; 0xfeff
 800aa84:	f8a3 2044 	strhmi.w	r2, [r3, #68]	; 0x44
}
 800aa88:	b003      	add	sp, #12
 800aa8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800aa8e <HAL_PCD_EP_SetStall>:
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  PCD_EPTypeDef *ep;
   
  __HAL_LOCK(hpcd); 
 800aa8e:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
 800aa92:	2b01      	cmp	r3, #1
{
 800aa94:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd); 
 800aa96:	d047      	beq.n	800ab28 <HAL_PCD_EP_SetStall+0x9a>
   
  if ((0x80 & ep_addr) == 0x80)
 800aa98:	b24c      	sxtb	r4, r1
  __HAL_LOCK(hpcd); 
 800aa9a:	2301      	movs	r3, #1
 800aa9c:	221c      	movs	r2, #28
 800aa9e:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  if ((0x80 & ep_addr) == 0x80)
 800aaa2:	2c00      	cmp	r4, #0
 800aaa4:	f001 037f 	and.w	r3, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800aaa8:	bfb5      	itete	lt
 800aaaa:	fb02 0203 	mlalt	r2, r2, r3, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800aaae:	fb02 0201 	mlage	r2, r2, r1, r0
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800aab2:	3228      	addlt	r2, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 800aab4:	32b4      	addge	r2, #180	; 0xb4
  }
  
  ep->is_stall = 1;
 800aab6:	2101      	movs	r1, #1
 800aab8:	7091      	strb	r1, [r2, #2]
  ep->num   = ep_addr & 0x7F;
 800aaba:	b2d9      	uxtb	r1, r3
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 800aabc:	0fe3      	lsrs	r3, r4, #31
  ep->num   = ep_addr & 0x7F;
 800aabe:	7011      	strb	r1, [r2, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 800aac0:	7053      	strb	r3, [r2, #1]
 800aac2:	6802      	ldr	r2, [r0, #0]
  
  if (ep->num == 0)
 800aac4:	b979      	cbnz	r1, 800aae6 <HAL_PCD_EP_SetStall+0x58>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
 800aac6:	8813      	ldrh	r3, [r2, #0]
 800aac8:	b29b      	uxth	r3, r3
 800aaca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800aace:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aad2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800aad6:	f083 0310 	eor.w	r3, r3, #16
 800aada:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aade:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aae2:	8013      	strh	r3, [r2, #0]
 800aae4:	e01b      	b.n	800ab1e <HAL_PCD_EP_SetStall+0x90>
 800aae6:	b209      	sxth	r1, r1
  }
  else
  {
    if (ep->is_in)
 800aae8:	2c00      	cmp	r4, #0
    {
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num , USB_EP_TX_STALL); 
 800aaea:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
    if (ep->is_in)
 800aaee:	da08      	bge.n	800ab02 <HAL_PCD_EP_SetStall+0x74>
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num , USB_EP_TX_STALL); 
 800aaf0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aaf4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aaf8:	041b      	lsls	r3, r3, #16
 800aafa:	0c1b      	lsrs	r3, r3, #16
 800aafc:	f083 0310 	eor.w	r3, r3, #16
 800ab00:	e007      	b.n	800ab12 <HAL_PCD_EP_SetStall+0x84>
    }
    else
    {
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num , USB_EP_RX_STALL);
 800ab02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ab06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab0a:	041b      	lsls	r3, r3, #16
 800ab0c:	0c1b      	lsrs	r3, r3, #16
 800ab0e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ab12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab1a:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
    }
  }
  __HAL_UNLOCK(hpcd); 
 800ab1e:	2300      	movs	r3, #0
 800ab20:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  
  return HAL_OK;
 800ab24:	4618      	mov	r0, r3
 800ab26:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 800ab28:	2002      	movs	r0, #2
}
 800ab2a:	bd10      	pop	{r4, pc}

0800ab2c <HAL_PCD_EP_ClrStall>:
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  PCD_EPTypeDef *ep;
  
  if ((0x80 & ep_addr) == 0x80)
 800ab2c:	b24b      	sxtb	r3, r1
 800ab2e:	2b00      	cmp	r3, #0
{
 800ab30:	b510      	push	{r4, lr}
 800ab32:	f04f 021c 	mov.w	r2, #28
 800ab36:	f001 047f 	and.w	r4, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800ab3a:	bfb5      	itete	lt
 800ab3c:	fb02 0104 	mlalt	r1, r2, r4, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800ab40:	fb02 0101 	mlage	r1, r2, r1, r0
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800ab44:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 800ab46:	31b4      	addge	r1, #180	; 0xb4
  }
  
  ep->is_stall = 0;
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 800ab48:	0fdb      	lsrs	r3, r3, #31
  ep->is_stall = 0;
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 800ab4e:	700c      	strb	r4, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 800ab50:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd); 
 800ab52:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
 800ab56:	2b01      	cmp	r3, #1
 800ab58:	d049      	beq.n	800abee <HAL_PCD_EP_ClrStall+0xc2>
 800ab5a:	2301      	movs	r3, #1
 800ab5c:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
 800ab60:	780c      	ldrb	r4, [r1, #0]
  
  if (ep->is_in)
 800ab62:	784b      	ldrb	r3, [r1, #1]
 800ab64:	6802      	ldr	r2, [r0, #0]
  {
    PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 800ab66:	b224      	sxth	r4, r4
  if (ep->is_in)
 800ab68:	b1db      	cbz	r3, 800aba2 <HAL_PCD_EP_ClrStall+0x76>
    PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 800ab6a:	f832 3024 	ldrh.w	r3, [r2, r4, lsl #2]
 800ab6e:	065b      	lsls	r3, r3, #25
 800ab70:	d50b      	bpl.n	800ab8a <HAL_PCD_EP_ClrStall+0x5e>
 800ab72:	f832 3024 	ldrh.w	r3, [r2, r4, lsl #2]
 800ab76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ab7a:	051b      	lsls	r3, r3, #20
 800ab7c:	0d1b      	lsrs	r3, r3, #20
 800ab7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab82:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ab86:	f822 3024 	strh.w	r3, [r2, r4, lsl #2]
    PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800ab8a:	7809      	ldrb	r1, [r1, #0]
 800ab8c:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800ab90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab98:	041b      	lsls	r3, r3, #16
 800ab9a:	0c1b      	lsrs	r3, r3, #16
 800ab9c:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 800aba0:	e01a      	b.n	800abd8 <HAL_PCD_EP_ClrStall+0xac>
  }
  else
  {
    PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 800aba2:	f832 3024 	ldrh.w	r3, [r2, r4, lsl #2]
 800aba6:	045b      	lsls	r3, r3, #17
 800aba8:	d50b      	bpl.n	800abc2 <HAL_PCD_EP_ClrStall+0x96>
 800abaa:	f832 3024 	ldrh.w	r3, [r2, r4, lsl #2]
 800abae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800abb2:	051b      	lsls	r3, r3, #20
 800abb4:	0d1b      	lsrs	r3, r3, #20
 800abb6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800abba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abbe:	f822 3024 	strh.w	r3, [r2, r4, lsl #2]
    PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 800abc2:	7809      	ldrb	r1, [r1, #0]
 800abc4:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800abc8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800abcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800abd0:	041b      	lsls	r3, r3, #16
 800abd2:	0c1b      	lsrs	r3, r3, #16
 800abd4:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800abd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800abdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abe0:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
  }
  __HAL_UNLOCK(hpcd); 
 800abe4:	2300      	movs	r3, #0
 800abe6:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
    
  return HAL_OK;
 800abea:	4618      	mov	r0, r3
 800abec:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 800abee:	2002      	movs	r0, #2
}
 800abf0:	bd10      	pop	{r4, pc}

0800abf2 <HAL_PCDEx_PMAConfig>:

{
  PCD_EPTypeDef *ep;
  
  /* initialize ep structure*/
  if ((0x80 & ep_addr) == 0x80)
 800abf2:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 800abf6:	b530      	push	{r4, r5, lr}
 800abf8:	f04f 051c 	mov.w	r5, #28
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800abfc:	bf1b      	ittet	ne
 800abfe:	f001 047f 	andne.w	r4, r1, #127	; 0x7f
 800ac02:	fb05 0004 	mlane	r0, r5, r4, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800ac06:	fb05 0001 	mlaeq	r0, r5, r1, r0
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800ac0a:	3028      	addne	r0, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 800ac0c:	bf08      	it	eq
 800ac0e:	30b4      	addeq	r0, #180	; 0xb4
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800ac10:	b912      	cbnz	r2, 800ac18 <HAL_PCDEx_PMAConfig+0x26>
  {
    /*Single Buffer*/
    ep->doublebuffer = 0;
 800ac12:	7282      	strb	r2, [r0, #10]
    /*Configure te PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 800ac14:	8083      	strh	r3, [r0, #4]
 800ac16:	e004      	b.n	800ac22 <HAL_PCDEx_PMAConfig+0x30>
  }
  else /*USB_DBL_BUF*/
  {
    /*Double Buffer Endpoint*/
    ep->doublebuffer = 1;
 800ac18:	2201      	movs	r2, #1
    /*Configure the PMA*/
    ep->pmaaddr0 =  pmaadress & 0xFFFF;
 800ac1a:	80c3      	strh	r3, [r0, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000) >> 16;
 800ac1c:	0c1b      	lsrs	r3, r3, #16
    ep->doublebuffer = 1;
 800ac1e:	7282      	strb	r2, [r0, #10]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000) >> 16;
 800ac20:	8103      	strh	r3, [r0, #8]
  }
  
  return HAL_OK; 
}
 800ac22:	2000      	movs	r0, #0
 800ac24:	bd30      	pop	{r4, r5, pc}

0800ac26 <PCD_WritePMA>:
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void PCD_WritePMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 800ac26:	3301      	adds	r3, #1
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 800ac28:	f500 6080 	add.w	r0, r0, #1024	; 0x400
{
 800ac2c:	b510      	push	{r4, lr}
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 800ac2e:	105b      	asrs	r3, r3, #1
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 800ac30:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (i = n; i != 0; i--)
 800ac34:	2400      	movs	r4, #0
 800ac36:	42a3      	cmp	r3, r4
 800ac38:	d005      	beq.n	800ac46 <PCD_WritePMA+0x20>
 800ac3a:	f831 0b02 	ldrh.w	r0, [r1], #2
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
 800ac3e:	f822 0024 	strh.w	r0, [r2, r4, lsl #2]
 800ac42:	3401      	adds	r4, #1
 800ac44:	e7f7      	b.n	800ac36 <PCD_WritePMA+0x10>
    pdwVal++;
    pbUsrBuf++;
  }
}
 800ac46:	bd10      	pop	{r4, pc}

0800ac48 <PCD_ReadPMA>:
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void PCD_ReadPMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
 800ac48:	3301      	adds	r3, #1
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 800ac4a:	f500 6080 	add.w	r0, r0, #1024	; 0x400
{
 800ac4e:	b510      	push	{r4, lr}
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
 800ac50:	105b      	asrs	r3, r3, #1
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 800ac52:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (i = n; i != 0; i--)
 800ac56:	2400      	movs	r4, #0
 800ac58:	42a3      	cmp	r3, r4
 800ac5a:	d005      	beq.n	800ac68 <PCD_ReadPMA+0x20>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 800ac5c:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 800ac60:	f821 0014 	strh.w	r0, [r1, r4, lsl #1]
 800ac64:	3401      	adds	r4, #1
 800ac66:	e7f7      	b.n	800ac58 <PCD_ReadPMA+0x10>
    pbUsrBuf++;
  }
}
 800ac68:	bd10      	pop	{r4, pc}

0800ac6a <HAL_PCDEx_SetConnectionState>:
  * @param  hpcd: PCD handle
  * @param  state: Device state
  * @retval None
  */
 __weak void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
{
 800ac6a:	4770      	bx	lr

0800ac6c <I2C_TransferConfig>:
  *     @arg I2C_GENERATE_START_READ: Generate Restart for read request.
  *     @arg I2C_GENERATE_START_WRITE: Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800ac6c:	b530      	push	{r4, r5, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));
    
  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 800ac6e:	6805      	ldr	r5, [r0, #0]
 800ac70:	4c06      	ldr	r4, [pc, #24]	; (800ac8c <I2C_TransferConfig+0x20>)
 800ac72:	6868      	ldr	r0, [r5, #4]
 800ac74:	4004      	ands	r4, r0
 800ac76:	9803      	ldr	r0, [sp, #12]
 800ac78:	4320      	orrs	r0, r4
 800ac7a:	4303      	orrs	r3, r0
 800ac7c:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800ac80:	430b      	orrs	r3, r1
  
  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
  
  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 800ac82:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
            (uint32_t)Mode | (uint32_t)Request);
  
  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;  
 800ac86:	606a      	str	r2, [r5, #4]
 800ac88:	bd30      	pop	{r4, r5, pc}
 800ac8a:	bf00      	nop
 800ac8c:	fc009800 	.word	0xfc009800

0800ac90 <I2C_IsAcknowledgeFailed>:
{
 800ac90:	b570      	push	{r4, r5, r6, lr}
 800ac92:	4604      	mov	r4, r0
 800ac94:	460d      	mov	r5, r1
  tickstart = HAL_GetTick();
 800ac96:	f7fe ff4b 	bl	8009b30 <HAL_GetTick>
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ac9a:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800ac9c:	4606      	mov	r6, r0
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ac9e:	6998      	ldr	r0, [r3, #24]
 800aca0:	f010 0010 	ands.w	r0, r0, #16
 800aca4:	d039      	beq.n	800ad1a <I2C_IsAcknowledgeFailed+0x8a>
    if((hi2c->State == HAL_I2C_STATE_MASTER_BUSY_TX) || (hi2c->State == HAL_I2C_STATE_MEM_BUSY_TX)
 800aca6:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 800acaa:	2a12      	cmp	r2, #18
 800acac:	d007      	beq.n	800acbe <I2C_IsAcknowledgeFailed+0x2e>
 800acae:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 800acb2:	2a52      	cmp	r2, #82	; 0x52
 800acb4:	d003      	beq.n	800acbe <I2C_IsAcknowledgeFailed+0x2e>
       || (hi2c->State == HAL_I2C_STATE_MEM_BUSY_RX))
 800acb6:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 800acba:	2a62      	cmp	r2, #98	; 0x62
 800acbc:	d112      	bne.n	800ace4 <I2C_IsAcknowledgeFailed+0x54>
      if((hi2c->Instance->CR2 & I2C_AUTOEND_MODE) != I2C_AUTOEND_MODE)
 800acbe:	685a      	ldr	r2, [r3, #4]
 800acc0:	0190      	lsls	r0, r2, #6
 800acc2:	d40f      	bmi.n	800ace4 <I2C_IsAcknowledgeFailed+0x54>
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800acc4:	685a      	ldr	r2, [r3, #4]
 800acc6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800acca:	605a      	str	r2, [r3, #4]
 800accc:	e00a      	b.n	800ace4 <I2C_IsAcknowledgeFailed+0x54>
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800acce:	699a      	ldr	r2, [r3, #24]
 800acd0:	0692      	lsls	r2, r2, #26
 800acd2:	d411      	bmi.n	800acf8 <I2C_IsAcknowledgeFailed+0x68>
      if(Timeout != HAL_MAX_DELAY)
 800acd4:	1c69      	adds	r1, r5, #1
 800acd6:	d0fa      	beq.n	800acce <I2C_IsAcknowledgeFailed+0x3e>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800acd8:	b135      	cbz	r5, 800ace8 <I2C_IsAcknowledgeFailed+0x58>
 800acda:	f7fe ff29 	bl	8009b30 <HAL_GetTick>
 800acde:	1b80      	subs	r0, r0, r6
 800ace0:	4285      	cmp	r5, r0
 800ace2:	d301      	bcc.n	800ace8 <I2C_IsAcknowledgeFailed+0x58>
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ace4:	6823      	ldr	r3, [r4, #0]
 800ace6:	e7f2      	b.n	800acce <I2C_IsAcknowledgeFailed+0x3e>
          hi2c->State= HAL_I2C_STATE_READY;
 800ace8:	2301      	movs	r3, #1
 800acea:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hi2c);
 800acee:	2300      	movs	r3, #0
 800acf0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          return HAL_TIMEOUT;
 800acf4:	2003      	movs	r0, #3
 800acf6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800acf8:	2210      	movs	r2, #16
 800acfa:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800acfc:	2220      	movs	r2, #32
 800acfe:	61da      	str	r2, [r3, #28]
    __HAL_I2C_RESET_CR2(hi2c);
 800ad00:	6859      	ldr	r1, [r3, #4]
 800ad02:	4a06      	ldr	r2, [pc, #24]	; (800ad1c <I2C_IsAcknowledgeFailed+0x8c>)
 800ad04:	400a      	ands	r2, r1
 800ad06:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800ad08:	2304      	movs	r3, #4
 800ad0a:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
    hi2c->State= HAL_I2C_STATE_READY;
 800ad0e:	2001      	movs	r0, #1
    __HAL_UNLOCK(hi2c);
 800ad10:	2300      	movs	r3, #0
    hi2c->State= HAL_I2C_STATE_READY;
 800ad12:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    __HAL_UNLOCK(hi2c);
 800ad16:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 800ad1a:	bd70      	pop	{r4, r5, r6, pc}
 800ad1c:	fe00e800 	.word	0xfe00e800

0800ad20 <I2C_WaitOnFlagUntilTimeout>:
{  
 800ad20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad24:	4604      	mov	r4, r0
 800ad26:	460e      	mov	r6, r1
 800ad28:	4690      	mov	r8, r2
 800ad2a:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 800ad2c:	f7fe ff00 	bl	8009b30 <HAL_GetTick>
 800ad30:	4607      	mov	r7, r0
  if(Status == RESET)
 800ad32:	f1b8 0f00 	cmp.w	r8, #0
 800ad36:	d125      	bne.n	800ad84 <I2C_WaitOnFlagUntilTimeout+0x64>
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800ad38:	6822      	ldr	r2, [r4, #0]
 800ad3a:	6993      	ldr	r3, [r2, #24]
 800ad3c:	ea36 0303 	bics.w	r3, r6, r3
 800ad40:	d00e      	beq.n	800ad60 <I2C_WaitOnFlagUntilTimeout+0x40>
      if(Timeout != HAL_MAX_DELAY)
 800ad42:	1c69      	adds	r1, r5, #1
 800ad44:	d0f9      	beq.n	800ad3a <I2C_WaitOnFlagUntilTimeout+0x1a>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800ad46:	b17d      	cbz	r5, 800ad68 <I2C_WaitOnFlagUntilTimeout+0x48>
 800ad48:	f7fe fef2 	bl	8009b30 <HAL_GetTick>
 800ad4c:	1bc0      	subs	r0, r0, r7
 800ad4e:	4285      	cmp	r5, r0
 800ad50:	d2f2      	bcs.n	800ad38 <I2C_WaitOnFlagUntilTimeout+0x18>
 800ad52:	e009      	b.n	800ad68 <I2C_WaitOnFlagUntilTimeout+0x48>
      if(Timeout != HAL_MAX_DELAY)
 800ad54:	1c6b      	adds	r3, r5, #1
 800ad56:	d106      	bne.n	800ad66 <I2C_WaitOnFlagUntilTimeout+0x46>
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) != RESET)
 800ad58:	6993      	ldr	r3, [r2, #24]
 800ad5a:	ea36 0303 	bics.w	r3, r6, r3
 800ad5e:	d0f9      	beq.n	800ad54 <I2C_WaitOnFlagUntilTimeout+0x34>
  return HAL_OK;
 800ad60:	2000      	movs	r0, #0
 800ad62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800ad66:	b945      	cbnz	r5, 800ad7a <I2C_WaitOnFlagUntilTimeout+0x5a>
          hi2c->State= HAL_I2C_STATE_READY;
 800ad68:	2301      	movs	r3, #1
 800ad6a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hi2c);
 800ad6e:	2300      	movs	r3, #0
 800ad70:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          return HAL_TIMEOUT;
 800ad74:	2003      	movs	r0, #3
 800ad76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800ad7a:	f7fe fed9 	bl	8009b30 <HAL_GetTick>
 800ad7e:	1bc0      	subs	r0, r0, r7
 800ad80:	4285      	cmp	r5, r0
 800ad82:	d3f1      	bcc.n	800ad68 <I2C_WaitOnFlagUntilTimeout+0x48>
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) != RESET)
 800ad84:	6822      	ldr	r2, [r4, #0]
 800ad86:	e7e7      	b.n	800ad58 <I2C_WaitOnFlagUntilTimeout+0x38>

0800ad88 <I2C_WaitOnSTOPFlagUntilTimeout>:
{  
 800ad88:	b570      	push	{r4, r5, r6, lr}
 800ad8a:	4604      	mov	r4, r0
 800ad8c:	460d      	mov	r5, r1
  tickstart = HAL_GetTick();
 800ad8e:	f7fe fecf 	bl	8009b30 <HAL_GetTick>
 800ad92:	4606      	mov	r6, r0
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ad94:	6823      	ldr	r3, [r4, #0]
 800ad96:	699b      	ldr	r3, [r3, #24]
 800ad98:	069b      	lsls	r3, r3, #26
 800ad9a:	d419      	bmi.n	800add0 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout) != HAL_OK)
 800ad9c:	4629      	mov	r1, r5
 800ad9e:	4620      	mov	r0, r4
 800ada0:	f7ff ff76 	bl	800ac90 <I2C_IsAcknowledgeFailed>
 800ada4:	b9b0      	cbnz	r0, 800add4 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800ada6:	b96d      	cbnz	r5, 800adc4 <I2C_WaitOnSTOPFlagUntilTimeout+0x3c>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ada8:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800adac:	f043 0320 	orr.w	r3, r3, #32
 800adb0:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
      hi2c->State= HAL_I2C_STATE_READY;
 800adb4:	2301      	movs	r3, #1
 800adb6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_UNLOCK(hi2c);
 800adba:	2300      	movs	r3, #0
 800adbc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 800adc0:	2003      	movs	r0, #3
 800adc2:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800adc4:	f7fe feb4 	bl	8009b30 <HAL_GetTick>
 800adc8:	1b80      	subs	r0, r0, r6
 800adca:	4285      	cmp	r5, r0
 800adcc:	d2e2      	bcs.n	800ad94 <I2C_WaitOnSTOPFlagUntilTimeout+0xc>
 800adce:	e7eb      	b.n	800ada8 <I2C_WaitOnSTOPFlagUntilTimeout+0x20>
  return HAL_OK;
 800add0:	2000      	movs	r0, #0
 800add2:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800add4:	2001      	movs	r0, #1
}
 800add6:	bd70      	pop	{r4, r5, r6, pc}

0800add8 <I2C_WaitOnTXISFlagUntilTimeout>:
{  
 800add8:	b570      	push	{r4, r5, r6, lr}
 800adda:	4604      	mov	r4, r0
 800addc:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 800adde:	f7fe fea7 	bl	8009b30 <HAL_GetTick>
 800ade2:	4606      	mov	r6, r0
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800ade4:	6823      	ldr	r3, [r4, #0]
 800ade6:	699b      	ldr	r3, [r3, #24]
 800ade8:	079b      	lsls	r3, r3, #30
 800adea:	d41b      	bmi.n	800ae24 <I2C_WaitOnTXISFlagUntilTimeout+0x4c>
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout) != HAL_OK)
 800adec:	4629      	mov	r1, r5
 800adee:	4620      	mov	r0, r4
 800adf0:	f7ff ff4e 	bl	800ac90 <I2C_IsAcknowledgeFailed>
 800adf4:	b9c0      	cbnz	r0, 800ae28 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
    if(Timeout != HAL_MAX_DELAY)
 800adf6:	1c6a      	adds	r2, r5, #1
 800adf8:	d0f4      	beq.n	800ade4 <I2C_WaitOnTXISFlagUntilTimeout+0xc>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800adfa:	b96d      	cbnz	r5, 800ae18 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800adfc:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800ae00:	f043 0320 	orr.w	r3, r3, #32
 800ae04:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
      hi2c->State= HAL_I2C_STATE_READY;
 800ae08:	2301      	movs	r3, #1
 800ae0a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_UNLOCK(hi2c);
 800ae0e:	2300      	movs	r3, #0
 800ae10:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 800ae14:	2003      	movs	r0, #3
 800ae16:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800ae18:	f7fe fe8a 	bl	8009b30 <HAL_GetTick>
 800ae1c:	1b80      	subs	r0, r0, r6
 800ae1e:	4285      	cmp	r5, r0
 800ae20:	d2e0      	bcs.n	800ade4 <I2C_WaitOnTXISFlagUntilTimeout+0xc>
 800ae22:	e7eb      	b.n	800adfc <I2C_WaitOnTXISFlagUntilTimeout+0x24>
  return HAL_OK;      
 800ae24:	2000      	movs	r0, #0
 800ae26:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800ae28:	2001      	movs	r0, #1
}
 800ae2a:	bd70      	pop	{r4, r5, r6, pc}

0800ae2c <I2C_RequestMemoryWrite>:
{
 800ae2c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ae2e:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800ae30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
{
 800ae34:	4604      	mov	r4, r0
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800ae36:	9300      	str	r3, [sp, #0]
{
 800ae38:	4615      	mov	r5, r2
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800ae3a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ae3e:	b2f2      	uxtb	r2, r6
 800ae40:	f7ff ff14 	bl	800ac6c <I2C_TransferConfig>
  if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 800ae44:	9906      	ldr	r1, [sp, #24]
 800ae46:	4620      	mov	r0, r4
 800ae48:	f7ff ffc6 	bl	800add8 <I2C_WaitOnTXISFlagUntilTimeout>
 800ae4c:	b128      	cbz	r0, 800ae5a <I2C_RequestMemoryWrite+0x2e>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ae4e:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800ae52:	2b04      	cmp	r3, #4
 800ae54:	d10d      	bne.n	800ae72 <I2C_RequestMemoryWrite+0x46>
      return HAL_ERROR;
 800ae56:	2001      	movs	r0, #1
 800ae58:	e017      	b.n	800ae8a <I2C_RequestMemoryWrite+0x5e>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ae5a:	2e01      	cmp	r6, #1
 800ae5c:	6823      	ldr	r3, [r4, #0]
 800ae5e:	d10a      	bne.n	800ae76 <I2C_RequestMemoryWrite+0x4a>
    hi2c->Instance->TXDR = __HAL_I2C_MEM_ADD_LSB(MemAddress);  
 800ae60:	b2ed      	uxtb	r5, r5
 800ae62:	629d      	str	r5, [r3, #40]	; 0x28
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
 800ae64:	9b06      	ldr	r3, [sp, #24]
 800ae66:	2200      	movs	r2, #0
 800ae68:	2180      	movs	r1, #128	; 0x80
 800ae6a:	4620      	mov	r0, r4
 800ae6c:	f7ff ff58 	bl	800ad20 <I2C_WaitOnFlagUntilTimeout>
 800ae70:	b158      	cbz	r0, 800ae8a <I2C_RequestMemoryWrite+0x5e>
      return HAL_TIMEOUT;
 800ae72:	2003      	movs	r0, #3
 800ae74:	e009      	b.n	800ae8a <I2C_RequestMemoryWrite+0x5e>
    hi2c->Instance->TXDR = __HAL_I2C_MEM_ADD_MSB(MemAddress); 
 800ae76:	0a2a      	lsrs	r2, r5, #8
 800ae78:	629a      	str	r2, [r3, #40]	; 0x28
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 800ae7a:	9906      	ldr	r1, [sp, #24]
 800ae7c:	4620      	mov	r0, r4
 800ae7e:	f7ff ffab 	bl	800add8 <I2C_WaitOnTXISFlagUntilTimeout>
 800ae82:	2800      	cmp	r0, #0
 800ae84:	d1e3      	bne.n	800ae4e <I2C_RequestMemoryWrite+0x22>
    hi2c->Instance->TXDR = __HAL_I2C_MEM_ADD_LSB(MemAddress);  
 800ae86:	6823      	ldr	r3, [r4, #0]
 800ae88:	e7ea      	b.n	800ae60 <I2C_RequestMemoryWrite+0x34>
}
 800ae8a:	b002      	add	sp, #8
 800ae8c:	bd70      	pop	{r4, r5, r6, pc}

0800ae8e <I2C_RequestMemoryRead>:
{
 800ae8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ae90:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800ae92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
{
 800ae96:	4604      	mov	r4, r0
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800ae98:	9300      	str	r3, [sp, #0]
{
 800ae9a:	4615      	mov	r5, r2
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	b2f2      	uxtb	r2, r6
 800aea0:	f7ff fee4 	bl	800ac6c <I2C_TransferConfig>
  if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 800aea4:	9906      	ldr	r1, [sp, #24]
 800aea6:	4620      	mov	r0, r4
 800aea8:	f7ff ff96 	bl	800add8 <I2C_WaitOnTXISFlagUntilTimeout>
 800aeac:	b128      	cbz	r0, 800aeba <I2C_RequestMemoryRead+0x2c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800aeae:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800aeb2:	2b04      	cmp	r3, #4
 800aeb4:	d10d      	bne.n	800aed2 <I2C_RequestMemoryRead+0x44>
      return HAL_ERROR;
 800aeb6:	2001      	movs	r0, #1
 800aeb8:	e017      	b.n	800aeea <I2C_RequestMemoryRead+0x5c>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800aeba:	2e01      	cmp	r6, #1
 800aebc:	6823      	ldr	r3, [r4, #0]
 800aebe:	d10a      	bne.n	800aed6 <I2C_RequestMemoryRead+0x48>
    hi2c->Instance->TXDR = __HAL_I2C_MEM_ADD_LSB(MemAddress);  
 800aec0:	b2ed      	uxtb	r5, r5
 800aec2:	629d      	str	r5, [r3, #40]	; 0x28
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout) != HAL_OK)      
 800aec4:	9b06      	ldr	r3, [sp, #24]
 800aec6:	2200      	movs	r2, #0
 800aec8:	2140      	movs	r1, #64	; 0x40
 800aeca:	4620      	mov	r0, r4
 800aecc:	f7ff ff28 	bl	800ad20 <I2C_WaitOnFlagUntilTimeout>
 800aed0:	b158      	cbz	r0, 800aeea <I2C_RequestMemoryRead+0x5c>
      return HAL_TIMEOUT;
 800aed2:	2003      	movs	r0, #3
 800aed4:	e009      	b.n	800aeea <I2C_RequestMemoryRead+0x5c>
    hi2c->Instance->TXDR = __HAL_I2C_MEM_ADD_MSB(MemAddress); 
 800aed6:	0a2a      	lsrs	r2, r5, #8
 800aed8:	629a      	str	r2, [r3, #40]	; 0x28
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 800aeda:	9906      	ldr	r1, [sp, #24]
 800aedc:	4620      	mov	r0, r4
 800aede:	f7ff ff7b 	bl	800add8 <I2C_WaitOnTXISFlagUntilTimeout>
 800aee2:	2800      	cmp	r0, #0
 800aee4:	d1e3      	bne.n	800aeae <I2C_RequestMemoryRead+0x20>
    hi2c->Instance->TXDR = __HAL_I2C_MEM_ADD_LSB(MemAddress);  
 800aee6:	6823      	ldr	r3, [r4, #0]
 800aee8:	e7ea      	b.n	800aec0 <I2C_RequestMemoryRead+0x32>
}
 800aeea:	b002      	add	sp, #8
 800aeec:	bd70      	pop	{r4, r5, r6, pc}

0800aeee <HAL_I2C_MspInit>:
 800aeee:	4770      	bx	lr

0800aef0 <HAL_I2C_Init>:
{ 
 800aef0:	b510      	push	{r4, lr}
  if(hi2c == NULL)
 800aef2:	4604      	mov	r4, r0
 800aef4:	2800      	cmp	r0, #0
 800aef6:	d041      	beq.n	800af7c <HAL_I2C_Init+0x8c>
  if(hi2c->State == HAL_I2C_STATE_RESET)
 800aef8:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800aefc:	b90b      	cbnz	r3, 800af02 <HAL_I2C_Init+0x12>
    HAL_I2C_MspInit(hi2c);
 800aefe:	f7ff fff6 	bl	800aeee <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800af02:	2302      	movs	r3, #2
 800af04:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_I2C_DISABLE(hi2c);
 800af08:	6823      	ldr	r3, [r4, #0]
 800af0a:	68e1      	ldr	r1, [r4, #12]
 800af0c:	681a      	ldr	r2, [r3, #0]
 800af0e:	f022 0201 	bic.w	r2, r2, #1
 800af12:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800af14:	6862      	ldr	r2, [r4, #4]
 800af16:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800af1a:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800af1c:	689a      	ldr	r2, [r3, #8]
 800af1e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800af22:	609a      	str	r2, [r3, #8]
  if(hi2c->Init.OwnAddress1 != 0)
 800af24:	68a2      	ldr	r2, [r4, #8]
 800af26:	b142      	cbz	r2, 800af3a <HAL_I2C_Init+0x4a>
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800af28:	2901      	cmp	r1, #1
 800af2a:	d103      	bne.n	800af34 <HAL_I2C_Init+0x44>
      hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800af2c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800af30:	609a      	str	r2, [r3, #8]
 800af32:	e007      	b.n	800af44 <HAL_I2C_Init+0x54>
      hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800af34:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800af38:	609a      	str	r2, [r3, #8]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800af3a:	2902      	cmp	r1, #2
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800af3c:	bf04      	itt	eq
 800af3e:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 800af42:	605a      	streq	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800af44:	685a      	ldr	r2, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800af46:	6921      	ldr	r1, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800af48:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800af4c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800af50:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800af52:	6962      	ldr	r2, [r4, #20]
 800af54:	430a      	orrs	r2, r1
 800af56:	69a1      	ldr	r1, [r4, #24]
 800af58:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800af5c:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800af5e:	69e1      	ldr	r1, [r4, #28]
 800af60:	6a22      	ldr	r2, [r4, #32]
 800af62:	430a      	orrs	r2, r1
 800af64:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800af66:	681a      	ldr	r2, [r3, #0]
 800af68:	f042 0201 	orr.w	r2, r2, #1
 800af6c:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800af6e:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 800af70:	2301      	movs	r3, #1
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800af72:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
  hi2c->State = HAL_I2C_STATE_READY;
 800af76:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 800af7a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800af7c:	2001      	movs	r0, #1
}
 800af7e:	bd10      	pop	{r4, pc}

0800af80 <HAL_I2C_MspDeInit>:
 800af80:	4770      	bx	lr

0800af82 <HAL_I2C_DeInit>:
{
 800af82:	b510      	push	{r4, lr}
  if(hi2c == NULL)
 800af84:	4604      	mov	r4, r0
 800af86:	b188      	cbz	r0, 800afac <HAL_I2C_DeInit+0x2a>
  __HAL_I2C_DISABLE(hi2c);
 800af88:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800af8a:	2302      	movs	r3, #2
 800af8c:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  __HAL_I2C_DISABLE(hi2c);
 800af90:	6813      	ldr	r3, [r2, #0]
 800af92:	f023 0301 	bic.w	r3, r3, #1
 800af96:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 800af98:	f7ff fff2 	bl	800af80 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800af9c:	2000      	movs	r0, #0
 800af9e:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
  __HAL_UNLOCK(hi2c);
 800afa2:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  hi2c->State = HAL_I2C_STATE_RESET;
 800afa6:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
  return HAL_OK;
 800afaa:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800afac:	2001      	movs	r0, #1
}
 800afae:	bd10      	pop	{r4, pc}

0800afb0 <HAL_I2C_Mem_Write>:
{
 800afb0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(hi2c->State == HAL_I2C_STATE_READY)
 800afb4:	f890 5035 	ldrb.w	r5, [r0, #53]	; 0x35
{
 800afb8:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 800afbc:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
 800afc0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
  if(hi2c->State == HAL_I2C_STATE_READY)
 800afc4:	b2ed      	uxtb	r5, r5
 800afc6:	2d01      	cmp	r5, #1
{
 800afc8:	4604      	mov	r4, r0
 800afca:	4689      	mov	r9, r1
  if(hi2c->State == HAL_I2C_STATE_READY)
 800afcc:	d17e      	bne.n	800b0cc <HAL_I2C_Mem_Write+0x11c>
    if((pData == NULL) || (Size == 0)) 
 800afce:	f1b8 0f00 	cmp.w	r8, #0
 800afd2:	d101      	bne.n	800afd8 <HAL_I2C_Mem_Write+0x28>
      return  HAL_ERROR;                                    
 800afd4:	2001      	movs	r0, #1
 800afd6:	e07a      	b.n	800b0ce <HAL_I2C_Mem_Write+0x11e>
    if((pData == NULL) || (Size == 0)) 
 800afd8:	2e00      	cmp	r6, #0
 800afda:	d0fb      	beq.n	800afd4 <HAL_I2C_Mem_Write+0x24>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800afdc:	6807      	ldr	r7, [r0, #0]
 800afde:	69bf      	ldr	r7, [r7, #24]
 800afe0:	f417 4700 	ands.w	r7, r7, #32768	; 0x8000
 800afe4:	d172      	bne.n	800b0cc <HAL_I2C_Mem_Write+0x11c>
    __HAL_LOCK(hi2c);
 800afe6:	f890 e034 	ldrb.w	lr, [r0, #52]	; 0x34
 800afea:	f1be 0f01 	cmp.w	lr, #1
 800afee:	d06d      	beq.n	800b0cc <HAL_I2C_Mem_Write+0x11c>
    hi2c->State = HAL_I2C_STATE_MEM_BUSY_TX;
 800aff0:	f04f 0e52 	mov.w	lr, #82	; 0x52
 800aff4:	f880 e035 	strb.w	lr, [r0, #53]	; 0x35
    __HAL_LOCK(hi2c);
 800aff8:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800affc:	f880 7036 	strb.w	r7, [r0, #54]	; 0x36
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout) != HAL_OK)
 800b000:	f8cd a000 	str.w	sl, [sp]
 800b004:	f7ff ff12 	bl	800ae2c <I2C_RequestMemoryWrite>
 800b008:	b120      	cbz	r0, 800b014 <HAL_I2C_Mem_Write+0x64>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b00a:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
        __HAL_UNLOCK(hi2c);
 800b00e:	f884 7034 	strb.w	r7, [r4, #52]	; 0x34
 800b012:	e041      	b.n	800b098 <HAL_I2C_Mem_Write+0xe8>
    if(Size > 255)
 800b014:	2eff      	cmp	r6, #255	; 0xff
      I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b016:	9000      	str	r0, [sp, #0]
    if(Size > 255)
 800b018:	d90a      	bls.n	800b030 <HAL_I2C_Mem_Write+0x80>
      I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b01a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b01e:	22ff      	movs	r2, #255	; 0xff
 800b020:	4649      	mov	r1, r9
 800b022:	4620      	mov	r0, r4
 800b024:	f7ff fe22 	bl	800ac6c <I2C_TransferConfig>
      Sizetmp = 255;
 800b028:	25ff      	movs	r5, #255	; 0xff
 800b02a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800b02e:	e023      	b.n	800b078 <HAL_I2C_Mem_Write+0xc8>
      I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b030:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b034:	b2f2      	uxtb	r2, r6
 800b036:	4649      	mov	r1, r9
 800b038:	4620      	mov	r0, r4
 800b03a:	f7ff fe17 	bl	800ac6c <I2C_TransferConfig>
      Sizetmp = Size;
 800b03e:	4635      	mov	r5, r6
 800b040:	e7f3      	b.n	800b02a <HAL_I2C_Mem_Write+0x7a>
      hi2c->Instance->TXDR = (*pData++);
 800b042:	6823      	ldr	r3, [r4, #0]
 800b044:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 800b048:	629a      	str	r2, [r3, #40]	; 0x28
      Size--;
 800b04a:	3e01      	subs	r6, #1
      if((Sizetmp == 0)&&(Size!=0))
 800b04c:	3d01      	subs	r5, #1
      Size--;
 800b04e:	b2b6      	uxth	r6, r6
      if((Sizetmp == 0)&&(Size!=0))
 800b050:	d119      	bne.n	800b086 <HAL_I2C_Mem_Write+0xd6>
 800b052:	b1d6      	cbz	r6, 800b08a <HAL_I2C_Mem_Write+0xda>
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
 800b054:	4653      	mov	r3, sl
 800b056:	462a      	mov	r2, r5
 800b058:	2180      	movs	r1, #128	; 0x80
 800b05a:	4620      	mov	r0, r4
 800b05c:	f7ff fe60 	bl	800ad20 <I2C_WaitOnFlagUntilTimeout>
 800b060:	b9e0      	cbnz	r0, 800b09c <HAL_I2C_Mem_Write+0xec>
        if(Size > 255)
 800b062:	2eff      	cmp	r6, #255	; 0xff
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b064:	9500      	str	r5, [sp, #0]
        if(Size > 255)
 800b066:	d91b      	bls.n	800b0a0 <HAL_I2C_Mem_Write+0xf0>
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b068:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b06c:	22ff      	movs	r2, #255	; 0xff
 800b06e:	4649      	mov	r1, r9
 800b070:	4620      	mov	r0, r4
 800b072:	f7ff fdfb 	bl	800ac6c <I2C_TransferConfig>
          Sizetmp = 255;
 800b076:	25ff      	movs	r5, #255	; 0xff
      if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 800b078:	4651      	mov	r1, sl
 800b07a:	4620      	mov	r0, r4
 800b07c:	f7ff feac 	bl	800add8 <I2C_WaitOnTXISFlagUntilTimeout>
 800b080:	2800      	cmp	r0, #0
 800b082:	d0de      	beq.n	800b042 <HAL_I2C_Mem_Write+0x92>
 800b084:	e006      	b.n	800b094 <HAL_I2C_Mem_Write+0xe4>
    }while(Size > 0);
 800b086:	2e00      	cmp	r6, #0
 800b088:	d1f6      	bne.n	800b078 <HAL_I2C_Mem_Write+0xc8>
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, I2C_TIMEOUT_STOPF) != HAL_OK)
 800b08a:	2119      	movs	r1, #25
 800b08c:	4620      	mov	r0, r4
 800b08e:	f7ff fe7b 	bl	800ad88 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b092:	b170      	cbz	r0, 800b0b2 <HAL_I2C_Mem_Write+0x102>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b094:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800b098:	2b04      	cmp	r3, #4
 800b09a:	d09b      	beq.n	800afd4 <HAL_I2C_Mem_Write+0x24>
          return HAL_TIMEOUT;
 800b09c:	2003      	movs	r0, #3
 800b09e:	e016      	b.n	800b0ce <HAL_I2C_Mem_Write+0x11e>
          I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b0a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b0a4:	b2f2      	uxtb	r2, r6
 800b0a6:	4649      	mov	r1, r9
 800b0a8:	4620      	mov	r0, r4
 800b0aa:	f7ff fddf 	bl	800ac6c <I2C_TransferConfig>
          Sizetmp = Size;
 800b0ae:	4635      	mov	r5, r6
 800b0b0:	e7e2      	b.n	800b078 <HAL_I2C_Mem_Write+0xc8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b0b2:	6823      	ldr	r3, [r4, #0]
 800b0b4:	2220      	movs	r2, #32
 800b0b6:	61da      	str	r2, [r3, #28]
    __HAL_I2C_RESET_CR2(hi2c);
 800b0b8:	6859      	ldr	r1, [r3, #4]
 800b0ba:	4a06      	ldr	r2, [pc, #24]	; (800b0d4 <HAL_I2C_Mem_Write+0x124>)
 800b0bc:	400a      	ands	r2, r1
 800b0be:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY; 	  
 800b0c0:	2301      	movs	r3, #1
 800b0c2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_UNLOCK(hi2c);
 800b0c6:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    return HAL_OK;
 800b0ca:	e000      	b.n	800b0ce <HAL_I2C_Mem_Write+0x11e>
    return HAL_BUSY;
 800b0cc:	2002      	movs	r0, #2
}
 800b0ce:	b002      	add	sp, #8
 800b0d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0d4:	fe00e800 	.word	0xfe00e800

0800b0d8 <HAL_I2C_Mem_Read>:
{
 800b0d8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(hi2c->State == HAL_I2C_STATE_READY)
 800b0dc:	f890 5035 	ldrb.w	r5, [r0, #53]	; 0x35
{
 800b0e0:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 800b0e4:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
 800b0e8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
  if(hi2c->State == HAL_I2C_STATE_READY)
 800b0ec:	b2ed      	uxtb	r5, r5
 800b0ee:	2d01      	cmp	r5, #1
{
 800b0f0:	4604      	mov	r4, r0
 800b0f2:	4689      	mov	r9, r1
  if(hi2c->State == HAL_I2C_STATE_READY)
 800b0f4:	f040 8083 	bne.w	800b1fe <HAL_I2C_Mem_Read+0x126>
    if((pData == NULL) || (Size == 0)) 
 800b0f8:	f1b8 0f00 	cmp.w	r8, #0
 800b0fc:	d101      	bne.n	800b102 <HAL_I2C_Mem_Read+0x2a>
      return  HAL_ERROR;                                    
 800b0fe:	2001      	movs	r0, #1
 800b100:	e07e      	b.n	800b200 <HAL_I2C_Mem_Read+0x128>
    if((pData == NULL) || (Size == 0)) 
 800b102:	2e00      	cmp	r6, #0
 800b104:	d0fb      	beq.n	800b0fe <HAL_I2C_Mem_Read+0x26>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800b106:	6807      	ldr	r7, [r0, #0]
 800b108:	69bf      	ldr	r7, [r7, #24]
 800b10a:	f417 4700 	ands.w	r7, r7, #32768	; 0x8000
 800b10e:	d176      	bne.n	800b1fe <HAL_I2C_Mem_Read+0x126>
    __HAL_LOCK(hi2c);
 800b110:	f890 e034 	ldrb.w	lr, [r0, #52]	; 0x34
 800b114:	f1be 0f01 	cmp.w	lr, #1
 800b118:	d071      	beq.n	800b1fe <HAL_I2C_Mem_Read+0x126>
    hi2c->State = HAL_I2C_STATE_MEM_BUSY_RX;
 800b11a:	f04f 0e62 	mov.w	lr, #98	; 0x62
 800b11e:	f880 e035 	strb.w	lr, [r0, #53]	; 0x35
    __HAL_LOCK(hi2c);
 800b122:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b126:	f880 7036 	strb.w	r7, [r0, #54]	; 0x36
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout) != HAL_OK)
 800b12a:	f8cd a000 	str.w	sl, [sp]
 800b12e:	f7ff feae 	bl	800ae8e <I2C_RequestMemoryRead>
 800b132:	b120      	cbz	r0, 800b13e <HAL_I2C_Mem_Read+0x66>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b134:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
        __HAL_UNLOCK(hi2c);
 800b138:	f884 7034 	strb.w	r7, [r4, #52]	; 0x34
 800b13c:	e04e      	b.n	800b1dc <HAL_I2C_Mem_Read+0x104>
 800b13e:	f44f 5310 	mov.w	r3, #9216	; 0x2400
    if(Size > 255)
 800b142:	2eff      	cmp	r6, #255	; 0xff
      I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800b144:	9300      	str	r3, [sp, #0]
    if(Size > 255)
 800b146:	d90a      	bls.n	800b15e <HAL_I2C_Mem_Read+0x86>
      I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800b148:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b14c:	22ff      	movs	r2, #255	; 0xff
 800b14e:	4649      	mov	r1, r9
 800b150:	4620      	mov	r0, r4
 800b152:	f7ff fd8b 	bl	800ac6c <I2C_TransferConfig>
      Sizetmp = 255;
 800b156:	25ff      	movs	r5, #255	; 0xff
 800b158:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800b15c:	e023      	b.n	800b1a6 <HAL_I2C_Mem_Read+0xce>
      I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800b15e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b162:	b2f2      	uxtb	r2, r6
 800b164:	4649      	mov	r1, r9
 800b166:	4620      	mov	r0, r4
 800b168:	f7ff fd80 	bl	800ac6c <I2C_TransferConfig>
      Sizetmp = Size;
 800b16c:	4635      	mov	r5, r6
 800b16e:	e7f3      	b.n	800b158 <HAL_I2C_Mem_Read+0x80>
      (*pData++) = hi2c->Instance->RXDR;
 800b170:	6823      	ldr	r3, [r4, #0]
      Size--;   
 800b172:	3e01      	subs	r6, #1
      (*pData++) = hi2c->Instance->RXDR;
 800b174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b176:	f808 3f01 	strb.w	r3, [r8, #1]!
      if((Sizetmp == 0)&&(Size!=0))
 800b17a:	3d01      	subs	r5, #1
      Size--;   
 800b17c:	b2b6      	uxth	r6, r6
      if((Sizetmp == 0)&&(Size!=0))
 800b17e:	d124      	bne.n	800b1ca <HAL_I2C_Mem_Read+0xf2>
 800b180:	b32e      	cbz	r6, 800b1ce <HAL_I2C_Mem_Read+0xf6>
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
 800b182:	4653      	mov	r3, sl
 800b184:	462a      	mov	r2, r5
 800b186:	2180      	movs	r1, #128	; 0x80
 800b188:	4620      	mov	r0, r4
 800b18a:	f7ff fdc9 	bl	800ad20 <I2C_WaitOnFlagUntilTimeout>
 800b18e:	bb38      	cbnz	r0, 800b1e0 <HAL_I2C_Mem_Read+0x108>
        if(Size > 255)
 800b190:	2eff      	cmp	r6, #255	; 0xff
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b192:	9500      	str	r5, [sp, #0]
        if(Size > 255)
 800b194:	d910      	bls.n	800b1b8 <HAL_I2C_Mem_Read+0xe0>
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b196:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b19a:	22ff      	movs	r2, #255	; 0xff
 800b19c:	4649      	mov	r1, r9
 800b19e:	4620      	mov	r0, r4
 800b1a0:	f7ff fd64 	bl	800ac6c <I2C_TransferConfig>
          Sizetmp = 255;
 800b1a4:	25ff      	movs	r5, #255	; 0xff
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout) != HAL_OK)      
 800b1a6:	4653      	mov	r3, sl
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	2104      	movs	r1, #4
 800b1ac:	4620      	mov	r0, r4
 800b1ae:	f7ff fdb7 	bl	800ad20 <I2C_WaitOnFlagUntilTimeout>
 800b1b2:	2800      	cmp	r0, #0
 800b1b4:	d0dc      	beq.n	800b170 <HAL_I2C_Mem_Read+0x98>
 800b1b6:	e013      	b.n	800b1e0 <HAL_I2C_Mem_Read+0x108>
          I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b1b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b1bc:	b2f2      	uxtb	r2, r6
 800b1be:	4649      	mov	r1, r9
 800b1c0:	4620      	mov	r0, r4
 800b1c2:	f7ff fd53 	bl	800ac6c <I2C_TransferConfig>
          Sizetmp = Size;
 800b1c6:	4635      	mov	r5, r6
 800b1c8:	e7ed      	b.n	800b1a6 <HAL_I2C_Mem_Read+0xce>
    }while(Size > 0);
 800b1ca:	2e00      	cmp	r6, #0
 800b1cc:	d1eb      	bne.n	800b1a6 <HAL_I2C_Mem_Read+0xce>
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, I2C_TIMEOUT_STOPF) != HAL_OK)
 800b1ce:	2119      	movs	r1, #25
 800b1d0:	4620      	mov	r0, r4
 800b1d2:	f7ff fdd9 	bl	800ad88 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b1d6:	b128      	cbz	r0, 800b1e4 <HAL_I2C_Mem_Read+0x10c>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b1d8:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800b1dc:	2b04      	cmp	r3, #4
 800b1de:	d08e      	beq.n	800b0fe <HAL_I2C_Mem_Read+0x26>
        return HAL_TIMEOUT;
 800b1e0:	2003      	movs	r0, #3
 800b1e2:	e00d      	b.n	800b200 <HAL_I2C_Mem_Read+0x128>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b1e4:	6823      	ldr	r3, [r4, #0]
 800b1e6:	2220      	movs	r2, #32
 800b1e8:	61da      	str	r2, [r3, #28]
    __HAL_I2C_RESET_CR2(hi2c);
 800b1ea:	6859      	ldr	r1, [r3, #4]
 800b1ec:	4a06      	ldr	r2, [pc, #24]	; (800b208 <HAL_I2C_Mem_Read+0x130>)
 800b1ee:	400a      	ands	r2, r1
 800b1f0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800b1f2:	2301      	movs	r3, #1
 800b1f4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_UNLOCK(hi2c);
 800b1f8:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    return HAL_OK;
 800b1fc:	e000      	b.n	800b200 <HAL_I2C_Mem_Read+0x128>
    return HAL_BUSY;
 800b1fe:	2002      	movs	r0, #2
}
 800b200:	b002      	add	sp, #8
 800b202:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b206:	bf00      	nop
 800b208:	fe00e800 	.word	0xfe00e800

0800b20c <HAL_I2C_GetState>:
  return hi2c->State;
 800b20c:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 800b210:	4770      	bx	lr

0800b212 <SPI_WaitFifoStateUntilTimeout.part.1>:
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */
        
        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b212:	6803      	ldr	r3, [r0, #0]
 800b214:	685a      	ldr	r2, [r3, #4]
 800b216:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b21a:	605a      	str	r2, [r3, #4]
        
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b21c:	6842      	ldr	r2, [r0, #4]
 800b21e:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800b222:	d10a      	bne.n	800b23a <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
 800b224:	6882      	ldr	r2, [r0, #8]
 800b226:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800b22a:	d002      	beq.n	800b232 <SPI_WaitFifoStateUntilTimeout.part.1+0x20>
 800b22c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800b230:	d103      	bne.n	800b23a <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b232:	681a      	ldr	r2, [r3, #0]
 800b234:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b238:	601a      	str	r2, [r3, #0]
        }
        
        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
 800b23a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800b23c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800b240:	d107      	bne.n	800b252 <SPI_WaitFifoStateUntilTimeout.part.1+0x40>
        {
          __HAL_SPI_RESET_CRC(hspi);
 800b242:	681a      	ldr	r2, [r3, #0]
 800b244:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b248:	601a      	str	r2, [r3, #0]
 800b24a:	681a      	ldr	r2, [r3, #0]
 800b24c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b250:	601a      	str	r2, [r3, #0]
        }
        
        hspi->State = HAL_SPI_STATE_READY;
 800b252:	2301      	movs	r3, #1
 800b254:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
        
        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b258:	2300      	movs	r3, #0
 800b25a:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
      }
    }
  }
  
  return HAL_OK;      
}
 800b25e:	2003      	movs	r0, #3
 800b260:	4770      	bx	lr

0800b262 <SPI_WaitFlagStateUntilTimeout>:
{
 800b262:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b266:	4605      	mov	r5, r0
 800b268:	460f      	mov	r7, r1
 800b26a:	4616      	mov	r6, r2
 800b26c:	461c      	mov	r4, r3
  uint32_t tickstart = HAL_GetTick();
 800b26e:	f7fe fc5f 	bl	8009b30 <HAL_GetTick>
 800b272:	4680      	mov	r8, r0
  while((hspi->Instance->SR & Flag) != State)
 800b274:	682b      	ldr	r3, [r5, #0]
 800b276:	689a      	ldr	r2, [r3, #8]
 800b278:	403a      	ands	r2, r7
 800b27a:	42b2      	cmp	r2, r6
 800b27c:	d00e      	beq.n	800b29c <SPI_WaitFlagStateUntilTimeout+0x3a>
    if(Timeout != HAL_MAX_DELAY)
 800b27e:	1c62      	adds	r2, r4, #1
 800b280:	d0f9      	beq.n	800b276 <SPI_WaitFlagStateUntilTimeout+0x14>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800b282:	b924      	cbnz	r4, 800b28e <SPI_WaitFlagStateUntilTimeout+0x2c>
 800b284:	4628      	mov	r0, r5
}
 800b286:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b28a:	f7ff bfc2 	b.w	800b212 <SPI_WaitFifoStateUntilTimeout.part.1>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800b28e:	f7fe fc4f 	bl	8009b30 <HAL_GetTick>
 800b292:	ebc8 0000 	rsb	r0, r8, r0
 800b296:	4284      	cmp	r4, r0
 800b298:	d2ec      	bcs.n	800b274 <SPI_WaitFlagStateUntilTimeout+0x12>
 800b29a:	e7f3      	b.n	800b284 <SPI_WaitFlagStateUntilTimeout+0x22>
}
 800b29c:	2000      	movs	r0, #0
 800b29e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b2a2 <SPI_WaitFifoStateUntilTimeout>:
{
 800b2a2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b2a6:	4607      	mov	r7, r0
 800b2a8:	460e      	mov	r6, r1
 800b2aa:	4615      	mov	r5, r2
 800b2ac:	461c      	mov	r4, r3
  uint32_t tickstart = HAL_GetTick();
 800b2ae:	f7fe fc3f 	bl	8009b30 <HAL_GetTick>
 800b2b2:	4680      	mov	r8, r0
  while((hspi->Instance->SR & Flag) != State)
 800b2b4:	6839      	ldr	r1, [r7, #0]
 800b2b6:	688a      	ldr	r2, [r1, #8]
 800b2b8:	4032      	ands	r2, r6
 800b2ba:	42aa      	cmp	r2, r5
 800b2bc:	d015      	beq.n	800b2ea <SPI_WaitFifoStateUntilTimeout+0x48>
    if((Flag == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800b2be:	f5b6 6fc0 	cmp.w	r6, #1536	; 0x600
 800b2c2:	d104      	bne.n	800b2ce <SPI_WaitFifoStateUntilTimeout+0x2c>
 800b2c4:	b91d      	cbnz	r5, 800b2ce <SPI_WaitFifoStateUntilTimeout+0x2c>
      tmpreg = *((__IO uint8_t*)&hspi->Instance->DR);
 800b2c6:	7b0b      	ldrb	r3, [r1, #12]
 800b2c8:	b2db      	uxtb	r3, r3
 800b2ca:	f88d 3007 	strb.w	r3, [sp, #7]
    if(Timeout != HAL_MAX_DELAY)
 800b2ce:	1c63      	adds	r3, r4, #1
 800b2d0:	d0f1      	beq.n	800b2b6 <SPI_WaitFifoStateUntilTimeout+0x14>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800b2d2:	b91c      	cbnz	r4, 800b2dc <SPI_WaitFifoStateUntilTimeout+0x3a>
 800b2d4:	4638      	mov	r0, r7
 800b2d6:	f7ff ff9c 	bl	800b212 <SPI_WaitFifoStateUntilTimeout.part.1>
 800b2da:	e007      	b.n	800b2ec <SPI_WaitFifoStateUntilTimeout+0x4a>
 800b2dc:	f7fe fc28 	bl	8009b30 <HAL_GetTick>
 800b2e0:	ebc8 0000 	rsb	r0, r8, r0
 800b2e4:	4284      	cmp	r4, r0
 800b2e6:	d2e5      	bcs.n	800b2b4 <SPI_WaitFifoStateUntilTimeout+0x12>
 800b2e8:	e7f4      	b.n	800b2d4 <SPI_WaitFifoStateUntilTimeout+0x32>
  return HAL_OK;      
 800b2ea:	2000      	movs	r0, #0
}
 800b2ec:	b002      	add	sp, #8
 800b2ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b2f2 <SPI_EndRxTxTransaction>:
  * @brief This function handles the check of the RXTX or TX transaction complete.
  * @param hspi: SPI handle
  * @param Timeout : Timeout duration
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout)
{
 800b2f2:	b538      	push	{r3, r4, r5, lr}
  /* Procedure to check the transaction complete */
  if(SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout) != HAL_OK)
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	460b      	mov	r3, r1
{
 800b2f8:	460d      	mov	r5, r1
  if(SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout) != HAL_OK)
 800b2fa:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
{
 800b2fe:	4604      	mov	r4, r0
  if(SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout) != HAL_OK)
 800b300:	f7ff ffcf 	bl	800b2a2 <SPI_WaitFifoStateUntilTimeout>
 800b304:	4602      	mov	r2, r0
 800b306:	b968      	cbnz	r0, 800b324 <SPI_EndRxTxTransaction+0x32>
  {
    hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
    return HAL_TIMEOUT;
  }
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout) != HAL_OK)
 800b308:	462b      	mov	r3, r5
 800b30a:	2180      	movs	r1, #128	; 0x80
 800b30c:	4620      	mov	r0, r4
 800b30e:	f7ff ffa8 	bl	800b262 <SPI_WaitFlagStateUntilTimeout>
 800b312:	4602      	mov	r2, r0
 800b314:	b930      	cbnz	r0, 800b324 <SPI_EndRxTxTransaction+0x32>
  if(SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout) != HAL_OK) 
 800b316:	462b      	mov	r3, r5
 800b318:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800b31c:	4620      	mov	r0, r4
 800b31e:	f7ff ffc0 	bl	800b2a2 <SPI_WaitFifoStateUntilTimeout>
 800b322:	b130      	cbz	r0, 800b332 <SPI_EndRxTxTransaction+0x40>
    hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
 800b324:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
 800b328:	f043 0320 	orr.w	r3, r3, #32
 800b32c:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
    return HAL_TIMEOUT;
 800b330:	2003      	movs	r0, #3
  {
    hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
    return HAL_TIMEOUT;
  }
  return HAL_OK;
}
 800b332:	bd38      	pop	{r3, r4, r5, pc}

0800b334 <HAL_SPI_MspInit>:
 800b334:	4770      	bx	lr

0800b336 <HAL_SPI_Init>:
{
 800b336:	b570      	push	{r4, r5, r6, lr}
  if(hspi == NULL)
 800b338:	4604      	mov	r4, r0
 800b33a:	2800      	cmp	r0, #0
 800b33c:	d04c      	beq.n	800b3d8 <HAL_SPI_Init+0xa2>
  hspi->State = HAL_SPI_STATE_BUSY;
 800b33e:	2302      	movs	r3, #2
 800b340:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  HAL_SPI_MspInit(hspi);
 800b344:	f7ff fff6 	bl	800b334 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 800b348:	6821      	ldr	r1, [r4, #0]
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b34a:	68e2      	ldr	r2, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 800b34c:	680b      	ldr	r3, [r1, #0]
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b34e:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 800b352:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b356:	600b      	str	r3, [r1, #0]
 800b358:	f04f 0300 	mov.w	r3, #0
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b35c:	d903      	bls.n	800b366 <HAL_SPI_Init+0x30>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800b35e:	4618      	mov	r0, r3
  if(( hspi->Init.DataSize != SPI_DATASIZE_16BIT ) && ( hspi->Init.DataSize != SPI_DATASIZE_8BIT ))
 800b360:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 800b364:	e001      	b.n	800b36a <HAL_SPI_Init+0x34>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800b366:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800b36a:	bf18      	it	ne
 800b36c:	62a3      	strne	r3, [r4, #40]	; 0x28
  if( hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800b36e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b370:	b92b      	cbnz	r3, 800b37e <HAL_SPI_Init+0x48>
    if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b372:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800b376:	bf8c      	ite	hi
 800b378:	2302      	movhi	r3, #2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800b37a:	2301      	movls	r3, #1
 800b37c:	6323      	str	r3, [r4, #48]	; 0x30
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
 800b37e:	68a5      	ldr	r5, [r4, #8]
 800b380:	6866      	ldr	r6, [r4, #4]
                         hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
 800b382:	69a3      	ldr	r3, [r4, #24]
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
 800b384:	432e      	orrs	r6, r5
 800b386:	6925      	ldr	r5, [r4, #16]
 800b388:	432e      	orrs	r6, r5
 800b38a:	6965      	ldr	r5, [r4, #20]
 800b38c:	432e      	orrs	r6, r5
 800b38e:	69e5      	ldr	r5, [r4, #28]
 800b390:	432e      	orrs	r6, r5
 800b392:	6a25      	ldr	r5, [r4, #32]
 800b394:	432e      	orrs	r6, r5
 800b396:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800b398:	432e      	orrs	r6, r5
 800b39a:	f403 7500 	and.w	r5, r3, #512	; 0x200
 800b39e:	4335      	orrs	r5, r6
  hspi->Instance->CR1 = (hspi->Init.Mode | hspi->Init.Direction | 
 800b3a0:	600d      	str	r5, [r1, #0]
  if( hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800b3a2:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800b3a4:	2d02      	cmp	r5, #2
    hspi->Instance->CR1|= SPI_CR1_CRCL;
 800b3a6:	bf02      	ittt	eq
 800b3a8:	680d      	ldreq	r5, [r1, #0]
 800b3aa:	f445 6500 	orreq.w	r5, r5, #2048	; 0x800
 800b3ae:	600d      	streq	r5, [r1, #0]
                         hspi->Init.DataSize ) | frxth;
 800b3b0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b3b2:	432a      	orrs	r2, r5
 800b3b4:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800b3b6:	0c1b      	lsrs	r3, r3, #16
 800b3b8:	4315      	orrs	r5, r2
 800b3ba:	f003 0204 	and.w	r2, r3, #4
 800b3be:	ea45 0302 	orr.w	r3, r5, r2
 800b3c2:	4303      	orrs	r3, r0
  hspi->Instance->CR2 = (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode | hspi->Init.NSSPMode |
 800b3c4:	604b      	str	r3, [r1, #4]
  hspi->Instance->CRCPR = hspi->Init.CRCPolynomial;
 800b3c6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b3c8:	610b      	str	r3, [r1, #16]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b3ca:	2000      	movs	r0, #0
  hspi->State= HAL_SPI_STATE_READY;
 800b3cc:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b3ce:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
  hspi->State= HAL_SPI_STATE_READY;
 800b3d2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  return HAL_OK;
 800b3d6:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800b3d8:	2001      	movs	r0, #1
}
 800b3da:	bd70      	pop	{r4, r5, r6, pc}

0800b3dc <HAL_SPI_MspDeInit>:
 800b3dc:	4770      	bx	lr

0800b3de <HAL_SPI_DeInit>:
{
 800b3de:	b510      	push	{r4, lr}
  if(hspi == NULL)
 800b3e0:	4604      	mov	r4, r0
 800b3e2:	b188      	cbz	r0, 800b408 <HAL_SPI_DeInit+0x2a>
  __HAL_SPI_DISABLE(hspi);
 800b3e4:	6802      	ldr	r2, [r0, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800b3e6:	2302      	movs	r3, #2
 800b3e8:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 800b3ec:	6813      	ldr	r3, [r2, #0]
 800b3ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b3f2:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 800b3f4:	f7ff fff2 	bl	800b3dc <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b3f8:	2000      	movs	r0, #0
 800b3fa:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
  hspi->State = HAL_SPI_STATE_RESET;
 800b3fe:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800b402:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
  return HAL_OK;
 800b406:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
 800b408:	2001      	movs	r0, #1
}
 800b40a:	bd10      	pop	{r4, pc}

0800b40c <HAL_SPI_TransmitReceive>:
{
 800b40c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(hspi->State != HAL_SPI_STATE_READY) 
 800b410:	f890 505d 	ldrb.w	r5, [r0, #93]	; 0x5d
{
 800b414:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  __IO uint16_t tmpreg __attribute((unused)) = 0;
 800b416:	f04f 0b00 	mov.w	fp, #0
  if(hspi->State != HAL_SPI_STATE_READY) 
 800b41a:	2d01      	cmp	r5, #1
{
 800b41c:	4604      	mov	r4, r0
 800b41e:	4689      	mov	r9, r1
 800b420:	4692      	mov	sl, r2
 800b422:	4698      	mov	r8, r3
  __IO uint16_t tmpreg __attribute((unused)) = 0;
 800b424:	f8ad b006 	strh.w	fp, [sp, #6]
  if(hspi->State != HAL_SPI_STATE_READY) 
 800b428:	d001      	beq.n	800b42e <HAL_SPI_TransmitReceive+0x22>
    return HAL_BUSY;
 800b42a:	2002      	movs	r0, #2
 800b42c:	e12f      	b.n	800b68e <HAL_SPI_TransmitReceive+0x282>
  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0))
 800b42e:	2900      	cmp	r1, #0
 800b430:	f000 812a 	beq.w	800b688 <HAL_SPI_TransmitReceive+0x27c>
 800b434:	2a00      	cmp	r2, #0
 800b436:	f000 8127 	beq.w	800b688 <HAL_SPI_TransmitReceive+0x27c>
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	f000 8124 	beq.w	800b688 <HAL_SPI_TransmitReceive+0x27c>
  tickstart = HAL_GetTick();
 800b440:	f7fe fb76 	bl	8009b30 <HAL_GetTick>
  __HAL_LOCK(hspi); 
 800b444:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 800b448:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 800b44a:	4607      	mov	r7, r0
  __HAL_LOCK(hspi); 
 800b44c:	d0ed      	beq.n	800b42a <HAL_SPI_TransmitReceive+0x1e>
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800b44e:	2305      	movs	r3, #5
 800b450:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
 800b454:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  __HAL_LOCK(hspi); 
 800b456:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
 800b45a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b45e:	f884 b05e 	strb.w	fp, [r4, #94]	; 0x5e
  hspi->pRxBuffPtr  = pRxData;
 800b462:	f8c4 a040 	str.w	sl, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 800b466:	f8a4 8046 	strh.w	r8, [r4, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800b46a:	f8a4 8044 	strh.w	r8, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = pTxData;
 800b46e:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 800b472:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size; 
 800b476:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
 800b47a:	6822      	ldr	r2, [r4, #0]
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
 800b47c:	d107      	bne.n	800b48e <HAL_SPI_TransmitReceive+0x82>
    __HAL_SPI_RESET_CRC(hspi);
 800b47e:	6813      	ldr	r3, [r2, #0]
 800b480:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b484:	6013      	str	r3, [r2, #0]
 800b486:	6813      	ldr	r3, [r2, #0]
 800b488:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b48c:	6013      	str	r3, [r2, #0]
  if((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1))
 800b48e:	68e1      	ldr	r1, [r4, #12]
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b490:	6853      	ldr	r3, [r2, #4]
  if((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1))
 800b492:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b496:	d802      	bhi.n	800b49e <HAL_SPI_TransmitReceive+0x92>
 800b498:	f1b8 0f01 	cmp.w	r8, #1
 800b49c:	d902      	bls.n	800b4a4 <HAL_SPI_TransmitReceive+0x98>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b49e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b4a2:	e001      	b.n	800b4a8 <HAL_SPI_TransmitReceive+0x9c>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b4a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b4a8:	6053      	str	r3, [r2, #4]
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 800b4aa:	6813      	ldr	r3, [r2, #0]
 800b4ac:	0658      	lsls	r0, r3, #25
    __HAL_SPI_ENABLE(hspi);
 800b4ae:	bf5e      	ittt	pl
 800b4b0:	6813      	ldrpl	r3, [r2, #0]
 800b4b2:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 800b4b6:	6013      	strpl	r3, [r2, #0]
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b4b8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b4bc:	d949      	bls.n	800b552 <HAL_SPI_TransmitReceive+0x146>
    while ((hspi->TxXferCount > 0 ) || (hspi->RxXferCount > 0))
 800b4be:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800b4c0:	f8b4 0046 	ldrh.w	r0, [r4, #70]	; 0x46
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d033      	beq.n	800b530 <HAL_SPI_TransmitReceive+0x124>
      if((hspi->TxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_TXE) == SPI_FLAG_TXE))
 800b4c8:	6822      	ldr	r2, [r4, #0]
 800b4ca:	6891      	ldr	r1, [r2, #8]
 800b4cc:	0789      	lsls	r1, r1, #30
 800b4ce:	d510      	bpl.n	800b4f2 <HAL_SPI_TransmitReceive+0xe6>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b4d0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800b4d2:	3b01      	subs	r3, #1
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b4d4:	f831 5b02 	ldrh.w	r5, [r1], #2
 800b4d8:	60d5      	str	r5, [r2, #12]
        hspi->TxXferCount--;
 800b4da:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b4dc:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800b4de:	87e3      	strh	r3, [r4, #62]	; 0x3e
        if((hspi->TxXferCount == 0) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED))
 800b4e0:	b93b      	cbnz	r3, 800b4f2 <HAL_SPI_TransmitReceive+0xe6>
 800b4e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b4e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800b4e8:	bf02      	ittt	eq
 800b4ea:	6813      	ldreq	r3, [r2, #0]
 800b4ec:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 800b4f0:	6013      	streq	r3, [r2, #0]
      if((hspi->RxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_RXNE) == SPI_FLAG_RXNE))
 800b4f2:	b168      	cbz	r0, 800b510 <HAL_SPI_TransmitReceive+0x104>
 800b4f4:	6823      	ldr	r3, [r4, #0]
 800b4f6:	689a      	ldr	r2, [r3, #8]
 800b4f8:	07d2      	lsls	r2, r2, #31
 800b4fa:	d509      	bpl.n	800b510 <HAL_SPI_TransmitReceive+0x104>
        *((uint16_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800b4fc:	68da      	ldr	r2, [r3, #12]
 800b4fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b500:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b504:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 800b506:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800b50a:	3b01      	subs	r3, #1
 800b50c:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
      if(Timeout != HAL_MAX_DELAY)
 800b510:	1c75      	adds	r5, r6, #1
 800b512:	d0d4      	beq.n	800b4be <HAL_SPI_TransmitReceive+0xb2>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout)) 
 800b514:	b936      	cbnz	r6, 800b524 <HAL_SPI_TransmitReceive+0x118>
          hspi->State = HAL_SPI_STATE_READY;
 800b516:	2301      	movs	r3, #1
 800b518:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
          __HAL_UNLOCK(hspi);
 800b51c:	2300      	movs	r3, #0
 800b51e:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 800b522:	e0b3      	b.n	800b68c <HAL_SPI_TransmitReceive+0x280>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout)) 
 800b524:	f7fe fb04 	bl	8009b30 <HAL_GetTick>
 800b528:	1bc0      	subs	r0, r0, r7
 800b52a:	4286      	cmp	r6, r0
 800b52c:	d2c7      	bcs.n	800b4be <HAL_SPI_TransmitReceive+0xb2>
 800b52e:	e7f2      	b.n	800b516 <HAL_SPI_TransmitReceive+0x10a>
    while ((hspi->TxXferCount > 0 ) || (hspi->RxXferCount > 0))
 800b530:	2800      	cmp	r0, #0
 800b532:	d1df      	bne.n	800b4f4 <HAL_SPI_TransmitReceive+0xe8>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
 800b534:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b536:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b53a:	f040 8085 	bne.w	800b648 <HAL_SPI_TransmitReceive+0x23c>
 800b53e:	e058      	b.n	800b5f2 <HAL_SPI_TransmitReceive+0x1e6>
      if((hspi->TxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_TXE) == SPI_FLAG_TXE))
 800b540:	6821      	ldr	r1, [r4, #0]
 800b542:	688b      	ldr	r3, [r1, #8]
 800b544:	0798      	lsls	r0, r3, #30
 800b546:	d408      	bmi.n	800b55a <HAL_SPI_TransmitReceive+0x14e>
      if((hspi->RxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_RXNE) == SPI_FLAG_RXNE))
 800b548:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800b54c:	bb3b      	cbnz	r3, 800b59e <HAL_SPI_TransmitReceive+0x192>
      if(Timeout != HAL_MAX_DELAY)
 800b54e:	1c73      	adds	r3, r6, #1
 800b550:	d147      	bne.n	800b5e2 <HAL_SPI_TransmitReceive+0x1d6>
    while((hspi->TxXferCount > 0) || (hspi->RxXferCount > 0))
 800b552:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800b554:	2a00      	cmp	r2, #0
 800b556:	d1f3      	bne.n	800b540 <HAL_SPI_TransmitReceive+0x134>
 800b558:	e01d      	b.n	800b596 <HAL_SPI_TransmitReceive+0x18a>
        if(hspi->TxXferCount > 2)
 800b55a:	2a02      	cmp	r2, #2
 800b55c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b55e:	d906      	bls.n	800b56e <HAL_SPI_TransmitReceive+0x162>
          hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 800b560:	f833 0b02 	ldrh.w	r0, [r3], #2
 800b564:	60c8      	str	r0, [r1, #12]
          hspi->TxXferCount -= 2;
 800b566:	3a02      	subs	r2, #2
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b568:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2;
 800b56a:	87e2      	strh	r2, [r4, #62]	; 0x3e
 800b56c:	e006      	b.n	800b57c <HAL_SPI_TransmitReceive+0x170>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 800b56e:	1c5a      	adds	r2, r3, #1
 800b570:	63a2      	str	r2, [r4, #56]	; 0x38
 800b572:	781b      	ldrb	r3, [r3, #0]
 800b574:	730b      	strb	r3, [r1, #12]
          hspi->TxXferCount--;
 800b576:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800b578:	3b01      	subs	r3, #1
 800b57a:	87e3      	strh	r3, [r4, #62]	; 0x3e
        if((hspi->TxXferCount == 0) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED))
 800b57c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d1e2      	bne.n	800b548 <HAL_SPI_TransmitReceive+0x13c>
 800b582:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b584:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800b588:	bf01      	itttt	eq
 800b58a:	6822      	ldreq	r2, [r4, #0]
 800b58c:	6813      	ldreq	r3, [r2, #0]
 800b58e:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 800b592:	6013      	streq	r3, [r2, #0]
 800b594:	e7d8      	b.n	800b548 <HAL_SPI_TransmitReceive+0x13c>
    while((hspi->TxXferCount > 0) || (hspi->RxXferCount > 0))
 800b596:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d0ca      	beq.n	800b534 <HAL_SPI_TransmitReceive+0x128>
      if((hspi->RxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_RXNE) == SPI_FLAG_RXNE))
 800b59e:	6822      	ldr	r2, [r4, #0]
 800b5a0:	6891      	ldr	r1, [r2, #8]
 800b5a2:	07c9      	lsls	r1, r1, #31
 800b5a4:	d5d3      	bpl.n	800b54e <HAL_SPI_TransmitReceive+0x142>
        if(hspi->RxXferCount > 1)
 800b5a6:	2b01      	cmp	r3, #1
 800b5a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b5aa:	d910      	bls.n	800b5ce <HAL_SPI_TransmitReceive+0x1c2>
          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800b5ac:	68d1      	ldr	r1, [r2, #12]
 800b5ae:	f823 1b02 	strh.w	r1, [r3], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b5b2:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2;
 800b5b4:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800b5b8:	3b02      	subs	r3, #2
 800b5ba:	b29b      	uxth	r3, r3
          if(hspi->RxXferCount <= 1)
 800b5bc:	2b01      	cmp	r3, #1
          hspi->RxXferCount -= 2;
 800b5be:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          if(hspi->RxXferCount <= 1)
 800b5c2:	d8c4      	bhi.n	800b54e <HAL_SPI_TransmitReceive+0x142>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b5c4:	6853      	ldr	r3, [r2, #4]
 800b5c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b5ca:	6053      	str	r3, [r2, #4]
 800b5cc:	e7bf      	b.n	800b54e <HAL_SPI_TransmitReceive+0x142>
          (*hspi->pRxBuffPtr++) =  *(__IO uint8_t *)&hspi->Instance->DR;
 800b5ce:	1c59      	adds	r1, r3, #1
 800b5d0:	6421      	str	r1, [r4, #64]	; 0x40
 800b5d2:	7b12      	ldrb	r2, [r2, #12]
 800b5d4:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 800b5d6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800b5da:	3b01      	subs	r3, #1
 800b5dc:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 800b5e0:	e7b5      	b.n	800b54e <HAL_SPI_TransmitReceive+0x142>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800b5e2:	2e00      	cmp	r6, #0
 800b5e4:	d097      	beq.n	800b516 <HAL_SPI_TransmitReceive+0x10a>
 800b5e6:	f7fe faa3 	bl	8009b30 <HAL_GetTick>
 800b5ea:	1bc0      	subs	r0, r0, r7
 800b5ec:	4286      	cmp	r6, r0
 800b5ee:	d2b0      	bcs.n	800b552 <HAL_SPI_TransmitReceive+0x146>
 800b5f0:	e791      	b.n	800b516 <HAL_SPI_TransmitReceive+0x10a>
    if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SPI_FLAG_TXE, Timeout) != HAL_OK)
 800b5f2:	2202      	movs	r2, #2
 800b5f4:	4633      	mov	r3, r6
 800b5f6:	4611      	mov	r1, r2
 800b5f8:	4620      	mov	r0, r4
 800b5fa:	f7ff fe32 	bl	800b262 <SPI_WaitFlagStateUntilTimeout>
 800b5fe:	b128      	cbz	r0, 800b60c <HAL_SPI_TransmitReceive+0x200>
      hspi->ErrorCode|= HAL_SPI_ERROR_CRC;
 800b600:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
 800b604:	f043 0302 	orr.w	r3, r3, #2
 800b608:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
    if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b60c:	68e3      	ldr	r3, [r4, #12]
 800b60e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800b612:	6823      	ldr	r3, [r4, #0]
 800b614:	d102      	bne.n	800b61c <HAL_SPI_TransmitReceive+0x210>
      tmpreg = hspi->Instance->DR;
 800b616:	68db      	ldr	r3, [r3, #12]
 800b618:	b29b      	uxth	r3, r3
 800b61a:	e013      	b.n	800b644 <HAL_SPI_TransmitReceive+0x238>
      if(hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800b61c:	6b22      	ldr	r2, [r4, #48]	; 0x30
      tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 800b61e:	7b1b      	ldrb	r3, [r3, #12]
 800b620:	f8ad 3006 	strh.w	r3, [sp, #6]
      if(hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800b624:	2a02      	cmp	r2, #2
 800b626:	d10f      	bne.n	800b648 <HAL_SPI_TransmitReceive+0x23c>
        if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SPI_FLAG_TXE, Timeout) != HAL_OK) 
 800b628:	4633      	mov	r3, r6
 800b62a:	4611      	mov	r1, r2
 800b62c:	4620      	mov	r0, r4
 800b62e:	f7ff fe18 	bl	800b262 <SPI_WaitFlagStateUntilTimeout>
 800b632:	b128      	cbz	r0, 800b640 <HAL_SPI_TransmitReceive+0x234>
          hspi->ErrorCode|= HAL_SPI_ERROR_CRC;
 800b634:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
 800b638:	f043 0302 	orr.w	r3, r3, #2
 800b63c:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
        tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 800b640:	6823      	ldr	r3, [r4, #0]
 800b642:	7b1b      	ldrb	r3, [r3, #12]
 800b644:	f8ad 3006 	strh.w	r3, [sp, #6]
  if(SPI_EndRxTxTransaction(hspi,Timeout) != HAL_OK)
 800b648:	4631      	mov	r1, r6
 800b64a:	4620      	mov	r0, r4
 800b64c:	f7ff fe51 	bl	800b2f2 <SPI_EndRxTxTransaction>
 800b650:	b9e0      	cbnz	r0, 800b68c <HAL_SPI_TransmitReceive+0x280>
  if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 800b652:	6825      	ldr	r5, [r4, #0]
 800b654:	68aa      	ldr	r2, [r5, #8]
  hspi->State = HAL_SPI_STATE_READY;
 800b656:	2301      	movs	r3, #1
  if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 800b658:	f012 0110 	ands.w	r1, r2, #16
  hspi->State = HAL_SPI_STATE_READY;
 800b65c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
 800b660:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
  if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 800b664:	d00a      	beq.n	800b67c <HAL_SPI_TransmitReceive+0x270>
    hspi->ErrorCode|= HAL_SPI_ERROR_CRC;
 800b666:	f042 0202 	orr.w	r2, r2, #2
 800b66a:	f884 205e 	strb.w	r2, [r4, #94]	; 0x5e
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800b66e:	f06f 0210 	mvn.w	r2, #16
 800b672:	60aa      	str	r2, [r5, #8]
    __HAL_UNLOCK(hspi);
 800b674:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
    return HAL_ERROR;
 800b678:	4618      	mov	r0, r3
 800b67a:	e008      	b.n	800b68e <HAL_SPI_TransmitReceive+0x282>
    return HAL_BUSY;
 800b67c:	1c10      	adds	r0, r2, #0
  __HAL_UNLOCK(hspi);
 800b67e:	f884 105c 	strb.w	r1, [r4, #92]	; 0x5c
    return HAL_BUSY;
 800b682:	bf18      	it	ne
 800b684:	2001      	movne	r0, #1
 800b686:	e002      	b.n	800b68e <HAL_SPI_TransmitReceive+0x282>
    return HAL_ERROR;
 800b688:	4628      	mov	r0, r5
 800b68a:	e000      	b.n	800b68e <HAL_SPI_TransmitReceive+0x282>
    return HAL_TIMEOUT;
 800b68c:	2003      	movs	r0, #3
}
 800b68e:	b003      	add	sp, #12
 800b690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b694 <HAL_SPI_GetState>:
  * @retval HAL state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
  return hspi->State;
}
 800b694:	f890 005d 	ldrb.w	r0, [r0, #93]	; 0x5d
 800b698:	4770      	bx	lr

0800b69a <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b69a:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800b69c:	b180      	cbz	r0, 800b6c0 <USBD_Init+0x26>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800b69e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800b6a2:	b113      	cbz	r3, 800b6aa <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800b6aa:	b109      	cbz	r1, 800b6b0 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 800b6ac:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800b6b0:	2301      	movs	r3, #1
 800b6b2:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  pdev->id = id;
 800b6b6:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800b6b8:	f000 fc7e 	bl	800bfb8 <USBD_LL_Init>
  
  return USBD_OK; 
 800b6bc:	2000      	movs	r0, #0
 800b6be:	bd08      	pop	{r3, pc}
    return USBD_FAIL; 
 800b6c0:	2002      	movs	r0, #2
}
 800b6c2:	bd08      	pop	{r3, pc}

0800b6c4 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 800b6c4:	b119      	cbz	r1, 800b6ce <USBD_RegisterClass+0xa>
  {
    /* link the class tgo the USB Device handle */
    pdev->pClass = pclass;
 800b6c6:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 800b6ca:	2000      	movs	r0, #0
 800b6cc:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 800b6ce:	2002      	movs	r0, #2
  }
  
  return status;
}
 800b6d0:	4770      	bx	lr

0800b6d2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800b6d2:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 800b6d4:	f000 fcae 	bl	800c034 <USBD_LL_Start>
  
  return USBD_OK;  
}
 800b6d8:	2000      	movs	r0, #0
 800b6da:	bd08      	pop	{r3, pc}

0800b6dc <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b6dc:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 800b6de:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800b6e2:	b90b      	cbnz	r3, 800b6e8 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800b6e4:	2002      	movs	r0, #2
 800b6e6:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	4798      	blx	r3
 800b6ec:	2800      	cmp	r0, #0
 800b6ee:	d1f9      	bne.n	800b6e4 <USBD_SetClassConfig+0x8>
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 800b6f0:	bd08      	pop	{r3, pc}

0800b6f2 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b6f2:	b508      	push	{r3, lr}
  /* Clear configuration  and Deinitialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 800b6f4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800b6f8:	685b      	ldr	r3, [r3, #4]
 800b6fa:	4798      	blx	r3
  return USBD_OK;
}
 800b6fc:	2000      	movs	r0, #0
 800b6fe:	bd08      	pop	{r3, pc}

0800b700 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b700:	b538      	push	{r3, r4, r5, lr}
 800b702:	4604      	mov	r4, r0

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b704:	f500 7502 	add.w	r5, r0, #520	; 0x208
 800b708:	4628      	mov	r0, r5
 800b70a:	f000 f8ca 	bl	800b8a2 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 800b70e:	2301      	movs	r3, #1
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 800b710:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
  pdev->ep0_state = USBD_EP0_SETUP;
 800b714:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 800b718:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 800b71c:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  switch (pdev->request.bmRequest & 0x1F) 
 800b720:	f001 031f 	and.w	r3, r1, #31
 800b724:	2b01      	cmp	r3, #1
 800b726:	d00c      	beq.n	800b742 <USBD_LL_SetupStage+0x42>
 800b728:	d306      	bcc.n	800b738 <USBD_LL_SetupStage+0x38>
 800b72a:	2b02      	cmp	r3, #2
 800b72c:	d10e      	bne.n	800b74c <USBD_LL_SetupStage+0x4c>
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
    break;
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 800b72e:	4629      	mov	r1, r5
 800b730:	4620      	mov	r0, r4
 800b732:	f000 f9f7 	bl	800bb24 <USBD_StdEPReq>
    break;
 800b736:	e00e      	b.n	800b756 <USBD_LL_SetupStage+0x56>
    USBD_StdDevReq (pdev, &pdev->request);
 800b738:	4629      	mov	r1, r5
 800b73a:	4620      	mov	r0, r4
 800b73c:	f000 f8d0 	bl	800b8e0 <USBD_StdDevReq>
    break;
 800b740:	e009      	b.n	800b756 <USBD_LL_SetupStage+0x56>
    USBD_StdItfReq(pdev, &pdev->request);
 800b742:	4629      	mov	r1, r5
 800b744:	4620      	mov	r0, r4
 800b746:	f000 f9d5 	bl	800baf4 <USBD_StdItfReq>
    break;
 800b74a:	e004      	b.n	800b756 <USBD_LL_SetupStage+0x56>
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 800b74c:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800b750:	4620      	mov	r0, r4
 800b752:	f000 fc87 	bl	800c064 <USBD_LL_StallEP>
    break;
  }  
  return USBD_OK;  
}
 800b756:	2000      	movs	r0, #0
 800b758:	bd38      	pop	{r3, r4, r5, pc}

0800b75a <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 800b75a:	b538      	push	{r3, r4, r5, lr}
 800b75c:	4604      	mov	r4, r0
 800b75e:	4615      	mov	r5, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 800b760:	bb09      	cbnz	r1, 800b7a6 <USBD_LL_DataOutStage+0x4c>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b762:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 800b766:	2b03      	cmp	r3, #3
 800b768:	d126      	bne.n	800b7b8 <USBD_LL_DataOutStage+0x5e>
    {
      if(pep->rem_length > pep->maxpacket)
 800b76a:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
 800b76e:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 800b772:	4291      	cmp	r1, r2
 800b774:	d90a      	bls.n	800b78c <USBD_LL_DataOutStage+0x32>
      {
        pep->rem_length -=  pep->maxpacket;
 800b776:	1a8b      	subs	r3, r1, r2
       
        USBD_CtlContinueRx (pdev, 
 800b778:	429a      	cmp	r2, r3
 800b77a:	bf28      	it	cs
 800b77c:	461a      	movcs	r2, r3
        pep->rem_length -=  pep->maxpacket;
 800b77e:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
        USBD_CtlContinueRx (pdev, 
 800b782:	b292      	uxth	r2, r2
 800b784:	4629      	mov	r1, r5
 800b786:	f000 fa66 	bl	800bc56 <USBD_CtlContinueRx>
 800b78a:	e015      	b.n	800b7b8 <USBD_LL_DataOutStage+0x5e>
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800b78c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800b790:	691b      	ldr	r3, [r3, #16]
 800b792:	b123      	cbz	r3, 800b79e <USBD_LL_DataOutStage+0x44>
 800b794:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800b798:	2a03      	cmp	r2, #3
 800b79a:	d100      	bne.n	800b79e <USBD_LL_DataOutStage+0x44>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
        {
          pdev->pClass->EP0_RxReady(pdev); 
 800b79c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800b79e:	4620      	mov	r0, r4
 800b7a0:	f000 fa61 	bl	800bc66 <USBD_CtlSendStatus>
 800b7a4:	e008      	b.n	800b7b8 <USBD_LL_DataOutStage+0x5e>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 800b7a6:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800b7aa:	699b      	ldr	r3, [r3, #24]
 800b7ac:	b123      	cbz	r3, 800b7b8 <USBD_LL_DataOutStage+0x5e>
 800b7ae:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800b7b2:	2a03      	cmp	r2, #3
 800b7b4:	d100      	bne.n	800b7b8 <USBD_LL_DataOutStage+0x5e>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
 800b7b6:	4798      	blx	r3
  }  
  return USBD_OK;
}
 800b7b8:	2000      	movs	r0, #0
 800b7ba:	bd38      	pop	{r3, r4, r5, pc}

0800b7bc <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 800b7bc:	b538      	push	{r3, r4, r5, lr}
 800b7be:	4604      	mov	r4, r0
 800b7c0:	4615      	mov	r5, r2
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 800b7c2:	bba9      	cbnz	r1, 800b830 <USBD_LL_DataInStage+0x74>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800b7c4:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 800b7c8:	2b02      	cmp	r3, #2
 800b7ca:	d129      	bne.n	800b820 <USBD_LL_DataInStage+0x64>
    {
      if(pep->rem_length > pep->maxpacket)
 800b7cc:	69c2      	ldr	r2, [r0, #28]
 800b7ce:	6a03      	ldr	r3, [r0, #32]
 800b7d0:	429a      	cmp	r2, r3
 800b7d2:	d906      	bls.n	800b7e2 <USBD_LL_DataInStage+0x26>
      {
        pep->rem_length -=  pep->maxpacket;
 800b7d4:	1ad2      	subs	r2, r2, r3
 800b7d6:	61c2      	str	r2, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 800b7d8:	4629      	mov	r1, r5
 800b7da:	b292      	uxth	r2, r2
 800b7dc:	f000 fa24 	bl	800bc28 <USBD_CtlContinueSendData>
 800b7e0:	e01e      	b.n	800b820 <USBD_LL_DataInStage+0x64>
                                  pdata, 
                                  pep->rem_length);
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 800b7e2:	6982      	ldr	r2, [r0, #24]
 800b7e4:	fbb2 f5f3 	udiv	r5, r2, r3
 800b7e8:	fb03 2515 	mls	r5, r3, r5, r2
 800b7ec:	b95d      	cbnz	r5, 800b806 <USBD_LL_DataInStage+0x4a>
 800b7ee:	4293      	cmp	r3, r2
 800b7f0:	d809      	bhi.n	800b806 <USBD_LL_DataInStage+0x4a>
           (pep->total_length >= pep->maxpacket) &&
 800b7f2:	f8d0 31f8 	ldr.w	r3, [r0, #504]	; 0x1f8
 800b7f6:	429a      	cmp	r2, r3
 800b7f8:	d205      	bcs.n	800b806 <USBD_LL_DataInStage+0x4a>
             (pep->total_length < pdev->ep0_data_len ))
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 800b7fa:	462a      	mov	r2, r5
 800b7fc:	f000 fa14 	bl	800bc28 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 800b800:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
 800b804:	e00c      	b.n	800b820 <USBD_LL_DataInStage+0x64>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800b806:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800b80a:	68db      	ldr	r3, [r3, #12]
 800b80c:	b12b      	cbz	r3, 800b81a <USBD_LL_DataInStage+0x5e>
 800b80e:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 800b812:	2a03      	cmp	r2, #3
 800b814:	d101      	bne.n	800b81a <USBD_LL_DataInStage+0x5e>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
          {
            pdev->pClass->EP0_TxSent(pdev); 
 800b816:	4620      	mov	r0, r4
 800b818:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 800b81a:	4620      	mov	r0, r4
 800b81c:	f000 fa2e 	bl	800bc7c <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 800b820:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 800b824:	2b01      	cmp	r3, #1
 800b826:	d10c      	bne.n	800b842 <USBD_LL_DataInStage+0x86>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 800b828:	2300      	movs	r3, #0
 800b82a:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
 800b82e:	e008      	b.n	800b842 <USBD_LL_DataInStage+0x86>
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 800b830:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800b834:	695b      	ldr	r3, [r3, #20]
 800b836:	b123      	cbz	r3, 800b842 <USBD_LL_DataInStage+0x86>
 800b838:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800b83c:	2a03      	cmp	r2, #3
 800b83e:	d100      	bne.n	800b842 <USBD_LL_DataInStage+0x86>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
 800b840:	4798      	blx	r3
  }  
  return USBD_OK;
}
 800b842:	2000      	movs	r0, #0
 800b844:	bd38      	pop	{r3, r4, r5, pc}

0800b846 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800b846:	b538      	push	{r3, r4, r5, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 800b848:	2200      	movs	r2, #0
{
 800b84a:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev,
 800b84c:	4611      	mov	r1, r2
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b84e:	2540      	movs	r5, #64	; 0x40
  USBD_LL_OpenEP(pdev,
 800b850:	2340      	movs	r3, #64	; 0x40
 800b852:	f000 fbf6 	bl	800c042 <USBD_LL_OpenEP>
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 800b856:	462b      	mov	r3, r5
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b858:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  USBD_LL_OpenEP(pdev,
 800b85c:	2200      	movs	r2, #0
 800b85e:	2180      	movs	r1, #128	; 0x80
 800b860:	4620      	mov	r0, r4
 800b862:	f000 fbee 	bl	800c042 <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call usr call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b866:	2301      	movs	r3, #1
 800b868:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 800b86c:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b870:	6225      	str	r5, [r4, #32]
  if (pdev->pClassData) 
 800b872:	b12b      	cbz	r3, 800b880 <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 800b874:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800b878:	7921      	ldrb	r1, [r4, #4]
 800b87a:	685b      	ldr	r3, [r3, #4]
 800b87c:	4620      	mov	r0, r4
 800b87e:	4798      	blx	r3
 
  
  return USBD_OK;
}
 800b880:	2000      	movs	r0, #0
 800b882:	bd38      	pop	{r3, r4, r5, pc}

0800b884 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800b884:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 800b886:	2000      	movs	r0, #0
 800b888:	4770      	bx	lr

0800b88a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800b88a:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800b88c:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800b890:	2a03      	cmp	r2, #3
 800b892:	d104      	bne.n	800b89e <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 800b894:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800b898:	69db      	ldr	r3, [r3, #28]
 800b89a:	b103      	cbz	r3, 800b89e <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 800b89c:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 800b89e:	2000      	movs	r0, #0
 800b8a0:	bd08      	pop	{r3, pc}

0800b8a2 <USBD_ParseSetupRequest>:
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
  req->bmRequest     = *(uint8_t *)  (pdata);
 800b8a2:	780b      	ldrb	r3, [r1, #0]
 800b8a4:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800b8a6:	784b      	ldrb	r3, [r1, #1]
 800b8a8:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800b8aa:	78ca      	ldrb	r2, [r1, #3]
 800b8ac:	788b      	ldrb	r3, [r1, #2]
 800b8ae:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800b8b2:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800b8b4:	794a      	ldrb	r2, [r1, #5]
 800b8b6:	790b      	ldrb	r3, [r1, #4]
 800b8b8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800b8bc:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800b8be:	79ca      	ldrb	r2, [r1, #7]
 800b8c0:	798b      	ldrb	r3, [r1, #6]
 800b8c2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800b8c6:	80c3      	strh	r3, [r0, #6]
 800b8c8:	4770      	bx	lr

0800b8ca <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800b8ca:	b510      	push	{r4, lr}
  USBD_LL_StallEP(pdev , 0x80);
 800b8cc:	2180      	movs	r1, #128	; 0x80
{
 800b8ce:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 800b8d0:	f000 fbc8 	bl	800c064 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 800b8d4:	4620      	mov	r0, r4
 800b8d6:	2100      	movs	r1, #0
}
 800b8d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 800b8dc:	f000 bbc2 	b.w	800c064 <USBD_LL_StallEP>

0800b8e0 <USBD_StdDevReq>:
{
 800b8e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  switch (req->bRequest) 
 800b8e2:	784b      	ldrb	r3, [r1, #1]
{
 800b8e4:	4604      	mov	r4, r0
 800b8e6:	460d      	mov	r5, r1
  switch (req->bRequest) 
 800b8e8:	2b09      	cmp	r3, #9
 800b8ea:	f200 80f9 	bhi.w	800bae0 <USBD_StdDevReq+0x200>
 800b8ee:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b8f2:	00cb      	.short	0x00cb
 800b8f4:	00f700e2 	.word	0x00f700e2
 800b8f8:	00f700de 	.word	0x00f700de
 800b8fc:	000a0075 	.word	0x000a0075
 800b900:	00bb00f7 	.word	0x00bb00f7
 800b904:	0091      	.short	0x0091
  switch (req->wValue >> 8)
 800b906:	884b      	ldrh	r3, [r1, #2]
 800b908:	0a1a      	lsrs	r2, r3, #8
 800b90a:	3a01      	subs	r2, #1
 800b90c:	2a06      	cmp	r2, #6
 800b90e:	f200 80e7 	bhi.w	800bae0 <USBD_StdDevReq+0x200>
 800b912:	e8df f012 	tbh	[pc, r2, lsl #1]
 800b916:	0007      	.short	0x0007
 800b918:	0017000b 	.word	0x0017000b
 800b91c:	00e500e5 	.word	0x00e500e5
 800b920:	0047003c 	.word	0x0047003c
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b924:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	e017      	b.n	800b95c <USBD_StdDevReq+0x7c>
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 800b92c:	7c02      	ldrb	r2, [r0, #16]
 800b92e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800b932:	b90a      	cbnz	r2, 800b938 <USBD_StdDevReq+0x58>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800b934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b936:	e000      	b.n	800b93a <USBD_StdDevReq+0x5a>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800b938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b93a:	f10d 0006 	add.w	r0, sp, #6
 800b93e:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b940:	2302      	movs	r3, #2
 800b942:	e03a      	b.n	800b9ba <USBD_StdDevReq+0xda>
    switch ((uint8_t)(req->wValue))
 800b944:	b2db      	uxtb	r3, r3
 800b946:	2b05      	cmp	r3, #5
 800b948:	f200 80ca 	bhi.w	800bae0 <USBD_StdDevReq+0x200>
 800b94c:	e8df f003 	tbb	[pc, r3]
 800b950:	130f0b03 	.word	0x130f0b03
 800b954:	1b17      	.short	0x1b17
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 800b956:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800b95a:	685b      	ldr	r3, [r3, #4]
 800b95c:	7c20      	ldrb	r0, [r4, #16]
 800b95e:	f10d 0106 	add.w	r1, sp, #6
 800b962:	4798      	blx	r3
 800b964:	e02a      	b.n	800b9bc <USBD_StdDevReq+0xdc>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b966:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800b96a:	689b      	ldr	r3, [r3, #8]
 800b96c:	e7f6      	b.n	800b95c <USBD_StdDevReq+0x7c>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b96e:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800b972:	68db      	ldr	r3, [r3, #12]
 800b974:	e7f2      	b.n	800b95c <USBD_StdDevReq+0x7c>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b976:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800b97a:	691b      	ldr	r3, [r3, #16]
 800b97c:	e7ee      	b.n	800b95c <USBD_StdDevReq+0x7c>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b97e:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800b982:	695b      	ldr	r3, [r3, #20]
 800b984:	e7ea      	b.n	800b95c <USBD_StdDevReq+0x7c>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b986:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800b98a:	699b      	ldr	r3, [r3, #24]
 800b98c:	e7e6      	b.n	800b95c <USBD_StdDevReq+0x7c>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 800b98e:	7c03      	ldrb	r3, [r0, #16]
 800b990:	2b00      	cmp	r3, #0
 800b992:	f040 80a5 	bne.w	800bae0 <USBD_StdDevReq+0x200>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b996:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800b99a:	f10d 0006 	add.w	r0, sp, #6
 800b99e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9a0:	4798      	blx	r3
 800b9a2:	e00b      	b.n	800b9bc <USBD_StdDevReq+0xdc>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 800b9a4:	7c03      	ldrb	r3, [r0, #16]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	f040 809a 	bne.w	800bae0 <USBD_StdDevReq+0x200>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b9ac:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800b9b0:	f10d 0006 	add.w	r0, sp, #6
 800b9b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9b6:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b9b8:	2307      	movs	r3, #7
 800b9ba:	7043      	strb	r3, [r0, #1]
  if((len != 0)&& (req->wLength != 0))
 800b9bc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b9c0:	2a00      	cmp	r2, #0
 800b9c2:	f000 8091 	beq.w	800bae8 <USBD_StdDevReq+0x208>
 800b9c6:	88eb      	ldrh	r3, [r5, #6]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	f000 808d 	beq.w	800bae8 <USBD_StdDevReq+0x208>
    len = MIN(len , req->wLength);
 800b9ce:	429a      	cmp	r2, r3
 800b9d0:	bf28      	it	cs
 800b9d2:	461a      	movcs	r2, r3
 800b9d4:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, 
 800b9d8:	4601      	mov	r1, r0
 800b9da:	e064      	b.n	800baa6 <USBD_StdDevReq+0x1c6>
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 800b9dc:	888b      	ldrh	r3, [r1, #4]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d17e      	bne.n	800bae0 <USBD_StdDevReq+0x200>
 800b9e2:	88cb      	ldrh	r3, [r1, #6]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d17b      	bne.n	800bae0 <USBD_StdDevReq+0x200>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800b9e8:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 800b9ec:	788e      	ldrb	r6, [r1, #2]
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800b9ee:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 800b9f0:	f006 067f 	and.w	r6, r6, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800b9f4:	d074      	beq.n	800bae0 <USBD_StdDevReq+0x200>
      pdev->dev_address = dev_addr;
 800b9f6:	f880 61fe 	strb.w	r6, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 800b9fa:	4631      	mov	r1, r6
 800b9fc:	f000 fb53 	bl	800c0a6 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 800ba00:	4620      	mov	r0, r4
 800ba02:	f000 f930 	bl	800bc66 <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 800ba06:	b10e      	cbz	r6, 800ba0c <USBD_StdDevReq+0x12c>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 800ba08:	2302      	movs	r3, #2
 800ba0a:	e000      	b.n	800ba0e <USBD_StdDevReq+0x12e>
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 800ba0c:	2301      	movs	r3, #1
 800ba0e:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
 800ba12:	e069      	b.n	800bae8 <USBD_StdDevReq+0x208>
  cfgidx = (uint8_t)(req->wValue);                 
 800ba14:	7889      	ldrb	r1, [r1, #2]
 800ba16:	4e36      	ldr	r6, [pc, #216]	; (800baf0 <USBD_StdDevReq+0x210>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 800ba18:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);                 
 800ba1a:	7031      	strb	r1, [r6, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 800ba1c:	d860      	bhi.n	800bae0 <USBD_StdDevReq+0x200>
    switch (pdev->dev_state) 
 800ba1e:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800ba22:	2b02      	cmp	r3, #2
 800ba24:	d002      	beq.n	800ba2c <USBD_StdDevReq+0x14c>
 800ba26:	2b03      	cmp	r3, #3
 800ba28:	d008      	beq.n	800ba3c <USBD_StdDevReq+0x15c>
 800ba2a:	e059      	b.n	800bae0 <USBD_StdDevReq+0x200>
      if (cfgidx) 
 800ba2c:	2900      	cmp	r1, #0
 800ba2e:	d053      	beq.n	800bad8 <USBD_StdDevReq+0x1f8>
        pdev->dev_config = cfgidx;
 800ba30:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800ba32:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 800ba34:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800ba36:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
 800ba3a:	e00f      	b.n	800ba5c <USBD_StdDevReq+0x17c>
      if (cfgidx == 0) 
 800ba3c:	b931      	cbnz	r1, 800ba4c <USBD_StdDevReq+0x16c>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ba3e:	2302      	movs	r3, #2
 800ba40:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 800ba44:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 800ba46:	f7ff fe54 	bl	800b6f2 <USBD_ClrClassConfig>
 800ba4a:	e045      	b.n	800bad8 <USBD_StdDevReq+0x1f8>
      else  if (cfgidx != pdev->dev_config) 
 800ba4c:	6841      	ldr	r1, [r0, #4]
 800ba4e:	2901      	cmp	r1, #1
 800ba50:	d042      	beq.n	800bad8 <USBD_StdDevReq+0x1f8>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 800ba52:	b2c9      	uxtb	r1, r1
 800ba54:	f7ff fe4d 	bl	800b6f2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ba58:	7831      	ldrb	r1, [r6, #0]
 800ba5a:	6061      	str	r1, [r4, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 800ba5c:	4620      	mov	r0, r4
 800ba5e:	f7ff fe3d 	bl	800b6dc <USBD_SetClassConfig>
 800ba62:	2802      	cmp	r0, #2
 800ba64:	d138      	bne.n	800bad8 <USBD_StdDevReq+0x1f8>
 800ba66:	e03b      	b.n	800bae0 <USBD_StdDevReq+0x200>
  if (req->wLength != 1) 
 800ba68:	88ca      	ldrh	r2, [r1, #6]
 800ba6a:	2a01      	cmp	r2, #1
 800ba6c:	d138      	bne.n	800bae0 <USBD_StdDevReq+0x200>
    switch (pdev->dev_state )  
 800ba6e:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800ba72:	2b02      	cmp	r3, #2
 800ba74:	d003      	beq.n	800ba7e <USBD_StdDevReq+0x19e>
 800ba76:	2b03      	cmp	r3, #3
 800ba78:	d132      	bne.n	800bae0 <USBD_StdDevReq+0x200>
      USBD_CtlSendData (pdev, 
 800ba7a:	1d01      	adds	r1, r0, #4
 800ba7c:	e013      	b.n	800baa6 <USBD_StdDevReq+0x1c6>
      pdev->dev_default_config = 0;
 800ba7e:	4601      	mov	r1, r0
 800ba80:	2300      	movs	r3, #0
 800ba82:	f841 3f08 	str.w	r3, [r1, #8]!
 800ba86:	e00e      	b.n	800baa6 <USBD_StdDevReq+0x1c6>
  switch (pdev->dev_state) 
 800ba88:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800ba8c:	3b02      	subs	r3, #2
 800ba8e:	2b01      	cmp	r3, #1
 800ba90:	d826      	bhi.n	800bae0 <USBD_StdDevReq+0x200>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 800ba92:	2301      	movs	r3, #1
 800ba94:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 800ba96:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 800ba9a:	b10b      	cbz	r3, 800baa0 <USBD_StdDevReq+0x1c0>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 800ba9c:	2303      	movs	r3, #3
 800ba9e:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, 
 800baa0:	2202      	movs	r2, #2
 800baa2:	f104 010c 	add.w	r1, r4, #12
 800baa6:	4620      	mov	r0, r4
 800baa8:	f000 f8b1 	bl	800bc0e <USBD_CtlSendData>
 800baac:	e01c      	b.n	800bae8 <USBD_StdDevReq+0x208>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800baae:	884b      	ldrh	r3, [r1, #2]
 800bab0:	2b01      	cmp	r3, #1
 800bab2:	d119      	bne.n	800bae8 <USBD_StdDevReq+0x208>
 800bab4:	e008      	b.n	800bac8 <USBD_StdDevReq+0x1e8>
  switch (pdev->dev_state)
 800bab6:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800baba:	3b02      	subs	r3, #2
 800babc:	2b01      	cmp	r3, #1
 800babe:	d80f      	bhi.n	800bae0 <USBD_StdDevReq+0x200>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 800bac0:	884b      	ldrh	r3, [r1, #2]
 800bac2:	2b01      	cmp	r3, #1
 800bac4:	d110      	bne.n	800bae8 <USBD_StdDevReq+0x208>
      pdev->dev_remote_wakeup = 0; 
 800bac6:	2300      	movs	r3, #0
 800bac8:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 800bacc:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800bad0:	4629      	mov	r1, r5
 800bad2:	689b      	ldr	r3, [r3, #8]
 800bad4:	4620      	mov	r0, r4
 800bad6:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 800bad8:	4620      	mov	r0, r4
 800bada:	f000 f8c4 	bl	800bc66 <USBD_CtlSendStatus>
 800bade:	e003      	b.n	800bae8 <USBD_StdDevReq+0x208>
    USBD_CtlError(pdev , req);
 800bae0:	4629      	mov	r1, r5
 800bae2:	4620      	mov	r0, r4
 800bae4:	f7ff fef1 	bl	800b8ca <USBD_CtlError>
}
 800bae8:	2000      	movs	r0, #0
 800baea:	b002      	add	sp, #8
 800baec:	bd70      	pop	{r4, r5, r6, pc}
 800baee:	bf00      	nop
 800baf0:	20000c60 	.word	0x20000c60

0800baf4 <USBD_StdItfReq>:
{
 800baf4:	b538      	push	{r3, r4, r5, lr}
  switch (pdev->dev_state) 
 800baf6:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800bafa:	2b03      	cmp	r3, #3
{
 800bafc:	4604      	mov	r4, r0
 800bafe:	460d      	mov	r5, r1
  switch (pdev->dev_state) 
 800bb00:	d10c      	bne.n	800bb1c <USBD_StdItfReq+0x28>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 800bb02:	790b      	ldrb	r3, [r1, #4]
 800bb04:	2b01      	cmp	r3, #1
 800bb06:	d809      	bhi.n	800bb1c <USBD_StdItfReq+0x28>
      pdev->pClass->Setup (pdev, req); 
 800bb08:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800bb0c:	689b      	ldr	r3, [r3, #8]
 800bb0e:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 800bb10:	88eb      	ldrh	r3, [r5, #6]
 800bb12:	b92b      	cbnz	r3, 800bb20 <USBD_StdItfReq+0x2c>
         USBD_CtlSendStatus(pdev);
 800bb14:	4620      	mov	r0, r4
 800bb16:	f000 f8a6 	bl	800bc66 <USBD_CtlSendStatus>
 800bb1a:	e001      	b.n	800bb20 <USBD_StdItfReq+0x2c>
     USBD_CtlError(pdev , req);
 800bb1c:	f7ff fed5 	bl	800b8ca <USBD_CtlError>
}
 800bb20:	2000      	movs	r0, #0
 800bb22:	bd38      	pop	{r3, r4, r5, pc}

0800bb24 <USBD_StdEPReq>:
{
 800bb24:	b570      	push	{r4, r5, r6, lr}
  switch (req->bRequest) 
 800bb26:	784e      	ldrb	r6, [r1, #1]
  ep_addr  = LOBYTE(req->wIndex);   
 800bb28:	888a      	ldrh	r2, [r1, #4]
  switch (req->bRequest) 
 800bb2a:	2e01      	cmp	r6, #1
{
 800bb2c:	4604      	mov	r4, r0
 800bb2e:	460d      	mov	r5, r1
  ep_addr  = LOBYTE(req->wIndex);   
 800bb30:	b2d3      	uxtb	r3, r2
  switch (req->bRequest) 
 800bb32:	d010      	beq.n	800bb56 <USBD_StdEPReq+0x32>
 800bb34:	d326      	bcc.n	800bb84 <USBD_StdEPReq+0x60>
 800bb36:	2e03      	cmp	r6, #3
 800bb38:	d14b      	bne.n	800bbd2 <USBD_StdEPReq+0xae>
    switch (pdev->dev_state) 
 800bb3a:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800bb3e:	2a02      	cmp	r2, #2
 800bb40:	d027      	beq.n	800bb92 <USBD_StdEPReq+0x6e>
 800bb42:	2a03      	cmp	r2, #3
 800bb44:	d143      	bne.n	800bbce <USBD_StdEPReq+0xaa>
      if (req->wValue == USB_FEATURE_EP_HALT)
 800bb46:	884a      	ldrh	r2, [r1, #2]
 800bb48:	b992      	cbnz	r2, 800bb70 <USBD_StdEPReq+0x4c>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800bb4a:	065e      	lsls	r6, r3, #25
 800bb4c:	d010      	beq.n	800bb70 <USBD_StdEPReq+0x4c>
          USBD_LL_StallEP(pdev , ep_addr);
 800bb4e:	4619      	mov	r1, r3
 800bb50:	f000 fa88 	bl	800c064 <USBD_LL_StallEP>
 800bb54:	e00c      	b.n	800bb70 <USBD_StdEPReq+0x4c>
    switch (pdev->dev_state) 
 800bb56:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800bb5a:	2a02      	cmp	r2, #2
 800bb5c:	d019      	beq.n	800bb92 <USBD_StdEPReq+0x6e>
 800bb5e:	2a03      	cmp	r2, #3
 800bb60:	d135      	bne.n	800bbce <USBD_StdEPReq+0xaa>
      if (req->wValue == USB_FEATURE_EP_HALT)
 800bb62:	884a      	ldrh	r2, [r1, #2]
 800bb64:	bbaa      	cbnz	r2, 800bbd2 <USBD_StdEPReq+0xae>
        if ((ep_addr & 0x7F) != 0x00) 
 800bb66:	0659      	lsls	r1, r3, #25
 800bb68:	d008      	beq.n	800bb7c <USBD_StdEPReq+0x58>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 800bb6a:	4619      	mov	r1, r3
 800bb6c:	f000 fa81 	bl	800c072 <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 800bb70:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800bb74:	4629      	mov	r1, r5
 800bb76:	689b      	ldr	r3, [r3, #8]
 800bb78:	4620      	mov	r0, r4
 800bb7a:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 800bb7c:	4620      	mov	r0, r4
 800bb7e:	f000 f872 	bl	800bc66 <USBD_CtlSendStatus>
 800bb82:	e026      	b.n	800bbd2 <USBD_StdEPReq+0xae>
    switch (pdev->dev_state) 
 800bb84:	f890 51fc 	ldrb.w	r5, [r0, #508]	; 0x1fc
 800bb88:	2d02      	cmp	r5, #2
 800bb8a:	d002      	beq.n	800bb92 <USBD_StdEPReq+0x6e>
 800bb8c:	2d03      	cmp	r5, #3
 800bb8e:	d006      	beq.n	800bb9e <USBD_StdEPReq+0x7a>
 800bb90:	e01d      	b.n	800bbce <USBD_StdEPReq+0xaa>
      if ((ep_addr & 0x7F) != 0x00) 
 800bb92:	065a      	lsls	r2, r3, #25
 800bb94:	d01d      	beq.n	800bbd2 <USBD_StdEPReq+0xae>
        USBD_LL_StallEP(pdev , ep_addr);
 800bb96:	4619      	mov	r1, r3
 800bb98:	f000 fa64 	bl	800c064 <USBD_LL_StallEP>
 800bb9c:	e019      	b.n	800bbd2 <USBD_StdEPReq+0xae>
 800bb9e:	f003 057f 	and.w	r5, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 800bba2:	f012 0f80 	tst.w	r2, #128	; 0x80
 800bba6:	eb00 1505 	add.w	r5, r0, r5, lsl #4
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 800bbaa:	4619      	mov	r1, r3
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 800bbac:	bf14      	ite	ne
 800bbae:	3514      	addne	r5, #20
 800bbb0:	f505 7582 	addeq.w	r5, r5, #260	; 0x104
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 800bbb4:	f000 fa64 	bl	800c080 <USBD_LL_IsStallEP>
 800bbb8:	b110      	cbz	r0, 800bbc0 <USBD_StdEPReq+0x9c>
        pep->status = 0x0001;     
 800bbba:	2301      	movs	r3, #1
 800bbbc:	602b      	str	r3, [r5, #0]
 800bbbe:	e000      	b.n	800bbc2 <USBD_StdEPReq+0x9e>
        pep->status = 0x0000;  
 800bbc0:	6028      	str	r0, [r5, #0]
      USBD_CtlSendData (pdev,
 800bbc2:	2202      	movs	r2, #2
 800bbc4:	4629      	mov	r1, r5
 800bbc6:	4620      	mov	r0, r4
 800bbc8:	f000 f821 	bl	800bc0e <USBD_CtlSendData>
      break;
 800bbcc:	e001      	b.n	800bbd2 <USBD_StdEPReq+0xae>
      USBD_CtlError(pdev , req);
 800bbce:	f7ff fe7c 	bl	800b8ca <USBD_CtlError>
}
 800bbd2:	2000      	movs	r0, #0
 800bbd4:	bd70      	pop	{r4, r5, r6, pc}

0800bbd6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bbd6:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 800bbd8:	b1c0      	cbz	r0, 800bc0c <USBD_GetString+0x36>
 800bbda:	4605      	mov	r5, r0
 800bbdc:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 800bbde:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bbe2:	b2db      	uxtb	r3, r3
 800bbe4:	2c00      	cmp	r4, #0
 800bbe6:	d1f9      	bne.n	800bbdc <USBD_GetString+0x6>
    *len =  USBD_GetLen(desc) * 2 + 2;    
 800bbe8:	005b      	lsls	r3, r3, #1
 800bbea:	3302      	adds	r3, #2
 800bbec:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 800bbee:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 800bbf0:	2303      	movs	r3, #3
 800bbf2:	704b      	strb	r3, [r1, #1]
 800bbf4:	3801      	subs	r0, #1
 800bbf6:	2302      	movs	r3, #2
    while (*desc != '\0') 
 800bbf8:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800bbfc:	b135      	cbz	r5, 800bc0c <USBD_GetString+0x36>
      unicode[idx++] = *desc++;
 800bbfe:	1c5a      	adds	r2, r3, #1
 800bc00:	b2d2      	uxtb	r2, r2
 800bc02:	54cd      	strb	r5, [r1, r3]
      unicode[idx++] =  0x00;
 800bc04:	3302      	adds	r3, #2
 800bc06:	b2db      	uxtb	r3, r3
 800bc08:	548c      	strb	r4, [r1, r2]
 800bc0a:	e7f5      	b.n	800bbf8 <USBD_GetString+0x22>
 800bc0c:	bd30      	pop	{r4, r5, pc}

0800bc0e <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 800bc0e:	b510      	push	{r4, lr}
 800bc10:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 800bc12:	2202      	movs	r2, #2
 800bc14:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 800bc18:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 800bc1a:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 800bc1c:	61c3      	str	r3, [r0, #28]
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 800bc1e:	2100      	movs	r1, #0
 800bc20:	f000 fa48 	bl	800c0b4 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 800bc24:	2000      	movs	r0, #0
 800bc26:	bd10      	pop	{r4, pc}

0800bc28 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 800bc28:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 800bc2a:	4613      	mov	r3, r2
 800bc2c:	460a      	mov	r2, r1
 800bc2e:	2100      	movs	r1, #0
 800bc30:	f000 fa40 	bl	800c0b4 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 800bc34:	2000      	movs	r0, #0
 800bc36:	bd08      	pop	{r3, pc}

0800bc38 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 800bc38:	b510      	push	{r4, lr}
 800bc3a:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 800bc3c:	2203      	movs	r2, #3
 800bc3e:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 800bc42:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 800bc46:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 800bc48:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
  USBD_LL_PrepareReceive (pdev,
 800bc4c:	2100      	movs	r1, #0
 800bc4e:	f000 fa38 	bl	800c0c2 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 800bc52:	2000      	movs	r0, #0
 800bc54:	bd10      	pop	{r4, pc}

0800bc56 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 800bc56:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 800bc58:	4613      	mov	r3, r2
 800bc5a:	460a      	mov	r2, r1
 800bc5c:	2100      	movs	r1, #0
 800bc5e:	f000 fa30 	bl	800c0c2 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 800bc62:	2000      	movs	r0, #0
 800bc64:	bd08      	pop	{r3, pc}

0800bc66 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 800bc66:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bc68:	2304      	movs	r3, #4
 800bc6a:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 800bc6e:	2300      	movs	r3, #0
 800bc70:	461a      	mov	r2, r3
 800bc72:	4619      	mov	r1, r3
 800bc74:	f000 fa1e 	bl	800c0b4 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 800bc78:	2000      	movs	r0, #0
 800bc7a:	bd08      	pop	{r3, pc}

0800bc7c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 800bc7c:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 800bc7e:	2305      	movs	r3, #5
 800bc80:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 800bc84:	2300      	movs	r3, #0
 800bc86:	461a      	mov	r2, r3
 800bc88:	4619      	mov	r1, r3
 800bc8a:	f000 fa1a 	bl	800c0c2 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 800bc8e:	2000      	movs	r0, #0
 800bc90:	bd08      	pop	{r3, pc}

0800bc92 <USBD_CDC_DataIn>:
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 800bc92:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  if(pdev->pClassData != NULL)
 800bc96:	b11b      	cbz	r3, 800bca0 <USBD_CDC_DataIn+0xe>
  {
    
    hcdc->TxState = 0;
 800bc98:	2000      	movs	r0, #0
 800bc9a:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214

    return USBD_OK;
 800bc9e:	4770      	bx	lr
  }
  else
  {
    return USBD_FAIL;
 800bca0:	2002      	movs	r0, #2
  }
}
 800bca2:	4770      	bx	lr

0800bca4 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 800bca4:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
{ 
 800bca8:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 800bcaa:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 800bcae:	b15b      	cbz	r3, 800bcc8 <USBD_CDC_EP0_RxReady+0x24>
 800bcb0:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 800bcb4:	28ff      	cmp	r0, #255	; 0xff
 800bcb6:	d007      	beq.n	800bcc8 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bcb8:	689b      	ldr	r3, [r3, #8]
 800bcba:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800bcbe:	4621      	mov	r1, r4
 800bcc0:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFF; 
 800bcc2:	23ff      	movs	r3, #255	; 0xff
 800bcc4:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
      
  }
  return USBD_OK;
}
 800bcc8:	2000      	movs	r0, #0
 800bcca:	bd10      	pop	{r4, pc}

0800bccc <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800bccc:	2343      	movs	r3, #67	; 0x43
 800bcce:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 800bcd0:	4800      	ldr	r0, [pc, #0]	; (800bcd4 <USBD_CDC_GetFSCfgDesc+0x8>)
 800bcd2:	4770      	bx	lr
 800bcd4:	2000090c 	.word	0x2000090c

0800bcd8 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800bcd8:	2343      	movs	r3, #67	; 0x43
 800bcda:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 800bcdc:	4800      	ldr	r0, [pc, #0]	; (800bce0 <USBD_CDC_GetHSCfgDesc+0x8>)
 800bcde:	4770      	bx	lr
 800bce0:	200009d8 	.word	0x200009d8

0800bce4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800bce4:	2343      	movs	r3, #67	; 0x43
 800bce6:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 800bce8:	4800      	ldr	r0, [pc, #0]	; (800bcec <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 800bcea:	4770      	bx	lr
 800bcec:	20000994 	.word	0x20000994

0800bcf0 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800bcf0:	230a      	movs	r3, #10
 800bcf2:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 800bcf4:	4800      	ldr	r0, [pc, #0]	; (800bcf8 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 800bcf6:	4770      	bx	lr
 800bcf8:	20000988 	.word	0x20000988

0800bcfc <USBD_CDC_DataOut>:
{      
 800bcfc:	b538      	push	{r3, r4, r5, lr}
 800bcfe:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 800bd00:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800bd04:	f000 f9e4 	bl	800c0d0 <USBD_LL_GetRxDataSize>
  if(pdev->pClassData != NULL)
 800bd08:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800bd0c:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  if(pdev->pClassData != NULL)
 800bd10:	b14b      	cbz	r3, 800bd26 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800bd12:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 800bd16:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 800bd1a:	68db      	ldr	r3, [r3, #12]
 800bd1c:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 800bd20:	4798      	blx	r3
    return USBD_OK;
 800bd22:	2000      	movs	r0, #0
 800bd24:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 800bd26:	2002      	movs	r0, #2
}
 800bd28:	bd38      	pop	{r3, r4, r5, pc}

0800bd2a <USBD_CDC_Setup>:
{
 800bd2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd2c:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bd2e:	7809      	ldrb	r1, [r1, #0]
 800bd30:	f001 0360 	and.w	r3, r1, #96	; 0x60
 800bd34:	2b20      	cmp	r3, #32
{
 800bd36:	4606      	mov	r6, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bd38:	d122      	bne.n	800bd80 <USBD_CDC_Setup+0x56>
    if (req->wLength)
 800bd3a:	88e2      	ldrh	r2, [r4, #6]
 800bd3c:	7863      	ldrb	r3, [r4, #1]
 800bd3e:	b1ca      	cbz	r2, 800bd74 <USBD_CDC_Setup+0x4a>
      if (req->bmRequest & 0x80)
 800bd40:	0609      	lsls	r1, r1, #24
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 800bd42:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
      if (req->bmRequest & 0x80)
 800bd46:	d50b      	bpl.n	800bd60 <USBD_CDC_Setup+0x36>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bd48:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	688f      	ldr	r7, [r1, #8]
 800bd50:	4629      	mov	r1, r5
 800bd52:	47b8      	blx	r7
          USBD_CtlSendData (pdev, 
 800bd54:	88e2      	ldrh	r2, [r4, #6]
 800bd56:	4629      	mov	r1, r5
 800bd58:	4630      	mov	r0, r6
 800bd5a:	f7ff ff58 	bl	800bc0e <USBD_CtlSendData>
 800bd5e:	e00f      	b.n	800bd80 <USBD_CDC_Setup+0x56>
        hcdc->CmdOpCode = req->bRequest;
 800bd60:	f885 3200 	strb.w	r3, [r5, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 800bd64:	88e3      	ldrh	r3, [r4, #6]
 800bd66:	f885 3201 	strb.w	r3, [r5, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, 
 800bd6a:	88e2      	ldrh	r2, [r4, #6]
 800bd6c:	4629      	mov	r1, r5
 800bd6e:	f7ff ff63 	bl	800bc38 <USBD_CtlPrepareRx>
 800bd72:	e005      	b.n	800bd80 <USBD_CDC_Setup+0x56>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bd74:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
 800bd78:	4618      	mov	r0, r3
 800bd7a:	688c      	ldr	r4, [r1, #8]
 800bd7c:	4611      	mov	r1, r2
 800bd7e:	47a0      	blx	r4
}
 800bd80:	2000      	movs	r0, #0
 800bd82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bd84 <USBD_CDC_DeInit>:
{
 800bd84:	b510      	push	{r4, lr}
  USBD_LL_CloseEP(pdev,
 800bd86:	2181      	movs	r1, #129	; 0x81
{
 800bd88:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,
 800bd8a:	f000 f964 	bl	800c056 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 800bd8e:	2101      	movs	r1, #1
 800bd90:	4620      	mov	r0, r4
 800bd92:	f000 f960 	bl	800c056 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 800bd96:	2182      	movs	r1, #130	; 0x82
 800bd98:	4620      	mov	r0, r4
 800bd9a:	f000 f95c 	bl	800c056 <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 800bd9e:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 800bda2:	b153      	cbz	r3, 800bdba <USBD_CDC_DeInit+0x36>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800bda4:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 800bda8:	685b      	ldr	r3, [r3, #4]
 800bdaa:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800bdac:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 800bdb0:	f000 f998 	bl	800c0e4 <USBD_static_free>
    pdev->pClassData = NULL;
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 800bdba:	2000      	movs	r0, #0
 800bdbc:	bd10      	pop	{r4, pc}

0800bdbe <USBD_CDC_Init>:
{
 800bdbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800bdc0:	7c03      	ldrb	r3, [r0, #16]
{
 800bdc2:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800bdc4:	b943      	cbnz	r3, 800bdd8 <USBD_CDC_Init+0x1a>
    USBD_LL_OpenEP(pdev,
 800bdc6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bdca:	2202      	movs	r2, #2
 800bdcc:	2181      	movs	r1, #129	; 0x81
 800bdce:	f000 f938 	bl	800c042 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 800bdd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bdd6:	e005      	b.n	800bde4 <USBD_CDC_Init+0x26>
    USBD_LL_OpenEP(pdev,
 800bdd8:	2340      	movs	r3, #64	; 0x40
 800bdda:	2202      	movs	r2, #2
 800bddc:	2181      	movs	r1, #129	; 0x81
 800bdde:	f000 f930 	bl	800c042 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 800bde2:	2340      	movs	r3, #64	; 0x40
 800bde4:	2202      	movs	r2, #2
 800bde6:	2101      	movs	r1, #1
 800bde8:	4620      	mov	r0, r4
 800bdea:	f000 f92a 	bl	800c042 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,
 800bdee:	2308      	movs	r3, #8
 800bdf0:	2203      	movs	r2, #3
 800bdf2:	2182      	movs	r1, #130	; 0x82
 800bdf4:	4620      	mov	r0, r4
 800bdf6:	f000 f924 	bl	800c042 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800bdfa:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800bdfe:	f000 f96d 	bl	800c0dc <USBD_static_malloc>
 800be02:	4606      	mov	r6, r0
 800be04:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  if(pdev->pClassData == NULL)
 800be08:	b1e8      	cbz	r0, 800be46 <USBD_CDC_Init+0x88>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800be0a:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	4798      	blx	r3
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800be12:	7c27      	ldrb	r7, [r4, #16]
    hcdc->TxState =0;
 800be14:	2500      	movs	r5, #0
 800be16:	f8c6 5214 	str.w	r5, [r6, #532]	; 0x214
    hcdc->RxState =0;
 800be1a:	f8c6 5218 	str.w	r5, [r6, #536]	; 0x218
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800be1e:	b94f      	cbnz	r7, 800be34 <USBD_CDC_Init+0x76>
      USBD_LL_PrepareReceive(pdev,
 800be20:	f44f 7300 	mov.w	r3, #512	; 0x200
 800be24:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 800be28:	2101      	movs	r1, #1
 800be2a:	4620      	mov	r0, r4
 800be2c:	f000 f949 	bl	800c0c2 <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 800be30:	4638      	mov	r0, r7
 800be32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      USBD_LL_PrepareReceive(pdev,
 800be34:	2340      	movs	r3, #64	; 0x40
 800be36:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 800be3a:	2101      	movs	r1, #1
 800be3c:	4620      	mov	r0, r4
 800be3e:	f000 f940 	bl	800c0c2 <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 800be42:	4628      	mov	r0, r5
 800be44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret = 1; 
 800be46:	2001      	movs	r0, #1
}
 800be48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800be4a <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
  
  if(fops != NULL)
 800be4a:	b119      	cbz	r1, 800be54 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 800be4c:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
    ret = USBD_OK;    
 800be50:	2000      	movs	r0, #0
 800be52:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 800be54:	2002      	movs	r0, #2
  }
  
  return ret;
}
 800be56:	4770      	bx	lr

0800be58 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 800be58:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;  
  
  return USBD_OK;  
}
 800be5c:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 800be5e:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 800be62:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 800be66:	4770      	bx	lr

0800be68 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
  
  hcdc->RxBuffer = pbuff;
 800be68:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  return USBD_OK;
}
 800be6c:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 800be6e:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 800be72:	4770      	bx	lr

0800be74 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{      
 800be74:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 800be76:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
  
  if(pdev->pClassData != NULL)
 800be7a:	b175      	cbz	r5, 800be9a <USBD_CDC_TransmitPacket+0x26>
  {
    if(hcdc->TxState == 0)
 800be7c:	f8d5 4214 	ldr.w	r4, [r5, #532]	; 0x214
 800be80:	b96c      	cbnz	r4, 800be9e <USBD_CDC_TransmitPacket+0x2a>
    {
      
      /* Transmit next packet */
      USBD_LL_Transmit(pdev,
 800be82:	f8b5 3210 	ldrh.w	r3, [r5, #528]	; 0x210
 800be86:	f8d5 2208 	ldr.w	r2, [r5, #520]	; 0x208
 800be8a:	2181      	movs	r1, #129	; 0x81
 800be8c:	f000 f912 	bl	800c0b4 <USBD_LL_Transmit>
                       CDC_IN_EP,
                       hcdc->TxBuffer,
                       hcdc->TxLength);
      
      /* Tx Transfer in progress */
      hcdc->TxState = 1;
 800be90:	2301      	movs	r3, #1
 800be92:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
      return USBD_OK;
 800be96:	4620      	mov	r0, r4
 800be98:	bd38      	pop	{r3, r4, r5, pc}
      return USBD_BUSY;
    }
  }
  else
  {
    return USBD_FAIL;
 800be9a:	2002      	movs	r0, #2
 800be9c:	bd38      	pop	{r3, r4, r5, pc}
      return USBD_BUSY;
 800be9e:	2001      	movs	r0, #1
  }
}
 800bea0:	bd38      	pop	{r3, r4, r5, pc}

0800bea2 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 800bea2:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
{      
 800bea6:	b510      	push	{r4, lr}
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800bea8:	b162      	cbz	r2, 800bec4 <USBD_CDC_ReceivePacket+0x22>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800beaa:	7c04      	ldrb	r4, [r0, #16]
 800beac:	b914      	cbnz	r4, 800beb4 <USBD_CDC_ReceivePacket+0x12>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800beae:	f44f 7300 	mov.w	r3, #512	; 0x200
 800beb2:	e000      	b.n	800beb6 <USBD_CDC_ReceivePacket+0x14>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800beb4:	2340      	movs	r3, #64	; 0x40
 800beb6:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800beba:	2101      	movs	r1, #1
 800bebc:	f000 f901 	bl	800c0c2 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800bec0:	2000      	movs	r0, #0
 800bec2:	bd10      	pop	{r4, pc}
  }
  else
  {
    return USBD_FAIL;
 800bec4:	2002      	movs	r0, #2
  }
}
 800bec6:	bd10      	pop	{r4, pc}

0800bec8 <HAL_PCD_MspInit>:
  * @brief  Initializes the PCD MSP.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef *hpcd)
{
 800bec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIOA clock for USB DataLines */
  __GPIOA_CLK_ENABLE();
 800becc:	4c24      	ldr	r4, [pc, #144]	; (800bf60 <HAL_PCD_MspInit+0x98>)
 800bece:	6963      	ldr	r3, [r4, #20]
 800bed0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bed4:	6163      	str	r3, [r4, #20]
  
  /* Enable the GPIOB clock for USB external Pull-Up */
  __GPIOB_CLK_ENABLE();
 800bed6:	6963      	ldr	r3, [r4, #20]
{
 800bed8:	b086      	sub	sp, #24
  __GPIOB_CLK_ENABLE();
 800beda:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bede:	6163      	str	r3, [r4, #20]

  /* Create a USB Disconnect signal for 1ms */
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
 800bee0:	f44f 56c0 	mov.w	r6, #6144	; 0x1800
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800bee4:	2311      	movs	r3, #17
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bee6:	2500      	movs	r5, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800bee8:	f04f 0803 	mov.w	r8, #3
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800beec:	270e      	movs	r7, #14
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 800beee:	a901      	add	r1, sp, #4
 800bef0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800bef4:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
 800bef6:	9601      	str	r6, [sp, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bef8:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800befa:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800befe:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 800bf00:	f7fd fe92 	bl	8009c28 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA,(GPIO_PIN_11 | GPIO_PIN_12),0);
 800bf04:	462a      	mov	r2, r5
 800bf06:	4631      	mov	r1, r6
 800bf08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800bf0c:	f7fd ff58 	bl	8009dc0 <HAL_GPIO_WritePin>
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBD_LL_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 800bf10:	2001      	movs	r0, #1
 800bf12:	f7fd fe13 	bl	8009b3c <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA,(GPIO_PIN_11 | GPIO_PIN_12),1);
 800bf16:	2201      	movs	r2, #1
 800bf18:	4631      	mov	r1, r6
 800bf1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800bf1e:	f7fd ff4f 	bl	8009dc0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bf22:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 800bf24:	a901      	add	r1, sp, #4
 800bf26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bf2a:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
 800bf2c:	9601      	str	r6, [sp, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf2e:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800bf30:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800bf34:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 800bf36:	f7fd fe77 	bl	8009c28 <HAL_GPIO_Init>
  __USB_CLK_ENABLE();
 800bf3a:	69e3      	ldr	r3, [r4, #28]
 800bf3c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bf40:	61e3      	str	r3, [r4, #28]
  __SYSCFG_CLK_ENABLE();
 800bf42:	69a3      	ldr	r3, [r4, #24]
 800bf44:	f043 0301 	orr.w	r3, r3, #1
 800bf48:	61a3      	str	r3, [r4, #24]
  HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 5, 0);
 800bf4a:	462a      	mov	r2, r5
 800bf4c:	2105      	movs	r1, #5
 800bf4e:	2014      	movs	r0, #20
 800bf50:	f7fd fe14 	bl	8009b7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn); 
 800bf54:	2014      	movs	r0, #20
 800bf56:	f7fd fe45 	bl	8009be4 <HAL_NVIC_EnableIRQ>
}
 800bf5a:	b006      	add	sp, #24
 800bf5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf60:	40021000 	.word	0x40021000

0800bf64 <HAL_PCD_SetupStageCallback>:
  USBD_LL_SetupStage(hpcd->pData, (uint8_t *)hpcd->Setup);
 800bf64:	f500 71a2 	add.w	r1, r0, #324	; 0x144
 800bf68:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 800bf6c:	f7ff bbc8 	b.w	800b700 <USBD_LL_SetupStage>

0800bf70 <HAL_PCD_DataOutStageCallback>:
  USBD_LL_DataOutStage(hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bf70:	231c      	movs	r3, #28
 800bf72:	fb03 0301 	mla	r3, r3, r1, r0
 800bf76:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 800bf7a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800bf7e:	f7ff bbec 	b.w	800b75a <USBD_LL_DataOutStage>

0800bf82 <HAL_PCD_DataInStageCallback>:
  USBD_LL_DataInStage(hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bf82:	231c      	movs	r3, #28
 800bf84:	fb03 0301 	mla	r3, r3, r1, r0
 800bf88:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 800bf8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bf8e:	f7ff bc15 	b.w	800b7bc <USBD_LL_DataInStage>

0800bf92 <HAL_PCD_SOFCallback>:
  USBD_LL_SOF(hpcd->pData);
 800bf92:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 800bf96:	f7ff bc78 	b.w	800b88a <USBD_LL_SOF>

0800bf9a <HAL_PCD_ResetCallback>:
{   
 800bf9a:	b510      	push	{r4, lr}
 800bf9c:	4604      	mov	r4, r0
  USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
 800bf9e:	2101      	movs	r1, #1
 800bfa0:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 800bfa4:	f7ff fc6e 	bl	800b884 <USBD_LL_SetSpeed>
  USBD_LL_Reset(hpcd->pData);
 800bfa8:	f8d4 0174 	ldr.w	r0, [r4, #372]	; 0x174
}
 800bfac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset(hpcd->pData);
 800bfb0:	f7ff bc49 	b.w	800b846 <USBD_LL_Reset>

0800bfb4 <HAL_PCD_SuspendCallback>:
 800bfb4:	4770      	bx	lr

0800bfb6 <HAL_PCD_ResumeCallback>:
 800bfb6:	4770      	bx	lr

0800bfb8 <USBD_LL_Init>:
{    
 800bfb8:	b538      	push	{r3, r4, r5, lr}
  hpcd.Init.dev_endpoints = 8;
 800bfba:	4a1c      	ldr	r2, [pc, #112]	; (800c02c <USBD_LL_Init+0x74>)
{    
 800bfbc:	4605      	mov	r5, r0
  hpcd.Instance = USB;
 800bfbe:	481c      	ldr	r0, [pc, #112]	; (800c030 <USBD_LL_Init+0x78>)
  pdev->pData = &hpcd;
 800bfc0:	f8c5 0220 	str.w	r0, [r5, #544]	; 0x220
  hpcd.Init.dev_endpoints = 8;
 800bfc4:	2308      	movs	r3, #8
  hpcd.Init.ep0_mps = PCD_EP0MPS_64;
 800bfc6:	2400      	movs	r4, #0
  hpcd.Init.dev_endpoints = 8;
 800bfc8:	e880 000c 	stmia.w	r0, {r2, r3}
  hpcd.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bfcc:	2302      	movs	r3, #2
  hpcd.Init.ep0_mps = PCD_EP0MPS_64;
 800bfce:	60c4      	str	r4, [r0, #12]
  hpcd.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bfd0:	6103      	str	r3, [r0, #16]
  hpcd.Init.speed = PCD_SPEED_FULL;
 800bfd2:	6083      	str	r3, [r0, #8]
  hpcd.pData = pdev;
 800bfd4:	f8c0 5174 	str.w	r5, [r0, #372]	; 0x174
  HAL_PCD_Init(pdev->pData);
 800bfd8:	f7fd fefb 	bl	8009dd2 <HAL_PCD_Init>
  HAL_PCDEx_PMAConfig(pdev->pData , 0x00 , PCD_SNG_BUF, 0x40);
 800bfdc:	4622      	mov	r2, r4
 800bfde:	4621      	mov	r1, r4
 800bfe0:	2340      	movs	r3, #64	; 0x40
 800bfe2:	f8d5 0220 	ldr.w	r0, [r5, #544]	; 0x220
 800bfe6:	f7fe fe04 	bl	800abf2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(pdev->pData , 0x80 , PCD_SNG_BUF, 0x80);
 800bfea:	2380      	movs	r3, #128	; 0x80
 800bfec:	4622      	mov	r2, r4
 800bfee:	4619      	mov	r1, r3
 800bff0:	f8d5 0220 	ldr.w	r0, [r5, #544]	; 0x220
 800bff4:	f7fe fdfd 	bl	800abf2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(pdev->pData , CDC_IN_EP , PCD_SNG_BUF, 0xC0);  
 800bff8:	4622      	mov	r2, r4
 800bffa:	23c0      	movs	r3, #192	; 0xc0
 800bffc:	2181      	movs	r1, #129	; 0x81
 800bffe:	f8d5 0220 	ldr.w	r0, [r5, #544]	; 0x220
 800c002:	f7fe fdf6 	bl	800abf2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(pdev->pData , CDC_OUT_EP , PCD_SNG_BUF, 0x110);
 800c006:	4622      	mov	r2, r4
 800c008:	f44f 7388 	mov.w	r3, #272	; 0x110
 800c00c:	2101      	movs	r1, #1
 800c00e:	f8d5 0220 	ldr.w	r0, [r5, #544]	; 0x220
 800c012:	f7fe fdee 	bl	800abf2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(pdev->pData , CDC_CMD_EP , PCD_SNG_BUF, 0x100); 
 800c016:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c01a:	4622      	mov	r2, r4
 800c01c:	2182      	movs	r1, #130	; 0x82
 800c01e:	f8d5 0220 	ldr.w	r0, [r5, #544]	; 0x220
 800c022:	f7fe fde6 	bl	800abf2 <HAL_PCDEx_PMAConfig>
}
 800c026:	4620      	mov	r0, r4
 800c028:	bd38      	pop	{r3, r4, r5, pc}
 800c02a:	bf00      	nop
 800c02c:	40005c00 	.word	0x40005c00
 800c030:	20001220 	.word	0x20001220

0800c034 <USBD_LL_Start>:
{
 800c034:	b508      	push	{r3, lr}
  HAL_PCD_Start(pdev->pData);
 800c036:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800c03a:	f7fd ff18 	bl	8009e6e <HAL_PCD_Start>
}
 800c03e:	2000      	movs	r0, #0
 800c040:	bd08      	pop	{r3, pc}

0800c042 <USBD_LL_OpenEP>:
{
 800c042:	b510      	push	{r4, lr}
 800c044:	461c      	mov	r4, r3
  HAL_PCD_EP_Open(pdev->pData,
 800c046:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800c04a:	4613      	mov	r3, r2
 800c04c:	4622      	mov	r2, r4
 800c04e:	f7fd ff2a 	bl	8009ea6 <HAL_PCD_EP_Open>
}
 800c052:	2000      	movs	r0, #0
 800c054:	bd10      	pop	{r4, pc}

0800c056 <USBD_LL_CloseEP>:
{
 800c056:	b508      	push	{r3, lr}
  HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c058:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800c05c:	f7fe f8be 	bl	800a1dc <HAL_PCD_EP_Close>
}
 800c060:	2000      	movs	r0, #0
 800c062:	bd08      	pop	{r3, pc}

0800c064 <USBD_LL_StallEP>:
{
 800c064:	b508      	push	{r3, lr}
  HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c066:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800c06a:	f7fe fd10 	bl	800aa8e <HAL_PCD_EP_SetStall>
}
 800c06e:	2000      	movs	r0, #0
 800c070:	bd08      	pop	{r3, pc}

0800c072 <USBD_LL_ClearStallEP>:
{
 800c072:	b508      	push	{r3, lr}
  HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c074:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800c078:	f7fe fd58 	bl	800ab2c <HAL_PCD_EP_ClrStall>
}
 800c07c:	2000      	movs	r0, #0
 800c07e:	bd08      	pop	{r3, pc}

0800c080 <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 800c080:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800c084:	f8d0 2220 	ldr.w	r2, [r0, #544]	; 0x220
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c088:	bf18      	it	ne
 800c08a:	f001 037f 	andne.w	r3, r1, #127	; 0x7f
 800c08e:	f04f 001c 	mov.w	r0, #28
 800c092:	bf15      	itete	ne
 800c094:	fb00 2103 	mlane	r1, r0, r3, r2
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c098:	fb00 2101 	mlaeq	r1, r0, r1, r2
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c09c:	f891 002a 	ldrbne.w	r0, [r1, #42]	; 0x2a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c0a0:	f891 00b6 	ldrbeq.w	r0, [r1, #182]	; 0xb6
}
 800c0a4:	4770      	bx	lr

0800c0a6 <USBD_LL_SetUSBAddress>:
{
 800c0a6:	b508      	push	{r3, lr}
  HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c0a8:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800c0ac:	f7fd fee5 	bl	8009e7a <HAL_PCD_SetAddress>
}
 800c0b0:	2000      	movs	r0, #0
 800c0b2:	bd08      	pop	{r3, pc}

0800c0b4 <USBD_LL_Transmit>:
{
 800c0b4:	b508      	push	{r3, lr}
  HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c0b6:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800c0ba:	f7fe f9eb 	bl	800a494 <HAL_PCD_EP_Transmit>
}
 800c0be:	2000      	movs	r0, #0
 800c0c0:	bd08      	pop	{r3, pc}

0800c0c2 <USBD_LL_PrepareReceive>:
{
 800c0c2:	b508      	push	{r3, lr}
  HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c0c4:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800c0c8:	f7fe f95f 	bl	800a38a <HAL_PCD_EP_Receive>
}
 800c0cc:	2000      	movs	r0, #0
 800c0ce:	bd08      	pop	{r3, pc}

0800c0d0 <USBD_LL_GetRxDataSize>:
{
 800c0d0:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount(pdev->pData, ep_addr);
 800c0d2:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800c0d6:	f7fe f9d5 	bl	800a484 <HAL_PCD_EP_GetRxCount>
}
 800c0da:	bd08      	pop	{r3, pc}

0800c0dc <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[MAX_STATIC_ALLOC_SIZE];
  return mem;
}
 800c0dc:	4800      	ldr	r0, [pc, #0]	; (800c0e0 <USBD_static_malloc+0x4>)
 800c0de:	4770      	bx	lr
 800c0e0:	20000c64 	.word	0x20000c64

0800c0e4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  *p pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c0e4:	4770      	bx	lr
	...

0800c0e8 <USBD_VCP_DeviceDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(hUSBDDeviceDesc);
 800c0e8:	2312      	movs	r3, #18
 800c0ea:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)hUSBDDeviceDesc;
}
 800c0ec:	4800      	ldr	r0, [pc, #0]	; (800c0f0 <USBD_VCP_DeviceDescriptor+0x8>)
 800c0ee:	4770      	bx	lr
 800c0f0:	0801c36d 	.word	0x0801c36d

0800c0f4 <USBD_VCP_LangIDStrDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);  
 800c0f4:	2304      	movs	r3, #4
 800c0f6:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)USBD_LangIDDesc;
}
 800c0f8:	4800      	ldr	r0, [pc, #0]	; (800c0fc <USBD_VCP_LangIDStrDescriptor+0x8>)
 800c0fa:	4770      	bx	lr
 800c0fc:	0801c31c 	.word	0x0801c31c

0800c100 <IntToUnicode>:
  */
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 800c100:	2300      	movs	r3, #0
{
 800c102:	b530      	push	{r4, r5, lr}
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 800c104:	461d      	mov	r5, r3
  for( idx = 0 ; idx < len ; idx ++)
 800c106:	b2dc      	uxtb	r4, r3
 800c108:	42a2      	cmp	r2, r4
 800c10a:	d90c      	bls.n	800c126 <IntToUnicode+0x26>
    if( ((value >> 28)) < 0xA )
 800c10c:	0f04      	lsrs	r4, r0, #28
 800c10e:	2c09      	cmp	r4, #9
      pbuf[ 2* idx] = (value >> 28) + '0';
 800c110:	bf94      	ite	ls
 800c112:	3430      	addls	r4, #48	; 0x30
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 800c114:	3437      	addhi	r4, #55	; 0x37
 800c116:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[ 2* idx + 1] = 0;
 800c11a:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    value = value << 4;
 800c11e:	0100      	lsls	r0, r0, #4
    pbuf[ 2* idx + 1] = 0;
 800c120:	7065      	strb	r5, [r4, #1]
 800c122:	3301      	adds	r3, #1
 800c124:	e7ef      	b.n	800c106 <IntToUnicode+0x6>
  }
}
 800c126:	bd30      	pop	{r4, r5, pc}

0800c128 <USBD_VCP_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 800c128:	231a      	movs	r3, #26
{
 800c12a:	b510      	push	{r4, lr}
  deviceserial2 = *(uint32_t*)DEVICE_ID3;
 800c12c:	4a09      	ldr	r2, [pc, #36]	; (800c154 <USBD_VCP_SerialStrDescriptor+0x2c>)
  *length = USB_SIZ_STRING_SERIAL;
 800c12e:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t*)DEVICE_ID1;
 800c130:	4b09      	ldr	r3, [pc, #36]	; (800c158 <USBD_VCP_SerialStrDescriptor+0x30>)
  deviceserial0 += deviceserial2;
 800c132:	6810      	ldr	r0, [r2, #0]
  deviceserial0 = *(uint32_t*)DEVICE_ID1;
 800c134:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 800c136:	1818      	adds	r0, r3, r0
 800c138:	d00a      	beq.n	800c150 <USBD_VCP_SerialStrDescriptor+0x28>
  deviceserial1 = *(uint32_t*)DEVICE_ID2;
 800c13a:	4b08      	ldr	r3, [pc, #32]	; (800c15c <USBD_VCP_SerialStrDescriptor+0x34>)
    IntToUnicode (deviceserial0, &USBD_StringSerial[2] ,8);
 800c13c:	4908      	ldr	r1, [pc, #32]	; (800c160 <USBD_VCP_SerialStrDescriptor+0x38>)
  deviceserial1 = *(uint32_t*)DEVICE_ID2;
 800c13e:	681c      	ldr	r4, [r3, #0]
    IntToUnicode (deviceserial0, &USBD_StringSerial[2] ,8);
 800c140:	2208      	movs	r2, #8
 800c142:	f7ff ffdd 	bl	800c100 <IntToUnicode>
    IntToUnicode (deviceserial1, &USBD_StringSerial[18] ,4);
 800c146:	2204      	movs	r2, #4
 800c148:	4906      	ldr	r1, [pc, #24]	; (800c164 <USBD_VCP_SerialStrDescriptor+0x3c>)
 800c14a:	4620      	mov	r0, r4
 800c14c:	f7ff ffd8 	bl	800c100 <IntToUnicode>
}
 800c150:	4805      	ldr	r0, [pc, #20]	; (800c168 <USBD_VCP_SerialStrDescriptor+0x40>)
 800c152:	bd10      	pop	{r4, pc}
 800c154:	1ffff7b4 	.word	0x1ffff7b4
 800c158:	1ffff7ac 	.word	0x1ffff7ac
 800c15c:	1ffff7b0 	.word	0x1ffff7b0
 800c160:	20000a3a 	.word	0x20000a3a
 800c164:	20000a4a 	.word	0x20000a4a
 800c168:	20000a38 	.word	0x20000a38

0800c16c <USBD_VCP_ProductStrDescriptor>:
{
 800c16c:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);    
 800c16e:	4c04      	ldr	r4, [pc, #16]	; (800c180 <USBD_VCP_ProductStrDescriptor+0x14>)
 800c170:	4804      	ldr	r0, [pc, #16]	; (800c184 <USBD_VCP_ProductStrDescriptor+0x18>)
 800c172:	460a      	mov	r2, r1
 800c174:	4621      	mov	r1, r4
 800c176:	f7ff fd2e 	bl	800bbd6 <USBD_GetString>
}
 800c17a:	4620      	mov	r0, r4
 800c17c:	bd10      	pop	{r4, pc}
 800c17e:	bf00      	nop
 800c180:	20001398 	.word	0x20001398
 800c184:	0801c320 	.word	0x0801c320

0800c188 <USBD_VCP_ManufacturerStrDescriptor>:
{
 800c188:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c18a:	4c04      	ldr	r4, [pc, #16]	; (800c19c <USBD_VCP_ManufacturerStrDescriptor+0x14>)
 800c18c:	4804      	ldr	r0, [pc, #16]	; (800c1a0 <USBD_VCP_ManufacturerStrDescriptor+0x18>)
 800c18e:	460a      	mov	r2, r1
 800c190:	4621      	mov	r1, r4
 800c192:	f7ff fd20 	bl	800bbd6 <USBD_GetString>
}
 800c196:	4620      	mov	r0, r4
 800c198:	bd10      	pop	{r4, pc}
 800c19a:	bf00      	nop
 800c19c:	20001398 	.word	0x20001398
 800c1a0:	0801c341 	.word	0x0801c341

0800c1a4 <USBD_VCP_ConfigStrDescriptor>:
{
 800c1a4:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length); 
 800c1a6:	4c04      	ldr	r4, [pc, #16]	; (800c1b8 <USBD_VCP_ConfigStrDescriptor+0x14>)
 800c1a8:	4804      	ldr	r0, [pc, #16]	; (800c1bc <USBD_VCP_ConfigStrDescriptor+0x18>)
 800c1aa:	460a      	mov	r2, r1
 800c1ac:	4621      	mov	r1, r4
 800c1ae:	f7ff fd12 	bl	800bbd6 <USBD_GetString>
}
 800c1b2:	4620      	mov	r0, r4
 800c1b4:	bd10      	pop	{r4, pc}
 800c1b6:	bf00      	nop
 800c1b8:	20001398 	.word	0x20001398
 800c1bc:	0801c354 	.word	0x0801c354

0800c1c0 <USBD_VCP_InterfaceStrDescriptor>:
{
 800c1c0:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 800c1c2:	4c04      	ldr	r4, [pc, #16]	; (800c1d4 <USBD_VCP_InterfaceStrDescriptor+0x14>)
 800c1c4:	4804      	ldr	r0, [pc, #16]	; (800c1d8 <USBD_VCP_InterfaceStrDescriptor+0x18>)
 800c1c6:	460a      	mov	r2, r1
 800c1c8:	4621      	mov	r1, r4
 800c1ca:	f7ff fd04 	bl	800bbd6 <USBD_GetString>
}
 800c1ce:	4620      	mov	r0, r4
 800c1d0:	bd10      	pop	{r4, pc}
 800c1d2:	bf00      	nop
 800c1d4:	20001398 	.word	0x20001398
 800c1d8:	0801c35f 	.word	0x0801c35f

0800c1dc <CDC_Itf_DeInit>:
  */
static int8_t CDC_Itf_DeInit(void)
{

  return (USBD_OK);
}
 800c1dc:	2000      	movs	r0, #0
 800c1de:	4770      	bx	lr

0800c1e0 <CDC_Itf_Receive>:
  * @param  Buf: Buffer of data to be transmitted
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the opeartion: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Itf_Receive(uint8_t* Buf, uint32_t *Len)
{
 800c1e0:	b508      	push	{r3, lr}
  /* Write data into Terminal Rx buffer */
  TerminalInputBufferWrite(INDEX_USB, (char *)Buf, *Len);
 800c1e2:	680a      	ldr	r2, [r1, #0]
 800c1e4:	4601      	mov	r1, r0
 800c1e6:	2000      	movs	r0, #0
 800c1e8:	f7fc fcce 	bl	8008b88 <TerminalInputBufferWrite>
  USBD_CDC_ReceivePacket(&hUSBDDevice);  /* Reset for next packet */
 800c1ec:	4802      	ldr	r0, [pc, #8]	; (800c1f8 <CDC_Itf_Receive+0x18>)
 800c1ee:	f7ff fe58 	bl	800bea2 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
}
 800c1f2:	2000      	movs	r0, #0
 800c1f4:	bd08      	pop	{r3, pc}
 800c1f6:	bf00      	nop
 800c1f8:	20000ff8 	.word	0x20000ff8

0800c1fc <CDC_Itf_Init>:
{
 800c1fc:	b508      	push	{r3, lr}
  USBD_CDC_SetRxBuffer(&hUSBDDevice, UserRxBuffer);
 800c1fe:	4903      	ldr	r1, [pc, #12]	; (800c20c <CDC_Itf_Init+0x10>)
 800c200:	4803      	ldr	r0, [pc, #12]	; (800c210 <CDC_Itf_Init+0x14>)
 800c202:	f7ff fe31 	bl	800be68 <USBD_CDC_SetRxBuffer>
}
 800c206:	2000      	movs	r0, #0
 800c208:	bd08      	pop	{r3, pc}
 800c20a:	bf00      	nop
 800c20c:	20001508 	.word	0x20001508
 800c210:	20000ff8 	.word	0x20000ff8

0800c214 <CDC_Itf_Control>:
  switch (cmd)
 800c214:	2820      	cmp	r0, #32
 800c216:	d012      	beq.n	800c23e <CDC_Itf_Control+0x2a>
 800c218:	2821      	cmp	r0, #33	; 0x21
 800c21a:	d119      	bne.n	800c250 <CDC_Itf_Control+0x3c>
    pbuf[0] = (uint8_t)(LineCoding.bitrate);
 800c21c:	4b0d      	ldr	r3, [pc, #52]	; (800c254 <CDC_Itf_Control+0x40>)
 800c21e:	681a      	ldr	r2, [r3, #0]
 800c220:	700a      	strb	r2, [r1, #0]
    pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 800c222:	681a      	ldr	r2, [r3, #0]
 800c224:	0a12      	lsrs	r2, r2, #8
 800c226:	704a      	strb	r2, [r1, #1]
    pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 800c228:	885a      	ldrh	r2, [r3, #2]
 800c22a:	708a      	strb	r2, [r1, #2]
    pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 800c22c:	78da      	ldrb	r2, [r3, #3]
 800c22e:	70ca      	strb	r2, [r1, #3]
    pbuf[4] = LineCoding.format;
 800c230:	791a      	ldrb	r2, [r3, #4]
 800c232:	710a      	strb	r2, [r1, #4]
    pbuf[5] = LineCoding.paritytype;
 800c234:	795a      	ldrb	r2, [r3, #5]
 800c236:	714a      	strb	r2, [r1, #5]
    pbuf[6] = LineCoding.datatype;     
 800c238:	799b      	ldrb	r3, [r3, #6]
 800c23a:	718b      	strb	r3, [r1, #6]
    break;
 800c23c:	e008      	b.n	800c250 <CDC_Itf_Control+0x3c>
    LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 800c23e:	4b05      	ldr	r3, [pc, #20]	; (800c254 <CDC_Itf_Control+0x40>)
 800c240:	680a      	ldr	r2, [r1, #0]
 800c242:	601a      	str	r2, [r3, #0]
    LineCoding.format     = pbuf[4];
 800c244:	790a      	ldrb	r2, [r1, #4]
 800c246:	711a      	strb	r2, [r3, #4]
    LineCoding.paritytype = pbuf[5];
 800c248:	794a      	ldrb	r2, [r1, #5]
 800c24a:	715a      	strb	r2, [r3, #5]
    LineCoding.datatype   = pbuf[6];
 800c24c:	798a      	ldrb	r2, [r1, #6]
 800c24e:	719a      	strb	r2, [r3, #6]
}
 800c250:	2000      	movs	r0, #0
 800c252:	4770      	bx	lr
 800c254:	20000a54 	.word	0x20000a54

0800c258 <SPIx_Init>:
  * @brief SPIx Bus initialization
  * @param None
  * @retval None
  */
static void SPIx_Init(void)
{
 800c258:	b510      	push	{r4, lr}
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 800c25a:	4c1c      	ldr	r4, [pc, #112]	; (800c2cc <SPIx_Init+0x74>)
{
 800c25c:	b086      	sub	sp, #24
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 800c25e:	4620      	mov	r0, r4
 800c260:	f7ff fa18 	bl	800b694 <HAL_SPI_GetState>
 800c264:	2800      	cmp	r0, #0
 800c266:	d12e      	bne.n	800c2c6 <SPIx_Init+0x6e>
  {
    /* SPI Config */
    SpiHandle.Instance = DISCOVERY_SPIx;
 800c268:	4b19      	ldr	r3, [pc, #100]	; (800c2d0 <SPIx_Init+0x78>)
 800c26a:	6023      	str	r3, [r4, #0]
      to verify these constraints:
      ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
      l3gd20 SPI interface max baudrate is 10MHz for write/read
      PCLK2 frequency is set to 90 MHz 
  */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800c26c:	2318      	movs	r3, #24
 800c26e:	61e3      	str	r3, [r4, #28]
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES; 
    SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
    SpiHandle.Init.CRCPolynomial = 7;
 800c270:	2307      	movs	r3, #7
 800c272:	62e3      	str	r3, [r4, #44]	; 0x2c
    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 800c274:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800c278:	60e3      	str	r3, [r4, #12]
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
 800c27a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c27e:	61a3      	str	r3, [r4, #24]
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLED;
    SpiHandle.Init.Mode = SPI_MODE_MASTER;
 800c280:	f44f 7382 	mov.w	r3, #260	; 0x104
 800c284:	6063      	str	r3, [r4, #4]
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI1 clock  */
  DISCOVERY_SPIx_CLK_ENABLE();
 800c286:	4b13      	ldr	r3, [pc, #76]	; (800c2d4 <SPIx_Init+0x7c>)
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES; 
 800c288:	60a0      	str	r0, [r4, #8]
    SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
 800c28a:	6160      	str	r0, [r4, #20]
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 800c28c:	6120      	str	r0, [r4, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800c28e:	62a0      	str	r0, [r4, #40]	; 0x28
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800c290:	6220      	str	r0, [r4, #32]
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLED;
 800c292:	6260      	str	r0, [r4, #36]	; 0x24
  DISCOVERY_SPIx_CLK_ENABLE();
 800c294:	699a      	ldr	r2, [r3, #24]
 800c296:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c29a:	619a      	str	r2, [r3, #24]

  /* enable SPI1 gpio clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 800c29c:	695a      	ldr	r2, [r3, #20]
 800c29e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800c2a2:	615a      	str	r2, [r3, #20]

  /* configure SPI1 SCK, MOSI and MISO */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 800c2a4:	23e0      	movs	r3, #224	; 0xe0
 800c2a6:	9301      	str	r3, [sp, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800c2a8:	2302      	movs	r3, #2
 800c2aa:	9302      	str	r3, [sp, #8]
  GPIO_InitStructure.Pull  = GPIO_NOPULL; /* or GPIO_PULLDOWN */
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800c2ac:	2303      	movs	r3, #3
  GPIO_InitStructure.Pull  = GPIO_NOPULL; /* or GPIO_PULLDOWN */
 800c2ae:	9003      	str	r0, [sp, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800c2b0:	9304      	str	r3, [sp, #16]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 800c2b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 800c2b6:	2305      	movs	r3, #5
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 800c2b8:	a901      	add	r1, sp, #4
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 800c2ba:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 800c2bc:	f7fd fcb4 	bl	8009c28 <HAL_GPIO_Init>
    HAL_SPI_Init(&SpiHandle);
 800c2c0:	4620      	mov	r0, r4
 800c2c2:	f7ff f838 	bl	800b336 <HAL_SPI_Init>
}
 800c2c6:	b006      	add	sp, #24
 800c2c8:	bd10      	pop	{r4, pc}
 800c2ca:	bf00      	nop
 800c2cc:	20000e94 	.word	0x20000e94
 800c2d0:	40013000 	.word	0x40013000
 800c2d4:	40021000 	.word	0x40021000

0800c2d8 <SPIx_WriteRead>:
{
 800c2d8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t receivedbyte = 0;
 800c2da:	aa06      	add	r2, sp, #24
 800c2dc:	2300      	movs	r3, #0
 800c2de:	f802 3d01 	strb.w	r3, [r2, #-1]!
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 800c2e2:	4b0b      	ldr	r3, [pc, #44]	; (800c310 <SPIx_WriteRead+0x38>)
{
 800c2e4:	f88d 000f 	strb.w	r0, [sp, #15]
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	9300      	str	r3, [sp, #0]
 800c2ec:	f10d 010f 	add.w	r1, sp, #15
 800c2f0:	2301      	movs	r3, #1
 800c2f2:	4808      	ldr	r0, [pc, #32]	; (800c314 <SPIx_WriteRead+0x3c>)
 800c2f4:	f7ff f88a 	bl	800b40c <HAL_SPI_TransmitReceive>
 800c2f8:	b120      	cbz	r0, 800c304 <SPIx_WriteRead+0x2c>
  HAL_SPI_DeInit(&SpiHandle);
 800c2fa:	4806      	ldr	r0, [pc, #24]	; (800c314 <SPIx_WriteRead+0x3c>)
 800c2fc:	f7ff f86f 	bl	800b3de <HAL_SPI_DeInit>
  SPIx_Init();
 800c300:	f7ff ffaa 	bl	800c258 <SPIx_Init>
}
 800c304:	f89d 0017 	ldrb.w	r0, [sp, #23]
 800c308:	b007      	add	sp, #28
 800c30a:	f85d fb04 	ldr.w	pc, [sp], #4
 800c30e:	bf00      	nop
 800c310:	20000a6c 	.word	0x20000a6c
 800c314:	20000e94 	.word	0x20000e94

0800c318 <I2Cx_Init>:
{
 800c318:	b530      	push	{r4, r5, lr}
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 800c31a:	4c16      	ldr	r4, [pc, #88]	; (800c374 <I2Cx_Init+0x5c>)
{
 800c31c:	b087      	sub	sp, #28
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 800c31e:	4620      	mov	r0, r4
 800c320:	f7fe ff74 	bl	800b20c <HAL_I2C_GetState>
 800c324:	bb18      	cbnz	r0, 800c36e <I2Cx_Init+0x56>
    I2cHandle.Instance = DISCOVERY_I2Cx;
 800c326:	4b14      	ldr	r3, [pc, #80]	; (800c378 <I2Cx_Init+0x60>)
 800c328:	6023      	str	r3, [r4, #0]
    I2cHandle.Init.OwnAddress1 =  ACCELERO_I2C_ADDRESS;
 800c32a:	2332      	movs	r3, #50	; 0x32
 800c32c:	60a3      	str	r3, [r4, #8]
  DISCOVERY_I2Cx_GPIO_CLK_ENABLE();
 800c32e:	4d13      	ldr	r5, [pc, #76]	; (800c37c <I2Cx_Init+0x64>)
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 800c330:	6120      	str	r0, [r4, #16]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800c332:	2301      	movs	r3, #1
    I2cHandle.Init.OwnAddress2 = 0;
 800c334:	6160      	str	r0, [r4, #20]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 800c336:	61e0      	str	r0, [r4, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;	
 800c338:	6220      	str	r0, [r4, #32]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800c33a:	60e3      	str	r3, [r4, #12]
  DISCOVERY_I2Cx_GPIO_CLK_ENABLE();
 800c33c:	696b      	ldr	r3, [r5, #20]
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 800c33e:	4810      	ldr	r0, [pc, #64]	; (800c380 <I2Cx_Init+0x68>)
  DISCOVERY_I2Cx_GPIO_CLK_ENABLE();
 800c340:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c344:	616b      	str	r3, [r5, #20]
  GPIO_InitStructure.Pin = (DISCOVERY_I2Cx_SDA_PIN | DISCOVERY_I2Cx_SCL_PIN);
 800c346:	23c0      	movs	r3, #192	; 0xc0
 800c348:	9301      	str	r3, [sp, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800c34a:	2302      	movs	r3, #2
 800c34c:	9302      	str	r3, [sp, #8]
  GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 800c34e:	9303      	str	r3, [sp, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800c350:	2303      	movs	r3, #3
 800c352:	9304      	str	r3, [sp, #16]
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
 800c354:	2304      	movs	r3, #4
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 800c356:	eb0d 0103 	add.w	r1, sp, r3
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
 800c35a:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 800c35c:	f7fd fc64 	bl	8009c28 <HAL_GPIO_Init>
  DISCOVERY_I2Cx_CLK_ENABLE();
 800c360:	69eb      	ldr	r3, [r5, #28]
 800c362:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c366:	61eb      	str	r3, [r5, #28]
    HAL_I2C_Init(&I2cHandle);
 800c368:	4620      	mov	r0, r4
 800c36a:	f7fe fdc1 	bl	800aef0 <HAL_I2C_Init>
}
 800c36e:	b007      	add	sp, #28
 800c370:	bd30      	pop	{r4, r5, pc}
 800c372:	bf00      	nop
 800c374:	20000ef4 	.word	0x20000ef4
 800c378:	40005400 	.word	0x40005400
 800c37c:	40021000 	.word	0x40021000
 800c380:	48000400 	.word	0x48000400

0800c384 <BSP_LED_Init>:
{
 800c384:	b570      	push	{r4, r5, r6, lr}
  LEDx_GPIO_CLK_ENABLE(Led);
 800c386:	4604      	mov	r4, r0
{
 800c388:	b086      	sub	sp, #24
  LEDx_GPIO_CLK_ENABLE(Led);
 800c38a:	b168      	cbz	r0, 800c3a8 <BSP_LED_Init+0x24>
 800c38c:	2801      	cmp	r0, #1
 800c38e:	d00b      	beq.n	800c3a8 <BSP_LED_Init+0x24>
 800c390:	2802      	cmp	r0, #2
 800c392:	d009      	beq.n	800c3a8 <BSP_LED_Init+0x24>
 800c394:	2803      	cmp	r0, #3
 800c396:	d007      	beq.n	800c3a8 <BSP_LED_Init+0x24>
 800c398:	2804      	cmp	r0, #4
 800c39a:	d005      	beq.n	800c3a8 <BSP_LED_Init+0x24>
 800c39c:	2805      	cmp	r0, #5
 800c39e:	d003      	beq.n	800c3a8 <BSP_LED_Init+0x24>
 800c3a0:	2806      	cmp	r0, #6
 800c3a2:	d001      	beq.n	800c3a8 <BSP_LED_Init+0x24>
 800c3a4:	2807      	cmp	r0, #7
 800c3a6:	d104      	bne.n	800c3b2 <BSP_LED_Init+0x2e>
 800c3a8:	4a0d      	ldr	r2, [pc, #52]	; (800c3e0 <BSP_LED_Init+0x5c>)
 800c3aa:	6953      	ldr	r3, [r2, #20]
 800c3ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c3b0:	6153      	str	r3, [r2, #20]
  GPIO_InitStruct.Pin = LED_PIN[Led];
 800c3b2:	4b0c      	ldr	r3, [pc, #48]	; (800c3e4 <BSP_LED_Init+0x60>)
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 800c3b4:	4d0c      	ldr	r5, [pc, #48]	; (800c3e8 <BSP_LED_Init+0x64>)
  GPIO_InitStruct.Pin = LED_PIN[Led];
 800c3b6:	f833 6014 	ldrh.w	r6, [r3, r4, lsl #1]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 800c3ba:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
  GPIO_InitStruct.Pin = LED_PIN[Led];
 800c3be:	9601      	str	r6, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c3c0:	2301      	movs	r3, #1
 800c3c2:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c3c4:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 800c3c6:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800c3c8:	2303      	movs	r3, #3
 800c3ca:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 800c3cc:	f7fd fc2c 	bl	8009c28 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 800c3d0:	2200      	movs	r2, #0
 800c3d2:	4631      	mov	r1, r6
 800c3d4:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 800c3d8:	f7fd fcf2 	bl	8009dc0 <HAL_GPIO_WritePin>
}
 800c3dc:	b006      	add	sp, #24
 800c3de:	bd70      	pop	{r4, r5, r6, pc}
 800c3e0:	40021000 	.word	0x40021000
 800c3e4:	0801c380 	.word	0x0801c380
 800c3e8:	20000a78 	.word	0x20000a78

0800c3ec <BSP_LED_On>:
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET); 
 800c3ec:	4b04      	ldr	r3, [pc, #16]	; (800c400 <BSP_LED_On+0x14>)
 800c3ee:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 800c3f2:	4b04      	ldr	r3, [pc, #16]	; (800c404 <BSP_LED_On+0x18>)
 800c3f4:	2201      	movs	r2, #1
 800c3f6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800c3fa:	f7fd bce1 	b.w	8009dc0 <HAL_GPIO_WritePin>
 800c3fe:	bf00      	nop
 800c400:	0801c380 	.word	0x0801c380
 800c404:	20000a78 	.word	0x20000a78

0800c408 <BSP_LED_Off>:
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 800c408:	4b04      	ldr	r3, [pc, #16]	; (800c41c <BSP_LED_Off+0x14>)
 800c40a:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 800c40e:	4b04      	ldr	r3, [pc, #16]	; (800c420 <BSP_LED_Off+0x18>)
 800c410:	2200      	movs	r2, #0
 800c412:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800c416:	f7fd bcd3 	b.w	8009dc0 <HAL_GPIO_WritePin>
 800c41a:	bf00      	nop
 800c41c:	0801c380 	.word	0x0801c380
 800c420:	20000a78 	.word	0x20000a78

0800c424 <BSP_LED_Toggle>:
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 800c424:	4b03      	ldr	r3, [pc, #12]	; (800c434 <BSP_LED_Toggle+0x10>)
 800c426:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 800c42a:	4b03      	ldr	r3, [pc, #12]	; (800c438 <BSP_LED_Toggle+0x14>)
 800c42c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800c430:	f7fd bccb 	b.w	8009dca <HAL_GPIO_TogglePin>
 800c434:	0801c380 	.word	0x0801c380
 800c438:	20000a78 	.word	0x20000a78

0800c43c <BSP_PB_Init>:
{
 800c43c:	b510      	push	{r4, lr}
 800c43e:	4b19      	ldr	r3, [pc, #100]	; (800c4a4 <BSP_PB_Init+0x68>)
 800c440:	b086      	sub	sp, #24
  BUTTONx_GPIO_CLK_ENABLE(Button);
 800c442:	b918      	cbnz	r0, 800c44c <BSP_PB_Init+0x10>
 800c444:	695a      	ldr	r2, [r3, #20]
 800c446:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800c44a:	615a      	str	r2, [r3, #20]
  __SYSCFG_CLK_ENABLE();
 800c44c:	699a      	ldr	r2, [r3, #24]
 800c44e:	f042 0201 	orr.w	r2, r2, #1
 800c452:	619a      	str	r2, [r3, #24]
  if (ButtonMode == BUTTON_MODE_GPIO)
 800c454:	b969      	cbnz	r1, 800c472 <BSP_PB_Init+0x36>
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 800c456:	2301      	movs	r3, #1
 800c458:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800c45a:	2302      	movs	r3, #2
 800c45c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800c45e:	2303      	movs	r3, #3
 800c460:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800c462:	4b11      	ldr	r3, [pc, #68]	; (800c4a8 <BSP_PB_Init+0x6c>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c464:	9102      	str	r1, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800c466:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800c46a:	a901      	add	r1, sp, #4
 800c46c:	f7fd fbdc 	bl	8009c28 <HAL_GPIO_Init>
 800c470:	e016      	b.n	800c4a0 <BSP_PB_Init+0x64>
  if (ButtonMode == BUTTON_MODE_EXTI)
 800c472:	2901      	cmp	r1, #1
 800c474:	d114      	bne.n	800c4a0 <BSP_PB_Init+0x64>
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800c476:	2303      	movs	r3, #3
 800c478:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
 800c47a:	4b0c      	ldr	r3, [pc, #48]	; (800c4ac <BSP_PB_Init+0x70>)
 800c47c:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800c47e:	4b0a      	ldr	r3, [pc, #40]	; (800c4a8 <BSP_PB_Init+0x6c>)
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 800c480:	9101      	str	r1, [sp, #4]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800c482:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c486:	2400      	movs	r4, #0
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800c488:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c48a:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800c48c:	f7fd fbcc 	bl	8009c28 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 800c490:	2006      	movs	r0, #6
 800c492:	4622      	mov	r2, r4
 800c494:	210f      	movs	r1, #15
 800c496:	f7fd fb71 	bl	8009b7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 800c49a:	2006      	movs	r0, #6
 800c49c:	f7fd fba2 	bl	8009be4 <HAL_NVIC_EnableIRQ>
}
 800c4a0:	b006      	add	sp, #24
 800c4a2:	bd10      	pop	{r4, pc}
 800c4a4:	40021000 	.word	0x40021000
 800c4a8:	20000a70 	.word	0x20000a70
 800c4ac:	10110000 	.word	0x10110000

0800c4b0 <BSP_PB_GetState>:
{
 800c4b0:	b508      	push	{r3, lr}
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 800c4b2:	4b03      	ldr	r3, [pc, #12]	; (800c4c0 <BSP_PB_GetState+0x10>)
 800c4b4:	2101      	movs	r1, #1
 800c4b6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800c4ba:	f7fd fc7b 	bl	8009db4 <HAL_GPIO_ReadPin>
}
 800c4be:	bd08      	pop	{r3, pc}
 800c4c0:	20000a70 	.word	0x20000a70

0800c4c4 <GYRO_IO_Init>:
  * @brief  Configures the GYROSCOPE SPI interface.
  * @param  None
  * @retval None
  */
void GYRO_IO_Init(void)
{
 800c4c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------------*/
  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 800c4c8:	4c16      	ldr	r4, [pc, #88]	; (800c524 <GYRO_IO_Init+0x60>)
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 800c4ca:	4d17      	ldr	r5, [pc, #92]	; (800c528 <GYRO_IO_Init+0x64>)
  GYRO_CS_GPIO_CLK_ENABLE();  
 800c4cc:	6963      	ldr	r3, [r4, #20]
{
 800c4ce:	b087      	sub	sp, #28
  GYRO_CS_GPIO_CLK_ENABLE();  
 800c4d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c4d4:	6163      	str	r3, [r4, #20]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800c4d6:	2600      	movs	r6, #0
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 800c4d8:	f04f 0808 	mov.w	r8, #8
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800c4dc:	f04f 0901 	mov.w	r9, #1
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800c4e0:	2703      	movs	r7, #3
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 800c4e2:	a901      	add	r1, sp, #4
 800c4e4:	4628      	mov	r0, r5
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 800c4e6:	f8cd 8004 	str.w	r8, [sp, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800c4ea:	f8cd 9008 	str.w	r9, [sp, #8]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800c4ee:	9603      	str	r6, [sp, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800c4f0:	9704      	str	r7, [sp, #16]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 800c4f2:	f7fd fb99 	bl	8009c28 <HAL_GPIO_Init>

  /* Deselect : Chip Select high */
  GYRO_CS_HIGH();
 800c4f6:	464a      	mov	r2, r9
 800c4f8:	4641      	mov	r1, r8
 800c4fa:	4628      	mov	r0, r5
 800c4fc:	f7fd fc60 	bl	8009dc0 <HAL_GPIO_WritePin>

  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 800c500:	6963      	ldr	r3, [r4, #20]
 800c502:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c506:	6163      	str	r3, [r4, #20]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStructure.Pull= GPIO_NOPULL;
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 800c508:	a901      	add	r1, sp, #4
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 800c50a:	2306      	movs	r3, #6
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 800c50c:	4628      	mov	r0, r5
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 800c50e:	9301      	str	r3, [sp, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 800c510:	9602      	str	r6, [sp, #8]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800c512:	9704      	str	r7, [sp, #16]
  GPIO_InitStructure.Pull= GPIO_NOPULL;
 800c514:	9603      	str	r6, [sp, #12]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 800c516:	f7fd fb87 	bl	8009c28 <HAL_GPIO_Init>
  
  SPIx_Init();
 800c51a:	f7ff fe9d 	bl	800c258 <SPIx_Init>
}
 800c51e:	b007      	add	sp, #28
 800c520:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c524:	40021000 	.word	0x40021000
 800c528:	48001000 	.word	0x48001000

0800c52c <GYRO_IO_Write>:
{
  /* Configure the MS bit: 
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 800c52c:	2a01      	cmp	r2, #1
{
 800c52e:	b570      	push	{r4, r5, r6, lr}
 800c530:	460d      	mov	r5, r1
 800c532:	4606      	mov	r6, r0
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 800c534:	bf88      	it	hi
 800c536:	f041 0540 	orrhi.w	r5, r1, #64	; 0x40
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 800c53a:	480c      	ldr	r0, [pc, #48]	; (800c56c <GYRO_IO_Write+0x40>)
{
 800c53c:	4614      	mov	r4, r2
  GYRO_CS_LOW();
 800c53e:	2108      	movs	r1, #8
 800c540:	2200      	movs	r2, #0
 800c542:	f7fd fc3d 	bl	8009dc0 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 800c546:	4628      	mov	r0, r5
 800c548:	f7ff fec6 	bl	800c2d8 <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 800c54c:	b134      	cbz	r4, 800c55c <GYRO_IO_Write+0x30>
  {
    SPIx_WriteRead(*pBuffer);
 800c54e:	f816 0b01 	ldrb.w	r0, [r6], #1
    NumByteToWrite--;
 800c552:	3c01      	subs	r4, #1
    SPIx_WriteRead(*pBuffer);
 800c554:	f7ff fec0 	bl	800c2d8 <SPIx_WriteRead>
    NumByteToWrite--;
 800c558:	b2a4      	uxth	r4, r4
 800c55a:	e7f7      	b.n	800c54c <GYRO_IO_Write+0x20>
    pBuffer++;
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 800c55c:	2201      	movs	r2, #1
 800c55e:	2108      	movs	r1, #8
 800c560:	4802      	ldr	r0, [pc, #8]	; (800c56c <GYRO_IO_Write+0x40>)
}
 800c562:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  GYRO_CS_HIGH();
 800c566:	f7fd bc2b 	b.w	8009dc0 <HAL_GPIO_WritePin>
 800c56a:	bf00      	nop
 800c56c:	48001000 	.word	0x48001000

0800c570 <GYRO_IO_Read>:
  * @param  NumByteToRead : number of bytes to read from the GYROSCOPE.
  * @retval None
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
  if(NumByteToRead > 0x01)
 800c570:	2a01      	cmp	r2, #1
{  
 800c572:	b570      	push	{r4, r5, r6, lr}
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 800c574:	bf8c      	ite	hi
 800c576:	f041 05c0 	orrhi.w	r5, r1, #192	; 0xc0
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 800c57a:	f041 0580 	orrls.w	r5, r1, #128	; 0x80
{  
 800c57e:	4606      	mov	r6, r0
 800c580:	4614      	mov	r4, r2
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 800c582:	480c      	ldr	r0, [pc, #48]	; (800c5b4 <GYRO_IO_Read+0x44>)
 800c584:	2200      	movs	r2, #0
 800c586:	2108      	movs	r1, #8
 800c588:	f7fd fc1a 	bl	8009dc0 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 800c58c:	4628      	mov	r0, r5
 800c58e:	f7ff fea3 	bl	800c2d8 <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 800c592:	b13c      	cbz	r4, 800c5a4 <GYRO_IO_Read+0x34>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to GYROSCOPE (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 800c594:	2000      	movs	r0, #0
 800c596:	f7ff fe9f 	bl	800c2d8 <SPIx_WriteRead>
    NumByteToRead--;
 800c59a:	3c01      	subs	r4, #1
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 800c59c:	f806 0b01 	strb.w	r0, [r6], #1
    NumByteToRead--;
 800c5a0:	b2a4      	uxth	r4, r4
 800c5a2:	e7f6      	b.n	800c592 <GYRO_IO_Read+0x22>
    pBuffer++;
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 800c5a4:	2201      	movs	r2, #1
 800c5a6:	2108      	movs	r1, #8
 800c5a8:	4802      	ldr	r0, [pc, #8]	; (800c5b4 <GYRO_IO_Read+0x44>)
}  
 800c5aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  GYRO_CS_HIGH();
 800c5ae:	f7fd bc07 	b.w	8009dc0 <HAL_GPIO_WritePin>
 800c5b2:	bf00      	nop
 800c5b4:	48001000 	.word	0x48001000

0800c5b8 <COMPASSACCELERO_IO_Init>:
void COMPASSACCELERO_IO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable DRDY clock */
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
 800c5b8:	4b16      	ldr	r3, [pc, #88]	; (800c614 <COMPASSACCELERO_IO_Init+0x5c>)
 800c5ba:	695a      	ldr	r2, [r3, #20]
{
 800c5bc:	b570      	push	{r4, r5, r6, lr}
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
 800c5be:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800c5c2:	615a      	str	r2, [r3, #20]
  
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 800c5c4:	695a      	ldr	r2, [r3, #20]
  /* Mems DRDY pin configuration */
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 800c5c6:	4d14      	ldr	r5, [pc, #80]	; (800c618 <COMPASSACCELERO_IO_Init+0x60>)
  ACCELERO_INT_GPIO_CLK_ENABLE();
 800c5c8:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
{
 800c5cc:	b086      	sub	sp, #24
  ACCELERO_INT_GPIO_CLK_ENABLE();
 800c5ce:	615a      	str	r2, [r3, #20]
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
 800c5d0:	2304      	movs	r3, #4
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 800c5d2:	2400      	movs	r4, #0
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 800c5d4:	eb0d 0103 	add.w	r1, sp, r3
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800c5d8:	2603      	movs	r6, #3
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 800c5da:	4628      	mov	r0, r5
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
 800c5dc:	9301      	str	r3, [sp, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 800c5de:	9402      	str	r4, [sp, #8]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800c5e0:	9403      	str	r4, [sp, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800c5e2:	9604      	str	r6, [sp, #16]
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 800c5e4:	f7fd fb20 	bl	8009c28 <HAL_GPIO_Init>
  
  /* Enable and set Button EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_DRDY_EXTI_IRQn, 0x00, 0x00);
 800c5e8:	4622      	mov	r2, r4
 800c5ea:	4621      	mov	r1, r4
 800c5ec:	2008      	movs	r0, #8
 800c5ee:	f7fd fac5 	bl	8009b7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ACCELERO_DRDY_EXTI_IRQn);
 800c5f2:	2008      	movs	r0, #8
 800c5f4:	f7fd faf6 	bl	8009be4 <HAL_NVIC_EnableIRQ>
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 800c5f8:	2330      	movs	r3, #48	; 0x30
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 800c5fa:	a901      	add	r1, sp, #4
 800c5fc:	4628      	mov	r0, r5
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 800c5fe:	9301      	str	r3, [sp, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 800c600:	9402      	str	r4, [sp, #8]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800c602:	9604      	str	r6, [sp, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800c604:	9403      	str	r4, [sp, #12]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 800c606:	f7fd fb0f 	bl	8009c28 <HAL_GPIO_Init>
  
  I2Cx_Init();
 800c60a:	f7ff fe85 	bl	800c318 <I2Cx_Init>
}
 800c60e:	b006      	add	sp, #24
 800c610:	bd70      	pop	{r4, r5, r6, pc}
 800c612:	bf00      	nop
 800c614:	40021000 	.word	0x40021000
 800c618:	48001000 	.word	0x48001000

0800c61c <COMPASSACCELERO_IO_ITConfig>:
  * @brief  Configures COMPASS / ACCELERO click IT
  * @param  None
  * @retval None
  */
void COMPASSACCELERO_IO_ITConfig(void)
{
 800c61c:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 800c61e:	4a0e      	ldr	r2, [pc, #56]	; (800c658 <COMPASSACCELERO_IO_ITConfig+0x3c>)
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 800c620:	480e      	ldr	r0, [pc, #56]	; (800c65c <COMPASSACCELERO_IO_ITConfig+0x40>)
  ACCELERO_INT_GPIO_CLK_ENABLE();
 800c622:	6953      	ldr	r3, [r2, #20]
{
 800c624:	b086      	sub	sp, #24
  ACCELERO_INT_GPIO_CLK_ENABLE();
 800c626:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c62a:	6153      	str	r3, [r2, #20]
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 800c62c:	2330      	movs	r3, #48	; 0x30
 800c62e:	9301      	str	r3, [sp, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 800c630:	4b0b      	ldr	r3, [pc, #44]	; (800c660 <COMPASSACCELERO_IO_ITConfig+0x44>)
 800c632:	9302      	str	r3, [sp, #8]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800c634:	2400      	movs	r4, #0
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800c636:	2303      	movs	r3, #3
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 800c638:	a901      	add	r1, sp, #4
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800c63a:	9304      	str	r3, [sp, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800c63c:	9403      	str	r4, [sp, #12]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 800c63e:	f7fd faf3 	bl	8009c28 <HAL_GPIO_Init>
  
  /* Enable and set Button EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_INT1_EXTI_IRQn, 0x00, 0x00);
 800c642:	4622      	mov	r2, r4
 800c644:	4621      	mov	r1, r4
 800c646:	200a      	movs	r0, #10
 800c648:	f7fd fa98 	bl	8009b7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ACCELERO_INT1_EXTI_IRQn);
 800c64c:	200a      	movs	r0, #10
 800c64e:	f7fd fac9 	bl	8009be4 <HAL_NVIC_EnableIRQ>
  
}
 800c652:	b006      	add	sp, #24
 800c654:	bd10      	pop	{r4, pc}
 800c656:	bf00      	nop
 800c658:	40021000 	.word	0x40021000
 800c65c:	48001000 	.word	0x48001000
 800c660:	10110000 	.word	0x10110000

0800c664 <COMPASSACCELERO_IO_Write>:
  * @param  RegisterAddr specifies the COMPASS / ACCELEROMETER register to be written.
  * @param  Value : Data to be written
  * @retval   None
 */
void COMPASSACCELERO_IO_Write(uint16_t DeviceAddr, uint8_t RegisterAddr, uint8_t Value)
{
 800c664:	b510      	push	{r4, lr}
 800c666:	b086      	sub	sp, #24
 800c668:	ac06      	add	r4, sp, #24
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 800c66a:	4b0a      	ldr	r3, [pc, #40]	; (800c694 <COMPASSACCELERO_IO_Write+0x30>)
 800c66c:	f804 2d01 	strb.w	r2, [r4, #-1]!
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	9302      	str	r3, [sp, #8]
 800c674:	2301      	movs	r3, #1
 800c676:	460a      	mov	r2, r1
 800c678:	9301      	str	r3, [sp, #4]
 800c67a:	4601      	mov	r1, r0
 800c67c:	9400      	str	r4, [sp, #0]
 800c67e:	4806      	ldr	r0, [pc, #24]	; (800c698 <COMPASSACCELERO_IO_Write+0x34>)
 800c680:	f7fe fc96 	bl	800afb0 <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 800c684:	b120      	cbz	r0, 800c690 <COMPASSACCELERO_IO_Write+0x2c>
  HAL_I2C_DeInit(&I2cHandle);
 800c686:	4804      	ldr	r0, [pc, #16]	; (800c698 <COMPASSACCELERO_IO_Write+0x34>)
 800c688:	f7fe fc7b 	bl	800af82 <HAL_I2C_DeInit>
  I2Cx_Init();
 800c68c:	f7ff fe44 	bl	800c318 <I2Cx_Init>
  /* call I2Cx Read data bus function */
  I2Cx_WriteData(DeviceAddr, RegisterAddr, Value);
}
 800c690:	b006      	add	sp, #24
 800c692:	bd10      	pop	{r4, pc}
 800c694:	20000a74 	.word	0x20000a74
 800c698:	20000ef4 	.word	0x20000ef4

0800c69c <COMPASSACCELERO_IO_Read>:
  * @param  DeviceAddr : specifies the slave address to be programmed(ACC_I2C_ADDRESS or MAG_I2C_ADDRESS).
  * @param  RegisterAddr : specifies the COMPASS / ACCELEROMETER internal address register to read from
  * @retval ACCELEROMETER register value
  */ 
uint8_t COMPASSACCELERO_IO_Read(uint16_t DeviceAddr, uint8_t RegisterAddr)
{
 800c69c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t value = 0;
 800c69e:	aa06      	add	r2, sp, #24
 800c6a0:	2300      	movs	r3, #0
 800c6a2:	f802 3d01 	strb.w	r3, [r2, #-1]!
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 800c6a6:	4b0b      	ldr	r3, [pc, #44]	; (800c6d4 <COMPASSACCELERO_IO_Read+0x38>)
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	9302      	str	r3, [sp, #8]
 800c6ac:	2301      	movs	r3, #1
 800c6ae:	e88d 000c 	stmia.w	sp, {r2, r3}
 800c6b2:	460a      	mov	r2, r1
 800c6b4:	4601      	mov	r1, r0
 800c6b6:	4808      	ldr	r0, [pc, #32]	; (800c6d8 <COMPASSACCELERO_IO_Read+0x3c>)
 800c6b8:	f7fe fd0e 	bl	800b0d8 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 800c6bc:	b120      	cbz	r0, 800c6c8 <COMPASSACCELERO_IO_Read+0x2c>
  HAL_I2C_DeInit(&I2cHandle);
 800c6be:	4806      	ldr	r0, [pc, #24]	; (800c6d8 <COMPASSACCELERO_IO_Read+0x3c>)
 800c6c0:	f7fe fc5f 	bl	800af82 <HAL_I2C_DeInit>
  I2Cx_Init();
 800c6c4:	f7ff fe28 	bl	800c318 <I2Cx_Init>
  /* call I2Cx Read data bus function */   
  return I2Cx_ReadData(DeviceAddr, RegisterAddr);
}
 800c6c8:	f89d 0017 	ldrb.w	r0, [sp, #23]
 800c6cc:	b007      	add	sp, #28
 800c6ce:	f85d fb04 	ldr.w	pc, [sp], #4
 800c6d2:	bf00      	nop
 800c6d4:	20000a74 	.word	0x20000a74
 800c6d8:	20000ef4 	.word	0x20000ef4

0800c6dc <BSP_ACCELERO_Init>:
  * @brief  Set ACCELEROMETER Initialization.
  * @param  None
  * @retval ACCELERO_OK if no problem during initialization
  */
uint8_t BSP_ACCELERO_Init(void)
{  
 800c6dc:	b538      	push	{r3, r4, r5, lr}
  uint8_t ret = ACCELERO_ERROR;
  uint16_t ctrl = 0x0000;
  ACCELERO_InitTypeDef LSM303DLHC_InitStructure;
  ACCELERO_FilterConfigTypeDef LSM303DLHC_FilterStructure;
 
  if(Lsm303dlhcDrv.ReadID() == I_AM_LMS303DLHC)
 800c6de:	4c09      	ldr	r4, [pc, #36]	; (800c704 <BSP_ACCELERO_Init+0x28>)
 800c6e0:	6863      	ldr	r3, [r4, #4]
 800c6e2:	4798      	blx	r3
 800c6e4:	2833      	cmp	r0, #51	; 0x33
 800c6e6:	d10b      	bne.n	800c700 <BSP_ACCELERO_Init+0x24>
  {
    /* Initialize the gyroscope driver structure */
    AccelerometerDrv = &Lsm303dlhcDrv;
 800c6e8:	4d07      	ldr	r5, [pc, #28]	; (800c708 <BSP_ACCELERO_Init+0x2c>)
    
    ctrl |= ((LSM303DLHC_InitStructure.BlockData_Update | LSM303DLHC_InitStructure.Endianness | \
                      LSM303DLHC_InitStructure.AccFull_Scale | LSM303DLHC_InitStructure.High_Resolution) << 8);
    
  /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 800c6ea:	6823      	ldr	r3, [r4, #0]
    AccelerometerDrv = &Lsm303dlhcDrv;
 800c6ec:	602c      	str	r4, [r5, #0]
    AccelerometerDrv->Init(ctrl);
 800c6ee:	f640 0047 	movw	r0, #2119	; 0x847
 800c6f2:	4798      	blx	r3
                      LSM303DLHC_FilterStructure.HighPassFilter_CutOff_Frequency|\
                      LSM303DLHC_FilterStructure.HighPassFilter_AOI1|\
                      LSM303DLHC_FilterStructure.HighPassFilter_AOI2);

  /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 800c6f4:	682b      	ldr	r3, [r5, #0]
 800c6f6:	2090      	movs	r0, #144	; 0x90
 800c6f8:	6a1b      	ldr	r3, [r3, #32]
 800c6fa:	4798      	blx	r3

    ret = ACCELERO_OK;
 800c6fc:	2000      	movs	r0, #0
 800c6fe:	bd38      	pop	{r3, r4, r5, pc}
  }  
  else
  {
    ret = ACCELERO_ERROR;
 800c700:	2001      	movs	r0, #1
  }

  return ret;
}
 800c702:	bd38      	pop	{r3, r4, r5, pc}
 800c704:	200008cc 	.word	0x200008cc
 800c708:	20000f2c 	.word	0x20000f2c

0800c70c <BSP_ACCELERO_GetXYZ>:
  *                 pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
* @retval None
*/
void BSP_ACCELERO_GetXYZ(int16_t *pDataXYZ)
{
  if(AccelerometerDrv->GetXYZ!= NULL)
 800c70c:	4b02      	ldr	r3, [pc, #8]	; (800c718 <BSP_ACCELERO_GetXYZ+0xc>)
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c712:	b103      	cbz	r3, 800c716 <BSP_ACCELERO_GetXYZ+0xa>
  {   
    AccelerometerDrv->GetXYZ(pDataXYZ);
 800c714:	4718      	bx	r3
 800c716:	4770      	bx	lr
 800c718:	20000f2c 	.word	0x20000f2c

0800c71c <BSP_GYRO_Init>:
  * @brief  Set GYROSCOPE Initialization.
  * @param  None
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{  
 800c71c:	b538      	push	{r3, r4, r5, lr}
  uint8_t ret = GYRO_ERROR;
  uint16_t ctrl = 0x0000;
  GYRO_InitTypeDef L3GD20_InitStructure;
  GYRO_FilterConfigTypeDef L3GD20_FilterStructure;

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 800c71e:	4c0e      	ldr	r4, [pc, #56]	; (800c758 <BSP_GYRO_Init+0x3c>)
 800c720:	6863      	ldr	r3, [r4, #4]
 800c722:	4798      	blx	r3
 800c724:	28d4      	cmp	r0, #212	; 0xd4
 800c726:	4625      	mov	r5, r4
 800c728:	d10f      	bne.n	800c74a <BSP_GYRO_Init+0x2e>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 800c72a:	4c0c      	ldr	r4, [pc, #48]	; (800c75c <BSP_GYRO_Init+0x40>)
	
    ctrl |= (uint16_t) ((L3GD20_InitStructure.BlockData_Update | L3GD20_InitStructure.Endianness | \
                        L3GD20_InitStructure.Full_Scale) << 8);

    /* L3gd20 Init */	 
    GyroscopeDrv->Init(ctrl);
 800c72c:	682b      	ldr	r3, [r5, #0]
    GyroscopeDrv = &L3gd20Drv;
 800c72e:	6025      	str	r5, [r4, #0]
    GyroscopeDrv->Init(ctrl);
 800c730:	f241 003f 	movw	r0, #4159	; 0x103f
 800c734:	4798      	blx	r3
    L3GD20_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
	
    ctrl = (uint8_t) ((L3GD20_FilterStructure.HighPassFilter_Mode_Selection |\
                       L3GD20_FilterStructure.HighPassFilter_CutOff_Frequency));		
	
    GyroscopeDrv->FilterConfig(ctrl) ;
 800c736:	6823      	ldr	r3, [r4, #0]
 800c738:	2000      	movs	r0, #0
 800c73a:	6a1b      	ldr	r3, [r3, #32]
 800c73c:	4798      	blx	r3
  
    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 800c73e:	6823      	ldr	r3, [r4, #0]
 800c740:	2010      	movs	r0, #16
 800c742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c744:	4798      	blx	r3
	
    ret = GYRO_OK;
 800c746:	2000      	movs	r0, #0
 800c748:	bd38      	pop	{r3, r4, r5, pc}
  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 800c74a:	6863      	ldr	r3, [r4, #4]
 800c74c:	4798      	blx	r3
 800c74e:	28d5      	cmp	r0, #213	; 0xd5
 800c750:	d0eb      	beq.n	800c72a <BSP_GYRO_Init+0xe>
  }
  else
  {
    ret = GYRO_ERROR;
 800c752:	2001      	movs	r0, #1
  }
  
  return ret;
}
 800c754:	bd38      	pop	{r3, r4, r5, pc}
 800c756:	bf00      	nop
 800c758:	20000a98 	.word	0x20000a98
 800c75c:	20000f30 	.word	0x20000f30

0800c760 <BSP_GYRO_GetXYZ>:
  * @param pfData: pointer on floating array         
  * @retval None
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
  if(GyroscopeDrv->GetXYZ!= NULL)
 800c760:	4b02      	ldr	r3, [pc, #8]	; (800c76c <BSP_GYRO_GetXYZ+0xc>)
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c766:	b103      	cbz	r3, 800c76a <BSP_GYRO_GetXYZ+0xa>
  {
	GyroscopeDrv->GetXYZ(pfData);
 800c768:	4718      	bx	r3
 800c76a:	4770      	bx	lr
 800c76c:	20000f30 	.word	0x20000f30

0800c770 <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 800c770:	b537      	push	{r0, r1, r2, r4, r5, lr}
  
  /* Configure the low level interface ---------------------------------------*/
  GYRO_IO_Init();

  /* Write value to MEMS CTRL_REG1 regsister */
  ctrl = (uint8_t) InitStruct;
 800c772:	ac02      	add	r4, sp, #8
  uint8_t ctrl = 0x00;
 800c774:	2300      	movs	r3, #0
{  
 800c776:	4605      	mov	r5, r0
  uint8_t ctrl = 0x00;
 800c778:	f88d 3007 	strb.w	r3, [sp, #7]
  GYRO_IO_Init();
 800c77c:	f7ff fea2 	bl	800c4c4 <GYRO_IO_Init>
  ctrl = (uint8_t) InitStruct;
 800c780:	f804 5d01 	strb.w	r5, [r4, #-1]!
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 800c784:	2201      	movs	r2, #1
 800c786:	4620      	mov	r0, r4
 800c788:	2120      	movs	r1, #32
 800c78a:	f7ff fecf 	bl	800c52c <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 regsister */  
  ctrl = (uint8_t) (InitStruct >> 8);
 800c78e:	0a2d      	lsrs	r5, r5, #8
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 800c790:	2201      	movs	r2, #1
 800c792:	2123      	movs	r1, #35	; 0x23
 800c794:	4620      	mov	r0, r4
  ctrl = (uint8_t) (InitStruct >> 8);
 800c796:	f88d 5007 	strb.w	r5, [sp, #7]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 800c79a:	f7ff fec7 	bl	800c52c <GYRO_IO_Write>
}
 800c79e:	b003      	add	sp, #12
 800c7a0:	bd30      	pop	{r4, r5, pc}

0800c7a2 <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  Device ID address
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 800c7a2:	b507      	push	{r0, r1, r2, lr}
  uint8_t tmp;

  /* Configure the low level interface ---------------------------------------*/
  GYRO_IO_Init();
 800c7a4:	f7ff fe8e 	bl	800c4c4 <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 800c7a8:	f10d 0007 	add.w	r0, sp, #7
 800c7ac:	2201      	movs	r2, #1
 800c7ae:	210f      	movs	r1, #15
 800c7b0:	f7ff fede 	bl	800c570 <GYRO_IO_Read>

  /* Return the ID */
  return (uint8_t)tmp;
}
 800c7b4:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800c7b8:	b003      	add	sp, #12
 800c7ba:	f85d fb04 	ldr.w	pc, [sp], #4

0800c7be <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 800c7be:	b507      	push	{r0, r1, r2, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800c7c0:	2201      	movs	r2, #1
 800c7c2:	f10d 0007 	add.w	r0, sp, #7
 800c7c6:	2124      	movs	r1, #36	; 0x24
 800c7c8:	f7ff fed2 	bl	800c570 <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 800c7cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
  
  /* Write value to MEMS CTRL_REG5 regsister */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800c7d0:	2201      	movs	r2, #1
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 800c7d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800c7d6:	2124      	movs	r1, #36	; 0x24
 800c7d8:	f10d 0007 	add.w	r0, sp, #7
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 800c7dc:	f88d 3007 	strb.w	r3, [sp, #7]
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800c7e0:	f7ff fea4 	bl	800c52c <GYRO_IO_Write>
}
 800c7e4:	b003      	add	sp, #12
 800c7e6:	f85d fb04 	ldr.w	pc, [sp], #4

0800c7ea <L3GD20_INT1InterruptConfig>:
  * @param  L3GD20_InterruptConfig_TypeDef: pointer to a L3GD20_InterruptConfig_TypeDef 
  *         structure that contains the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 800c7ea:	b513      	push	{r0, r1, r4, lr}
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 800c7ec:	2300      	movs	r3, #0
{
 800c7ee:	4604      	mov	r4, r0
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 800c7f0:	2201      	movs	r2, #1
 800c7f2:	f10d 0006 	add.w	r0, sp, #6
 800c7f6:	2130      	movs	r1, #48	; 0x30
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 800c7f8:	f88d 3006 	strb.w	r3, [sp, #6]
 800c7fc:	f88d 3007 	strb.w	r3, [sp, #7]
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 800c800:	f7ff feb6 	bl	800c570 <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 800c804:	f10d 0007 	add.w	r0, sp, #7
 800c808:	2201      	movs	r2, #1
 800c80a:	2122      	movs	r1, #34	; 0x22
 800c80c:	f7ff feb0 	bl	800c570 <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 800c810:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c814:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c818:	f88d 3006 	strb.w	r3, [sp, #6]
  
  ctrl3 &= 0xDF;
  ctrl3 |= ((uint8_t) Int1Config);
 800c81c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c820:	f023 0320 	bic.w	r3, r3, #32
 800c824:	431c      	orrs	r4, r3
                   L3GD20_IntConfigStruct->Interrupt_Axes);
                   
  ctrl3 |= (uint8_t)(L3GD20_IntConfigStruct->Interrupt_ActiveEdge);
*/  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 800c826:	f10d 0006 	add.w	r0, sp, #6
 800c82a:	2201      	movs	r2, #1
 800c82c:	2130      	movs	r1, #48	; 0x30
  ctrl3 |= ((uint8_t) Int1Config);
 800c82e:	f88d 4007 	strb.w	r4, [sp, #7]
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 800c832:	f7ff fe7b 	bl	800c52c <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 800c836:	2201      	movs	r2, #1
 800c838:	2122      	movs	r1, #34	; 0x22
 800c83a:	f10d 0007 	add.w	r0, sp, #7
 800c83e:	f7ff fe75 	bl	800c52c <GYRO_IO_Write>
}
 800c842:	b002      	add	sp, #8
 800c844:	bd10      	pop	{r4, pc}

0800c846 <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 800c846:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800c848:	2201      	movs	r2, #1
{  
 800c84a:	4604      	mov	r4, r0
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800c84c:	2122      	movs	r1, #34	; 0x22
 800c84e:	f10d 0007 	add.w	r0, sp, #7
 800c852:	f7ff fe8d 	bl	800c570 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 800c856:	b924      	cbnz	r4, 800c862 <L3GD20_EnableIT+0x1c>
  {
    tmpreg &= 0x7F;	
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 800c858:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c85c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c860:	e007      	b.n	800c872 <L3GD20_EnableIT+0x2c>
  }
  else if(IntSel == L3GD20_INT2)
 800c862:	2c01      	cmp	r4, #1
 800c864:	d107      	bne.n	800c876 <L3GD20_EnableIT+0x30>
  {
    tmpreg &= 0xF7;
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 800c866:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c86a:	f023 0308 	bic.w	r3, r3, #8
 800c86e:	f043 0308 	orr.w	r3, r3, #8
 800c872:	f88d 3007 	strb.w	r3, [sp, #7]
  }
  
  /* Write value to MEMS CTRL_REG3 regsister */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800c876:	2201      	movs	r2, #1
 800c878:	2122      	movs	r1, #34	; 0x22
 800c87a:	f10d 0007 	add.w	r0, sp, #7
 800c87e:	f7ff fe55 	bl	800c52c <GYRO_IO_Write>
}
 800c882:	b002      	add	sp, #8
 800c884:	bd10      	pop	{r4, pc}

0800c886 <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 800c886:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800c888:	2201      	movs	r2, #1
{  
 800c88a:	4604      	mov	r4, r0
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800c88c:	2122      	movs	r1, #34	; 0x22
 800c88e:	f10d 0007 	add.w	r0, sp, #7
 800c892:	f7ff fe6d 	bl	800c570 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 800c896:	b924      	cbnz	r4, 800c8a2 <L3GD20_DisableIT+0x1c>
  {
    tmpreg &= 0x7F;	
 800c898:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c89c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c8a0:	e005      	b.n	800c8ae <L3GD20_DisableIT+0x28>
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
  }
  else if(IntSel == L3GD20_INT2)
 800c8a2:	2c01      	cmp	r4, #1
 800c8a4:	d105      	bne.n	800c8b2 <L3GD20_DisableIT+0x2c>
  {
    tmpreg &= 0xF7;
 800c8a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c8aa:	f023 0308 	bic.w	r3, r3, #8
 800c8ae:	f88d 3007 	strb.w	r3, [sp, #7]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
  }
  
  /* Write value to MEMS CTRL_REG3 regsister */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800c8b2:	2201      	movs	r2, #1
 800c8b4:	2122      	movs	r1, #34	; 0x22
 800c8b6:	f10d 0007 	add.w	r0, sp, #7
 800c8ba:	f7ff fe37 	bl	800c52c <GYRO_IO_Write>
}
 800c8be:	b002      	add	sp, #8
 800c8c0:	bd10      	pop	{r4, pc}

0800c8c2 <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 800c8c2:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 800c8c4:	2201      	movs	r2, #1
{
 800c8c6:	4604      	mov	r4, r0
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 800c8c8:	2121      	movs	r1, #33	; 0x21
 800c8ca:	f10d 0007 	add.w	r0, sp, #7
 800c8ce:	f7ff fe4f 	bl	800c570 <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
  
  /* Configure MEMS: mode and cutoff frquency */
  tmpreg |= FilterStruct;
 800c8d2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800c8d6:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 800c8da:	4320      	orrs	r0, r4
 800c8dc:	f88d 0007 	strb.w	r0, [sp, #7]

  /* Write value to MEMS CTRL_REG2 regsister */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 800c8e0:	2201      	movs	r2, #1
 800c8e2:	2121      	movs	r1, #33	; 0x21
 800c8e4:	f10d 0007 	add.w	r0, sp, #7
 800c8e8:	f7ff fe20 	bl	800c52c <GYRO_IO_Write>
}
 800c8ec:	b002      	add	sp, #8
 800c8ee:	bd10      	pop	{r4, pc}

0800c8f0 <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 800c8f0:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800c8f2:	2201      	movs	r2, #1
{
 800c8f4:	4604      	mov	r4, r0
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800c8f6:	2124      	movs	r1, #36	; 0x24
 800c8f8:	f10d 0007 	add.w	r0, sp, #7
 800c8fc:	f7ff fe38 	bl	800c570 <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
  
  tmpreg |= HighPassFilterState;
 800c900:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800c904:	f020 0010 	bic.w	r0, r0, #16
 800c908:	4320      	orrs	r0, r4
 800c90a:	f88d 0007 	strb.w	r0, [sp, #7]
  
  /* Write value to MEMS CTRL_REG5 regsister */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800c90e:	2201      	movs	r2, #1
 800c910:	2124      	movs	r1, #36	; 0x24
 800c912:	f10d 0007 	add.w	r0, sp, #7
 800c916:	f7ff fe09 	bl	800c52c <GYRO_IO_Write>
}
 800c91a:	b002      	add	sp, #8
 800c91c:	bd10      	pop	{r4, pc}
	...

0800c920 <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData : Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float* pfData)
{
 800c920:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c922:	b087      	sub	sp, #28
 800c924:	4604      	mov	r4, r0
  uint8_t tmpbuffer[6] ={0};
  int16_t RawData[3] = {0};
  uint8_t tmpreg = 0;
 800c926:	a806      	add	r0, sp, #24
  uint8_t tmpbuffer[6] ={0};
 800c928:	2300      	movs	r3, #0
  int16_t RawData[3] = {0};
 800c92a:	ad04      	add	r5, sp, #16
  uint8_t tmpreg = 0;
 800c92c:	f800 3d11 	strb.w	r3, [r0, #-17]!
  float sensitivity = 0;
  int i =0;
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 800c930:	2201      	movs	r2, #1
 800c932:	2123      	movs	r1, #35	; 0x23
  uint8_t tmpbuffer[6] ={0};
 800c934:	9302      	str	r3, [sp, #8]
 800c936:	f8ad 300c 	strh.w	r3, [sp, #12]
  int16_t RawData[3] = {0};
 800c93a:	9304      	str	r3, [sp, #16]
 800c93c:	80ab      	strh	r3, [r5, #4]
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 800c93e:	f7ff fe17 	bl	800c570 <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 800c942:	2206      	movs	r2, #6
 800c944:	2128      	movs	r1, #40	; 0x28
 800c946:	a802      	add	r0, sp, #8
 800c948:	f7ff fe12 	bl	800c570 <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 800c94c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c950:	f89d 7009 	ldrb.w	r7, [sp, #9]
 800c954:	f89d e008 	ldrb.w	lr, [sp, #8]
 800c958:	f89d 000b 	ldrb.w	r0, [sp, #11]
 800c95c:	f89d 600a 	ldrb.w	r6, [sp, #10]
 800c960:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800c964:	f89d 100c 	ldrb.w	r1, [sp, #12]
 800c968:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c96c:	d11a      	bne.n	800c9a4 <L3GD20_ReadXYZAngRate+0x84>
  {
    for(i=0; i<3; i++)
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 800c96e:	eb0e 2707 	add.w	r7, lr, r7, lsl #8
 800c972:	eb06 2000 	add.w	r0, r6, r0, lsl #8
 800c976:	f8ad 7010 	strh.w	r7, [sp, #16]
 800c97a:	f8ad 0012 	strh.w	r0, [sp, #18]
 800c97e:	eb01 2202 	add.w	r2, r1, r2, lsl #8
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 800c982:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c986:	2b10      	cmp	r3, #16
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 800c988:	f8ad 2014 	strh.w	r2, [sp, #20]
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 800c98c:	d015      	beq.n	800c9ba <L3GD20_ReadXYZAngRate+0x9a>
 800c98e:	2b20      	cmp	r3, #32
 800c990:	d016      	beq.n	800c9c0 <L3GD20_ReadXYZAngRate+0xa0>
  float sensitivity = 0;
 800c992:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800c9e8 <L3GD20_ReadXYZAngRate+0xc8>
 800c996:	eddf 7a15 	vldr	s15, [pc, #84]	; 800c9ec <L3GD20_ReadXYZAngRate+0xcc>
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	bf08      	it	eq
 800c99e:	eeb0 7a67 	vmoveq.f32	s14, s15
 800c9a2:	e00f      	b.n	800c9c4 <L3GD20_ReadXYZAngRate+0xa4>
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 800c9a4:	eb07 270e 	add.w	r7, r7, lr, lsl #8
 800c9a8:	eb00 2006 	add.w	r0, r0, r6, lsl #8
 800c9ac:	f8ad 7010 	strh.w	r7, [sp, #16]
 800c9b0:	f8ad 0012 	strh.w	r0, [sp, #18]
 800c9b4:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 800c9b8:	e7e3      	b.n	800c982 <L3GD20_ReadXYZAngRate+0x62>
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
    break;
    
  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 800c9ba:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800c9f0 <L3GD20_ReadXYZAngRate+0xd0>
    break;
 800c9be:	e001      	b.n	800c9c4 <L3GD20_ReadXYZAngRate+0xa4>
    
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 800c9c0:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800c9f4 <L3GD20_ReadXYZAngRate+0xd4>
 800c9c4:	4620      	mov	r0, r4
    break;
  }
  /* divide by sensitivity */
  for(i=0; i<3; i++)
 800c9c6:	2300      	movs	r3, #0
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 800c9c8:	f935 2013 	ldrsh.w	r2, [r5, r3, lsl #1]
 800c9cc:	ee07 2a90 	vmov	s15, r2
 800c9d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  for(i=0; i<3; i++)
 800c9d4:	3301      	adds	r3, #1
    pfData[i]=(float)(RawData[i] * sensitivity);
 800c9d6:	ee67 7a87 	vmul.f32	s15, s15, s14
  for(i=0; i<3; i++)
 800c9da:	2b03      	cmp	r3, #3
    pfData[i]=(float)(RawData[i] * sensitivity);
 800c9dc:	ece0 7a01 	vstmia	r0!, {s15}
  for(i=0; i<3; i++)
 800c9e0:	d1f2      	bne.n	800c9c8 <L3GD20_ReadXYZAngRate+0xa8>
  }
}
 800c9e2:	b007      	add	sp, #28
 800c9e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c9e6:	bf00      	nop
 800c9e8:	00000000 	.word	0x00000000
 800c9ec:	410c0000 	.word	0x410c0000
 800c9f0:	418c0000 	.word	0x418c0000
 800c9f4:	428c0000 	.word	0x428c0000

0800c9f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800c9f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 800ca30 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800c9fc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800c9fe:	e003      	b.n	800ca08 <LoopCopyDataInit>

0800ca00 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800ca00:	4b0c      	ldr	r3, [pc, #48]	; (800ca34 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800ca02:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800ca04:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800ca06:	3104      	adds	r1, #4

0800ca08 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800ca08:	480b      	ldr	r0, [pc, #44]	; (800ca38 <LoopForever+0xa>)
	ldr	r3, =_edata
 800ca0a:	4b0c      	ldr	r3, [pc, #48]	; (800ca3c <LoopForever+0xe>)
	adds	r2, r0, r1
 800ca0c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800ca0e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800ca10:	d3f6      	bcc.n	800ca00 <CopyDataInit>
	ldr	r2, =_sbss
 800ca12:	4a0b      	ldr	r2, [pc, #44]	; (800ca40 <LoopForever+0x12>)
	b	LoopFillZerobss
 800ca14:	e002      	b.n	800ca1c <LoopFillZerobss>

0800ca16 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800ca16:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800ca18:	f842 3b04 	str.w	r3, [r2], #4

0800ca1c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800ca1c:	4b09      	ldr	r3, [pc, #36]	; (800ca44 <LoopForever+0x16>)
	cmp	r2, r3
 800ca1e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800ca20:	d3f9      	bcc.n	800ca16 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800ca22:	f7fc fb83 	bl	800912c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800ca26:	f7f4 f8a9 	bl	8000b7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800ca2a:	f7fb fbb5 	bl	8008198 <main>

0800ca2e <LoopForever>:

LoopForever:
    b LoopForever
 800ca2e:	e7fe      	b.n	800ca2e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800ca30:	20008000 	.word	0x20008000
	ldr	r3, =_sidata
 800ca34:	0801c414 	.word	0x0801c414
	ldr	r0, =_sdata
 800ca38:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800ca3c:	20000ac4 	.word	0x20000ac4
	ldr	r2, =_sbss
 800ca40:	20000ac4 	.word	0x20000ac4
	ldr	r3, = _ebss
 800ca44:	20001d44 	.word	0x20001d44

0800ca48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800ca48:	e7fe      	b.n	800ca48 <ADC1_2_IRQHandler>
	...

0800ca4c <register_fini>:
 800ca4c:	4b02      	ldr	r3, [pc, #8]	; (800ca58 <register_fini+0xc>)
 800ca4e:	b113      	cbz	r3, 800ca56 <register_fini+0xa>
 800ca50:	4802      	ldr	r0, [pc, #8]	; (800ca5c <register_fini+0x10>)
 800ca52:	f7f4 b873 	b.w	8000b3c <atexit>
 800ca56:	4770      	bx	lr
 800ca58:	00000000 	.word	0x00000000
 800ca5c:	08000b55 	.word	0x08000b55

0800ca60 <_init>:
 800ca60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca62:	bf00      	nop
 800ca64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca66:	bc08      	pop	{r3}
 800ca68:	469e      	mov	lr, r3
 800ca6a:	4770      	bx	lr

0800ca6c <_fini>:
 800ca6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca6e:	bf00      	nop
 800ca70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca72:	bc08      	pop	{r3}
 800ca74:	469e      	mov	lr, r3
 800ca76:	4770      	bx	lr
